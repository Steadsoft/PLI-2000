_lines:

   proc options (main);  /* this will get control from DOS */




/****************************************************************************/
/* This simple program demonstrates/tests some of the runtime library calls */
/* that pertain to the graphics system on a PC. This particular example has */
/* been written for EGA.                                                    */
/****************************************************************************/ 

   % include 'graphics';   /* Graphics constants    */
   % include 'dos';        /* DOS/BIOS system calls */

   /* the following variables default to automatic (stack) */

   dcl mode                bin(15); 
   dcl prev_mode           bin(15);
   dcl pixel               bin(15);
   dcl I                   bin(15);
   dcl page                bin(15);
   dcl (X,Y)               bin(15);
   dcl charlie		   bin(15);

   /* these however are static */

   dcl cols                bin(15) static;
   dcl (x,y,J)             bin(15) static;
   dcl border              bin(15) static;
   dcl skips               bin(15) static;
   dcl status              bin(15) static;

   /******************************************************************/
   /* Retreive the current video mode from the system and save it.   */
   /******************************************************************/ 

   page = 0;

   skips = 1;

   /* remember all vars are passed by ref so prev_mode gets set */
   /* by the called module.                                     */

   call dos$get_video_info (cols,prev_mode,page); /* save current mode */

   /*****************************************************************/
   /*            Put the adapter into EGA 640x350 mode.             */
   /*****************************************************************/
   
   mode = GFX_640x480_16;

   call dos$set_video_mode (mode);  /* put into EGA 640x320 mode */

   /*********************************************************************/
   /* Set the Overscan (INT 10h subfunction 01) (I think this is wrong) */
   /*********************************************************************/

   border = 4;

   call dos$set_overscan (border);

   call dos$reset_mouse (status);

   call dos$show_mouse;

   /*********************************************************************/
   /*       OK We now draw some messy looking lines on the screen.      */
   /*********************************************************************/

   X = 1;
   Y = 1;

   do J = 0 to 640 by 2;

      do I = 0 to 350 ;

         pixel = I;  /* colour */

         x = 2 * I + J;     /* Note codegen does not yet do /   */

         y = I ;            /* NOTE y = I + ;  gives bad error msg ! */

         call dos$set_pixel (pixel,page,x,y); /* set a pixel on */

      end;

      call dos$set_cursor (page,Y,X);

      put skip (skips) list ('This is Text on Graphics.');

   end;

   /**********************************************************************/
   /* Now scan the entire display and change the colour of each pixel to */
   /* its present colour + 1.                                            */
   /**********************************************************************/

   /* this bit is slow (for obvious reasons) so its commented out ! */

   do J = 0 to 640;

      do I = 0 to 320;

         x = I + I + J;
         y = I; 

         call dos$get_pixel (pixel,page,x,y); /* get a pixel */

         pixel = pixel + 1;

         call dos$set_pixel (pixel,page,x,y); /* set a pixel on */

      end;   

   end;        /* Note how comments may be nested */

   /*************************************************************************/
   /* OK Now that we have finished, we will set the adapter to its old mode */
   /*************************************************************************/

   call dos$set_video_mode (prev_mode);

   end _lines; /* note the label here is optional in PL/I */
