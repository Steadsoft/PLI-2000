largetst:

   procedure options (main);

/****************************************************************************/
/* This program uses each of the currently implemented features of PC-PL/1  */
/* in an attempt to expose any new or old or reintroduced compiler bugs.    */
/****************************************************************************/


/****************************************************************************/
/*                         Modification History                             */
/****************************************************************************/
/*  Who    When                           What                              */
/* ------------------------------------------------------------------------ */
/*  HWG    20-01-92               First version written                     */
/****************************************************************************/

   % replace MAX_SIZE          by 10;
   % replace INN_SIZE          by 5;

   dcl 1 static_structure(MAX_SIZE) static,
         2 s_element(INN_SIZE) bin(15),     /* IN_SIZE gives BAD ERRORS ! */
         2 x_coord             bin(15),
         2 y_coord             bin(15);

   dcl 1 auto_structure(MAX_SIZE) automatic,
         2 a_element(INN_SIZE) bin(15),
         2 x_coord             bin(15),
         2 y_coord             bin(15);

   dcl (I,J,K,L,M)             bin(15) static;
   dcl (i,j,k,l,m)             bin(15) automatic;
   dcl one                     bin(15);


   /****************************************************************/
   /* This test ensures that array/structure access is working OK  */
   /****************************************************************/


   one = 1;

   /****************************************************************/
   /* This test ensures that the above code works when executed in */
   /* a nested procedure.                                          */
   /****************************************************************/

   put skip (one) list ('Im about to call the internal procedure');

   call run_inner_proc;

   put skip (one) list ('The internal procedure has returned OK');


run_inner_proc:

   proc;

   /*******************************************************************/
   /* This executes the array access code as above but from the point */
   /* of view of an internal block.                                   */
   /*******************************************************************/   

   /****************************************************************/
   /* This test ensures that array/structure access is working OK  */
   /****************************************************************/

   put skip (one) list ('Im the internal proc, and Ive just been called');

   do i = 1 to MAX_SIZE;      /* static array indexed by autos */

      do j = 1 to INN_SIZE;

         /*******************************************************/
         /* The following assignments are semantically the same */
         /* and should produce IDENTICAL code.                  */
         /*******************************************************/

         s_element(i,j)                   = 1;
         s_element(i)(j)                  = 1;
         static_structure(i).s_element(j) = 1;
         static_structure.s_element(i,j)  = 1;  
         static_structure.s_element(i)(j) = 1;     

      end;

   end;

   do I = 1 to MAX_SIZE;    /* auto array indexed by statics */

      do J = 1 to INN_SIZE;

         /*******************************************************/
         /* The following assignments are semantically the same */
         /* and should produce IDENTICAL code.                  */
         /*******************************************************/

         a_element(I,J)                 = 1;
         a_element(I)(J)                = 1;
         auto_structure(I).a_element(J) = 1;
         auto_structure.a_element(I,J)  = 1;  
         auto_structure.a_element(I)(J) = 1;     

      end;

   end;

   do i = 1 to MAX_SIZE;    /* auto array indexed by autos */

      do j = 1 to INN_SIZE;

         /*******************************************************/
         /* The following assignments are semantically the same */
         /* and should produce IDENTICAL code.                  */
         /*******************************************************/

         a_element(i,j)                 = 1;
         a_element(i)(j)                = 1;
         auto_structure(i).a_element(j) = 1;
         auto_structure.a_element(i,j)  = 1;  
         auto_structure.a_element(i)(j) = 1;     

      end;

   end;

   put skip (one) list ('Im about to call the very internal procedure');

   call run_very_inner_proc;

   put skip (one) list ('The very internal procedure has returned OK');

   put skip (one) list ('Im the internal proc, and Ive just finished');


run_very_inner_proc:

   proc;

   /*******************************************************************/
   /* This executes the array access code as above but from the point */
   /* of view of an internal block.                                   */
   /*******************************************************************/   

   /****************************************************************/
   /* This test ensures that array/structure access is working OK  */
   /****************************************************************/

   put skip (one) list ('Im the very internal proc, and Ive just been called');

   do I = 1 to MAX_SIZE;       /* static array indexed by statics */

      do J = 1 to INN_SIZE;

         /*******************************************************/
         /* The following assignments are semantically the same */
         /* and should produce IDENTICAL code.                  */
         /*******************************************************/

         s_element(I,J)                   = 1;
         s_element(I)(J)                  = 1;
         static_structure(I).s_element(J) = 1;
         static_structure.s_element(I,J)  = 1;   
         static_structure.s_element(I)(J) = 1;     

      end;

   end;  

   do i = 1 to MAX_SIZE;      /* static array indexed by autos */

      do j = 1 to INN_SIZE;

         /*******************************************************/
         /* The following assignments are semantically the same */
         /* and should produce IDENTICAL code.                  */
         /*******************************************************/

         s_element(i,j)                   = 1;
         s_element(i)(j)                  = 1;
         static_structure(i).s_element(j) = 1;
         static_structure.s_element(i,j)  = 1;  
         static_structure.s_element(i)(j) = 1;     

      end;

   end;

   do I = 1 to MAX_SIZE;    /* auto array indexed by statics */

      do J = 1 to INN_SIZE;

         /*******************************************************/
         /* The following assignments are semantically the same */
         /* and should produce IDENTICAL code.                  */
         /*******************************************************/

         a_element(I,J)                 = 1;
         a_element(I)(J)                = 1;
         auto_structure(I).a_element(J) = 1;
         auto_structure.a_element(I,J)  = 1;   
         auto_structure.a_element(I)(J) = 1;     

      end;

   end;  

   do i = 1 to MAX_SIZE;    /* auto array indexed by autos */

      do j = 1 to INN_SIZE;

         /*******************************************************/
         /* The following assignments are semantically the same */
         /* and should produce IDENTICAL code.                  */
         /*******************************************************/

         a_element(i,j)                 = 1;
         a_element(i)(j)                = 1;
         auto_structure(i).a_element(j) = 1;
         auto_structure.a_element(i,j)  = 1;   
         auto_structure.a_element(i)(j) = 1;     

      end;

   end;

   put skip (one) list ('Im the very internal proc, and Ive just finished');

   end;


   end;

end largetst;
