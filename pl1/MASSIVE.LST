Win32 (NT/95) dates, times, version-no's etc not yet ported.
Please update LIST.C to remove this msg etc.
OPTIONS: +listing +nesting +code +system 

        1   0  _massive:
        2   0  
        3   0     procedure options (main);
        4   1  
        5   1  /****************************************************************************/
        6   1  /* This program uses each of the currently implemented features of PC-PL/1  */
        7   1  /* in an attempt to expose any new or old or reintroduced compiler bugs.    */
        8   1  /****************************************************************************/
        9   1  
       10   1  
       11   1  /****************************************************************************/
       12   1  /*                         Modification History                             */
       13   1  /****************************************************************************/
       14   1  /*  Who    When                           What                              */
       15   1  /* ------------------------------------------------------------------------ */
       16   1  /*  HWG    20-01-92               First version written                     */
       17   1  /****************************************************************************/
       18   1  
       19   1     % replace MAX_SIZE          by 10;
       20   1     % replace INN_SIZE          by 5;
       21   1  
       22   1     dcl 1 static_structure(MAX_SIZE) static,
       23   1           2 s_element(INN_SIZE) bin(15),     /* IN_SIZE gives BAD ERRORS ! */
       24   1           2 x_coord             bin(15),
       25   1           2 y_coord             bin(15);
       26   1  
       27   1     dcl 1 auto_structure(MAX_SIZE) automatic,
       28   1           2 a_element(INN_SIZE) bin(15),
       29   1           2 x_coord             bin(15),
       30   1           2 y_coord             bin(15);
       31   1  
       32   1     dcl (I,J)                   bin(15) static;
       33   1     dcl (i,j)                   bin(15) automatic;
       34   1     dcl one                     bin(15);
       35   1  
       36   1  
       37   1     /****************************************************************/
       38   1     /* This test ensures that array/structure access is working OK  */
       39   1     /****************************************************************/
       40   1  
       41   1  
       42   1     one = 1;
       43   1  
       44   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
       45   2  
       46   2        do J = 1 to INN_SIZE;
       47   3  
       48   3           /*******************************************************/
       49   3           /* The following assignments are semantically the same */
       50   3           /* and should produce IDENTICAL code.                  */
       51   3           /*******************************************************/
       52   3  
       53   3           s_element(I,J)                   = 1;
       54   3           s_element(I)(J)                  = 1;
       55   3           static_structure(I).s_element(J) = 1;
       56   3           static_structure.s_element(I,J)  = 1;
       57   3           static_structure.s_element(I)(J) = 1;     
       58   3  
       59   3        end;
       60   2  
       61   2     end;
       62   1  
       63   1     if I ^= MAX_SIZE + 1 then
       64   1        do;
       65   2        put skip (one) list ('Loop termination error 1');
       66   2        end;
       67   1  
       68   1     put skip(one) list('Loop 1 ended fine.');
       69   1  
       70   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
       71   2  
       72   2        do j = 1 to INN_SIZE;
       73   3  
       74   3           /*******************************************************/
       75   3           /* The following assignments are semantically the same */
       76   3           /* and should produce IDENTICAL code.                  */
       77   3           /*******************************************************/
       78   3  
       79   3           s_element(i,j)                   = 1;
       80   3           s_element(i)(j)                  = 1;
       81   3           static_structure(i).s_element(j) = 1;
       82   3           static_structure.s_element(i,j)  = 1;
       83   3           static_structure.s_element(i)(j) = 1;     
       84   3  
       85   3        end;
       86   2  
       87   2     end;
       88   1  
       89   1     if I ^= MAX_SIZE + 1 then
       90   1        do;
       91   2        put skip (one) list ('Loop termination error 2');
       92   2        end;
       93   1  
       94   1     put skip(one) list('Loop 2 ended fine.');
       95   1  
       96   1  
       97   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
       98   2  
       99   2        do J = 1 to INN_SIZE;
      100   3  
      101   3           /*******************************************************/
      102   3           /* The following assignments are semantically the same */
      103   3           /* and should produce IDENTICAL code.                  */
      104   3           /*******************************************************/
      105   3  
      106   3           a_element(I,J)                 = 1;
      107   3           a_element(I)(J)                = 1;
      108   3           auto_structure(I).a_element(J) = 1;
      109   3           auto_structure.a_element(I,J)  = 1;
      110   3           auto_structure.a_element(I)(J) = 1;     
      111   3  
      112   3        end;
      113   2  
      114   2     end;
      115   1  
      116   1     if I ^= MAX_SIZE + 1 then
      117   1        do;
      118   2        put skip (one) list ('Loop termination error 3');
      119   2        end;
      120   1  
      121   1     put skip(one) list('Loop 3 ended fine.');
      122   1  
      123   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      124   2  
      125   2        do j = 1 to INN_SIZE;
      126   3  
      127   3           /*******************************************************/
      128   3           /* The following assignments are semantically the same */
      129   3           /* and should produce IDENTICAL code.                  */
      130   3           /*******************************************************/
      131   3  
      132   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      133   3           a_element(i)(j)                = 1;
      134   3           auto_structure(i).a_element(j) = 1;
      135   3           auto_structure.a_element(i,j)  = 1;
      136   3           auto_structure.a_element(i)(j) = 1;     
      137   3  
      138   3        end;
      139   2  
      140   2     end;
      141   1  
      142   1     if I ^= MAX_SIZE + 1 then
      143   1        do;
      144   2        put skip (one) list ('Loop termination error 4');
      145   2        end;
      146   1  
      147   1     put skip(one) list('Loop 4 ended fine.');
      148   1  
      149   1     /****************************************************************/
      150   1     /* This test ensures that the above code works when executed in */
      151   1     /* a nested procedure.                                          */
      152   1     /****************************************************************/
      153   1  
      154   1     put skip (one) list ('Im about to call the internal procedure now');
      155   1  
      156   1     call run_inner_proc;
      157   1   one = 1;
      158   1  
      159   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      160   2  
      161   2        do J = 1 to INN_SIZE;
      162   3  
      163   3           /*******************************************************/
      164   3           /* The following assignments are semantically the same */
      165   3           /* and should produce IDENTICAL code.                  */
      166   3           /*******************************************************/
      167   3  
      168   3           s_element(I,J)                   = 1;
      169   3           s_element(I)(J)                  = 1;
      170   3           static_structure(I).s_element(J) = 1;
      171   3           static_structure.s_element(I,J)  = 1;
      172   3           static_structure.s_element(I)(J) = 1;     
      173   3  
      174   3        end;
      175   2  
      176   2     end;
      177   1  
      178   1     if I ^= MAX_SIZE + 1 then
      179   1        do;
      180   2        put skip (one) list ('Loop termination error 1');
      181   2        end;
      182   1  
      183   1     put skip(one) list('Loop 1 ended fine.');
      184   1  
      185   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      186   2  
      187   2        do j = 1 to INN_SIZE;
      188   3  
      189   3           /*******************************************************/
      190   3           /* The following assignments are semantically the same */
      191   3           /* and should produce IDENTICAL code.                  */
      192   3           /*******************************************************/
      193   3  
      194   3           s_element(i,j)                   = 1;
      195   3           s_element(i)(j)                  = 1;
      196   3           static_structure(i).s_element(j) = 1;
      197   3           static_structure.s_element(i,j)  = 1;
      198   3           static_structure.s_element(i)(j) = 1;     
      199   3  
      200   3        end;
      201   2  
      202   2     end;
      203   1  
      204   1     if I ^= MAX_SIZE + 1 then
      205   1        do;
      206   2        put skip (one) list ('Loop termination error 2');
      207   2        end;
      208   1  
      209   1     put skip(one) list('Loop 2 ended fine.');
      210   1  
      211   1  
      212   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
      213   2  
      214   2        do J = 1 to INN_SIZE;
      215   3  
      216   3           /*******************************************************/
      217   3           /* The following assignments are semantically the same */
      218   3           /* and should produce IDENTICAL code.                  */
      219   3           /*******************************************************/
      220   3  
      221   3           a_element(I,J)                 = 1;
      222   3           a_element(I)(J)                = 1;
      223   3           auto_structure(I).a_element(J) = 1;
      224   3           auto_structure.a_element(I,J)  = 1;
      225   3           auto_structure.a_element(I)(J) = 1;     
      226   3  
      227   3        end;
      228   2  
      229   2     end;
      230   1  
      231   1     if I ^= MAX_SIZE + 1 then
      232   1        do;
      233   2        put skip (one) list ('Loop termination error 3');
      234   2        end;
      235   1  
      236   1     put skip(one) list('Loop 3 ended fine.');
      237   1  
      238   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      239   2  
      240   2        do j = 1 to INN_SIZE;
      241   3  
      242   3           /*******************************************************/
      243   3           /* The following assignments are semantically the same */
      244   3           /* and should produce IDENTICAL code.                  */
      245   3           /*******************************************************/
      246   3  
      247   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      248   3           a_element(i)(j)                = 1;
      249   3           auto_structure(i).a_element(j) = 1;
      250   3           auto_structure.a_element(i,j)  = 1;
      251   3           auto_structure.a_element(i)(j) = 1;     
      252   3  
      253   3        end;
      254   2  
      255   2     end;
      256   1  
      257   1     if I ^= MAX_SIZE + 1 then
      258   1        do;
      259   2        put skip (one) list ('Loop termination error 4');
      260   2        end;
      261   1  
      262   1     put skip(one) list('Loop 4 ended fine.');
      263   1  
      264   1     /****************************************************************/
      265   1     /* This test ensures that the above code works when executed in */
      266   1     /* a nested procedure.                                          */
      267   1     /****************************************************************/
      268   1  
      269   1     put skip (one) list ('Im about to call the internal procedure now');
      270   1  
      271   1     call run_inner_proc;
      272   1  
      273   1   one = 1;
      274   1  
      275   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      276   2  
      277   2        do J = 1 to INN_SIZE;
      278   3  
      279   3           /*******************************************************/
      280   3           /* The following assignments are semantically the same */
      281   3           /* and should produce IDENTICAL code.                  */
      282   3           /*******************************************************/
      283   3  
      284   3           s_element(I,J)                   = 1;
      285   3           s_element(I)(J)                  = 1;
      286   3           static_structure(I).s_element(J) = 1;
      287   3           static_structure.s_element(I,J)  = 1;
      288   3           static_structure.s_element(I)(J) = 1;     
      289   3  
      290   3        end;
      291   2  
      292   2     end;
      293   1  
      294   1     if I ^= MAX_SIZE + 1 then
      295   1        do;
      296   2        put skip (one) list ('Loop termination error 1');
      297   2        end;
      298   1  
      299   1     put skip(one) list('Loop 1 ended fine.');
      300   1  
      301   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      302   2  
      303   2        do j = 1 to INN_SIZE;
      304   3  
      305   3           /*******************************************************/
      306   3           /* The following assignments are semantically the same */
      307   3           /* and should produce IDENTICAL code.                  */
      308   3           /*******************************************************/
      309   3  
      310   3           s_element(i,j)                   = 1;
      311   3           s_element(i)(j)                  = 1;
      312   3           static_structure(i).s_element(j) = 1;
      313   3           static_structure.s_element(i,j)  = 1;
      314   3           static_structure.s_element(i)(j) = 1;     
      315   3  
      316   3        end;
      317   2  
      318   2     end;
      319   1  
      320   1     if I ^= MAX_SIZE + 1 then
      321   1        do;
      322   2        put skip (one) list ('Loop termination error 2');
      323   2        end;
      324   1  
      325   1     put skip(one) list('Loop 2 ended fine.');
      326   1  
      327   1  
      328   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
      329   2  
      330   2        do J = 1 to INN_SIZE;
      331   3  
      332   3           /*******************************************************/
      333   3           /* The following assignments are semantically the same */
      334   3           /* and should produce IDENTICAL code.                  */
      335   3           /*******************************************************/
      336   3  
      337   3           a_element(I,J)                 = 1;
      338   3           a_element(I)(J)                = 1;
      339   3           auto_structure(I).a_element(J) = 1;
      340   3           auto_structure.a_element(I,J)  = 1;
      341   3           auto_structure.a_element(I)(J) = 1;     
      342   3  
      343   3        end;
      344   2  
      345   2     end;
      346   1  
      347   1     if I ^= MAX_SIZE + 1 then
      348   1        do;
      349   2        put skip (one) list ('Loop termination error 3');
      350   2        end;
      351   1  
      352   1     put skip(one) list('Loop 3 ended fine.');
      353   1  
      354   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      355   2  
      356   2        do j = 1 to INN_SIZE;
      357   3  
      358   3           /*******************************************************/
      359   3           /* The following assignments are semantically the same */
      360   3           /* and should produce IDENTICAL code.                  */
      361   3           /*******************************************************/
      362   3  
      363   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      364   3           a_element(i)(j)                = 1;
      365   3           auto_structure(i).a_element(j) = 1;
      366   3           auto_structure.a_element(i,j)  = 1;
      367   3           auto_structure.a_element(i)(j) = 1;     
      368   3  
      369   3        end;
      370   2  
      371   2     end;
      372   1  
      373   1     if I ^= MAX_SIZE + 1 then
      374   1        do;
      375   2        put skip (one) list ('Loop termination error 4');
      376   2        end;
      377   1  
      378   1     put skip(one) list('Loop 4 ended fine.');
      379   1  
      380   1     /****************************************************************/
      381   1     /* This test ensures that the above code works when executed in */
      382   1     /* a nested procedure.                                          */
      383   1     /****************************************************************/
      384   1  
      385   1     put skip (one) list ('Im about to call the internal procedure now');
      386   1  
      387   1     call run_inner_proc;
      388   1  
      389   1   one = 1;
      390   1  
      391   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      392   2  
      393   2        do J = 1 to INN_SIZE;
      394   3  
      395   3           /*******************************************************/
      396   3           /* The following assignments are semantically the same */
      397   3           /* and should produce IDENTICAL code.                  */
      398   3           /*******************************************************/
      399   3  
      400   3           s_element(I,J)                   = 1;
      401   3           s_element(I)(J)                  = 1;
      402   3           static_structure(I).s_element(J) = 1;
      403   3           static_structure.s_element(I,J)  = 1;
      404   3           static_structure.s_element(I)(J) = 1;     
      405   3  
      406   3        end;
      407   2  
      408   2     end;
      409   1  
      410   1     if I ^= MAX_SIZE + 1 then
      411   1        do;
      412   2        put skip (one) list ('Loop termination error 1');
      413   2        end;
      414   1  
      415   1     put skip(one) list('Loop 1 ended fine.');
      416   1  
      417   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      418   2  
      419   2        do j = 1 to INN_SIZE;
      420   3  
      421   3           /*******************************************************/
      422   3           /* The following assignments are semantically the same */
      423   3           /* and should produce IDENTICAL code.                  */
      424   3           /*******************************************************/
      425   3  
      426   3           s_element(i,j)                   = 1;
      427   3           s_element(i)(j)                  = 1;
      428   3           static_structure(i).s_element(j) = 1;
      429   3           static_structure.s_element(i,j)  = 1;
      430   3           static_structure.s_element(i)(j) = 1;     
      431   3  
      432   3        end;
      433   2  
      434   2     end;
      435   1  
      436   1     if I ^= MAX_SIZE + 1 then
      437   1        do;
      438   2        put skip (one) list ('Loop termination error 2');
      439   2        end;
      440   1  
      441   1     put skip(one) list('Loop 2 ended fine.');
      442   1  
      443   1  
      444   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
      445   2  
      446   2        do J = 1 to INN_SIZE;
      447   3  
      448   3           /*******************************************************/
      449   3           /* The following assignments are semantically the same */
      450   3           /* and should produce IDENTICAL code.                  */
      451   3           /*******************************************************/
      452   3  
      453   3           a_element(I,J)                 = 1;
      454   3           a_element(I)(J)                = 1;
      455   3           auto_structure(I).a_element(J) = 1;
      456   3           auto_structure.a_element(I,J)  = 1;
      457   3           auto_structure.a_element(I)(J) = 1;     
      458   3  
      459   3        end;
      460   2  
      461   2     end;
      462   1  
      463   1     if I ^= MAX_SIZE + 1 then
      464   1        do;
      465   2        put skip (one) list ('Loop termination error 3');
      466   2        end;
      467   1  
      468   1     put skip(one) list('Loop 3 ended fine.');
      469   1  
      470   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      471   2  
      472   2        do j = 1 to INN_SIZE;
      473   3  
      474   3           /*******************************************************/
      475   3           /* The following assignments are semantically the same */
      476   3           /* and should produce IDENTICAL code.                  */
      477   3           /*******************************************************/
      478   3  
      479   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      480   3           a_element(i)(j)                = 1;
      481   3           auto_structure(i).a_element(j) = 1;
      482   3           auto_structure.a_element(i,j)  = 1;
      483   3           auto_structure.a_element(i)(j) = 1;     
      484   3  
      485   3        end;
      486   2  
      487   2     end;
      488   1  
      489   1     if I ^= MAX_SIZE + 1 then
      490   1        do;
      491   2        put skip (one) list ('Loop termination error 4');
      492   2        end;
      493   1  
      494   1     put skip(one) list('Loop 4 ended fine.');
      495   1  
      496   1     /****************************************************************/
      497   1     /* This test ensures that the above code works when executed in */
      498   1     /* a nested procedure.                                          */
      499   1     /****************************************************************/
      500   1  
      501   1     put skip (one) list ('Im about to call the internal procedure now');
      502   1  
      503   1     call run_inner_proc;
      504   1  
      505   1   one = 1;
      506   1  
      507   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      508   2  
      509   2        do J = 1 to INN_SIZE;
      510   3  
      511   3           /*******************************************************/
      512   3           /* The following assignments are semantically the same */
      513   3           /* and should produce IDENTICAL code.                  */
      514   3           /*******************************************************/
      515   3  
      516   3           s_element(I,J)                   = 1;
      517   3           s_element(I)(J)                  = 1;
      518   3           static_structure(I).s_element(J) = 1;
      519   3           static_structure.s_element(I,J)  = 1;
      520   3           static_structure.s_element(I)(J) = 1;     
      521   3  
      522   3        end;
      523   2  
      524   2     end;
      525   1  
      526   1     if I ^= MAX_SIZE + 1 then
      527   1        do;
      528   2        put skip (one) list ('Loop termination error 1');
      529   2        end;
      530   1  
      531   1     put skip(one) list('Loop 1 ended fine.');
      532   1  
      533   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      534   2  
      535   2        do j = 1 to INN_SIZE;
      536   3  
      537   3           /*******************************************************/
      538   3           /* The following assignments are semantically the same */
      539   3           /* and should produce IDENTICAL code.                  */
      540   3           /*******************************************************/
      541   3  
      542   3           s_element(i,j)                   = 1;
      543   3           s_element(i)(j)                  = 1;
      544   3           static_structure(i).s_element(j) = 1;
      545   3           static_structure.s_element(i,j)  = 1;
      546   3           static_structure.s_element(i)(j) = 1;     
      547   3  
      548   3        end;
      549   2  
      550   2     end;
      551   1  
      552   1     if I ^= MAX_SIZE + 1 then
      553   1        do;
      554   2        put skip (one) list ('Loop termination error 2');
      555   2        end;
      556   1  
      557   1     put skip(one) list('Loop 2 ended fine.');
      558   1  
      559   1  
      560   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
      561   2  
      562   2        do J = 1 to INN_SIZE;
      563   3  
      564   3           /*******************************************************/
      565   3           /* The following assignments are semantically the same */
      566   3           /* and should produce IDENTICAL code.                  */
      567   3           /*******************************************************/
      568   3  
      569   3           a_element(I,J)                 = 1;
      570   3           a_element(I)(J)                = 1;
      571   3           auto_structure(I).a_element(J) = 1;
      572   3           auto_structure.a_element(I,J)  = 1;
      573   3           auto_structure.a_element(I)(J) = 1;     
      574   3  
      575   3        end;
      576   2  
      577   2     end;
      578   1  
      579   1     if I ^= MAX_SIZE + 1 then
      580   1        do;
      581   2        put skip (one) list ('Loop termination error 3');
      582   2        end;
      583   1  
      584   1     put skip(one) list('Loop 3 ended fine.');
      585   1  
      586   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      587   2  
      588   2        do j = 1 to INN_SIZE;
      589   3  
      590   3           /*******************************************************/
      591   3           /* The following assignments are semantically the same */
      592   3           /* and should produce IDENTICAL code.                  */
      593   3           /*******************************************************/
      594   3  
      595   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      596   3           a_element(i)(j)                = 1;
      597   3           auto_structure(i).a_element(j) = 1;
      598   3           auto_structure.a_element(i,j)  = 1;
      599   3           auto_structure.a_element(i)(j) = 1;     
      600   3  
      601   3        end;
      602   2  
      603   2     end;
      604   1  
      605   1     if I ^= MAX_SIZE + 1 then
      606   1        do;
      607   2        put skip (one) list ('Loop termination error 4');
      608   2        end;
      609   1  
      610   1     put skip(one) list('Loop 4 ended fine.');
      611   1  
      612   1     /****************************************************************/
      613   1     /* This test ensures that the above code works when executed in */
      614   1     /* a nested procedure.                                          */
      615   1     /****************************************************************/
      616   1  
      617   1     put skip (one) list ('Im about to call the internal procedure now');
      618   1  
      619   1     call run_inner_proc;
      620   1  
      621   1   one = 1;
      622   1  
      623   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      624   2  
      625   2        do J = 1 to INN_SIZE;
      626   3  
      627   3           /*******************************************************/
      628   3           /* The following assignments are semantically the same */
      629   3           /* and should produce IDENTICAL code.                  */
      630   3           /*******************************************************/
      631   3  
      632   3           s_element(I,J)                   = 1;
      633   3           s_element(I)(J)                  = 1;
      634   3           static_structure(I).s_element(J) = 1;
      635   3           static_structure.s_element(I,J)  = 1;
      636   3           static_structure.s_element(I)(J) = 1;     
      637   3  
      638   3        end;
      639   2  
      640   2     end;
      641   1  
      642   1     if I ^= MAX_SIZE + 1 then
      643   1        do;
      644   2        put skip (one) list ('Loop termination error 1');
      645   2        end;
      646   1  
      647   1     put skip(one) list('Loop 1 ended fine.');
      648   1  
      649   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      650   2  
      651   2        do j = 1 to INN_SIZE;
      652   3  
      653   3           /*******************************************************/
      654   3           /* The following assignments are semantically the same */
      655   3           /* and should produce IDENTICAL code.                  */
      656   3           /*******************************************************/
      657   3  
      658   3           s_element(i,j)                   = 1;
      659   3           s_element(i)(j)                  = 1;
      660   3           static_structure(i).s_element(j) = 1;
      661   3           static_structure.s_element(i,j)  = 1;
      662   3           static_structure.s_element(i)(j) = 1;     
      663   3  
      664   3        end;
      665   2  
      666   2     end;
      667   1  
      668   1     if I ^= MAX_SIZE + 1 then
      669   1        do;
      670   2        put skip (one) list ('Loop termination error 2');
      671   2        end;
      672   1  
      673   1     put skip(one) list('Loop 2 ended fine.');
      674   1  
      675   1  
      676   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
      677   2  
      678   2        do J = 1 to INN_SIZE;
      679   3  
      680   3           /*******************************************************/
      681   3           /* The following assignments are semantically the same */
      682   3           /* and should produce IDENTICAL code.                  */
      683   3           /*******************************************************/
      684   3  
      685   3           a_element(I,J)                 = 1;
      686   3           a_element(I)(J)                = 1;
      687   3           auto_structure(I).a_element(J) = 1;
      688   3           auto_structure.a_element(I,J)  = 1;
      689   3           auto_structure.a_element(I)(J) = 1;     
      690   3  
      691   3        end;
      692   2  
      693   2     end;
      694   1  
      695   1     if I ^= MAX_SIZE + 1 then
      696   1        do;
      697   2        put skip (one) list ('Loop termination error 3');
      698   2        end;
      699   1  
      700   1     put skip(one) list('Loop 3 ended fine.');
      701   1  
      702   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      703   2  
      704   2        do j = 1 to INN_SIZE;
      705   3  
      706   3           /*******************************************************/
      707   3           /* The following assignments are semantically the same */
      708   3           /* and should produce IDENTICAL code.                  */
      709   3           /*******************************************************/
      710   3  
      711   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      712   3           a_element(i)(j)                = 1;
      713   3           auto_structure(i).a_element(j) = 1;
      714   3           auto_structure.a_element(i,j)  = 1;
      715   3           auto_structure.a_element(i)(j) = 1;     
      716   3  
      717   3        end;
      718   2  
      719   2     end;
      720   1  
      721   1     if I ^= MAX_SIZE + 1 then
      722   1        do;
      723   2        put skip (one) list ('Loop termination error 4');
      724   2        end;
      725   1  
      726   1     put skip(one) list('Loop 4 ended fine.');
      727   1  
      728   1     /****************************************************************/
      729   1     /* This test ensures that the above code works when executed in */
      730   1     /* a nested procedure.                                          */
      731   1     /****************************************************************/
      732   1  
      733   1     put skip (one) list ('Im about to call the internal procedure now');
      734   1  
      735   1     call run_inner_proc;
      736   1  
      737   1   one = 1;
      738   1  
      739   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      740   2  
      741   2        do J = 1 to INN_SIZE;
      742   3  
      743   3           /*******************************************************/
      744   3           /* The following assignments are semantically the same */
      745   3           /* and should produce IDENTICAL code.                  */
      746   3           /*******************************************************/
      747   3  
      748   3           s_element(I,J)                   = 1;
      749   3           s_element(I)(J)                  = 1;
      750   3           static_structure(I).s_element(J) = 1;
      751   3           static_structure.s_element(I,J)  = 1;
      752   3           static_structure.s_element(I)(J) = 1;     
      753   3  
      754   3        end;
      755   2  
      756   2     end;
      757   1  
      758   1     if I ^= MAX_SIZE + 1 then
      759   1        do;
      760   2        put skip (one) list ('Loop termination error 1');
      761   2        end;
      762   1  
      763   1     put skip(one) list('Loop 1 ended fine.');
      764   1  
      765   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      766   2  
      767   2        do j = 1 to INN_SIZE;
      768   3  
      769   3           /*******************************************************/
      770   3           /* The following assignments are semantically the same */
      771   3           /* and should produce IDENTICAL code.                  */
      772   3           /*******************************************************/
      773   3  
      774   3           s_element(i,j)                   = 1;
      775   3           s_element(i)(j)                  = 1;
      776   3           static_structure(i).s_element(j) = 1;
      777   3           static_structure.s_element(i,j)  = 1;
      778   3           static_structure.s_element(i)(j) = 1;     
      779   3  
      780   3        end;
      781   2  
      782   2     end;
      783   1  
      784   1     if I ^= MAX_SIZE + 1 then
      785   1        do;
      786   2        put skip (one) list ('Loop termination error 2');
      787   2        end;
      788   1  
      789   1     put skip(one) list('Loop 2 ended fine.');
      790   1  
      791   1  
      792   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
      793   2  
      794   2        do J = 1 to INN_SIZE;
      795   3  
      796   3           /*******************************************************/
      797   3           /* The following assignments are semantically the same */
      798   3           /* and should produce IDENTICAL code.                  */
      799   3           /*******************************************************/
      800   3  
      801   3           a_element(I,J)                 = 1;
      802   3           a_element(I)(J)                = 1;
      803   3           auto_structure(I).a_element(J) = 1;
      804   3           auto_structure.a_element(I,J)  = 1;
      805   3           auto_structure.a_element(I)(J) = 1;     
      806   3  
      807   3        end;
      808   2  
      809   2     end;
      810   1  
      811   1     if I ^= MAX_SIZE + 1 then
      812   1        do;
      813   2        put skip (one) list ('Loop termination error 3');
      814   2        end;
      815   1  
      816   1     put skip(one) list('Loop 3 ended fine.');
      817   1  
      818   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      819   2  
      820   2        do j = 1 to INN_SIZE;
      821   3  
      822   3           /*******************************************************/
      823   3           /* The following assignments are semantically the same */
      824   3           /* and should produce IDENTICAL code.                  */
      825   3           /*******************************************************/
      826   3  
      827   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      828   3           a_element(i)(j)                = 1;
      829   3           auto_structure(i).a_element(j) = 1;
      830   3           auto_structure.a_element(i,j)  = 1;
      831   3           auto_structure.a_element(i)(j) = 1;     
      832   3  
      833   3        end;
      834   2  
      835   2     end;
      836   1  
      837   1     if I ^= MAX_SIZE + 1 then
      838   1        do;
      839   2        put skip (one) list ('Loop termination error 4');
      840   2        end;
      841   1  
      842   1     put skip(one) list('Loop 4 ended fine.');
      843   1  
      844   1     /****************************************************************/
      845   1     /* This test ensures that the above code works when executed in */
      846   1     /* a nested procedure.                                          */
      847   1     /****************************************************************/
      848   1  
      849   1     put skip (one) list ('Im about to call the internal procedure now');
      850   1  
      851   1     call run_inner_proc;
      852   1  
      853   1   one = 1;
      854   1  
      855   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      856   2  
      857   2        do J = 1 to INN_SIZE;
      858   3  
      859   3           /*******************************************************/
      860   3           /* The following assignments are semantically the same */
      861   3           /* and should produce IDENTICAL code.                  */
      862   3           /*******************************************************/
      863   3  
      864   3           s_element(I,J)                   = 1;
      865   3           s_element(I)(J)                  = 1;
      866   3           static_structure(I).s_element(J) = 1;
      867   3           static_structure.s_element(I,J)  = 1;
      868   3           static_structure.s_element(I)(J) = 1;     
      869   3  
      870   3        end;
      871   2  
      872   2     end;
      873   1  
      874   1     if I ^= MAX_SIZE + 1 then
      875   1        do;
      876   2        put skip (one) list ('Loop termination error 1');
      877   2        end;
      878   1  
      879   1     put skip(one) list('Loop 1 ended fine.');
      880   1  
      881   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      882   2  
      883   2        do j = 1 to INN_SIZE;
      884   3  
      885   3           /*******************************************************/
      886   3           /* The following assignments are semantically the same */
      887   3           /* and should produce IDENTICAL code.                  */
      888   3           /*******************************************************/
      889   3  
      890   3           s_element(i,j)                   = 1;
      891   3           s_element(i)(j)                  = 1;
      892   3           static_structure(i).s_element(j) = 1;
      893   3           static_structure.s_element(i,j)  = 1;
      894   3           static_structure.s_element(i)(j) = 1;     
      895   3  
      896   3        end;
      897   2  
      898   2     end;
      899   1  
      900   1     if I ^= MAX_SIZE + 1 then
      901   1        do;
      902   2        put skip (one) list ('Loop termination error 2');
      903   2        end;
      904   1  
      905   1     put skip(one) list('Loop 2 ended fine.');
      906   1  
      907   1  
      908   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
      909   2  
      910   2        do J = 1 to INN_SIZE;
      911   3  
      912   3           /*******************************************************/
      913   3           /* The following assignments are semantically the same */
      914   3           /* and should produce IDENTICAL code.                  */
      915   3           /*******************************************************/
      916   3  
      917   3           a_element(I,J)                 = 1;
      918   3           a_element(I)(J)                = 1;
      919   3           auto_structure(I).a_element(J) = 1;
      920   3           auto_structure.a_element(I,J)  = 1;
      921   3           auto_structure.a_element(I)(J) = 1;     
      922   3  
      923   3        end;
      924   2  
      925   2     end;
      926   1  
      927   1     if I ^= MAX_SIZE + 1 then
      928   1        do;
      929   2        put skip (one) list ('Loop termination error 3');
      930   2        end;
      931   1  
      932   1     put skip(one) list('Loop 3 ended fine.');
      933   1  
      934   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
      935   2  
      936   2        do j = 1 to INN_SIZE;
      937   3  
      938   3           /*******************************************************/
      939   3           /* The following assignments are semantically the same */
      940   3           /* and should produce IDENTICAL code.                  */
      941   3           /*******************************************************/
      942   3  
      943   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
      944   3           a_element(i)(j)                = 1;
      945   3           auto_structure(i).a_element(j) = 1;
      946   3           auto_structure.a_element(i,j)  = 1;
      947   3           auto_structure.a_element(i)(j) = 1;     
      948   3  
      949   3        end;
      950   2  
      951   2     end;
      952   1  
      953   1     if I ^= MAX_SIZE + 1 then
      954   1        do;
      955   2        put skip (one) list ('Loop termination error 4');
      956   2        end;
      957   1  
      958   1     put skip(one) list('Loop 4 ended fine.');
      959   1  
      960   1     /****************************************************************/
      961   1     /* This test ensures that the above code works when executed in */
      962   1     /* a nested procedure.                                          */
      963   1     /****************************************************************/
      964   1  
      965   1     put skip (one) list ('Im about to call the internal procedure now');
      966   1  
      967   1     call run_inner_proc;
      968   1  
      969   1   one = 1;
      970   1  
      971   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
      972   2  
      973   2        do J = 1 to INN_SIZE;
      974   3  
      975   3           /*******************************************************/
      976   3           /* The following assignments are semantically the same */
      977   3           /* and should produce IDENTICAL code.                  */
      978   3           /*******************************************************/
      979   3  
      980   3           s_element(I,J)                   = 1;
      981   3           s_element(I)(J)                  = 1;
      982   3           static_structure(I).s_element(J) = 1;
      983   3           static_structure.s_element(I,J)  = 1;
      984   3           static_structure.s_element(I)(J) = 1;     
      985   3  
      986   3        end;
      987   2  
      988   2     end;
      989   1  
      990   1     if I ^= MAX_SIZE + 1 then
      991   1        do;
      992   2        put skip (one) list ('Loop termination error 1');
      993   2        end;
      994   1  
      995   1     put skip(one) list('Loop 1 ended fine.');
      996   1  
      997   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
      998   2  
      999   2        do j = 1 to INN_SIZE;
     1000   3  
     1001   3           /*******************************************************/
     1002   3           /* The following assignments are semantically the same */
     1003   3           /* and should produce IDENTICAL code.                  */
     1004   3           /*******************************************************/
     1005   3  
     1006   3           s_element(i,j)                   = 1;
     1007   3           s_element(i)(j)                  = 1;
     1008   3           static_structure(i).s_element(j) = 1;
     1009   3           static_structure.s_element(i,j)  = 1;
     1010   3           static_structure.s_element(i)(j) = 1;     
     1011   3  
     1012   3        end;
     1013   2  
     1014   2     end;
     1015   1  
     1016   1     if I ^= MAX_SIZE + 1 then
     1017   1        do;
     1018   2        put skip (one) list ('Loop termination error 2');
     1019   2        end;
     1020   1  
     1021   1     put skip(one) list('Loop 2 ended fine.');
     1022   1  
     1023   1  
     1024   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1025   2  
     1026   2        do J = 1 to INN_SIZE;
     1027   3  
     1028   3           /*******************************************************/
     1029   3           /* The following assignments are semantically the same */
     1030   3           /* and should produce IDENTICAL code.                  */
     1031   3           /*******************************************************/
     1032   3  
     1033   3           a_element(I,J)                 = 1;
     1034   3           a_element(I)(J)                = 1;
     1035   3           auto_structure(I).a_element(J) = 1;
     1036   3           auto_structure.a_element(I,J)  = 1;
     1037   3           auto_structure.a_element(I)(J) = 1;     
     1038   3  
     1039   3        end;
     1040   2  
     1041   2     end;
     1042   1  
     1043   1     if I ^= MAX_SIZE + 1 then
     1044   1        do;
     1045   2        put skip (one) list ('Loop termination error 3');
     1046   2        end;
     1047   1  
     1048   1     put skip(one) list('Loop 3 ended fine.');
     1049   1  
     1050   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1051   2  
     1052   2        do j = 1 to INN_SIZE;
     1053   3  
     1054   3           /*******************************************************/
     1055   3           /* The following assignments are semantically the same */
     1056   3           /* and should produce IDENTICAL code.                  */
     1057   3           /*******************************************************/
     1058   3  
     1059   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1060   3           a_element(i)(j)                = 1;
     1061   3           auto_structure(i).a_element(j) = 1;
     1062   3           auto_structure.a_element(i,j)  = 1;
     1063   3           auto_structure.a_element(i)(j) = 1;     
     1064   3  
     1065   3        end;
     1066   2  
     1067   2     end;
     1068   1  
     1069   1     if I ^= MAX_SIZE + 1 then
     1070   1        do;
     1071   2        put skip (one) list ('Loop termination error 4');
     1072   2        end;
     1073   1  
     1074   1     put skip(one) list('Loop 4 ended fine.');
     1075   1  
     1076   1     /****************************************************************/
     1077   1     /* This test ensures that the above code works when executed in */
     1078   1     /* a nested procedure.                                          */
     1079   1     /****************************************************************/
     1080   1  
     1081   1     put skip (one) list ('Im about to call the internal procedure now');
     1082   1  
     1083   1     call run_inner_proc;
     1084   1  
     1085   1   one = 1;
     1086   1  
     1087   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1088   2  
     1089   2        do J = 1 to INN_SIZE;
     1090   3  
     1091   3           /*******************************************************/
     1092   3           /* The following assignments are semantically the same */
     1093   3           /* and should produce IDENTICAL code.                  */
     1094   3           /*******************************************************/
     1095   3  
     1096   3           s_element(I,J)                   = 1;
     1097   3           s_element(I)(J)                  = 1;
     1098   3           static_structure(I).s_element(J) = 1;
     1099   3           static_structure.s_element(I,J)  = 1;
     1100   3           static_structure.s_element(I)(J) = 1;     
     1101   3  
     1102   3        end;
     1103   2  
     1104   2     end;
     1105   1  
     1106   1     if I ^= MAX_SIZE + 1 then
     1107   1        do;
     1108   2        put skip (one) list ('Loop termination error 1');
     1109   2        end;
     1110   1  
     1111   1     put skip(one) list('Loop 1 ended fine.');
     1112   1  
     1113   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1114   2  
     1115   2        do j = 1 to INN_SIZE;
     1116   3  
     1117   3           /*******************************************************/
     1118   3           /* The following assignments are semantically the same */
     1119   3           /* and should produce IDENTICAL code.                  */
     1120   3           /*******************************************************/
     1121   3  
     1122   3           s_element(i,j)                   = 1;
     1123   3           s_element(i)(j)                  = 1;
     1124   3           static_structure(i).s_element(j) = 1;
     1125   3           static_structure.s_element(i,j)  = 1;
     1126   3           static_structure.s_element(i)(j) = 1;     
     1127   3  
     1128   3        end;
     1129   2  
     1130   2     end;
     1131   1  
     1132   1     if I ^= MAX_SIZE + 1 then
     1133   1        do;
     1134   2        put skip (one) list ('Loop termination error 2');
     1135   2        end;
     1136   1  
     1137   1     put skip(one) list('Loop 2 ended fine.');
     1138   1  
     1139   1  
     1140   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1141   2  
     1142   2        do J = 1 to INN_SIZE;
     1143   3  
     1144   3           /*******************************************************/
     1145   3           /* The following assignments are semantically the same */
     1146   3           /* and should produce IDENTICAL code.                  */
     1147   3           /*******************************************************/
     1148   3  
     1149   3           a_element(I,J)                 = 1;
     1150   3           a_element(I)(J)                = 1;
     1151   3           auto_structure(I).a_element(J) = 1;
     1152   3           auto_structure.a_element(I,J)  = 1;
     1153   3           auto_structure.a_element(I)(J) = 1;     
     1154   3  
     1155   3        end;
     1156   2  
     1157   2     end;
     1158   1  
     1159   1     if I ^= MAX_SIZE + 1 then
     1160   1        do;
     1161   2        put skip (one) list ('Loop termination error 3');
     1162   2        end;
     1163   1  
     1164   1     put skip(one) list('Loop 3 ended fine.');
     1165   1  
     1166   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1167   2  
     1168   2        do j = 1 to INN_SIZE;
     1169   3  
     1170   3           /*******************************************************/
     1171   3           /* The following assignments are semantically the same */
     1172   3           /* and should produce IDENTICAL code.                  */
     1173   3           /*******************************************************/
     1174   3  
     1175   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1176   3           a_element(i)(j)                = 1;
     1177   3           auto_structure(i).a_element(j) = 1;
     1178   3           auto_structure.a_element(i,j)  = 1;
     1179   3           auto_structure.a_element(i)(j) = 1;     
     1180   3  
     1181   3        end;
     1182   2  
     1183   2     end;
     1184   1  
     1185   1     if I ^= MAX_SIZE + 1 then
     1186   1        do;
     1187   2        put skip (one) list ('Loop termination error 4');
     1188   2        end;
     1189   1  
     1190   1     put skip(one) list('Loop 4 ended fine.');
     1191   1  
     1192   1     /****************************************************************/
     1193   1     /* This test ensures that the above code works when executed in */
     1194   1     /* a nested procedure.                                          */
     1195   1     /****************************************************************/
     1196   1  
     1197   1     put skip (one) list ('Im about to call the internal procedure now');
     1198   1  
     1199   1     call run_inner_proc;
     1200   1  
     1201   1   one = 1;
     1202   1  
     1203   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1204   2  
     1205   2        do J = 1 to INN_SIZE;
     1206   3  
     1207   3           /*******************************************************/
     1208   3           /* The following assignments are semantically the same */
     1209   3           /* and should produce IDENTICAL code.                  */
     1210   3           /*******************************************************/
     1211   3  
     1212   3           s_element(I,J)                   = 1;
     1213   3           s_element(I)(J)                  = 1;
     1214   3           static_structure(I).s_element(J) = 1;
     1215   3           static_structure.s_element(I,J)  = 1;
     1216   3           static_structure.s_element(I)(J) = 1;     
     1217   3  
     1218   3        end;
     1219   2  
     1220   2     end;
     1221   1  
     1222   1     if I ^= MAX_SIZE + 1 then
     1223   1        do;
     1224   2        put skip (one) list ('Loop termination error 1');
     1225   2        end;
     1226   1  
     1227   1     put skip(one) list('Loop 1 ended fine.');
     1228   1  
     1229   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1230   2  
     1231   2        do j = 1 to INN_SIZE;
     1232   3  
     1233   3           /*******************************************************/
     1234   3           /* The following assignments are semantically the same */
     1235   3           /* and should produce IDENTICAL code.                  */
     1236   3           /*******************************************************/
     1237   3  
     1238   3           s_element(i,j)                   = 1;
     1239   3           s_element(i)(j)                  = 1;
     1240   3           static_structure(i).s_element(j) = 1;
     1241   3           static_structure.s_element(i,j)  = 1;
     1242   3           static_structure.s_element(i)(j) = 1;     
     1243   3  
     1244   3        end;
     1245   2  
     1246   2     end;
     1247   1  
     1248   1     if I ^= MAX_SIZE + 1 then
     1249   1        do;
     1250   2        put skip (one) list ('Loop termination error 2');
     1251   2        end;
     1252   1  
     1253   1     put skip(one) list('Loop 2 ended fine.');
     1254   1  
     1255   1  
     1256   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1257   2  
     1258   2        do J = 1 to INN_SIZE;
     1259   3  
     1260   3           /*******************************************************/
     1261   3           /* The following assignments are semantically the same */
     1262   3           /* and should produce IDENTICAL code.                  */
     1263   3           /*******************************************************/
     1264   3  
     1265   3           a_element(I,J)                 = 1;
     1266   3           a_element(I)(J)                = 1;
     1267   3           auto_structure(I).a_element(J) = 1;
     1268   3           auto_structure.a_element(I,J)  = 1;
     1269   3           auto_structure.a_element(I)(J) = 1;     
     1270   3  
     1271   3        end;
     1272   2  
     1273   2     end;
     1274   1  
     1275   1     if I ^= MAX_SIZE + 1 then
     1276   1        do;
     1277   2        put skip (one) list ('Loop termination error 3');
     1278   2        end;
     1279   1  
     1280   1     put skip(one) list('Loop 3 ended fine.');
     1281   1  
     1282   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1283   2  
     1284   2        do j = 1 to INN_SIZE;
     1285   3  
     1286   3           /*******************************************************/
     1287   3           /* The following assignments are semantically the same */
     1288   3           /* and should produce IDENTICAL code.                  */
     1289   3           /*******************************************************/
     1290   3  
     1291   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1292   3           a_element(i)(j)                = 1;
     1293   3           auto_structure(i).a_element(j) = 1;
     1294   3           auto_structure.a_element(i,j)  = 1;
     1295   3           auto_structure.a_element(i)(j) = 1;     
     1296   3  
     1297   3        end;
     1298   2  
     1299   2     end;
     1300   1  
     1301   1     if I ^= MAX_SIZE + 1 then
     1302   1        do;
     1303   2        put skip (one) list ('Loop termination error 4');
     1304   2        end;
     1305   1  
     1306   1     put skip(one) list('Loop 4 ended fine.');
     1307   1  
     1308   1     /****************************************************************/
     1309   1     /* This test ensures that the above code works when executed in */
     1310   1     /* a nested procedure.                                          */
     1311   1     /****************************************************************/
     1312   1  
     1313   1     put skip (one) list ('Im about to call the internal procedure now');
     1314   1  
     1315   1     call run_inner_proc;
     1316   1  
     1317   1   one = 1;
     1318   1  
     1319   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1320   2  
     1321   2        do J = 1 to INN_SIZE;
     1322   3  
     1323   3           /*******************************************************/
     1324   3           /* The following assignments are semantically the same */
     1325   3           /* and should produce IDENTICAL code.                  */
     1326   3           /*******************************************************/
     1327   3  
     1328   3           s_element(I,J)                   = 1;
     1329   3           s_element(I)(J)                  = 1;
     1330   3           static_structure(I).s_element(J) = 1;
     1331   3           static_structure.s_element(I,J)  = 1;
     1332   3           static_structure.s_element(I)(J) = 1;     
     1333   3  
     1334   3        end;
     1335   2  
     1336   2     end;
     1337   1  
     1338   1     if I ^= MAX_SIZE + 1 then
     1339   1        do;
     1340   2        put skip (one) list ('Loop termination error 1');
     1341   2        end;
     1342   1  
     1343   1     put skip(one) list('Loop 1 ended fine.');
     1344   1  
     1345   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1346   2  
     1347   2        do j = 1 to INN_SIZE;
     1348   3  
     1349   3           /*******************************************************/
     1350   3           /* The following assignments are semantically the same */
     1351   3           /* and should produce IDENTICAL code.                  */
     1352   3           /*******************************************************/
     1353   3  
     1354   3           s_element(i,j)                   = 1;
     1355   3           s_element(i)(j)                  = 1;
     1356   3           static_structure(i).s_element(j) = 1;
     1357   3           static_structure.s_element(i,j)  = 1;
     1358   3           static_structure.s_element(i)(j) = 1;     
     1359   3  
     1360   3        end;
     1361   2  
     1362   2     end;
     1363   1  
     1364   1     if I ^= MAX_SIZE + 1 then
     1365   1        do;
     1366   2        put skip (one) list ('Loop termination error 2');
     1367   2        end;
     1368   1  
     1369   1     put skip(one) list('Loop 2 ended fine.');
     1370   1  
     1371   1  
     1372   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1373   2  
     1374   2        do J = 1 to INN_SIZE;
     1375   3  
     1376   3           /*******************************************************/
     1377   3           /* The following assignments are semantically the same */
     1378   3           /* and should produce IDENTICAL code.                  */
     1379   3           /*******************************************************/
     1380   3  
     1381   3           a_element(I,J)                 = 1;
     1382   3           a_element(I)(J)                = 1;
     1383   3           auto_structure(I).a_element(J) = 1;
     1384   3           auto_structure.a_element(I,J)  = 1;
     1385   3           auto_structure.a_element(I)(J) = 1;     
     1386   3  
     1387   3        end;
     1388   2  
     1389   2     end;
     1390   1  
     1391   1     if I ^= MAX_SIZE + 1 then
     1392   1        do;
     1393   2        put skip (one) list ('Loop termination error 3');
     1394   2        end;
     1395   1  
     1396   1     put skip(one) list('Loop 3 ended fine.');
     1397   1  
     1398   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1399   2  
     1400   2        do j = 1 to INN_SIZE;
     1401   3  
     1402   3           /*******************************************************/
     1403   3           /* The following assignments are semantically the same */
     1404   3           /* and should produce IDENTICAL code.                  */
     1405   3           /*******************************************************/
     1406   3  
     1407   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1408   3           a_element(i)(j)                = 1;
     1409   3           auto_structure(i).a_element(j) = 1;
     1410   3           auto_structure.a_element(i,j)  = 1;
     1411   3           auto_structure.a_element(i)(j) = 1;     
     1412   3  
     1413   3        end;
     1414   2  
     1415   2     end;
     1416   1  
     1417   1     if I ^= MAX_SIZE + 1 then
     1418   1        do;
     1419   2        put skip (one) list ('Loop termination error 4');
     1420   2        end;
     1421   1  
     1422   1     put skip(one) list('Loop 4 ended fine.');
     1423   1  
     1424   1     /****************************************************************/
     1425   1     /* This test ensures that the above code works when executed in */
     1426   1     /* a nested procedure.                                          */
     1427   1     /****************************************************************/
     1428   1  
     1429   1     put skip (one) list ('Im about to call the internal procedure now');
     1430   1  
     1431   1     call run_inner_proc;
     1432   1  
     1433   1   one = 1;
     1434   1  
     1435   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1436   2  
     1437   2        do J = 1 to INN_SIZE;
     1438   3  
     1439   3           /*******************************************************/
     1440   3           /* The following assignments are semantically the same */
     1441   3           /* and should produce IDENTICAL code.                  */
     1442   3           /*******************************************************/
     1443   3  
     1444   3           s_element(I,J)                   = 1;
     1445   3           s_element(I)(J)                  = 1;
     1446   3           static_structure(I).s_element(J) = 1;
     1447   3           static_structure.s_element(I,J)  = 1;
     1448   3           static_structure.s_element(I)(J) = 1;     
     1449   3  
     1450   3        end;
     1451   2  
     1452   2     end;
     1453   1  
     1454   1     if I ^= MAX_SIZE + 1 then
     1455   1        do;
     1456   2        put skip (one) list ('Loop termination error 1');
     1457   2        end;
     1458   1  
     1459   1     put skip(one) list('Loop 1 ended fine.');
     1460   1  
     1461   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1462   2  
     1463   2        do j = 1 to INN_SIZE;
     1464   3  
     1465   3           /*******************************************************/
     1466   3           /* The following assignments are semantically the same */
     1467   3           /* and should produce IDENTICAL code.                  */
     1468   3           /*******************************************************/
     1469   3  
     1470   3           s_element(i,j)                   = 1;
     1471   3           s_element(i)(j)                  = 1;
     1472   3           static_structure(i).s_element(j) = 1;
     1473   3           static_structure.s_element(i,j)  = 1;
     1474   3           static_structure.s_element(i)(j) = 1;     
     1475   3  
     1476   3        end;
     1477   2  
     1478   2     end;
     1479   1  
     1480   1     if I ^= MAX_SIZE + 1 then
     1481   1        do;
     1482   2        put skip (one) list ('Loop termination error 2');
     1483   2        end;
     1484   1  
     1485   1     put skip(one) list('Loop 2 ended fine.');
     1486   1  
     1487   1  
     1488   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1489   2  
     1490   2        do J = 1 to INN_SIZE;
     1491   3  
     1492   3           /*******************************************************/
     1493   3           /* The following assignments are semantically the same */
     1494   3           /* and should produce IDENTICAL code.                  */
     1495   3           /*******************************************************/
     1496   3  
     1497   3           a_element(I,J)                 = 1;
     1498   3           a_element(I)(J)                = 1;
     1499   3           auto_structure(I).a_element(J) = 1;
     1500   3           auto_structure.a_element(I,J)  = 1;
     1501   3           auto_structure.a_element(I)(J) = 1;     
     1502   3  
     1503   3        end;
     1504   2  
     1505   2     end;
     1506   1  
     1507   1     if I ^= MAX_SIZE + 1 then
     1508   1        do;
     1509   2        put skip (one) list ('Loop termination error 3');
     1510   2        end;
     1511   1  
     1512   1     put skip(one) list('Loop 3 ended fine.');
     1513   1  
     1514   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1515   2  
     1516   2        do j = 1 to INN_SIZE;
     1517   3  
     1518   3           /*******************************************************/
     1519   3           /* The following assignments are semantically the same */
     1520   3           /* and should produce IDENTICAL code.                  */
     1521   3           /*******************************************************/
     1522   3  
     1523   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1524   3           a_element(i)(j)                = 1;
     1525   3           auto_structure(i).a_element(j) = 1;
     1526   3           auto_structure.a_element(i,j)  = 1;
     1527   3           auto_structure.a_element(i)(j) = 1;     
     1528   3  
     1529   3        end;
     1530   2  
     1531   2     end;
     1532   1  
     1533   1     if I ^= MAX_SIZE + 1 then
     1534   1        do;
     1535   2        put skip (one) list ('Loop termination error 4');
     1536   2        end;
     1537   1  
     1538   1     put skip(one) list('Loop 4 ended fine.');
     1539   1  
     1540   1     /****************************************************************/
     1541   1     /* This test ensures that the above code works when executed in */
     1542   1     /* a nested procedure.                                          */
     1543   1     /****************************************************************/
     1544   1  
     1545   1     put skip (one) list ('Im about to call the internal procedure now');
     1546   1  
     1547   1     call run_inner_proc;
     1548   1  
     1549   1   one = 1;
     1550   1  
     1551   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1552   2  
     1553   2        do J = 1 to INN_SIZE;
     1554   3  
     1555   3           /*******************************************************/
     1556   3           /* The following assignments are semantically the same */
     1557   3           /* and should produce IDENTICAL code.                  */
     1558   3           /*******************************************************/
     1559   3  
     1560   3           s_element(I,J)                   = 1;
     1561   3           s_element(I)(J)                  = 1;
     1562   3           static_structure(I).s_element(J) = 1;
     1563   3           static_structure.s_element(I,J)  = 1;
     1564   3           static_structure.s_element(I)(J) = 1;     
     1565   3  
     1566   3        end;
     1567   2  
     1568   2     end;
     1569   1  
     1570   1     if I ^= MAX_SIZE + 1 then
     1571   1        do;
     1572   2        put skip (one) list ('Loop termination error 1');
     1573   2        end;
     1574   1  
     1575   1     put skip(one) list('Loop 1 ended fine.');
     1576   1  
     1577   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1578   2  
     1579   2        do j = 1 to INN_SIZE;
     1580   3  
     1581   3           /*******************************************************/
     1582   3           /* The following assignments are semantically the same */
     1583   3           /* and should produce IDENTICAL code.                  */
     1584   3           /*******************************************************/
     1585   3  
     1586   3           s_element(i,j)                   = 1;
     1587   3           s_element(i)(j)                  = 1;
     1588   3           static_structure(i).s_element(j) = 1;
     1589   3           static_structure.s_element(i,j)  = 1;
     1590   3           static_structure.s_element(i)(j) = 1;     
     1591   3  
     1592   3        end;
     1593   2  
     1594   2     end;
     1595   1  
     1596   1     if I ^= MAX_SIZE + 1 then
     1597   1        do;
     1598   2        put skip (one) list ('Loop termination error 2');
     1599   2        end;
     1600   1  
     1601   1     put skip(one) list('Loop 2 ended fine.');
     1602   1  
     1603   1  
     1604   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1605   2  
     1606   2        do J = 1 to INN_SIZE;
     1607   3  
     1608   3           /*******************************************************/
     1609   3           /* The following assignments are semantically the same */
     1610   3           /* and should produce IDENTICAL code.                  */
     1611   3           /*******************************************************/
     1612   3  
     1613   3           a_element(I,J)                 = 1;
     1614   3           a_element(I)(J)                = 1;
     1615   3           auto_structure(I).a_element(J) = 1;
     1616   3           auto_structure.a_element(I,J)  = 1;
     1617   3           auto_structure.a_element(I)(J) = 1;     
     1618   3  
     1619   3        end;
     1620   2  
     1621   2     end;
     1622   1  
     1623   1     if I ^= MAX_SIZE + 1 then
     1624   1        do;
     1625   2        put skip (one) list ('Loop termination error 3');
     1626   2        end;
     1627   1  
     1628   1     put skip(one) list('Loop 3 ended fine.');
     1629   1  
     1630   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1631   2  
     1632   2        do j = 1 to INN_SIZE;
     1633   3  
     1634   3           /*******************************************************/
     1635   3           /* The following assignments are semantically the same */
     1636   3           /* and should produce IDENTICAL code.                  */
     1637   3           /*******************************************************/
     1638   3  
     1639   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1640   3           a_element(i)(j)                = 1;
     1641   3           auto_structure(i).a_element(j) = 1;
     1642   3           auto_structure.a_element(i,j)  = 1;
     1643   3           auto_structure.a_element(i)(j) = 1;     
     1644   3  
     1645   3        end;
     1646   2  
     1647   2     end;
     1648   1  
     1649   1     if I ^= MAX_SIZE + 1 then
     1650   1        do;
     1651   2        put skip (one) list ('Loop termination error 4');
     1652   2        end;
     1653   1  
     1654   1     put skip(one) list('Loop 4 ended fine.');
     1655   1  
     1656   1     /****************************************************************/
     1657   1     /* This test ensures that the above code works when executed in */
     1658   1     /* a nested procedure.                                          */
     1659   1     /****************************************************************/
     1660   1  
     1661   1     put skip (one) list ('Im about to call the internal procedure now');
     1662   1  
     1663   1     call run_inner_proc;
     1664   1  
     1665   1   one = 1;
     1666   1  
     1667   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1668   2  
     1669   2        do J = 1 to INN_SIZE;
     1670   3  
     1671   3           /*******************************************************/
     1672   3           /* The following assignments are semantically the same */
     1673   3           /* and should produce IDENTICAL code.                  */
     1674   3           /*******************************************************/
     1675   3  
     1676   3           s_element(I,J)                   = 1;
     1677   3           s_element(I)(J)                  = 1;
     1678   3           static_structure(I).s_element(J) = 1;
     1679   3           static_structure.s_element(I,J)  = 1;
     1680   3           static_structure.s_element(I)(J) = 1;     
     1681   3  
     1682   3        end;
     1683   2  
     1684   2     end;
     1685   1  
     1686   1     if I ^= MAX_SIZE + 1 then
     1687   1        do;
     1688   2        put skip (one) list ('Loop termination error 1');
     1689   2        end;
     1690   1  
     1691   1     put skip(one) list('Loop 1 ended fine.');
     1692   1  
     1693   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1694   2  
     1695   2        do j = 1 to INN_SIZE;
     1696   3  
     1697   3           /*******************************************************/
     1698   3           /* The following assignments are semantically the same */
     1699   3           /* and should produce IDENTICAL code.                  */
     1700   3           /*******************************************************/
     1701   3  
     1702   3           s_element(i,j)                   = 1;
     1703   3           s_element(i)(j)                  = 1;
     1704   3           static_structure(i).s_element(j) = 1;
     1705   3           static_structure.s_element(i,j)  = 1;
     1706   3           static_structure.s_element(i)(j) = 1;     
     1707   3  
     1708   3        end;
     1709   2  
     1710   2     end;
     1711   1  
     1712   1     if I ^= MAX_SIZE + 1 then
     1713   1        do;
     1714   2        put skip (one) list ('Loop termination error 2');
     1715   2        end;
     1716   1  
     1717   1     put skip(one) list('Loop 2 ended fine.');
     1718   1  
     1719   1  
     1720   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1721   2  
     1722   2        do J = 1 to INN_SIZE;
     1723   3  
     1724   3           /*******************************************************/
     1725   3           /* The following assignments are semantically the same */
     1726   3           /* and should produce IDENTICAL code.                  */
     1727   3           /*******************************************************/
     1728   3  
     1729   3           a_element(I,J)                 = 1;
     1730   3           a_element(I)(J)                = 1;
     1731   3           auto_structure(I).a_element(J) = 1;
     1732   3           auto_structure.a_element(I,J)  = 1;
     1733   3           auto_structure.a_element(I)(J) = 1;     
     1734   3  
     1735   3        end;
     1736   2  
     1737   2     end;
     1738   1  
     1739   1     if I ^= MAX_SIZE + 1 then
     1740   1        do;
     1741   2        put skip (one) list ('Loop termination error 3');
     1742   2        end;
     1743   1  
     1744   1     put skip(one) list('Loop 3 ended fine.');
     1745   1  
     1746   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1747   2  
     1748   2        do j = 1 to INN_SIZE;
     1749   3  
     1750   3           /*******************************************************/
     1751   3           /* The following assignments are semantically the same */
     1752   3           /* and should produce IDENTICAL code.                  */
     1753   3           /*******************************************************/
     1754   3  
     1755   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1756   3           a_element(i)(j)                = 1;
     1757   3           auto_structure(i).a_element(j) = 1;
     1758   3           auto_structure.a_element(i,j)  = 1;
     1759   3           auto_structure.a_element(i)(j) = 1;     
     1760   3  
     1761   3        end;
     1762   2  
     1763   2     end;
     1764   1  
     1765   1     if I ^= MAX_SIZE + 1 then
     1766   1        do;
     1767   2        put skip (one) list ('Loop termination error 4');
     1768   2        end;
     1769   1  
     1770   1     put skip(one) list('Loop 4 ended fine.');
     1771   1  
     1772   1     /****************************************************************/
     1773   1     /* This test ensures that the above code works when executed in */
     1774   1     /* a nested procedure.                                          */
     1775   1     /****************************************************************/
     1776   1  
     1777   1     put skip (one) list ('Im about to call the internal procedure now');
     1778   1  
     1779   1     call run_inner_proc;
     1780   1  
     1781   1   one = 1;
     1782   1  
     1783   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1784   2  
     1785   2        do J = 1 to INN_SIZE;
     1786   3  
     1787   3           /*******************************************************/
     1788   3           /* The following assignments are semantically the same */
     1789   3           /* and should produce IDENTICAL code.                  */
     1790   3           /*******************************************************/
     1791   3  
     1792   3           s_element(I,J)                   = 1;
     1793   3           s_element(I)(J)                  = 1;
     1794   3           static_structure(I).s_element(J) = 1;
     1795   3           static_structure.s_element(I,J)  = 1;
     1796   3           static_structure.s_element(I)(J) = 1;     
     1797   3  
     1798   3        end;
     1799   2  
     1800   2     end;
     1801   1  
     1802   1     if I ^= MAX_SIZE + 1 then
     1803   1        do;
     1804   2        put skip (one) list ('Loop termination error 1');
     1805   2        end;
     1806   1  
     1807   1     put skip(one) list('Loop 1 ended fine.');
     1808   1  
     1809   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1810   2  
     1811   2        do j = 1 to INN_SIZE;
     1812   3  
     1813   3           /*******************************************************/
     1814   3           /* The following assignments are semantically the same */
     1815   3           /* and should produce IDENTICAL code.                  */
     1816   3           /*******************************************************/
     1817   3  
     1818   3           s_element(i,j)                   = 1;
     1819   3           s_element(i)(j)                  = 1;
     1820   3           static_structure(i).s_element(j) = 1;
     1821   3           static_structure.s_element(i,j)  = 1;
     1822   3           static_structure.s_element(i)(j) = 1;     
     1823   3  
     1824   3        end;
     1825   2  
     1826   2     end;
     1827   1  
     1828   1     if I ^= MAX_SIZE + 1 then
     1829   1        do;
     1830   2        put skip (one) list ('Loop termination error 2');
     1831   2        end;
     1832   1  
     1833   1     put skip(one) list('Loop 2 ended fine.');
     1834   1  
     1835   1  
     1836   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1837   2  
     1838   2        do J = 1 to INN_SIZE;
     1839   3  
     1840   3           /*******************************************************/
     1841   3           /* The following assignments are semantically the same */
     1842   3           /* and should produce IDENTICAL code.                  */
     1843   3           /*******************************************************/
     1844   3  
     1845   3           a_element(I,J)                 = 1;
     1846   3           a_element(I)(J)                = 1;
     1847   3           auto_structure(I).a_element(J) = 1;
     1848   3           auto_structure.a_element(I,J)  = 1;
     1849   3           auto_structure.a_element(I)(J) = 1;     
     1850   3  
     1851   3        end;
     1852   2  
     1853   2     end;
     1854   1  
     1855   1     if I ^= MAX_SIZE + 1 then
     1856   1        do;
     1857   2        put skip (one) list ('Loop termination error 3');
     1858   2        end;
     1859   1  
     1860   1     put skip(one) list('Loop 3 ended fine.');
     1861   1  
     1862   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1863   2  
     1864   2        do j = 1 to INN_SIZE;
     1865   3  
     1866   3           /*******************************************************/
     1867   3           /* The following assignments are semantically the same */
     1868   3           /* and should produce IDENTICAL code.                  */
     1869   3           /*******************************************************/
     1870   3  
     1871   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1872   3           a_element(i)(j)                = 1;
     1873   3           auto_structure(i).a_element(j) = 1;
     1874   3           auto_structure.a_element(i,j)  = 1;
     1875   3           auto_structure.a_element(i)(j) = 1;     
     1876   3  
     1877   3        end;
     1878   2  
     1879   2     end;
     1880   1  
     1881   1     if I ^= MAX_SIZE + 1 then
     1882   1        do;
     1883   2        put skip (one) list ('Loop termination error 4');
     1884   2        end;
     1885   1  
     1886   1     put skip(one) list('Loop 4 ended fine.');
     1887   1  
     1888   1     /****************************************************************/
     1889   1     /* This test ensures that the above code works when executed in */
     1890   1     /* a nested procedure.                                          */
     1891   1     /****************************************************************/
     1892   1  
     1893   1     put skip (one) list ('Im about to call the internal procedure now');
     1894   1  
     1895   1     call run_inner_proc;
     1896   1  
     1897   1   one = 1;
     1898   1  
     1899   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     1900   2  
     1901   2        do J = 1 to INN_SIZE;
     1902   3  
     1903   3           /*******************************************************/
     1904   3           /* The following assignments are semantically the same */
     1905   3           /* and should produce IDENTICAL code.                  */
     1906   3           /*******************************************************/
     1907   3  
     1908   3           s_element(I,J)                   = 1;
     1909   3           s_element(I)(J)                  = 1;
     1910   3           static_structure(I).s_element(J) = 1;
     1911   3           static_structure.s_element(I,J)  = 1;
     1912   3           static_structure.s_element(I)(J) = 1;     
     1913   3  
     1914   3        end;
     1915   2  
     1916   2     end;
     1917   1  
     1918   1     if I ^= MAX_SIZE + 1 then
     1919   1        do;
     1920   2        put skip (one) list ('Loop termination error 1');
     1921   2        end;
     1922   1  
     1923   1     put skip(one) list('Loop 1 ended fine.');
     1924   1  
     1925   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     1926   2  
     1927   2        do j = 1 to INN_SIZE;
     1928   3  
     1929   3           /*******************************************************/
     1930   3           /* The following assignments are semantically the same */
     1931   3           /* and should produce IDENTICAL code.                  */
     1932   3           /*******************************************************/
     1933   3  
     1934   3           s_element(i,j)                   = 1;
     1935   3           s_element(i)(j)                  = 1;
     1936   3           static_structure(i).s_element(j) = 1;
     1937   3           static_structure.s_element(i,j)  = 1;
     1938   3           static_structure.s_element(i)(j) = 1;     
     1939   3  
     1940   3        end;
     1941   2  
     1942   2     end;
     1943   1  
     1944   1     if I ^= MAX_SIZE + 1 then
     1945   1        do;
     1946   2        put skip (one) list ('Loop termination error 2');
     1947   2        end;
     1948   1  
     1949   1     put skip(one) list('Loop 2 ended fine.');
     1950   1  
     1951   1  
     1952   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     1953   2  
     1954   2        do J = 1 to INN_SIZE;
     1955   3  
     1956   3           /*******************************************************/
     1957   3           /* The following assignments are semantically the same */
     1958   3           /* and should produce IDENTICAL code.                  */
     1959   3           /*******************************************************/
     1960   3  
     1961   3           a_element(I,J)                 = 1;
     1962   3           a_element(I)(J)                = 1;
     1963   3           auto_structure(I).a_element(J) = 1;
     1964   3           auto_structure.a_element(I,J)  = 1;
     1965   3           auto_structure.a_element(I)(J) = 1;     
     1966   3  
     1967   3        end;
     1968   2  
     1969   2     end;
     1970   1  
     1971   1     if I ^= MAX_SIZE + 1 then
     1972   1        do;
     1973   2        put skip (one) list ('Loop termination error 3');
     1974   2        end;
     1975   1  
     1976   1     put skip(one) list('Loop 3 ended fine.');
     1977   1  
     1978   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     1979   2  
     1980   2        do j = 1 to INN_SIZE;
     1981   3  
     1982   3           /*******************************************************/
     1983   3           /* The following assignments are semantically the same */
     1984   3           /* and should produce IDENTICAL code.                  */
     1985   3           /*******************************************************/
     1986   3  
     1987   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     1988   3           a_element(i)(j)                = 1;
     1989   3           auto_structure(i).a_element(j) = 1;
     1990   3           auto_structure.a_element(i,j)  = 1;
     1991   3           auto_structure.a_element(i)(j) = 1;     
     1992   3  
     1993   3        end;
     1994   2  
     1995   2     end;
     1996   1  
     1997   1     if I ^= MAX_SIZE + 1 then
     1998   1        do;
     1999   2        put skip (one) list ('Loop termination error 4');
     2000   2        end;
     2001   1  
     2002   1     put skip(one) list('Loop 4 ended fine.');
     2003   1  
     2004   1     /****************************************************************/
     2005   1     /* This test ensures that the above code works when executed in */
     2006   1     /* a nested procedure.                                          */
     2007   1     /****************************************************************/
     2008   1  
     2009   1     put skip (one) list ('Im about to call the internal procedure now');
     2010   1  
     2011   1     call run_inner_proc;
     2012   1  
     2013   1   one = 1;
     2014   1  
     2015   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2016   2  
     2017   2        do J = 1 to INN_SIZE;
     2018   3  
     2019   3           /*******************************************************/
     2020   3           /* The following assignments are semantically the same */
     2021   3           /* and should produce IDENTICAL code.                  */
     2022   3           /*******************************************************/
     2023   3  
     2024   3           s_element(I,J)                   = 1;
     2025   3           s_element(I)(J)                  = 1;
     2026   3           static_structure(I).s_element(J) = 1;
     2027   3           static_structure.s_element(I,J)  = 1;
     2028   3           static_structure.s_element(I)(J) = 1;     
     2029   3  
     2030   3        end;
     2031   2  
     2032   2     end;
     2033   1  
     2034   1     if I ^= MAX_SIZE + 1 then
     2035   1        do;
     2036   2        put skip (one) list ('Loop termination error 1');
     2037   2        end;
     2038   1  
     2039   1     put skip(one) list('Loop 1 ended fine.');
     2040   1  
     2041   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2042   2  
     2043   2        do j = 1 to INN_SIZE;
     2044   3  
     2045   3           /*******************************************************/
     2046   3           /* The following assignments are semantically the same */
     2047   3           /* and should produce IDENTICAL code.                  */
     2048   3           /*******************************************************/
     2049   3  
     2050   3           s_element(i,j)                   = 1;
     2051   3           s_element(i)(j)                  = 1;
     2052   3           static_structure(i).s_element(j) = 1;
     2053   3           static_structure.s_element(i,j)  = 1;
     2054   3           static_structure.s_element(i)(j) = 1;     
     2055   3  
     2056   3        end;
     2057   2  
     2058   2     end;
     2059   1  
     2060   1     if I ^= MAX_SIZE + 1 then
     2061   1        do;
     2062   2        put skip (one) list ('Loop termination error 2');
     2063   2        end;
     2064   1  
     2065   1     put skip(one) list('Loop 2 ended fine.');
     2066   1  
     2067   1  
     2068   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2069   2  
     2070   2        do J = 1 to INN_SIZE;
     2071   3  
     2072   3           /*******************************************************/
     2073   3           /* The following assignments are semantically the same */
     2074   3           /* and should produce IDENTICAL code.                  */
     2075   3           /*******************************************************/
     2076   3  
     2077   3           a_element(I,J)                 = 1;
     2078   3           a_element(I)(J)                = 1;
     2079   3           auto_structure(I).a_element(J) = 1;
     2080   3           auto_structure.a_element(I,J)  = 1;
     2081   3           auto_structure.a_element(I)(J) = 1;     
     2082   3  
     2083   3        end;
     2084   2  
     2085   2     end;
     2086   1  
     2087   1     if I ^= MAX_SIZE + 1 then
     2088   1        do;
     2089   2        put skip (one) list ('Loop termination error 3');
     2090   2        end;
     2091   1  
     2092   1     put skip(one) list('Loop 3 ended fine.');
     2093   1  
     2094   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2095   2  
     2096   2        do j = 1 to INN_SIZE;
     2097   3  
     2098   3           /*******************************************************/
     2099   3           /* The following assignments are semantically the same */
     2100   3           /* and should produce IDENTICAL code.                  */
     2101   3           /*******************************************************/
     2102   3  
     2103   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2104   3           a_element(i)(j)                = 1;
     2105   3           auto_structure(i).a_element(j) = 1;
     2106   3           auto_structure.a_element(i,j)  = 1;
     2107   3           auto_structure.a_element(i)(j) = 1;     
     2108   3  
     2109   3        end;
     2110   2  
     2111   2     end;
     2112   1  
     2113   1     if I ^= MAX_SIZE + 1 then
     2114   1        do;
     2115   2        put skip (one) list ('Loop termination error 4');
     2116   2        end;
     2117   1  
     2118   1     put skip(one) list('Loop 4 ended fine.');
     2119   1  
     2120   1     /****************************************************************/
     2121   1     /* This test ensures that the above code works when executed in */
     2122   1     /* a nested procedure.                                          */
     2123   1     /****************************************************************/
     2124   1  
     2125   1     put skip (one) list ('Im about to call the internal procedure now');
     2126   1  
     2127   1     call run_inner_proc;
     2128   1  
     2129   1   one = 1;
     2130   1  
     2131   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2132   2  
     2133   2        do J = 1 to INN_SIZE;
     2134   3  
     2135   3           /*******************************************************/
     2136   3           /* The following assignments are semantically the same */
     2137   3           /* and should produce IDENTICAL code.                  */
     2138   3           /*******************************************************/
     2139   3  
     2140   3           s_element(I,J)                   = 1;
     2141   3           s_element(I)(J)                  = 1;
     2142   3           static_structure(I).s_element(J) = 1;
     2143   3           static_structure.s_element(I,J)  = 1;
     2144   3           static_structure.s_element(I)(J) = 1;     
     2145   3  
     2146   3        end;
     2147   2  
     2148   2     end;
     2149   1  
     2150   1     if I ^= MAX_SIZE + 1 then
     2151   1        do;
     2152   2        put skip (one) list ('Loop termination error 1');
     2153   2        end;
     2154   1  
     2155   1     put skip(one) list('Loop 1 ended fine.');
     2156   1  
     2157   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2158   2  
     2159   2        do j = 1 to INN_SIZE;
     2160   3  
     2161   3           /*******************************************************/
     2162   3           /* The following assignments are semantically the same */
     2163   3           /* and should produce IDENTICAL code.                  */
     2164   3           /*******************************************************/
     2165   3  
     2166   3           s_element(i,j)                   = 1;
     2167   3           s_element(i)(j)                  = 1;
     2168   3           static_structure(i).s_element(j) = 1;
     2169   3           static_structure.s_element(i,j)  = 1;
     2170   3           static_structure.s_element(i)(j) = 1;     
     2171   3  
     2172   3        end;
     2173   2  
     2174   2     end;
     2175   1  
     2176   1     if I ^= MAX_SIZE + 1 then
     2177   1        do;
     2178   2        put skip (one) list ('Loop termination error 2');
     2179   2        end;
     2180   1  
     2181   1     put skip(one) list('Loop 2 ended fine.');
     2182   1  
     2183   1  
     2184   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2185   2  
     2186   2        do J = 1 to INN_SIZE;
     2187   3  
     2188   3           /*******************************************************/
     2189   3           /* The following assignments are semantically the same */
     2190   3           /* and should produce IDENTICAL code.                  */
     2191   3           /*******************************************************/
     2192   3  
     2193   3           a_element(I,J)                 = 1;
     2194   3           a_element(I)(J)                = 1;
     2195   3           auto_structure(I).a_element(J) = 1;
     2196   3           auto_structure.a_element(I,J)  = 1;
     2197   3           auto_structure.a_element(I)(J) = 1;     
     2198   3  
     2199   3        end;
     2200   2  
     2201   2     end;
     2202   1  
     2203   1     if I ^= MAX_SIZE + 1 then
     2204   1        do;
     2205   2        put skip (one) list ('Loop termination error 3');
     2206   2        end;
     2207   1  
     2208   1     put skip(one) list('Loop 3 ended fine.');
     2209   1  
     2210   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2211   2  
     2212   2        do j = 1 to INN_SIZE;
     2213   3  
     2214   3           /*******************************************************/
     2215   3           /* The following assignments are semantically the same */
     2216   3           /* and should produce IDENTICAL code.                  */
     2217   3           /*******************************************************/
     2218   3  
     2219   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2220   3           a_element(i)(j)                = 1;
     2221   3           auto_structure(i).a_element(j) = 1;
     2222   3           auto_structure.a_element(i,j)  = 1;
     2223   3           auto_structure.a_element(i)(j) = 1;     
     2224   3  
     2225   3        end;
     2226   2  
     2227   2     end;
     2228   1  
     2229   1     if I ^= MAX_SIZE + 1 then
     2230   1        do;
     2231   2        put skip (one) list ('Loop termination error 4');
     2232   2        end;
     2233   1  
     2234   1     put skip(one) list('Loop 4 ended fine.');
     2235   1  
     2236   1     /****************************************************************/
     2237   1     /* This test ensures that the above code works when executed in */
     2238   1     /* a nested procedure.                                          */
     2239   1     /****************************************************************/
     2240   1  
     2241   1     put skip (one) list ('Im about to call the internal procedure now');
     2242   1  
     2243   1     call run_inner_proc;
     2244   1  
     2245   1   one = 1;
     2246   1  
     2247   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2248   2  
     2249   2        do J = 1 to INN_SIZE;
     2250   3  
     2251   3           /*******************************************************/
     2252   3           /* The following assignments are semantically the same */
     2253   3           /* and should produce IDENTICAL code.                  */
     2254   3           /*******************************************************/
     2255   3  
     2256   3           s_element(I,J)                   = 1;
     2257   3           s_element(I)(J)                  = 1;
     2258   3           static_structure(I).s_element(J) = 1;
     2259   3           static_structure.s_element(I,J)  = 1;
     2260   3           static_structure.s_element(I)(J) = 1;     
     2261   3  
     2262   3        end;
     2263   2  
     2264   2     end;
     2265   1  
     2266   1     if I ^= MAX_SIZE + 1 then
     2267   1        do;
     2268   2        put skip (one) list ('Loop termination error 1');
     2269   2        end;
     2270   1  
     2271   1     put skip(one) list('Loop 1 ended fine.');
     2272   1  
     2273   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2274   2  
     2275   2        do j = 1 to INN_SIZE;
     2276   3  
     2277   3           /*******************************************************/
     2278   3           /* The following assignments are semantically the same */
     2279   3           /* and should produce IDENTICAL code.                  */
     2280   3           /*******************************************************/
     2281   3  
     2282   3           s_element(i,j)                   = 1;
     2283   3           s_element(i)(j)                  = 1;
     2284   3           static_structure(i).s_element(j) = 1;
     2285   3           static_structure.s_element(i,j)  = 1;
     2286   3           static_structure.s_element(i)(j) = 1;     
     2287   3  
     2288   3        end;
     2289   2  
     2290   2     end;
     2291   1  
     2292   1     if I ^= MAX_SIZE + 1 then
     2293   1        do;
     2294   2        put skip (one) list ('Loop termination error 2');
     2295   2        end;
     2296   1  
     2297   1     put skip(one) list('Loop 2 ended fine.');
     2298   1  
     2299   1  
     2300   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2301   2  
     2302   2        do J = 1 to INN_SIZE;
     2303   3  
     2304   3           /*******************************************************/
     2305   3           /* The following assignments are semantically the same */
     2306   3           /* and should produce IDENTICAL code.                  */
     2307   3           /*******************************************************/
     2308   3  
     2309   3           a_element(I,J)                 = 1;
     2310   3           a_element(I)(J)                = 1;
     2311   3           auto_structure(I).a_element(J) = 1;
     2312   3           auto_structure.a_element(I,J)  = 1;
     2313   3           auto_structure.a_element(I)(J) = 1;     
     2314   3  
     2315   3        end;
     2316   2  
     2317   2     end;
     2318   1  
     2319   1     if I ^= MAX_SIZE + 1 then
     2320   1        do;
     2321   2        put skip (one) list ('Loop termination error 3');
     2322   2        end;
     2323   1  
     2324   1     put skip(one) list('Loop 3 ended fine.');
     2325   1  
     2326   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2327   2  
     2328   2        do j = 1 to INN_SIZE;
     2329   3  
     2330   3           /*******************************************************/
     2331   3           /* The following assignments are semantically the same */
     2332   3           /* and should produce IDENTICAL code.                  */
     2333   3           /*******************************************************/
     2334   3  
     2335   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2336   3           a_element(i)(j)                = 1;
     2337   3           auto_structure(i).a_element(j) = 1;
     2338   3           auto_structure.a_element(i,j)  = 1;
     2339   3           auto_structure.a_element(i)(j) = 1;     
     2340   3  
     2341   3        end;
     2342   2  
     2343   2     end;
     2344   1  
     2345   1     if I ^= MAX_SIZE + 1 then
     2346   1        do;
     2347   2        put skip (one) list ('Loop termination error 4');
     2348   2        end;
     2349   1  
     2350   1     put skip(one) list('Loop 4 ended fine.');
     2351   1  
     2352   1     /****************************************************************/
     2353   1     /* This test ensures that the above code works when executed in */
     2354   1     /* a nested procedure.                                          */
     2355   1     /****************************************************************/
     2356   1  
     2357   1     put skip (one) list ('Im about to call the internal procedure now');
     2358   1  
     2359   1     call run_inner_proc;
     2360   1  
     2361   1   one = 1;
     2362   1  
     2363   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2364   2  
     2365   2        do J = 1 to INN_SIZE;
     2366   3  
     2367   3           /*******************************************************/
     2368   3           /* The following assignments are semantically the same */
     2369   3           /* and should produce IDENTICAL code.                  */
     2370   3           /*******************************************************/
     2371   3  
     2372   3           s_element(I,J)                   = 1;
     2373   3           s_element(I)(J)                  = 1;
     2374   3           static_structure(I).s_element(J) = 1;
     2375   3           static_structure.s_element(I,J)  = 1;
     2376   3           static_structure.s_element(I)(J) = 1;     
     2377   3  
     2378   3        end;
     2379   2  
     2380   2     end;
     2381   1  
     2382   1     if I ^= MAX_SIZE + 1 then
     2383   1        do;
     2384   2        put skip (one) list ('Loop termination error 1');
     2385   2        end;
     2386   1  
     2387   1     put skip(one) list('Loop 1 ended fine.');
     2388   1  
     2389   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2390   2  
     2391   2        do j = 1 to INN_SIZE;
     2392   3  
     2393   3           /*******************************************************/
     2394   3           /* The following assignments are semantically the same */
     2395   3           /* and should produce IDENTICAL code.                  */
     2396   3           /*******************************************************/
     2397   3  
     2398   3           s_element(i,j)                   = 1;
     2399   3           s_element(i)(j)                  = 1;
     2400   3           static_structure(i).s_element(j) = 1;
     2401   3           static_structure.s_element(i,j)  = 1;
     2402   3           static_structure.s_element(i)(j) = 1;     
     2403   3  
     2404   3        end;
     2405   2  
     2406   2     end;
     2407   1  
     2408   1     if I ^= MAX_SIZE + 1 then
     2409   1        do;
     2410   2        put skip (one) list ('Loop termination error 2');
     2411   2        end;
     2412   1  
     2413   1     put skip(one) list('Loop 2 ended fine.');
     2414   1  
     2415   1  
     2416   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2417   2  
     2418   2        do J = 1 to INN_SIZE;
     2419   3  
     2420   3           /*******************************************************/
     2421   3           /* The following assignments are semantically the same */
     2422   3           /* and should produce IDENTICAL code.                  */
     2423   3           /*******************************************************/
     2424   3  
     2425   3           a_element(I,J)                 = 1;
     2426   3           a_element(I)(J)                = 1;
     2427   3           auto_structure(I).a_element(J) = 1;
     2428   3           auto_structure.a_element(I,J)  = 1;
     2429   3           auto_structure.a_element(I)(J) = 1;     
     2430   3  
     2431   3        end;
     2432   2  
     2433   2     end;
     2434   1  
     2435   1     if I ^= MAX_SIZE + 1 then
     2436   1        do;
     2437   2        put skip (one) list ('Loop termination error 3');
     2438   2        end;
     2439   1  
     2440   1     put skip(one) list('Loop 3 ended fine.');
     2441   1  
     2442   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2443   2  
     2444   2        do j = 1 to INN_SIZE;
     2445   3  
     2446   3           /*******************************************************/
     2447   3           /* The following assignments are semantically the same */
     2448   3           /* and should produce IDENTICAL code.                  */
     2449   3           /*******************************************************/
     2450   3  
     2451   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2452   3           a_element(i)(j)                = 1;
     2453   3           auto_structure(i).a_element(j) = 1;
     2454   3           auto_structure.a_element(i,j)  = 1;
     2455   3           auto_structure.a_element(i)(j) = 1;     
     2456   3  
     2457   3        end;
     2458   2  
     2459   2     end;
     2460   1  
     2461   1     if I ^= MAX_SIZE + 1 then
     2462   1        do;
     2463   2        put skip (one) list ('Loop termination error 4');
     2464   2        end;
     2465   1  
     2466   1     put skip(one) list('Loop 4 ended fine.');
     2467   1  
     2468   1     /****************************************************************/
     2469   1     /* This test ensures that the above code works when executed in */
     2470   1     /* a nested procedure.                                          */
     2471   1     /****************************************************************/
     2472   1  
     2473   1     put skip (one) list ('Im about to call the internal procedure now');
     2474   1  
     2475   1     call run_inner_proc;
     2476   1  
     2477   1   one = 1;
     2478   1  
     2479   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2480   2  
     2481   2        do J = 1 to INN_SIZE;
     2482   3  
     2483   3           /*******************************************************/
     2484   3           /* The following assignments are semantically the same */
     2485   3           /* and should produce IDENTICAL code.                  */
     2486   3           /*******************************************************/
     2487   3  
     2488   3           s_element(I,J)                   = 1;
     2489   3           s_element(I)(J)                  = 1;
     2490   3           static_structure(I).s_element(J) = 1;
     2491   3           static_structure.s_element(I,J)  = 1;
     2492   3           static_structure.s_element(I)(J) = 1;     
     2493   3  
     2494   3        end;
     2495   2  
     2496   2     end;
     2497   1  
     2498   1     if I ^= MAX_SIZE + 1 then
     2499   1        do;
     2500   2        put skip (one) list ('Loop termination error 1');
     2501   2        end;
     2502   1  
     2503   1     put skip(one) list('Loop 1 ended fine.');
     2504   1  
     2505   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2506   2  
     2507   2        do j = 1 to INN_SIZE;
     2508   3  
     2509   3           /*******************************************************/
     2510   3           /* The following assignments are semantically the same */
     2511   3           /* and should produce IDENTICAL code.                  */
     2512   3           /*******************************************************/
     2513   3  
     2514   3           s_element(i,j)                   = 1;
     2515   3           s_element(i)(j)                  = 1;
     2516   3           static_structure(i).s_element(j) = 1;
     2517   3           static_structure.s_element(i,j)  = 1;
     2518   3           static_structure.s_element(i)(j) = 1;     
     2519   3  
     2520   3        end;
     2521   2  
     2522   2     end;
     2523   1  
     2524   1     if I ^= MAX_SIZE + 1 then
     2525   1        do;
     2526   2        put skip (one) list ('Loop termination error 2');
     2527   2        end;
     2528   1  
     2529   1     put skip(one) list('Loop 2 ended fine.');
     2530   1  
     2531   1  
     2532   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2533   2  
     2534   2        do J = 1 to INN_SIZE;
     2535   3  
     2536   3           /*******************************************************/
     2537   3           /* The following assignments are semantically the same */
     2538   3           /* and should produce IDENTICAL code.                  */
     2539   3           /*******************************************************/
     2540   3  
     2541   3           a_element(I,J)                 = 1;
     2542   3           a_element(I)(J)                = 1;
     2543   3           auto_structure(I).a_element(J) = 1;
     2544   3           auto_structure.a_element(I,J)  = 1;
     2545   3           auto_structure.a_element(I)(J) = 1;     
     2546   3  
     2547   3        end;
     2548   2  
     2549   2     end;
     2550   1  
     2551   1     if I ^= MAX_SIZE + 1 then
     2552   1        do;
     2553   2        put skip (one) list ('Loop termination error 3');
     2554   2        end;
     2555   1  
     2556   1     put skip(one) list('Loop 3 ended fine.');
     2557   1  
     2558   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2559   2  
     2560   2        do j = 1 to INN_SIZE;
     2561   3  
     2562   3           /*******************************************************/
     2563   3           /* The following assignments are semantically the same */
     2564   3           /* and should produce IDENTICAL code.                  */
     2565   3           /*******************************************************/
     2566   3  
     2567   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2568   3           a_element(i)(j)                = 1;
     2569   3           auto_structure(i).a_element(j) = 1;
     2570   3           auto_structure.a_element(i,j)  = 1;
     2571   3           auto_structure.a_element(i)(j) = 1;     
     2572   3  
     2573   3        end;
     2574   2  
     2575   2     end;
     2576   1  
     2577   1     if I ^= MAX_SIZE + 1 then
     2578   1        do;
     2579   2        put skip (one) list ('Loop termination error 4');
     2580   2        end;
     2581   1  
     2582   1     put skip(one) list('Loop 4 ended fine.');
     2583   1  
     2584   1     /****************************************************************/
     2585   1     /* This test ensures that the above code works when executed in */
     2586   1     /* a nested procedure.                                          */
     2587   1     /****************************************************************/
     2588   1  
     2589   1     put skip (one) list ('Im about to call the internal procedure now');
     2590   1  
     2591   1     call run_inner_proc;
     2592   1  
     2593   1   one = 1;
     2594   1  
     2595   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2596   2  
     2597   2        do J = 1 to INN_SIZE;
     2598   3  
     2599   3           /*******************************************************/
     2600   3           /* The following assignments are semantically the same */
     2601   3           /* and should produce IDENTICAL code.                  */
     2602   3           /*******************************************************/
     2603   3  
     2604   3           s_element(I,J)                   = 1;
     2605   3           s_element(I)(J)                  = 1;
     2606   3           static_structure(I).s_element(J) = 1;
     2607   3           static_structure.s_element(I,J)  = 1;
     2608   3           static_structure.s_element(I)(J) = 1;     
     2609   3  
     2610   3        end;
     2611   2  
     2612   2     end;
     2613   1  
     2614   1     if I ^= MAX_SIZE + 1 then
     2615   1        do;
     2616   2        put skip (one) list ('Loop termination error 1');
     2617   2        end;
     2618   1  
     2619   1     put skip(one) list('Loop 1 ended fine.');
     2620   1  
     2621   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2622   2  
     2623   2        do j = 1 to INN_SIZE;
     2624   3  
     2625   3           /*******************************************************/
     2626   3           /* The following assignments are semantically the same */
     2627   3           /* and should produce IDENTICAL code.                  */
     2628   3           /*******************************************************/
     2629   3  
     2630   3           s_element(i,j)                   = 1;
     2631   3           s_element(i)(j)                  = 1;
     2632   3           static_structure(i).s_element(j) = 1;
     2633   3           static_structure.s_element(i,j)  = 1;
     2634   3           static_structure.s_element(i)(j) = 1;     
     2635   3  
     2636   3        end;
     2637   2  
     2638   2     end;
     2639   1  
     2640   1     if I ^= MAX_SIZE + 1 then
     2641   1        do;
     2642   2        put skip (one) list ('Loop termination error 2');
     2643   2        end;
     2644   1  
     2645   1     put skip(one) list('Loop 2 ended fine.');
     2646   1  
     2647   1  
     2648   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2649   2  
     2650   2        do J = 1 to INN_SIZE;
     2651   3  
     2652   3           /*******************************************************/
     2653   3           /* The following assignments are semantically the same */
     2654   3           /* and should produce IDENTICAL code.                  */
     2655   3           /*******************************************************/
     2656   3  
     2657   3           a_element(I,J)                 = 1;
     2658   3           a_element(I)(J)                = 1;
     2659   3           auto_structure(I).a_element(J) = 1;
     2660   3           auto_structure.a_element(I,J)  = 1;
     2661   3           auto_structure.a_element(I)(J) = 1;     
     2662   3  
     2663   3        end;
     2664   2  
     2665   2     end;
     2666   1  
     2667   1     if I ^= MAX_SIZE + 1 then
     2668   1        do;
     2669   2        put skip (one) list ('Loop termination error 3');
     2670   2        end;
     2671   1  
     2672   1     put skip(one) list('Loop 3 ended fine.');
     2673   1  
     2674   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2675   2  
     2676   2        do j = 1 to INN_SIZE;
     2677   3  
     2678   3           /*******************************************************/
     2679   3           /* The following assignments are semantically the same */
     2680   3           /* and should produce IDENTICAL code.                  */
     2681   3           /*******************************************************/
     2682   3  
     2683   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2684   3           a_element(i)(j)                = 1;
     2685   3           auto_structure(i).a_element(j) = 1;
     2686   3           auto_structure.a_element(i,j)  = 1;
     2687   3           auto_structure.a_element(i)(j) = 1;     
     2688   3  
     2689   3        end;
     2690   2  
     2691   2     end;
     2692   1  
     2693   1     if I ^= MAX_SIZE + 1 then
     2694   1        do;
     2695   2        put skip (one) list ('Loop termination error 4');
     2696   2        end;
     2697   1  
     2698   1     put skip(one) list('Loop 4 ended fine.');
     2699   1  
     2700   1     /****************************************************************/
     2701   1     /* This test ensures that the above code works when executed in */
     2702   1     /* a nested procedure.                                          */
     2703   1     /****************************************************************/
     2704   1  
     2705   1     put skip (one) list ('Im about to call the internal procedure now');
     2706   1  
     2707   1     call run_inner_proc;
     2708   1  
     2709   1   one = 1;
     2710   1  
     2711   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2712   2  
     2713   2        do J = 1 to INN_SIZE;
     2714   3  
     2715   3           /*******************************************************/
     2716   3           /* The following assignments are semantically the same */
     2717   3           /* and should produce IDENTICAL code.                  */
     2718   3           /*******************************************************/
     2719   3  
     2720   3           s_element(I,J)                   = 1;
     2721   3           s_element(I)(J)                  = 1;
     2722   3           static_structure(I).s_element(J) = 1;
     2723   3           static_structure.s_element(I,J)  = 1;
     2724   3           static_structure.s_element(I)(J) = 1;     
     2725   3  
     2726   3        end;
     2727   2  
     2728   2     end;
     2729   1  
     2730   1     if I ^= MAX_SIZE + 1 then
     2731   1        do;
     2732   2        put skip (one) list ('Loop termination error 1');
     2733   2        end;
     2734   1  
     2735   1     put skip(one) list('Loop 1 ended fine.');
     2736   1  
     2737   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2738   2  
     2739   2        do j = 1 to INN_SIZE;
     2740   3  
     2741   3           /*******************************************************/
     2742   3           /* The following assignments are semantically the same */
     2743   3           /* and should produce IDENTICAL code.                  */
     2744   3           /*******************************************************/
     2745   3  
     2746   3           s_element(i,j)                   = 1;
     2747   3           s_element(i)(j)                  = 1;
     2748   3           static_structure(i).s_element(j) = 1;
     2749   3           static_structure.s_element(i,j)  = 1;
     2750   3           static_structure.s_element(i)(j) = 1;     
     2751   3  
     2752   3        end;
     2753   2  
     2754   2     end;
     2755   1  
     2756   1     if I ^= MAX_SIZE + 1 then
     2757   1        do;
     2758   2        put skip (one) list ('Loop termination error 2');
     2759   2        end;
     2760   1  
     2761   1     put skip(one) list('Loop 2 ended fine.');
     2762   1  
     2763   1  
     2764   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2765   2  
     2766   2        do J = 1 to INN_SIZE;
     2767   3  
     2768   3           /*******************************************************/
     2769   3           /* The following assignments are semantically the same */
     2770   3           /* and should produce IDENTICAL code.                  */
     2771   3           /*******************************************************/
     2772   3  
     2773   3           a_element(I,J)                 = 1;
     2774   3           a_element(I)(J)                = 1;
     2775   3           auto_structure(I).a_element(J) = 1;
     2776   3           auto_structure.a_element(I,J)  = 1;
     2777   3           auto_structure.a_element(I)(J) = 1;     
     2778   3  
     2779   3        end;
     2780   2  
     2781   2     end;
     2782   1  
     2783   1     if I ^= MAX_SIZE + 1 then
     2784   1        do;
     2785   2        put skip (one) list ('Loop termination error 3');
     2786   2        end;
     2787   1  
     2788   1     put skip(one) list('Loop 3 ended fine.');
     2789   1  
     2790   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2791   2  
     2792   2        do j = 1 to INN_SIZE;
     2793   3  
     2794   3           /*******************************************************/
     2795   3           /* The following assignments are semantically the same */
     2796   3           /* and should produce IDENTICAL code.                  */
     2797   3           /*******************************************************/
     2798   3  
     2799   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2800   3           a_element(i)(j)                = 1;
     2801   3           auto_structure(i).a_element(j) = 1;
     2802   3           auto_structure.a_element(i,j)  = 1;
     2803   3           auto_structure.a_element(i)(j) = 1;     
     2804   3  
     2805   3        end;
     2806   2  
     2807   2     end;
     2808   1  
     2809   1     if I ^= MAX_SIZE + 1 then
     2810   1        do;
     2811   2        put skip (one) list ('Loop termination error 4');
     2812   2        end;
     2813   1  
     2814   1     put skip(one) list('Loop 4 ended fine.');
     2815   1  
     2816   1     /****************************************************************/
     2817   1     /* This test ensures that the above code works when executed in */
     2818   1     /* a nested procedure.                                          */
     2819   1     /****************************************************************/
     2820   1  
     2821   1     put skip (one) list ('Im about to call the internal procedure now');
     2822   1  
     2823   1     call run_inner_proc;
     2824   1  
     2825   1   one = 1;
     2826   1  
     2827   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2828   2  
     2829   2        do J = 1 to INN_SIZE;
     2830   3  
     2831   3           /*******************************************************/
     2832   3           /* The following assignments are semantically the same */
     2833   3           /* and should produce IDENTICAL code.                  */
     2834   3           /*******************************************************/
     2835   3  
     2836   3           s_element(I,J)                   = 1;
     2837   3           s_element(I)(J)                  = 1;
     2838   3           static_structure(I).s_element(J) = 1;
     2839   3           static_structure.s_element(I,J)  = 1;
     2840   3           static_structure.s_element(I)(J) = 1;     
     2841   3  
     2842   3        end;
     2843   2  
     2844   2     end;
     2845   1  
     2846   1     if I ^= MAX_SIZE + 1 then
     2847   1        do;
     2848   2        put skip (one) list ('Loop termination error 1');
     2849   2        end;
     2850   1  
     2851   1     put skip(one) list('Loop 1 ended fine.');
     2852   1  
     2853   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2854   2  
     2855   2        do j = 1 to INN_SIZE;
     2856   3  
     2857   3           /*******************************************************/
     2858   3           /* The following assignments are semantically the same */
     2859   3           /* and should produce IDENTICAL code.                  */
     2860   3           /*******************************************************/
     2861   3  
     2862   3           s_element(i,j)                   = 1;
     2863   3           s_element(i)(j)                  = 1;
     2864   3           static_structure(i).s_element(j) = 1;
     2865   3           static_structure.s_element(i,j)  = 1;
     2866   3           static_structure.s_element(i)(j) = 1;     
     2867   3  
     2868   3        end;
     2869   2  
     2870   2     end;
     2871   1  
     2872   1     if I ^= MAX_SIZE + 1 then
     2873   1        do;
     2874   2        put skip (one) list ('Loop termination error 2');
     2875   2        end;
     2876   1  
     2877   1     put skip(one) list('Loop 2 ended fine.');
     2878   1  
     2879   1  
     2880   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2881   2  
     2882   2        do J = 1 to INN_SIZE;
     2883   3  
     2884   3           /*******************************************************/
     2885   3           /* The following assignments are semantically the same */
     2886   3           /* and should produce IDENTICAL code.                  */
     2887   3           /*******************************************************/
     2888   3  
     2889   3           a_element(I,J)                 = 1;
     2890   3           a_element(I)(J)                = 1;
     2891   3           auto_structure(I).a_element(J) = 1;
     2892   3           auto_structure.a_element(I,J)  = 1;
     2893   3           auto_structure.a_element(I)(J) = 1;     
     2894   3  
     2895   3        end;
     2896   2  
     2897   2     end;
     2898   1  
     2899   1     if I ^= MAX_SIZE + 1 then
     2900   1        do;
     2901   2        put skip (one) list ('Loop termination error 3');
     2902   2        end;
     2903   1  
     2904   1     put skip(one) list('Loop 3 ended fine.');
     2905   1  
     2906   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     2907   2  
     2908   2        do j = 1 to INN_SIZE;
     2909   3  
     2910   3           /*******************************************************/
     2911   3           /* The following assignments are semantically the same */
     2912   3           /* and should produce IDENTICAL code.                  */
     2913   3           /*******************************************************/
     2914   3  
     2915   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     2916   3           a_element(i)(j)                = 1;
     2917   3           auto_structure(i).a_element(j) = 1;
     2918   3           auto_structure.a_element(i,j)  = 1;
     2919   3           auto_structure.a_element(i)(j) = 1;     
     2920   3  
     2921   3        end;
     2922   2  
     2923   2     end;
     2924   1  
     2925   1     if I ^= MAX_SIZE + 1 then
     2926   1        do;
     2927   2        put skip (one) list ('Loop termination error 4');
     2928   2        end;
     2929   1  
     2930   1     put skip(one) list('Loop 4 ended fine.');
     2931   1  
     2932   1     /****************************************************************/
     2933   1     /* This test ensures that the above code works when executed in */
     2934   1     /* a nested procedure.                                          */
     2935   1     /****************************************************************/
     2936   1  
     2937   1     put skip (one) list ('Im about to call the internal procedure now');
     2938   1  
     2939   1     call run_inner_proc;
     2940   1  
     2941   1   one = 1;
     2942   1  
     2943   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     2944   2  
     2945   2        do J = 1 to INN_SIZE;
     2946   3  
     2947   3           /*******************************************************/
     2948   3           /* The following assignments are semantically the same */
     2949   3           /* and should produce IDENTICAL code.                  */
     2950   3           /*******************************************************/
     2951   3  
     2952   3           s_element(I,J)                   = 1;
     2953   3           s_element(I)(J)                  = 1;
     2954   3           static_structure(I).s_element(J) = 1;
     2955   3           static_structure.s_element(I,J)  = 1;
     2956   3           static_structure.s_element(I)(J) = 1;     
     2957   3  
     2958   3        end;
     2959   2  
     2960   2     end;
     2961   1  
     2962   1     if I ^= MAX_SIZE + 1 then
     2963   1        do;
     2964   2        put skip (one) list ('Loop termination error 1');
     2965   2        end;
     2966   1  
     2967   1     put skip(one) list('Loop 1 ended fine.');
     2968   1  
     2969   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     2970   2  
     2971   2        do j = 1 to INN_SIZE;
     2972   3  
     2973   3           /*******************************************************/
     2974   3           /* The following assignments are semantically the same */
     2975   3           /* and should produce IDENTICAL code.                  */
     2976   3           /*******************************************************/
     2977   3  
     2978   3           s_element(i,j)                   = 1;
     2979   3           s_element(i)(j)                  = 1;
     2980   3           static_structure(i).s_element(j) = 1;
     2981   3           static_structure.s_element(i,j)  = 1;
     2982   3           static_structure.s_element(i)(j) = 1;     
     2983   3  
     2984   3        end;
     2985   2  
     2986   2     end;
     2987   1  
     2988   1     if I ^= MAX_SIZE + 1 then
     2989   1        do;
     2990   2        put skip (one) list ('Loop termination error 2');
     2991   2        end;
     2992   1  
     2993   1     put skip(one) list('Loop 2 ended fine.');
     2994   1  
     2995   1  
     2996   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     2997   2  
     2998   2        do J = 1 to INN_SIZE;
     2999   3  
     3000   3           /*******************************************************/
     3001   3           /* The following assignments are semantically the same */
     3002   3           /* and should produce IDENTICAL code.                  */
     3003   3           /*******************************************************/
     3004   3  
     3005   3           a_element(I,J)                 = 1;
     3006   3           a_element(I)(J)                = 1;
     3007   3           auto_structure(I).a_element(J) = 1;
     3008   3           auto_structure.a_element(I,J)  = 1;
     3009   3           auto_structure.a_element(I)(J) = 1;     
     3010   3  
     3011   3        end;
     3012   2  
     3013   2     end;
     3014   1  
     3015   1     if I ^= MAX_SIZE + 1 then
     3016   1        do;
     3017   2        put skip (one) list ('Loop termination error 3');
     3018   2        end;
     3019   1  
     3020   1     put skip(one) list('Loop 3 ended fine.');
     3021   1  
     3022   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3023   2  
     3024   2        do j = 1 to INN_SIZE;
     3025   3  
     3026   3           /*******************************************************/
     3027   3           /* The following assignments are semantically the same */
     3028   3           /* and should produce IDENTICAL code.                  */
     3029   3           /*******************************************************/
     3030   3  
     3031   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3032   3           a_element(i)(j)                = 1;
     3033   3           auto_structure(i).a_element(j) = 1;
     3034   3           auto_structure.a_element(i,j)  = 1;
     3035   3           auto_structure.a_element(i)(j) = 1;     
     3036   3  
     3037   3        end;
     3038   2  
     3039   2     end;
     3040   1  
     3041   1     if I ^= MAX_SIZE + 1 then
     3042   1        do;
     3043   2        put skip (one) list ('Loop termination error 4');
     3044   2        end;
     3045   1  
     3046   1     put skip(one) list('Loop 4 ended fine.');
     3047   1  
     3048   1     /****************************************************************/
     3049   1     /* This test ensures that the above code works when executed in */
     3050   1     /* a nested procedure.                                          */
     3051   1     /****************************************************************/
     3052   1  
     3053   1     put skip (one) list ('Im about to call the internal procedure now');
     3054   1  
     3055   1     call run_inner_proc;
     3056   1  
     3057   1   one = 1;
     3058   1  
     3059   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3060   2  
     3061   2        do J = 1 to INN_SIZE;
     3062   3  
     3063   3           /*******************************************************/
     3064   3           /* The following assignments are semantically the same */
     3065   3           /* and should produce IDENTICAL code.                  */
     3066   3           /*******************************************************/
     3067   3  
     3068   3           s_element(I,J)                   = 1;
     3069   3           s_element(I)(J)                  = 1;
     3070   3           static_structure(I).s_element(J) = 1;
     3071   3           static_structure.s_element(I,J)  = 1;
     3072   3           static_structure.s_element(I)(J) = 1;     
     3073   3  
     3074   3        end;
     3075   2  
     3076   2     end;
     3077   1  
     3078   1     if I ^= MAX_SIZE + 1 then
     3079   1        do;
     3080   2        put skip (one) list ('Loop termination error 1');
     3081   2        end;
     3082   1  
     3083   1     put skip(one) list('Loop 1 ended fine.');
     3084   1  
     3085   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3086   2  
     3087   2        do j = 1 to INN_SIZE;
     3088   3  
     3089   3           /*******************************************************/
     3090   3           /* The following assignments are semantically the same */
     3091   3           /* and should produce IDENTICAL code.                  */
     3092   3           /*******************************************************/
     3093   3  
     3094   3           s_element(i,j)                   = 1;
     3095   3           s_element(i)(j)                  = 1;
     3096   3           static_structure(i).s_element(j) = 1;
     3097   3           static_structure.s_element(i,j)  = 1;
     3098   3           static_structure.s_element(i)(j) = 1;     
     3099   3  
     3100   3        end;
     3101   2  
     3102   2     end;
     3103   1  
     3104   1     if I ^= MAX_SIZE + 1 then
     3105   1        do;
     3106   2        put skip (one) list ('Loop termination error 2');
     3107   2        end;
     3108   1  
     3109   1     put skip(one) list('Loop 2 ended fine.');
     3110   1  
     3111   1  
     3112   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3113   2  
     3114   2        do J = 1 to INN_SIZE;
     3115   3  
     3116   3           /*******************************************************/
     3117   3           /* The following assignments are semantically the same */
     3118   3           /* and should produce IDENTICAL code.                  */
     3119   3           /*******************************************************/
     3120   3  
     3121   3           a_element(I,J)                 = 1;
     3122   3           a_element(I)(J)                = 1;
     3123   3           auto_structure(I).a_element(J) = 1;
     3124   3           auto_structure.a_element(I,J)  = 1;
     3125   3           auto_structure.a_element(I)(J) = 1;     
     3126   3  
     3127   3        end;
     3128   2  
     3129   2     end;
     3130   1  
     3131   1     if I ^= MAX_SIZE + 1 then
     3132   1        do;
     3133   2        put skip (one) list ('Loop termination error 3');
     3134   2        end;
     3135   1  
     3136   1     put skip(one) list('Loop 3 ended fine.');
     3137   1  
     3138   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3139   2  
     3140   2        do j = 1 to INN_SIZE;
     3141   3  
     3142   3           /*******************************************************/
     3143   3           /* The following assignments are semantically the same */
     3144   3           /* and should produce IDENTICAL code.                  */
     3145   3           /*******************************************************/
     3146   3  
     3147   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3148   3           a_element(i)(j)                = 1;
     3149   3           auto_structure(i).a_element(j) = 1;
     3150   3           auto_structure.a_element(i,j)  = 1;
     3151   3           auto_structure.a_element(i)(j) = 1;     
     3152   3  
     3153   3        end;
     3154   2  
     3155   2     end;
     3156   1  
     3157   1     if I ^= MAX_SIZE + 1 then
     3158   1        do;
     3159   2        put skip (one) list ('Loop termination error 4');
     3160   2        end;
     3161   1  
     3162   1     put skip(one) list('Loop 4 ended fine.');
     3163   1  
     3164   1     /****************************************************************/
     3165   1     /* This test ensures that the above code works when executed in */
     3166   1     /* a nested procedure.                                          */
     3167   1     /****************************************************************/
     3168   1  
     3169   1     put skip (one) list ('Im about to call the internal procedure now');
     3170   1  
     3171   1     call run_inner_proc;
     3172   1  
     3173   1   one = 1;
     3174   1  
     3175   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3176   2  
     3177   2        do J = 1 to INN_SIZE;
     3178   3  
     3179   3           /*******************************************************/
     3180   3           /* The following assignments are semantically the same */
     3181   3           /* and should produce IDENTICAL code.                  */
     3182   3           /*******************************************************/
     3183   3  
     3184   3           s_element(I,J)                   = 1;
     3185   3           s_element(I)(J)                  = 1;
     3186   3           static_structure(I).s_element(J) = 1;
     3187   3           static_structure.s_element(I,J)  = 1;
     3188   3           static_structure.s_element(I)(J) = 1;     
     3189   3  
     3190   3        end;
     3191   2  
     3192   2     end;
     3193   1  
     3194   1     if I ^= MAX_SIZE + 1 then
     3195   1        do;
     3196   2        put skip (one) list ('Loop termination error 1');
     3197   2        end;
     3198   1  
     3199   1     put skip(one) list('Loop 1 ended fine.');
     3200   1  
     3201   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3202   2  
     3203   2        do j = 1 to INN_SIZE;
     3204   3  
     3205   3           /*******************************************************/
     3206   3           /* The following assignments are semantically the same */
     3207   3           /* and should produce IDENTICAL code.                  */
     3208   3           /*******************************************************/
     3209   3  
     3210   3           s_element(i,j)                   = 1;
     3211   3           s_element(i)(j)                  = 1;
     3212   3           static_structure(i).s_element(j) = 1;
     3213   3           static_structure.s_element(i,j)  = 1;
     3214   3           static_structure.s_element(i)(j) = 1;     
     3215   3  
     3216   3        end;
     3217   2  
     3218   2     end;
     3219   1  
     3220   1     if I ^= MAX_SIZE + 1 then
     3221   1        do;
     3222   2        put skip (one) list ('Loop termination error 2');
     3223   2        end;
     3224   1  
     3225   1     put skip(one) list('Loop 2 ended fine.');
     3226   1  
     3227   1  
     3228   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3229   2  
     3230   2        do J = 1 to INN_SIZE;
     3231   3  
     3232   3           /*******************************************************/
     3233   3           /* The following assignments are semantically the same */
     3234   3           /* and should produce IDENTICAL code.                  */
     3235   3           /*******************************************************/
     3236   3  
     3237   3           a_element(I,J)                 = 1;
     3238   3           a_element(I)(J)                = 1;
     3239   3           auto_structure(I).a_element(J) = 1;
     3240   3           auto_structure.a_element(I,J)  = 1;
     3241   3           auto_structure.a_element(I)(J) = 1;     
     3242   3  
     3243   3        end;
     3244   2  
     3245   2     end;
     3246   1  
     3247   1     if I ^= MAX_SIZE + 1 then
     3248   1        do;
     3249   2        put skip (one) list ('Loop termination error 3');
     3250   2        end;
     3251   1  
     3252   1     put skip(one) list('Loop 3 ended fine.');
     3253   1  
     3254   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3255   2  
     3256   2        do j = 1 to INN_SIZE;
     3257   3  
     3258   3           /*******************************************************/
     3259   3           /* The following assignments are semantically the same */
     3260   3           /* and should produce IDENTICAL code.                  */
     3261   3           /*******************************************************/
     3262   3  
     3263   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3264   3           a_element(i)(j)                = 1;
     3265   3           auto_structure(i).a_element(j) = 1;
     3266   3           auto_structure.a_element(i,j)  = 1;
     3267   3           auto_structure.a_element(i)(j) = 1;     
     3268   3  
     3269   3        end;
     3270   2  
     3271   2     end;
     3272   1  
     3273   1     if I ^= MAX_SIZE + 1 then
     3274   1        do;
     3275   2        put skip (one) list ('Loop termination error 4');
     3276   2        end;
     3277   1  
     3278   1     put skip(one) list('Loop 4 ended fine.');
     3279   1  
     3280   1     /****************************************************************/
     3281   1     /* This test ensures that the above code works when executed in */
     3282   1     /* a nested procedure.                                          */
     3283   1     /****************************************************************/
     3284   1  
     3285   1     put skip (one) list ('Im about to call the internal procedure now');
     3286   1  
     3287   1     call run_inner_proc;
     3288   1  
     3289   1   one = 1;
     3290   1  
     3291   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3292   2  
     3293   2        do J = 1 to INN_SIZE;
     3294   3  
     3295   3           /*******************************************************/
     3296   3           /* The following assignments are semantically the same */
     3297   3           /* and should produce IDENTICAL code.                  */
     3298   3           /*******************************************************/
     3299   3  
     3300   3           s_element(I,J)                   = 1;
     3301   3           s_element(I)(J)                  = 1;
     3302   3           static_structure(I).s_element(J) = 1;
     3303   3           static_structure.s_element(I,J)  = 1;
     3304   3           static_structure.s_element(I)(J) = 1;     
     3305   3  
     3306   3        end;
     3307   2  
     3308   2     end;
     3309   1  
     3310   1     if I ^= MAX_SIZE + 1 then
     3311   1        do;
     3312   2        put skip (one) list ('Loop termination error 1');
     3313   2        end;
     3314   1  
     3315   1     put skip(one) list('Loop 1 ended fine.');
     3316   1  
     3317   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3318   2  
     3319   2        do j = 1 to INN_SIZE;
     3320   3  
     3321   3           /*******************************************************/
     3322   3           /* The following assignments are semantically the same */
     3323   3           /* and should produce IDENTICAL code.                  */
     3324   3           /*******************************************************/
     3325   3  
     3326   3           s_element(i,j)                   = 1;
     3327   3           s_element(i)(j)                  = 1;
     3328   3           static_structure(i).s_element(j) = 1;
     3329   3           static_structure.s_element(i,j)  = 1;
     3330   3           static_structure.s_element(i)(j) = 1;     
     3331   3  
     3332   3        end;
     3333   2  
     3334   2     end;
     3335   1  
     3336   1     if I ^= MAX_SIZE + 1 then
     3337   1        do;
     3338   2        put skip (one) list ('Loop termination error 2');
     3339   2        end;
     3340   1  
     3341   1     put skip(one) list('Loop 2 ended fine.');
     3342   1  
     3343   1  
     3344   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3345   2  
     3346   2        do J = 1 to INN_SIZE;
     3347   3  
     3348   3           /*******************************************************/
     3349   3           /* The following assignments are semantically the same */
     3350   3           /* and should produce IDENTICAL code.                  */
     3351   3           /*******************************************************/
     3352   3  
     3353   3           a_element(I,J)                 = 1;
     3354   3           a_element(I)(J)                = 1;
     3355   3           auto_structure(I).a_element(J) = 1;
     3356   3           auto_structure.a_element(I,J)  = 1;
     3357   3           auto_structure.a_element(I)(J) = 1;     
     3358   3  
     3359   3        end;
     3360   2  
     3361   2     end;
     3362   1  
     3363   1     if I ^= MAX_SIZE + 1 then
     3364   1        do;
     3365   2        put skip (one) list ('Loop termination error 3');
     3366   2        end;
     3367   1  
     3368   1     put skip(one) list('Loop 3 ended fine.');
     3369   1  
     3370   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3371   2  
     3372   2        do j = 1 to INN_SIZE;
     3373   3  
     3374   3           /*******************************************************/
     3375   3           /* The following assignments are semantically the same */
     3376   3           /* and should produce IDENTICAL code.                  */
     3377   3           /*******************************************************/
     3378   3  
     3379   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3380   3           a_element(i)(j)                = 1;
     3381   3           auto_structure(i).a_element(j) = 1;
     3382   3           auto_structure.a_element(i,j)  = 1;
     3383   3           auto_structure.a_element(i)(j) = 1;     
     3384   3  
     3385   3        end;
     3386   2  
     3387   2     end;
     3388   1  
     3389   1     if I ^= MAX_SIZE + 1 then
     3390   1        do;
     3391   2        put skip (one) list ('Loop termination error 4');
     3392   2        end;
     3393   1  
     3394   1     put skip(one) list('Loop 4 ended fine.');
     3395   1  
     3396   1     /****************************************************************/
     3397   1     /* This test ensures that the above code works when executed in */
     3398   1     /* a nested procedure.                                          */
     3399   1     /****************************************************************/
     3400   1  
     3401   1     put skip (one) list ('Im about to call the internal procedure now');
     3402   1  
     3403   1     call run_inner_proc;
     3404   1  
     3405   1   one = 1;
     3406   1  
     3407   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3408   2  
     3409   2        do J = 1 to INN_SIZE;
     3410   3  
     3411   3           /*******************************************************/
     3412   3           /* The following assignments are semantically the same */
     3413   3           /* and should produce IDENTICAL code.                  */
     3414   3           /*******************************************************/
     3415   3  
     3416   3           s_element(I,J)                   = 1;
     3417   3           s_element(I)(J)                  = 1;
     3418   3           static_structure(I).s_element(J) = 1;
     3419   3           static_structure.s_element(I,J)  = 1;
     3420   3           static_structure.s_element(I)(J) = 1;     
     3421   3  
     3422   3        end;
     3423   2  
     3424   2     end;
     3425   1  
     3426   1     if I ^= MAX_SIZE + 1 then
     3427   1        do;
     3428   2        put skip (one) list ('Loop termination error 1');
     3429   2        end;
     3430   1  
     3431   1     put skip(one) list('Loop 1 ended fine.');
     3432   1  
     3433   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3434   2  
     3435   2        do j = 1 to INN_SIZE;
     3436   3  
     3437   3           /*******************************************************/
     3438   3           /* The following assignments are semantically the same */
     3439   3           /* and should produce IDENTICAL code.                  */
     3440   3           /*******************************************************/
     3441   3  
     3442   3           s_element(i,j)                   = 1;
     3443   3           s_element(i)(j)                  = 1;
     3444   3           static_structure(i).s_element(j) = 1;
     3445   3           static_structure.s_element(i,j)  = 1;
     3446   3           static_structure.s_element(i)(j) = 1;     
     3447   3  
     3448   3        end;
     3449   2  
     3450   2     end;
     3451   1  
     3452   1     if I ^= MAX_SIZE + 1 then
     3453   1        do;
     3454   2        put skip (one) list ('Loop termination error 2');
     3455   2        end;
     3456   1  
     3457   1     put skip(one) list('Loop 2 ended fine.');
     3458   1  
     3459   1  
     3460   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3461   2  
     3462   2        do J = 1 to INN_SIZE;
     3463   3  
     3464   3           /*******************************************************/
     3465   3           /* The following assignments are semantically the same */
     3466   3           /* and should produce IDENTICAL code.                  */
     3467   3           /*******************************************************/
     3468   3  
     3469   3           a_element(I,J)                 = 1;
     3470   3           a_element(I)(J)                = 1;
     3471   3           auto_structure(I).a_element(J) = 1;
     3472   3           auto_structure.a_element(I,J)  = 1;
     3473   3           auto_structure.a_element(I)(J) = 1;     
     3474   3  
     3475   3        end;
     3476   2  
     3477   2     end;
     3478   1  
     3479   1     if I ^= MAX_SIZE + 1 then
     3480   1        do;
     3481   2        put skip (one) list ('Loop termination error 3');
     3482   2        end;
     3483   1  
     3484   1     put skip(one) list('Loop 3 ended fine.');
     3485   1  
     3486   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3487   2  
     3488   2        do j = 1 to INN_SIZE;
     3489   3  
     3490   3           /*******************************************************/
     3491   3           /* The following assignments are semantically the same */
     3492   3           /* and should produce IDENTICAL code.                  */
     3493   3           /*******************************************************/
     3494   3  
     3495   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3496   3           a_element(i)(j)                = 1;
     3497   3           auto_structure(i).a_element(j) = 1;
     3498   3           auto_structure.a_element(i,j)  = 1;
     3499   3           auto_structure.a_element(i)(j) = 1;     
     3500   3  
     3501   3        end;
     3502   2  
     3503   2     end;
     3504   1  
     3505   1     if I ^= MAX_SIZE + 1 then
     3506   1        do;
     3507   2        put skip (one) list ('Loop termination error 4');
     3508   2        end;
     3509   1  
     3510   1     put skip(one) list('Loop 4 ended fine.');
     3511   1  
     3512   1     /****************************************************************/
     3513   1     /* This test ensures that the above code works when executed in */
     3514   1     /* a nested procedure.                                          */
     3515   1     /****************************************************************/
     3516   1  
     3517   1     put skip (one) list ('Im about to call the internal procedure now');
     3518   1  
     3519   1     call run_inner_proc;
     3520   1  
     3521   1   one = 1;
     3522   1  
     3523   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3524   2  
     3525   2        do J = 1 to INN_SIZE;
     3526   3  
     3527   3           /*******************************************************/
     3528   3           /* The following assignments are semantically the same */
     3529   3           /* and should produce IDENTICAL code.                  */
     3530   3           /*******************************************************/
     3531   3  
     3532   3           s_element(I,J)                   = 1;
     3533   3           s_element(I)(J)                  = 1;
     3534   3           static_structure(I).s_element(J) = 1;
     3535   3           static_structure.s_element(I,J)  = 1;
     3536   3           static_structure.s_element(I)(J) = 1;     
     3537   3  
     3538   3        end;
     3539   2  
     3540   2     end;
     3541   1  
     3542   1     if I ^= MAX_SIZE + 1 then
     3543   1        do;
     3544   2        put skip (one) list ('Loop termination error 1');
     3545   2        end;
     3546   1  
     3547   1     put skip(one) list('Loop 1 ended fine.');
     3548   1  
     3549   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3550   2  
     3551   2        do j = 1 to INN_SIZE;
     3552   3  
     3553   3           /*******************************************************/
     3554   3           /* The following assignments are semantically the same */
     3555   3           /* and should produce IDENTICAL code.                  */
     3556   3           /*******************************************************/
     3557   3  
     3558   3           s_element(i,j)                   = 1;
     3559   3           s_element(i)(j)                  = 1;
     3560   3           static_structure(i).s_element(j) = 1;
     3561   3           static_structure.s_element(i,j)  = 1;
     3562   3           static_structure.s_element(i)(j) = 1;     
     3563   3  
     3564   3        end;
     3565   2  
     3566   2     end;
     3567   1  
     3568   1     if I ^= MAX_SIZE + 1 then
     3569   1        do;
     3570   2        put skip (one) list ('Loop termination error 2');
     3571   2        end;
     3572   1  
     3573   1     put skip(one) list('Loop 2 ended fine.');
     3574   1  
     3575   1  
     3576   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3577   2  
     3578   2        do J = 1 to INN_SIZE;
     3579   3  
     3580   3           /*******************************************************/
     3581   3           /* The following assignments are semantically the same */
     3582   3           /* and should produce IDENTICAL code.                  */
     3583   3           /*******************************************************/
     3584   3  
     3585   3           a_element(I,J)                 = 1;
     3586   3           a_element(I)(J)                = 1;
     3587   3           auto_structure(I).a_element(J) = 1;
     3588   3           auto_structure.a_element(I,J)  = 1;
     3589   3           auto_structure.a_element(I)(J) = 1;     
     3590   3  
     3591   3        end;
     3592   2  
     3593   2     end;
     3594   1  
     3595   1     if I ^= MAX_SIZE + 1 then
     3596   1        do;
     3597   2        put skip (one) list ('Loop termination error 3');
     3598   2        end;
     3599   1  
     3600   1     put skip(one) list('Loop 3 ended fine.');
     3601   1  
     3602   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3603   2  
     3604   2        do j = 1 to INN_SIZE;
     3605   3  
     3606   3           /*******************************************************/
     3607   3           /* The following assignments are semantically the same */
     3608   3           /* and should produce IDENTICAL code.                  */
     3609   3           /*******************************************************/
     3610   3  
     3611   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3612   3           a_element(i)(j)                = 1;
     3613   3           auto_structure(i).a_element(j) = 1;
     3614   3           auto_structure.a_element(i,j)  = 1;
     3615   3           auto_structure.a_element(i)(j) = 1;     
     3616   3  
     3617   3        end;
     3618   2  
     3619   2     end;
     3620   1  
     3621   1     if I ^= MAX_SIZE + 1 then
     3622   1        do;
     3623   2        put skip (one) list ('Loop termination error 4');
     3624   2        end;
     3625   1  
     3626   1     put skip(one) list('Loop 4 ended fine.');
     3627   1  
     3628   1     /****************************************************************/
     3629   1     /* This test ensures that the above code works when executed in */
     3630   1     /* a nested procedure.                                          */
     3631   1     /****************************************************************/
     3632   1  
     3633   1     put skip (one) list ('Im about to call the internal procedure now');
     3634   1  
     3635   1     call run_inner_proc;
     3636   1  
     3637   1   one = 1;
     3638   1  
     3639   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3640   2  
     3641   2        do J = 1 to INN_SIZE;
     3642   3  
     3643   3           /*******************************************************/
     3644   3           /* The following assignments are semantically the same */
     3645   3           /* and should produce IDENTICAL code.                  */
     3646   3           /*******************************************************/
     3647   3  
     3648   3           s_element(I,J)                   = 1;
     3649   3           s_element(I)(J)                  = 1;
     3650   3           static_structure(I).s_element(J) = 1;
     3651   3           static_structure.s_element(I,J)  = 1;
     3652   3           static_structure.s_element(I)(J) = 1;     
     3653   3  
     3654   3        end;
     3655   2  
     3656   2     end;
     3657   1  
     3658   1     if I ^= MAX_SIZE + 1 then
     3659   1        do;
     3660   2        put skip (one) list ('Loop termination error 1');
     3661   2        end;
     3662   1  
     3663   1     put skip(one) list('Loop 1 ended fine.');
     3664   1  
     3665   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3666   2  
     3667   2        do j = 1 to INN_SIZE;
     3668   3  
     3669   3           /*******************************************************/
     3670   3           /* The following assignments are semantically the same */
     3671   3           /* and should produce IDENTICAL code.                  */
     3672   3           /*******************************************************/
     3673   3  
     3674   3           s_element(i,j)                   = 1;
     3675   3           s_element(i)(j)                  = 1;
     3676   3           static_structure(i).s_element(j) = 1;
     3677   3           static_structure.s_element(i,j)  = 1;
     3678   3           static_structure.s_element(i)(j) = 1;     
     3679   3  
     3680   3        end;
     3681   2  
     3682   2     end;
     3683   1  
     3684   1     if I ^= MAX_SIZE + 1 then
     3685   1        do;
     3686   2        put skip (one) list ('Loop termination error 2');
     3687   2        end;
     3688   1  
     3689   1     put skip(one) list('Loop 2 ended fine.');
     3690   1  
     3691   1  
     3692   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3693   2  
     3694   2        do J = 1 to INN_SIZE;
     3695   3  
     3696   3           /*******************************************************/
     3697   3           /* The following assignments are semantically the same */
     3698   3           /* and should produce IDENTICAL code.                  */
     3699   3           /*******************************************************/
     3700   3  
     3701   3           a_element(I,J)                 = 1;
     3702   3           a_element(I)(J)                = 1;
     3703   3           auto_structure(I).a_element(J) = 1;
     3704   3           auto_structure.a_element(I,J)  = 1;
     3705   3           auto_structure.a_element(I)(J) = 1;     
     3706   3  
     3707   3        end;
     3708   2  
     3709   2     end;
     3710   1  
     3711   1     if I ^= MAX_SIZE + 1 then
     3712   1        do;
     3713   2        put skip (one) list ('Loop termination error 3');
     3714   2        end;
     3715   1  
     3716   1     put skip(one) list('Loop 3 ended fine.');
     3717   1  
     3718   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3719   2  
     3720   2        do j = 1 to INN_SIZE;
     3721   3  
     3722   3           /*******************************************************/
     3723   3           /* The following assignments are semantically the same */
     3724   3           /* and should produce IDENTICAL code.                  */
     3725   3           /*******************************************************/
     3726   3  
     3727   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3728   3           a_element(i)(j)                = 1;
     3729   3           auto_structure(i).a_element(j) = 1;
     3730   3           auto_structure.a_element(i,j)  = 1;
     3731   3           auto_structure.a_element(i)(j) = 1;     
     3732   3  
     3733   3        end;
     3734   2  
     3735   2     end;
     3736   1  
     3737   1     if I ^= MAX_SIZE + 1 then
     3738   1        do;
     3739   2        put skip (one) list ('Loop termination error 4');
     3740   2        end;
     3741   1  
     3742   1     put skip(one) list('Loop 4 ended fine.');
     3743   1  
     3744   1     /****************************************************************/
     3745   1     /* This test ensures that the above code works when executed in */
     3746   1     /* a nested procedure.                                          */
     3747   1     /****************************************************************/
     3748   1  
     3749   1     put skip (one) list ('Im about to call the internal procedure now');
     3750   1  
     3751   1     call run_inner_proc;
     3752   1  
     3753   1   one = 1;
     3754   1  
     3755   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3756   2  
     3757   2        do J = 1 to INN_SIZE;
     3758   3  
     3759   3           /*******************************************************/
     3760   3           /* The following assignments are semantically the same */
     3761   3           /* and should produce IDENTICAL code.                  */
     3762   3           /*******************************************************/
     3763   3  
     3764   3           s_element(I,J)                   = 1;
     3765   3           s_element(I)(J)                  = 1;
     3766   3           static_structure(I).s_element(J) = 1;
     3767   3           static_structure.s_element(I,J)  = 1;
     3768   3           static_structure.s_element(I)(J) = 1;     
     3769   3  
     3770   3        end;
     3771   2  
     3772   2     end;
     3773   1  
     3774   1     if I ^= MAX_SIZE + 1 then
     3775   1        do;
     3776   2        put skip (one) list ('Loop termination error 1');
     3777   2        end;
     3778   1  
     3779   1     put skip(one) list('Loop 1 ended fine.');
     3780   1  
     3781   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3782   2  
     3783   2        do j = 1 to INN_SIZE;
     3784   3  
     3785   3           /*******************************************************/
     3786   3           /* The following assignments are semantically the same */
     3787   3           /* and should produce IDENTICAL code.                  */
     3788   3           /*******************************************************/
     3789   3  
     3790   3           s_element(i,j)                   = 1;
     3791   3           s_element(i)(j)                  = 1;
     3792   3           static_structure(i).s_element(j) = 1;
     3793   3           static_structure.s_element(i,j)  = 1;
     3794   3           static_structure.s_element(i)(j) = 1;     
     3795   3  
     3796   3        end;
     3797   2  
     3798   2     end;
     3799   1  
     3800   1     if I ^= MAX_SIZE + 1 then
     3801   1        do;
     3802   2        put skip (one) list ('Loop termination error 2');
     3803   2        end;
     3804   1  
     3805   1     put skip(one) list('Loop 2 ended fine.');
     3806   1  
     3807   1  
     3808   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3809   2  
     3810   2        do J = 1 to INN_SIZE;
     3811   3  
     3812   3           /*******************************************************/
     3813   3           /* The following assignments are semantically the same */
     3814   3           /* and should produce IDENTICAL code.                  */
     3815   3           /*******************************************************/
     3816   3  
     3817   3           a_element(I,J)                 = 1;
     3818   3           a_element(I)(J)                = 1;
     3819   3           auto_structure(I).a_element(J) = 1;
     3820   3           auto_structure.a_element(I,J)  = 1;
     3821   3           auto_structure.a_element(I)(J) = 1;     
     3822   3  
     3823   3        end;
     3824   2  
     3825   2     end;
     3826   1  
     3827   1     if I ^= MAX_SIZE + 1 then
     3828   1        do;
     3829   2        put skip (one) list ('Loop termination error 3');
     3830   2        end;
     3831   1  
     3832   1     put skip(one) list('Loop 3 ended fine.');
     3833   1  
     3834   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3835   2  
     3836   2        do j = 1 to INN_SIZE;
     3837   3  
     3838   3           /*******************************************************/
     3839   3           /* The following assignments are semantically the same */
     3840   3           /* and should produce IDENTICAL code.                  */
     3841   3           /*******************************************************/
     3842   3  
     3843   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3844   3           a_element(i)(j)                = 1;
     3845   3           auto_structure(i).a_element(j) = 1;
     3846   3           auto_structure.a_element(i,j)  = 1;
     3847   3           auto_structure.a_element(i)(j) = 1;     
     3848   3  
     3849   3        end;
     3850   2  
     3851   2     end;
     3852   1  
     3853   1     if I ^= MAX_SIZE + 1 then
     3854   1        do;
     3855   2        put skip (one) list ('Loop termination error 4');
     3856   2        end;
     3857   1  
     3858   1     put skip(one) list('Loop 4 ended fine.');
     3859   1  
     3860   1     /****************************************************************/
     3861   1     /* This test ensures that the above code works when executed in */
     3862   1     /* a nested procedure.                                          */
     3863   1     /****************************************************************/
     3864   1  
     3865   1     put skip (one) list ('Im about to call the internal procedure now');
     3866   1  
     3867   1     call run_inner_proc;
     3868   1  
     3869   1   one = 1;
     3870   1  
     3871   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3872   2  
     3873   2        do J = 1 to INN_SIZE;
     3874   3  
     3875   3           /*******************************************************/
     3876   3           /* The following assignments are semantically the same */
     3877   3           /* and should produce IDENTICAL code.                  */
     3878   3           /*******************************************************/
     3879   3  
     3880   3           s_element(I,J)                   = 1;
     3881   3           s_element(I)(J)                  = 1;
     3882   3           static_structure(I).s_element(J) = 1;
     3883   3           static_structure.s_element(I,J)  = 1;
     3884   3           static_structure.s_element(I)(J) = 1;     
     3885   3  
     3886   3        end;
     3887   2  
     3888   2     end;
     3889   1  
     3890   1     if I ^= MAX_SIZE + 1 then
     3891   1        do;
     3892   2        put skip (one) list ('Loop termination error 1');
     3893   2        end;
     3894   1  
     3895   1     put skip(one) list('Loop 1 ended fine.');
     3896   1  
     3897   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     3898   2  
     3899   2        do j = 1 to INN_SIZE;
     3900   3  
     3901   3           /*******************************************************/
     3902   3           /* The following assignments are semantically the same */
     3903   3           /* and should produce IDENTICAL code.                  */
     3904   3           /*******************************************************/
     3905   3  
     3906   3           s_element(i,j)                   = 1;
     3907   3           s_element(i)(j)                  = 1;
     3908   3           static_structure(i).s_element(j) = 1;
     3909   3           static_structure.s_element(i,j)  = 1;
     3910   3           static_structure.s_element(i)(j) = 1;     
     3911   3  
     3912   3        end;
     3913   2  
     3914   2     end;
     3915   1  
     3916   1     if I ^= MAX_SIZE + 1 then
     3917   1        do;
     3918   2        put skip (one) list ('Loop termination error 2');
     3919   2        end;
     3920   1  
     3921   1     put skip(one) list('Loop 2 ended fine.');
     3922   1  
     3923   1  
     3924   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     3925   2  
     3926   2        do J = 1 to INN_SIZE;
     3927   3  
     3928   3           /*******************************************************/
     3929   3           /* The following assignments are semantically the same */
     3930   3           /* and should produce IDENTICAL code.                  */
     3931   3           /*******************************************************/
     3932   3  
     3933   3           a_element(I,J)                 = 1;
     3934   3           a_element(I)(J)                = 1;
     3935   3           auto_structure(I).a_element(J) = 1;
     3936   3           auto_structure.a_element(I,J)  = 1;
     3937   3           auto_structure.a_element(I)(J) = 1;     
     3938   3  
     3939   3        end;
     3940   2  
     3941   2     end;
     3942   1  
     3943   1     if I ^= MAX_SIZE + 1 then
     3944   1        do;
     3945   2        put skip (one) list ('Loop termination error 3');
     3946   2        end;
     3947   1  
     3948   1     put skip(one) list('Loop 3 ended fine.');
     3949   1  
     3950   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     3951   2  
     3952   2        do j = 1 to INN_SIZE;
     3953   3  
     3954   3           /*******************************************************/
     3955   3           /* The following assignments are semantically the same */
     3956   3           /* and should produce IDENTICAL code.                  */
     3957   3           /*******************************************************/
     3958   3  
     3959   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     3960   3           a_element(i)(j)                = 1;
     3961   3           auto_structure(i).a_element(j) = 1;
     3962   3           auto_structure.a_element(i,j)  = 1;
     3963   3           auto_structure.a_element(i)(j) = 1;     
     3964   3  
     3965   3        end;
     3966   2  
     3967   2     end;
     3968   1  
     3969   1     if I ^= MAX_SIZE + 1 then
     3970   1        do;
     3971   2        put skip (one) list ('Loop termination error 4');
     3972   2        end;
     3973   1  
     3974   1     put skip(one) list('Loop 4 ended fine.');
     3975   1  
     3976   1     /****************************************************************/
     3977   1     /* This test ensures that the above code works when executed in */
     3978   1     /* a nested procedure.                                          */
     3979   1     /****************************************************************/
     3980   1  
     3981   1     put skip (one) list ('Im about to call the internal procedure now');
     3982   1  
     3983   1     call run_inner_proc;
     3984   1  
     3985   1   one = 1;
     3986   1  
     3987   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     3988   2  
     3989   2        do J = 1 to INN_SIZE;
     3990   3  
     3991   3           /*******************************************************/
     3992   3           /* The following assignments are semantically the same */
     3993   3           /* and should produce IDENTICAL code.                  */
     3994   3           /*******************************************************/
     3995   3  
     3996   3           s_element(I,J)                   = 1;
     3997   3           s_element(I)(J)                  = 1;
     3998   3           static_structure(I).s_element(J) = 1;
     3999   3           static_structure.s_element(I,J)  = 1;
     4000   3           static_structure.s_element(I)(J) = 1;     
     4001   3  
     4002   3        end;
     4003   2  
     4004   2     end;
     4005   1  
     4006   1     if I ^= MAX_SIZE + 1 then
     4007   1        do;
     4008   2        put skip (one) list ('Loop termination error 1');
     4009   2        end;
     4010   1  
     4011   1     put skip(one) list('Loop 1 ended fine.');
     4012   1  
     4013   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4014   2  
     4015   2        do j = 1 to INN_SIZE;
     4016   3  
     4017   3           /*******************************************************/
     4018   3           /* The following assignments are semantically the same */
     4019   3           /* and should produce IDENTICAL code.                  */
     4020   3           /*******************************************************/
     4021   3  
     4022   3           s_element(i,j)                   = 1;
     4023   3           s_element(i)(j)                  = 1;
     4024   3           static_structure(i).s_element(j) = 1;
     4025   3           static_structure.s_element(i,j)  = 1;
     4026   3           static_structure.s_element(i)(j) = 1;     
     4027   3  
     4028   3        end;
     4029   2  
     4030   2     end;
     4031   1  
     4032   1     if I ^= MAX_SIZE + 1 then
     4033   1        do;
     4034   2        put skip (one) list ('Loop termination error 2');
     4035   2        end;
     4036   1  
     4037   1     put skip(one) list('Loop 2 ended fine.');
     4038   1  
     4039   1  
     4040   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4041   2  
     4042   2        do J = 1 to INN_SIZE;
     4043   3  
     4044   3           /*******************************************************/
     4045   3           /* The following assignments are semantically the same */
     4046   3           /* and should produce IDENTICAL code.                  */
     4047   3           /*******************************************************/
     4048   3  
     4049   3           a_element(I,J)                 = 1;
     4050   3           a_element(I)(J)                = 1;
     4051   3           auto_structure(I).a_element(J) = 1;
     4052   3           auto_structure.a_element(I,J)  = 1;
     4053   3           auto_structure.a_element(I)(J) = 1;     
     4054   3  
     4055   3        end;
     4056   2  
     4057   2     end;
     4058   1  
     4059   1     if I ^= MAX_SIZE + 1 then
     4060   1        do;
     4061   2        put skip (one) list ('Loop termination error 3');
     4062   2        end;
     4063   1  
     4064   1     put skip(one) list('Loop 3 ended fine.');
     4065   1  
     4066   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4067   2  
     4068   2        do j = 1 to INN_SIZE;
     4069   3  
     4070   3           /*******************************************************/
     4071   3           /* The following assignments are semantically the same */
     4072   3           /* and should produce IDENTICAL code.                  */
     4073   3           /*******************************************************/
     4074   3  
     4075   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4076   3           a_element(i)(j)                = 1;
     4077   3           auto_structure(i).a_element(j) = 1;
     4078   3           auto_structure.a_element(i,j)  = 1;
     4079   3           auto_structure.a_element(i)(j) = 1;     
     4080   3  
     4081   3        end;
     4082   2  
     4083   2     end;
     4084   1  
     4085   1     if I ^= MAX_SIZE + 1 then
     4086   1        do;
     4087   2        put skip (one) list ('Loop termination error 4');
     4088   2        end;
     4089   1  
     4090   1     put skip(one) list('Loop 4 ended fine.');
     4091   1  
     4092   1     /****************************************************************/
     4093   1     /* This test ensures that the above code works when executed in */
     4094   1     /* a nested procedure.                                          */
     4095   1     /****************************************************************/
     4096   1  
     4097   1     put skip (one) list ('Im about to call the internal procedure now');
     4098   1  
     4099   1     call run_inner_proc;
     4100   1  
     4101   1   one = 1;
     4102   1  
     4103   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4104   2  
     4105   2        do J = 1 to INN_SIZE;
     4106   3  
     4107   3           /*******************************************************/
     4108   3           /* The following assignments are semantically the same */
     4109   3           /* and should produce IDENTICAL code.                  */
     4110   3           /*******************************************************/
     4111   3  
     4112   3           s_element(I,J)                   = 1;
     4113   3           s_element(I)(J)                  = 1;
     4114   3           static_structure(I).s_element(J) = 1;
     4115   3           static_structure.s_element(I,J)  = 1;
     4116   3           static_structure.s_element(I)(J) = 1;     
     4117   3  
     4118   3        end;
     4119   2  
     4120   2     end;
     4121   1  
     4122   1     if I ^= MAX_SIZE + 1 then
     4123   1        do;
     4124   2        put skip (one) list ('Loop termination error 1');
     4125   2        end;
     4126   1  
     4127   1     put skip(one) list('Loop 1 ended fine.');
     4128   1  
     4129   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4130   2  
     4131   2        do j = 1 to INN_SIZE;
     4132   3  
     4133   3           /*******************************************************/
     4134   3           /* The following assignments are semantically the same */
     4135   3           /* and should produce IDENTICAL code.                  */
     4136   3           /*******************************************************/
     4137   3  
     4138   3           s_element(i,j)                   = 1;
     4139   3           s_element(i)(j)                  = 1;
     4140   3           static_structure(i).s_element(j) = 1;
     4141   3           static_structure.s_element(i,j)  = 1;
     4142   3           static_structure.s_element(i)(j) = 1;     
     4143   3  
     4144   3        end;
     4145   2  
     4146   2     end;
     4147   1  
     4148   1     if I ^= MAX_SIZE + 1 then
     4149   1        do;
     4150   2        put skip (one) list ('Loop termination error 2');
     4151   2        end;
     4152   1  
     4153   1     put skip(one) list('Loop 2 ended fine.');
     4154   1  
     4155   1  
     4156   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4157   2  
     4158   2        do J = 1 to INN_SIZE;
     4159   3  
     4160   3           /*******************************************************/
     4161   3           /* The following assignments are semantically the same */
     4162   3           /* and should produce IDENTICAL code.                  */
     4163   3           /*******************************************************/
     4164   3  
     4165   3           a_element(I,J)                 = 1;
     4166   3           a_element(I)(J)                = 1;
     4167   3           auto_structure(I).a_element(J) = 1;
     4168   3           auto_structure.a_element(I,J)  = 1;
     4169   3           auto_structure.a_element(I)(J) = 1;     
     4170   3  
     4171   3        end;
     4172   2  
     4173   2     end;
     4174   1  
     4175   1     if I ^= MAX_SIZE + 1 then
     4176   1        do;
     4177   2        put skip (one) list ('Loop termination error 3');
     4178   2        end;
     4179   1  
     4180   1     put skip(one) list('Loop 3 ended fine.');
     4181   1  
     4182   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4183   2  
     4184   2        do j = 1 to INN_SIZE;
     4185   3  
     4186   3           /*******************************************************/
     4187   3           /* The following assignments are semantically the same */
     4188   3           /* and should produce IDENTICAL code.                  */
     4189   3           /*******************************************************/
     4190   3  
     4191   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4192   3           a_element(i)(j)                = 1;
     4193   3           auto_structure(i).a_element(j) = 1;
     4194   3           auto_structure.a_element(i,j)  = 1;
     4195   3           auto_structure.a_element(i)(j) = 1;     
     4196   3  
     4197   3        end;
     4198   2  
     4199   2     end;
     4200   1  
     4201   1     if I ^= MAX_SIZE + 1 then
     4202   1        do;
     4203   2        put skip (one) list ('Loop termination error 4');
     4204   2        end;
     4205   1  
     4206   1     put skip(one) list('Loop 4 ended fine.');
     4207   1  
     4208   1     /****************************************************************/
     4209   1     /* This test ensures that the above code works when executed in */
     4210   1     /* a nested procedure.                                          */
     4211   1     /****************************************************************/
     4212   1  
     4213   1     put skip (one) list ('Im about to call the internal procedure now');
     4214   1  
     4215   1     call run_inner_proc;
     4216   1  
     4217   1   one = 1;
     4218   1  
     4219   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4220   2  
     4221   2        do J = 1 to INN_SIZE;
     4222   3  
     4223   3           /*******************************************************/
     4224   3           /* The following assignments are semantically the same */
     4225   3           /* and should produce IDENTICAL code.                  */
     4226   3           /*******************************************************/
     4227   3  
     4228   3           s_element(I,J)                   = 1;
     4229   3           s_element(I)(J)                  = 1;
     4230   3           static_structure(I).s_element(J) = 1;
     4231   3           static_structure.s_element(I,J)  = 1;
     4232   3           static_structure.s_element(I)(J) = 1;     
     4233   3  
     4234   3        end;
     4235   2  
     4236   2     end;
     4237   1  
     4238   1     if I ^= MAX_SIZE + 1 then
     4239   1        do;
     4240   2        put skip (one) list ('Loop termination error 1');
     4241   2        end;
     4242   1  
     4243   1     put skip(one) list('Loop 1 ended fine.');
     4244   1  
     4245   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4246   2  
     4247   2        do j = 1 to INN_SIZE;
     4248   3  
     4249   3           /*******************************************************/
     4250   3           /* The following assignments are semantically the same */
     4251   3           /* and should produce IDENTICAL code.                  */
     4252   3           /*******************************************************/
     4253   3  
     4254   3           s_element(i,j)                   = 1;
     4255   3           s_element(i)(j)                  = 1;
     4256   3           static_structure(i).s_element(j) = 1;
     4257   3           static_structure.s_element(i,j)  = 1;
     4258   3           static_structure.s_element(i)(j) = 1;     
     4259   3  
     4260   3        end;
     4261   2  
     4262   2     end;
     4263   1  
     4264   1     if I ^= MAX_SIZE + 1 then
     4265   1        do;
     4266   2        put skip (one) list ('Loop termination error 2');
     4267   2        end;
     4268   1  
     4269   1     put skip(one) list('Loop 2 ended fine.');
     4270   1  
     4271   1  
     4272   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4273   2  
     4274   2        do J = 1 to INN_SIZE;
     4275   3  
     4276   3           /*******************************************************/
     4277   3           /* The following assignments are semantically the same */
     4278   3           /* and should produce IDENTICAL code.                  */
     4279   3           /*******************************************************/
     4280   3  
     4281   3           a_element(I,J)                 = 1;
     4282   3           a_element(I)(J)                = 1;
     4283   3           auto_structure(I).a_element(J) = 1;
     4284   3           auto_structure.a_element(I,J)  = 1;
     4285   3           auto_structure.a_element(I)(J) = 1;     
     4286   3  
     4287   3        end;
     4288   2  
     4289   2     end;
     4290   1  
     4291   1     if I ^= MAX_SIZE + 1 then
     4292   1        do;
     4293   2        put skip (one) list ('Loop termination error 3');
     4294   2        end;
     4295   1  
     4296   1     put skip(one) list('Loop 3 ended fine.');
     4297   1  
     4298   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4299   2  
     4300   2        do j = 1 to INN_SIZE;
     4301   3  
     4302   3           /*******************************************************/
     4303   3           /* The following assignments are semantically the same */
     4304   3           /* and should produce IDENTICAL code.                  */
     4305   3           /*******************************************************/
     4306   3  
     4307   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4308   3           a_element(i)(j)                = 1;
     4309   3           auto_structure(i).a_element(j) = 1;
     4310   3           auto_structure.a_element(i,j)  = 1;
     4311   3           auto_structure.a_element(i)(j) = 1;     
     4312   3  
     4313   3        end;
     4314   2  
     4315   2     end;
     4316   1  
     4317   1     if I ^= MAX_SIZE + 1 then
     4318   1        do;
     4319   2        put skip (one) list ('Loop termination error 4');
     4320   2        end;
     4321   1  
     4322   1     put skip(one) list('Loop 4 ended fine.');
     4323   1  
     4324   1     /****************************************************************/
     4325   1     /* This test ensures that the above code works when executed in */
     4326   1     /* a nested procedure.                                          */
     4327   1     /****************************************************************/
     4328   1  
     4329   1     put skip (one) list ('Im about to call the internal procedure now');
     4330   1  
     4331   1     call run_inner_proc;
     4332   1  
     4333   1   one = 1;
     4334   1  
     4335   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4336   2  
     4337   2        do J = 1 to INN_SIZE;
     4338   3  
     4339   3           /*******************************************************/
     4340   3           /* The following assignments are semantically the same */
     4341   3           /* and should produce IDENTICAL code.                  */
     4342   3           /*******************************************************/
     4343   3  
     4344   3           s_element(I,J)                   = 1;
     4345   3           s_element(I)(J)                  = 1;
     4346   3           static_structure(I).s_element(J) = 1;
     4347   3           static_structure.s_element(I,J)  = 1;
     4348   3           static_structure.s_element(I)(J) = 1;     
     4349   3  
     4350   3        end;
     4351   2  
     4352   2     end;
     4353   1  
     4354   1     if I ^= MAX_SIZE + 1 then
     4355   1        do;
     4356   2        put skip (one) list ('Loop termination error 1');
     4357   2        end;
     4358   1  
     4359   1     put skip(one) list('Loop 1 ended fine.');
     4360   1  
     4361   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4362   2  
     4363   2        do j = 1 to INN_SIZE;
     4364   3  
     4365   3           /*******************************************************/
     4366   3           /* The following assignments are semantically the same */
     4367   3           /* and should produce IDENTICAL code.                  */
     4368   3           /*******************************************************/
     4369   3  
     4370   3           s_element(i,j)                   = 1;
     4371   3           s_element(i)(j)                  = 1;
     4372   3           static_structure(i).s_element(j) = 1;
     4373   3           static_structure.s_element(i,j)  = 1;
     4374   3           static_structure.s_element(i)(j) = 1;     
     4375   3  
     4376   3        end;
     4377   2  
     4378   2     end;
     4379   1  
     4380   1     if I ^= MAX_SIZE + 1 then
     4381   1        do;
     4382   2        put skip (one) list ('Loop termination error 2');
     4383   2        end;
     4384   1  
     4385   1     put skip(one) list('Loop 2 ended fine.');
     4386   1  
     4387   1  
     4388   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4389   2  
     4390   2        do J = 1 to INN_SIZE;
     4391   3  
     4392   3           /*******************************************************/
     4393   3           /* The following assignments are semantically the same */
     4394   3           /* and should produce IDENTICAL code.                  */
     4395   3           /*******************************************************/
     4396   3  
     4397   3           a_element(I,J)                 = 1;
     4398   3           a_element(I)(J)                = 1;
     4399   3           auto_structure(I).a_element(J) = 1;
     4400   3           auto_structure.a_element(I,J)  = 1;
     4401   3           auto_structure.a_element(I)(J) = 1;     
     4402   3  
     4403   3        end;
     4404   2  
     4405   2     end;
     4406   1  
     4407   1     if I ^= MAX_SIZE + 1 then
     4408   1        do;
     4409   2        put skip (one) list ('Loop termination error 3');
     4410   2        end;
     4411   1  
     4412   1     put skip(one) list('Loop 3 ended fine.');
     4413   1  
     4414   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4415   2  
     4416   2        do j = 1 to INN_SIZE;
     4417   3  
     4418   3           /*******************************************************/
     4419   3           /* The following assignments are semantically the same */
     4420   3           /* and should produce IDENTICAL code.                  */
     4421   3           /*******************************************************/
     4422   3  
     4423   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4424   3           a_element(i)(j)                = 1;
     4425   3           auto_structure(i).a_element(j) = 1;
     4426   3           auto_structure.a_element(i,j)  = 1;
     4427   3           auto_structure.a_element(i)(j) = 1;     
     4428   3  
     4429   3        end;
     4430   2  
     4431   2     end;
     4432   1  
     4433   1     if I ^= MAX_SIZE + 1 then
     4434   1        do;
     4435   2        put skip (one) list ('Loop termination error 4');
     4436   2        end;
     4437   1  
     4438   1     put skip(one) list('Loop 4 ended fine.');
     4439   1  
     4440   1     /****************************************************************/
     4441   1     /* This test ensures that the above code works when executed in */
     4442   1     /* a nested procedure.                                          */
     4443   1     /****************************************************************/
     4444   1  
     4445   1     put skip (one) list ('Im about to call the internal procedure now');
     4446   1  
     4447   1     call run_inner_proc;
     4448   1  
     4449   1   one = 1;
     4450   1  
     4451   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4452   2  
     4453   2        do J = 1 to INN_SIZE;
     4454   3  
     4455   3           /*******************************************************/
     4456   3           /* The following assignments are semantically the same */
     4457   3           /* and should produce IDENTICAL code.                  */
     4458   3           /*******************************************************/
     4459   3  
     4460   3           s_element(I,J)                   = 1;
     4461   3           s_element(I)(J)                  = 1;
     4462   3           static_structure(I).s_element(J) = 1;
     4463   3           static_structure.s_element(I,J)  = 1;
     4464   3           static_structure.s_element(I)(J) = 1;     
     4465   3  
     4466   3        end;
     4467   2  
     4468   2     end;
     4469   1  
     4470   1     if I ^= MAX_SIZE + 1 then
     4471   1        do;
     4472   2        put skip (one) list ('Loop termination error 1');
     4473   2        end;
     4474   1  
     4475   1     put skip(one) list('Loop 1 ended fine.');
     4476   1  
     4477   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4478   2  
     4479   2        do j = 1 to INN_SIZE;
     4480   3  
     4481   3           /*******************************************************/
     4482   3           /* The following assignments are semantically the same */
     4483   3           /* and should produce IDENTICAL code.                  */
     4484   3           /*******************************************************/
     4485   3  
     4486   3           s_element(i,j)                   = 1;
     4487   3           s_element(i)(j)                  = 1;
     4488   3           static_structure(i).s_element(j) = 1;
     4489   3           static_structure.s_element(i,j)  = 1;
     4490   3           static_structure.s_element(i)(j) = 1;     
     4491   3  
     4492   3        end;
     4493   2  
     4494   2     end;
     4495   1  
     4496   1     if I ^= MAX_SIZE + 1 then
     4497   1        do;
     4498   2        put skip (one) list ('Loop termination error 2');
     4499   2        end;
     4500   1  
     4501   1     put skip(one) list('Loop 2 ended fine.');
     4502   1  
     4503   1  
     4504   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4505   2  
     4506   2        do J = 1 to INN_SIZE;
     4507   3  
     4508   3           /*******************************************************/
     4509   3           /* The following assignments are semantically the same */
     4510   3           /* and should produce IDENTICAL code.                  */
     4511   3           /*******************************************************/
     4512   3  
     4513   3           a_element(I,J)                 = 1;
     4514   3           a_element(I)(J)                = 1;
     4515   3           auto_structure(I).a_element(J) = 1;
     4516   3           auto_structure.a_element(I,J)  = 1;
     4517   3           auto_structure.a_element(I)(J) = 1;     
     4518   3  
     4519   3        end;
     4520   2  
     4521   2     end;
     4522   1  
     4523   1     if I ^= MAX_SIZE + 1 then
     4524   1        do;
     4525   2        put skip (one) list ('Loop termination error 3');
     4526   2        end;
     4527   1  
     4528   1     put skip(one) list('Loop 3 ended fine.');
     4529   1  
     4530   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4531   2  
     4532   2        do j = 1 to INN_SIZE;
     4533   3  
     4534   3           /*******************************************************/
     4535   3           /* The following assignments are semantically the same */
     4536   3           /* and should produce IDENTICAL code.                  */
     4537   3           /*******************************************************/
     4538   3  
     4539   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4540   3           a_element(i)(j)                = 1;
     4541   3           auto_structure(i).a_element(j) = 1;
     4542   3           auto_structure.a_element(i,j)  = 1;
     4543   3           auto_structure.a_element(i)(j) = 1;     
     4544   3  
     4545   3        end;
     4546   2  
     4547   2     end;
     4548   1  
     4549   1     if I ^= MAX_SIZE + 1 then
     4550   1        do;
     4551   2        put skip (one) list ('Loop termination error 4');
     4552   2        end;
     4553   1  
     4554   1     put skip(one) list('Loop 4 ended fine.');
     4555   1  
     4556   1     /****************************************************************/
     4557   1     /* This test ensures that the above code works when executed in */
     4558   1     /* a nested procedure.                                          */
     4559   1     /****************************************************************/
     4560   1  
     4561   1     put skip (one) list ('Im about to call the internal procedure now');
     4562   1  
     4563   1     call run_inner_proc;
     4564   1  
     4565   1   one = 1;
     4566   1  
     4567   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4568   2  
     4569   2        do J = 1 to INN_SIZE;
     4570   3  
     4571   3           /*******************************************************/
     4572   3           /* The following assignments are semantically the same */
     4573   3           /* and should produce IDENTICAL code.                  */
     4574   3           /*******************************************************/
     4575   3  
     4576   3           s_element(I,J)                   = 1;
     4577   3           s_element(I)(J)                  = 1;
     4578   3           static_structure(I).s_element(J) = 1;
     4579   3           static_structure.s_element(I,J)  = 1;
     4580   3           static_structure.s_element(I)(J) = 1;     
     4581   3  
     4582   3        end;
     4583   2  
     4584   2     end;
     4585   1  
     4586   1     if I ^= MAX_SIZE + 1 then
     4587   1        do;
     4588   2        put skip (one) list ('Loop termination error 1');
     4589   2        end;
     4590   1  
     4591   1     put skip(one) list('Loop 1 ended fine.');
     4592   1  
     4593   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4594   2  
     4595   2        do j = 1 to INN_SIZE;
     4596   3  
     4597   3           /*******************************************************/
     4598   3           /* The following assignments are semantically the same */
     4599   3           /* and should produce IDENTICAL code.                  */
     4600   3           /*******************************************************/
     4601   3  
     4602   3           s_element(i,j)                   = 1;
     4603   3           s_element(i)(j)                  = 1;
     4604   3           static_structure(i).s_element(j) = 1;
     4605   3           static_structure.s_element(i,j)  = 1;
     4606   3           static_structure.s_element(i)(j) = 1;     
     4607   3  
     4608   3        end;
     4609   2  
     4610   2     end;
     4611   1  
     4612   1     if I ^= MAX_SIZE + 1 then
     4613   1        do;
     4614   2        put skip (one) list ('Loop termination error 2');
     4615   2        end;
     4616   1  
     4617   1     put skip(one) list('Loop 2 ended fine.');
     4618   1  
     4619   1  
     4620   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4621   2  
     4622   2        do J = 1 to INN_SIZE;
     4623   3  
     4624   3           /*******************************************************/
     4625   3           /* The following assignments are semantically the same */
     4626   3           /* and should produce IDENTICAL code.                  */
     4627   3           /*******************************************************/
     4628   3  
     4629   3           a_element(I,J)                 = 1;
     4630   3           a_element(I)(J)                = 1;
     4631   3           auto_structure(I).a_element(J) = 1;
     4632   3           auto_structure.a_element(I,J)  = 1;
     4633   3           auto_structure.a_element(I)(J) = 1;     
     4634   3  
     4635   3        end;
     4636   2  
     4637   2     end;
     4638   1  
     4639   1     if I ^= MAX_SIZE + 1 then
     4640   1        do;
     4641   2        put skip (one) list ('Loop termination error 3');
     4642   2        end;
     4643   1  
     4644   1     put skip(one) list('Loop 3 ended fine.');
     4645   1  
     4646   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4647   2  
     4648   2        do j = 1 to INN_SIZE;
     4649   3  
     4650   3           /*******************************************************/
     4651   3           /* The following assignments are semantically the same */
     4652   3           /* and should produce IDENTICAL code.                  */
     4653   3           /*******************************************************/
     4654   3  
     4655   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4656   3           a_element(i)(j)                = 1;
     4657   3           auto_structure(i).a_element(j) = 1;
     4658   3           auto_structure.a_element(i,j)  = 1;
     4659   3           auto_structure.a_element(i)(j) = 1;     
     4660   3  
     4661   3        end;
     4662   2  
     4663   2     end;
     4664   1  
     4665   1     if I ^= MAX_SIZE + 1 then
     4666   1        do;
     4667   2        put skip (one) list ('Loop termination error 4');
     4668   2        end;
     4669   1  
     4670   1     put skip(one) list('Loop 4 ended fine.');
     4671   1  
     4672   1     /****************************************************************/
     4673   1     /* This test ensures that the above code works when executed in */
     4674   1     /* a nested procedure.                                          */
     4675   1     /****************************************************************/
     4676   1  
     4677   1     put skip (one) list ('Im about to call the internal procedure now');
     4678   1  
     4679   1     call run_inner_proc;
     4680   1  
     4681   1   one = 1;
     4682   1  
     4683   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4684   2  
     4685   2        do J = 1 to INN_SIZE;
     4686   3  
     4687   3           /*******************************************************/
     4688   3           /* The following assignments are semantically the same */
     4689   3           /* and should produce IDENTICAL code.                  */
     4690   3           /*******************************************************/
     4691   3  
     4692   3           s_element(I,J)                   = 1;
     4693   3           s_element(I)(J)                  = 1;
     4694   3           static_structure(I).s_element(J) = 1;
     4695   3           static_structure.s_element(I,J)  = 1;
     4696   3           static_structure.s_element(I)(J) = 1;     
     4697   3  
     4698   3        end;
     4699   2  
     4700   2     end;
     4701   1  
     4702   1     if I ^= MAX_SIZE + 1 then
     4703   1        do;
     4704   2        put skip (one) list ('Loop termination error 1');
     4705   2        end;
     4706   1  
     4707   1     put skip(one) list('Loop 1 ended fine.');
     4708   1  
     4709   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4710   2  
     4711   2        do j = 1 to INN_SIZE;
     4712   3  
     4713   3           /*******************************************************/
     4714   3           /* The following assignments are semantically the same */
     4715   3           /* and should produce IDENTICAL code.                  */
     4716   3           /*******************************************************/
     4717   3  
     4718   3           s_element(i,j)                   = 1;
     4719   3           s_element(i)(j)                  = 1;
     4720   3           static_structure(i).s_element(j) = 1;
     4721   3           static_structure.s_element(i,j)  = 1;
     4722   3           static_structure.s_element(i)(j) = 1;     
     4723   3  
     4724   3        end;
     4725   2  
     4726   2     end;
     4727   1  
     4728   1     if I ^= MAX_SIZE + 1 then
     4729   1        do;
     4730   2        put skip (one) list ('Loop termination error 2');
     4731   2        end;
     4732   1  
     4733   1     put skip(one) list('Loop 2 ended fine.');
     4734   1  
     4735   1  
     4736   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4737   2  
     4738   2        do J = 1 to INN_SIZE;
     4739   3  
     4740   3           /*******************************************************/
     4741   3           /* The following assignments are semantically the same */
     4742   3           /* and should produce IDENTICAL code.                  */
     4743   3           /*******************************************************/
     4744   3  
     4745   3           a_element(I,J)                 = 1;
     4746   3           a_element(I)(J)                = 1;
     4747   3           auto_structure(I).a_element(J) = 1;
     4748   3           auto_structure.a_element(I,J)  = 1;
     4749   3           auto_structure.a_element(I)(J) = 1;     
     4750   3  
     4751   3        end;
     4752   2  
     4753   2     end;
     4754   1  
     4755   1     if I ^= MAX_SIZE + 1 then
     4756   1        do;
     4757   2        put skip (one) list ('Loop termination error 3');
     4758   2        end;
     4759   1  
     4760   1     put skip(one) list('Loop 3 ended fine.');
     4761   1  
     4762   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4763   2  
     4764   2        do j = 1 to INN_SIZE;
     4765   3  
     4766   3           /*******************************************************/
     4767   3           /* The following assignments are semantically the same */
     4768   3           /* and should produce IDENTICAL code.                  */
     4769   3           /*******************************************************/
     4770   3  
     4771   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4772   3           a_element(i)(j)                = 1;
     4773   3           auto_structure(i).a_element(j) = 1;
     4774   3           auto_structure.a_element(i,j)  = 1;
     4775   3           auto_structure.a_element(i)(j) = 1;     
     4776   3  
     4777   3        end;
     4778   2  
     4779   2     end;
     4780   1  
     4781   1     if I ^= MAX_SIZE + 1 then
     4782   1        do;
     4783   2        put skip (one) list ('Loop termination error 4');
     4784   2        end;
     4785   1  
     4786   1     put skip(one) list('Loop 4 ended fine.');
     4787   1  
     4788   1     /****************************************************************/
     4789   1     /* This test ensures that the above code works when executed in */
     4790   1     /* a nested procedure.                                          */
     4791   1     /****************************************************************/
     4792   1  
     4793   1     put skip (one) list ('Im about to call the internal procedure now');
     4794   1  
     4795   1     call run_inner_proc;
     4796   1  
     4797   1   one = 1;
     4798   1  
     4799   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4800   2  
     4801   2        do J = 1 to INN_SIZE;
     4802   3  
     4803   3           /*******************************************************/
     4804   3           /* The following assignments are semantically the same */
     4805   3           /* and should produce IDENTICAL code.                  */
     4806   3           /*******************************************************/
     4807   3  
     4808   3           s_element(I,J)                   = 1;
     4809   3           s_element(I)(J)                  = 1;
     4810   3           static_structure(I).s_element(J) = 1;
     4811   3           static_structure.s_element(I,J)  = 1;
     4812   3           static_structure.s_element(I)(J) = 1;     
     4813   3  
     4814   3        end;
     4815   2  
     4816   2     end;
     4817   1  
     4818   1     if I ^= MAX_SIZE + 1 then
     4819   1        do;
     4820   2        put skip (one) list ('Loop termination error 1');
     4821   2        end;
     4822   1  
     4823   1     put skip(one) list('Loop 1 ended fine.');
     4824   1  
     4825   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4826   2  
     4827   2        do j = 1 to INN_SIZE;
     4828   3  
     4829   3           /*******************************************************/
     4830   3           /* The following assignments are semantically the same */
     4831   3           /* and should produce IDENTICAL code.                  */
     4832   3           /*******************************************************/
     4833   3  
     4834   3           s_element(i,j)                   = 1;
     4835   3           s_element(i)(j)                  = 1;
     4836   3           static_structure(i).s_element(j) = 1;
     4837   3           static_structure.s_element(i,j)  = 1;
     4838   3           static_structure.s_element(i)(j) = 1;     
     4839   3  
     4840   3        end;
     4841   2  
     4842   2     end;
     4843   1  
     4844   1     if I ^= MAX_SIZE + 1 then
     4845   1        do;
     4846   2        put skip (one) list ('Loop termination error 2');
     4847   2        end;
     4848   1  
     4849   1     put skip(one) list('Loop 2 ended fine.');
     4850   1  
     4851   1  
     4852   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4853   2  
     4854   2        do J = 1 to INN_SIZE;
     4855   3  
     4856   3           /*******************************************************/
     4857   3           /* The following assignments are semantically the same */
     4858   3           /* and should produce IDENTICAL code.                  */
     4859   3           /*******************************************************/
     4860   3  
     4861   3           a_element(I,J)                 = 1;
     4862   3           a_element(I)(J)                = 1;
     4863   3           auto_structure(I).a_element(J) = 1;
     4864   3           auto_structure.a_element(I,J)  = 1;
     4865   3           auto_structure.a_element(I)(J) = 1;     
     4866   3  
     4867   3        end;
     4868   2  
     4869   2     end;
     4870   1  
     4871   1     if I ^= MAX_SIZE + 1 then
     4872   1        do;
     4873   2        put skip (one) list ('Loop termination error 3');
     4874   2        end;
     4875   1  
     4876   1     put skip(one) list('Loop 3 ended fine.');
     4877   1  
     4878   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4879   2  
     4880   2        do j = 1 to INN_SIZE;
     4881   3  
     4882   3           /*******************************************************/
     4883   3           /* The following assignments are semantically the same */
     4884   3           /* and should produce IDENTICAL code.                  */
     4885   3           /*******************************************************/
     4886   3  
     4887   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     4888   3           a_element(i)(j)                = 1;
     4889   3           auto_structure(i).a_element(j) = 1;
     4890   3           auto_structure.a_element(i,j)  = 1;
     4891   3           auto_structure.a_element(i)(j) = 1;     
     4892   3  
     4893   3        end;
     4894   2  
     4895   2     end;
     4896   1  
     4897   1     if I ^= MAX_SIZE + 1 then
     4898   1        do;
     4899   2        put skip (one) list ('Loop termination error 4');
     4900   2        end;
     4901   1  
     4902   1     put skip(one) list('Loop 4 ended fine.');
     4903   1  
     4904   1     /****************************************************************/
     4905   1     /* This test ensures that the above code works when executed in */
     4906   1     /* a nested procedure.                                          */
     4907   1     /****************************************************************/
     4908   1  
     4909   1     put skip (one) list ('Im about to call the internal procedure now');
     4910   1  
     4911   1     call run_inner_proc;
     4912   1  
     4913   1   one = 1;
     4914   1  
     4915   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     4916   2  
     4917   2        do J = 1 to INN_SIZE;
     4918   3  
     4919   3           /*******************************************************/
     4920   3           /* The following assignments are semantically the same */
     4921   3           /* and should produce IDENTICAL code.                  */
     4922   3           /*******************************************************/
     4923   3  
     4924   3           s_element(I,J)                   = 1;
     4925   3           s_element(I)(J)                  = 1;
     4926   3           static_structure(I).s_element(J) = 1;
     4927   3           static_structure.s_element(I,J)  = 1;
     4928   3           static_structure.s_element(I)(J) = 1;     
     4929   3  
     4930   3        end;
     4931   2  
     4932   2     end;
     4933   1  
     4934   1     if I ^= MAX_SIZE + 1 then
     4935   1        do;
     4936   2        put skip (one) list ('Loop termination error 1');
     4937   2        end;
     4938   1  
     4939   1     put skip(one) list('Loop 1 ended fine.');
     4940   1  
     4941   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     4942   2  
     4943   2        do j = 1 to INN_SIZE;
     4944   3  
     4945   3           /*******************************************************/
     4946   3           /* The following assignments are semantically the same */
     4947   3           /* and should produce IDENTICAL code.                  */
     4948   3           /*******************************************************/
     4949   3  
     4950   3           s_element(i,j)                   = 1;
     4951   3           s_element(i)(j)                  = 1;
     4952   3           static_structure(i).s_element(j) = 1;
     4953   3           static_structure.s_element(i,j)  = 1;
     4954   3           static_structure.s_element(i)(j) = 1;     
     4955   3  
     4956   3        end;
     4957   2  
     4958   2     end;
     4959   1  
     4960   1     if I ^= MAX_SIZE + 1 then
     4961   1        do;
     4962   2        put skip (one) list ('Loop termination error 2');
     4963   2        end;
     4964   1  
     4965   1     put skip(one) list('Loop 2 ended fine.');
     4966   1  
     4967   1  
     4968   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     4969   2  
     4970   2        do J = 1 to INN_SIZE;
     4971   3  
     4972   3           /*******************************************************/
     4973   3           /* The following assignments are semantically the same */
     4974   3           /* and should produce IDENTICAL code.                  */
     4975   3           /*******************************************************/
     4976   3  
     4977   3           a_element(I,J)                 = 1;
     4978   3           a_element(I)(J)                = 1;
     4979   3           auto_structure(I).a_element(J) = 1;
     4980   3           auto_structure.a_element(I,J)  = 1;
     4981   3           auto_structure.a_element(I)(J) = 1;     
     4982   3  
     4983   3        end;
     4984   2  
     4985   2     end;
     4986   1  
     4987   1     if I ^= MAX_SIZE + 1 then
     4988   1        do;
     4989   2        put skip (one) list ('Loop termination error 3');
     4990   2        end;
     4991   1  
     4992   1     put skip(one) list('Loop 3 ended fine.');
     4993   1  
     4994   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     4995   2  
     4996   2        do j = 1 to INN_SIZE;
     4997   3  
     4998   3           /*******************************************************/
     4999   3           /* The following assignments are semantically the same */
     5000   3           /* and should produce IDENTICAL code.                  */
     5001   3           /*******************************************************/
     5002   3  
     5003   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5004   3           a_element(i)(j)                = 1;
     5005   3           auto_structure(i).a_element(j) = 1;
     5006   3           auto_structure.a_element(i,j)  = 1;
     5007   3           auto_structure.a_element(i)(j) = 1;     
     5008   3  
     5009   3        end;
     5010   2  
     5011   2     end;
     5012   1  
     5013   1     if I ^= MAX_SIZE + 1 then
     5014   1        do;
     5015   2        put skip (one) list ('Loop termination error 4');
     5016   2        end;
     5017   1  
     5018   1     put skip(one) list('Loop 4 ended fine.');
     5019   1  
     5020   1     /****************************************************************/
     5021   1     /* This test ensures that the above code works when executed in */
     5022   1     /* a nested procedure.                                          */
     5023   1     /****************************************************************/
     5024   1  
     5025   1     put skip (one) list ('Im about to call the internal procedure now');
     5026   1  
     5027   1     call run_inner_proc;
     5028   1  
     5029   1   one = 1;
     5030   1  
     5031   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5032   2  
     5033   2        do J = 1 to INN_SIZE;
     5034   3  
     5035   3           /*******************************************************/
     5036   3           /* The following assignments are semantically the same */
     5037   3           /* and should produce IDENTICAL code.                  */
     5038   3           /*******************************************************/
     5039   3  
     5040   3           s_element(I,J)                   = 1;
     5041   3           s_element(I)(J)                  = 1;
     5042   3           static_structure(I).s_element(J) = 1;
     5043   3           static_structure.s_element(I,J)  = 1;
     5044   3           static_structure.s_element(I)(J) = 1;     
     5045   3  
     5046   3        end;
     5047   2  
     5048   2     end;
     5049   1  
     5050   1     if I ^= MAX_SIZE + 1 then
     5051   1        do;
     5052   2        put skip (one) list ('Loop termination error 1');
     5053   2        end;
     5054   1  
     5055   1     put skip(one) list('Loop 1 ended fine.');
     5056   1  
     5057   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5058   2  
     5059   2        do j = 1 to INN_SIZE;
     5060   3  
     5061   3           /*******************************************************/
     5062   3           /* The following assignments are semantically the same */
     5063   3           /* and should produce IDENTICAL code.                  */
     5064   3           /*******************************************************/
     5065   3  
     5066   3           s_element(i,j)                   = 1;
     5067   3           s_element(i)(j)                  = 1;
     5068   3           static_structure(i).s_element(j) = 1;
     5069   3           static_structure.s_element(i,j)  = 1;
     5070   3           static_structure.s_element(i)(j) = 1;     
     5071   3  
     5072   3        end;
     5073   2  
     5074   2     end;
     5075   1  
     5076   1     if I ^= MAX_SIZE + 1 then
     5077   1        do;
     5078   2        put skip (one) list ('Loop termination error 2');
     5079   2        end;
     5080   1  
     5081   1     put skip(one) list('Loop 2 ended fine.');
     5082   1  
     5083   1  
     5084   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5085   2  
     5086   2        do J = 1 to INN_SIZE;
     5087   3  
     5088   3           /*******************************************************/
     5089   3           /* The following assignments are semantically the same */
     5090   3           /* and should produce IDENTICAL code.                  */
     5091   3           /*******************************************************/
     5092   3  
     5093   3           a_element(I,J)                 = 1;
     5094   3           a_element(I)(J)                = 1;
     5095   3           auto_structure(I).a_element(J) = 1;
     5096   3           auto_structure.a_element(I,J)  = 1;
     5097   3           auto_structure.a_element(I)(J) = 1;     
     5098   3  
     5099   3        end;
     5100   2  
     5101   2     end;
     5102   1  
     5103   1     if I ^= MAX_SIZE + 1 then
     5104   1        do;
     5105   2        put skip (one) list ('Loop termination error 3');
     5106   2        end;
     5107   1  
     5108   1     put skip(one) list('Loop 3 ended fine.');
     5109   1  
     5110   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5111   2  
     5112   2        do j = 1 to INN_SIZE;
     5113   3  
     5114   3           /*******************************************************/
     5115   3           /* The following assignments are semantically the same */
     5116   3           /* and should produce IDENTICAL code.                  */
     5117   3           /*******************************************************/
     5118   3  
     5119   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5120   3           a_element(i)(j)                = 1;
     5121   3           auto_structure(i).a_element(j) = 1;
     5122   3           auto_structure.a_element(i,j)  = 1;
     5123   3           auto_structure.a_element(i)(j) = 1;     
     5124   3  
     5125   3        end;
     5126   2  
     5127   2     end;
     5128   1  
     5129   1     if I ^= MAX_SIZE + 1 then
     5130   1        do;
     5131   2        put skip (one) list ('Loop termination error 4');
     5132   2        end;
     5133   1  
     5134   1     put skip(one) list('Loop 4 ended fine.');
     5135   1  
     5136   1     /****************************************************************/
     5137   1     /* This test ensures that the above code works when executed in */
     5138   1     /* a nested procedure.                                          */
     5139   1     /****************************************************************/
     5140   1  
     5141   1     put skip (one) list ('Im about to call the internal procedure now');
     5142   1  
     5143   1     call run_inner_proc;
     5144   1  
     5145   1   one = 1;
     5146   1  
     5147   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5148   2  
     5149   2        do J = 1 to INN_SIZE;
     5150   3  
     5151   3           /*******************************************************/
     5152   3           /* The following assignments are semantically the same */
     5153   3           /* and should produce IDENTICAL code.                  */
     5154   3           /*******************************************************/
     5155   3  
     5156   3           s_element(I,J)                   = 1;
     5157   3           s_element(I)(J)                  = 1;
     5158   3           static_structure(I).s_element(J) = 1;
     5159   3           static_structure.s_element(I,J)  = 1;
     5160   3           static_structure.s_element(I)(J) = 1;     
     5161   3  
     5162   3        end;
     5163   2  
     5164   2     end;
     5165   1  
     5166   1     if I ^= MAX_SIZE + 1 then
     5167   1        do;
     5168   2        put skip (one) list ('Loop termination error 1');
     5169   2        end;
     5170   1  
     5171   1     put skip(one) list('Loop 1 ended fine.');
     5172   1  
     5173   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5174   2  
     5175   2        do j = 1 to INN_SIZE;
     5176   3  
     5177   3           /*******************************************************/
     5178   3           /* The following assignments are semantically the same */
     5179   3           /* and should produce IDENTICAL code.                  */
     5180   3           /*******************************************************/
     5181   3  
     5182   3           s_element(i,j)                   = 1;
     5183   3           s_element(i)(j)                  = 1;
     5184   3           static_structure(i).s_element(j) = 1;
     5185   3           static_structure.s_element(i,j)  = 1;
     5186   3           static_structure.s_element(i)(j) = 1;     
     5187   3  
     5188   3        end;
     5189   2  
     5190   2     end;
     5191   1  
     5192   1     if I ^= MAX_SIZE + 1 then
     5193   1        do;
     5194   2        put skip (one) list ('Loop termination error 2');
     5195   2        end;
     5196   1  
     5197   1     put skip(one) list('Loop 2 ended fine.');
     5198   1  
     5199   1  
     5200   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5201   2  
     5202   2        do J = 1 to INN_SIZE;
     5203   3  
     5204   3           /*******************************************************/
     5205   3           /* The following assignments are semantically the same */
     5206   3           /* and should produce IDENTICAL code.                  */
     5207   3           /*******************************************************/
     5208   3  
     5209   3           a_element(I,J)                 = 1;
     5210   3           a_element(I)(J)                = 1;
     5211   3           auto_structure(I).a_element(J) = 1;
     5212   3           auto_structure.a_element(I,J)  = 1;
     5213   3           auto_structure.a_element(I)(J) = 1;     
     5214   3  
     5215   3        end;
     5216   2  
     5217   2     end;
     5218   1  
     5219   1     if I ^= MAX_SIZE + 1 then
     5220   1        do;
     5221   2        put skip (one) list ('Loop termination error 3');
     5222   2        end;
     5223   1  
     5224   1     put skip(one) list('Loop 3 ended fine.');
     5225   1  
     5226   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5227   2  
     5228   2        do j = 1 to INN_SIZE;
     5229   3  
     5230   3           /*******************************************************/
     5231   3           /* The following assignments are semantically the same */
     5232   3           /* and should produce IDENTICAL code.                  */
     5233   3           /*******************************************************/
     5234   3  
     5235   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5236   3           a_element(i)(j)                = 1;
     5237   3           auto_structure(i).a_element(j) = 1;
     5238   3           auto_structure.a_element(i,j)  = 1;
     5239   3           auto_structure.a_element(i)(j) = 1;     
     5240   3  
     5241   3        end;
     5242   2  
     5243   2     end;
     5244   1  
     5245   1     if I ^= MAX_SIZE + 1 then
     5246   1        do;
     5247   2        put skip (one) list ('Loop termination error 4');
     5248   2        end;
     5249   1  
     5250   1     put skip(one) list('Loop 4 ended fine.');
     5251   1  
     5252   1     /****************************************************************/
     5253   1     /* This test ensures that the above code works when executed in */
     5254   1     /* a nested procedure.                                          */
     5255   1     /****************************************************************/
     5256   1  
     5257   1     put skip (one) list ('Im about to call the internal procedure now');
     5258   1  
     5259   1     call run_inner_proc;
     5260   1  
     5261   1   one = 1;
     5262   1  
     5263   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5264   2  
     5265   2        do J = 1 to INN_SIZE;
     5266   3  
     5267   3           /*******************************************************/
     5268   3           /* The following assignments are semantically the same */
     5269   3           /* and should produce IDENTICAL code.                  */
     5270   3           /*******************************************************/
     5271   3  
     5272   3           s_element(I,J)                   = 1;
     5273   3           s_element(I)(J)                  = 1;
     5274   3           static_structure(I).s_element(J) = 1;
     5275   3           static_structure.s_element(I,J)  = 1;
     5276   3           static_structure.s_element(I)(J) = 1;     
     5277   3  
     5278   3        end;
     5279   2  
     5280   2     end;
     5281   1  
     5282   1     if I ^= MAX_SIZE + 1 then
     5283   1        do;
     5284   2        put skip (one) list ('Loop termination error 1');
     5285   2        end;
     5286   1  
     5287   1     put skip(one) list('Loop 1 ended fine.');
     5288   1  
     5289   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5290   2  
     5291   2        do j = 1 to INN_SIZE;
     5292   3  
     5293   3           /*******************************************************/
     5294   3           /* The following assignments are semantically the same */
     5295   3           /* and should produce IDENTICAL code.                  */
     5296   3           /*******************************************************/
     5297   3  
     5298   3           s_element(i,j)                   = 1;
     5299   3           s_element(i)(j)                  = 1;
     5300   3           static_structure(i).s_element(j) = 1;
     5301   3           static_structure.s_element(i,j)  = 1;
     5302   3           static_structure.s_element(i)(j) = 1;     
     5303   3  
     5304   3        end;
     5305   2  
     5306   2     end;
     5307   1  
     5308   1     if I ^= MAX_SIZE + 1 then
     5309   1        do;
     5310   2        put skip (one) list ('Loop termination error 2');
     5311   2        end;
     5312   1  
     5313   1     put skip(one) list('Loop 2 ended fine.');
     5314   1  
     5315   1  
     5316   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5317   2  
     5318   2        do J = 1 to INN_SIZE;
     5319   3  
     5320   3           /*******************************************************/
     5321   3           /* The following assignments are semantically the same */
     5322   3           /* and should produce IDENTICAL code.                  */
     5323   3           /*******************************************************/
     5324   3  
     5325   3           a_element(I,J)                 = 1;
     5326   3           a_element(I)(J)                = 1;
     5327   3           auto_structure(I).a_element(J) = 1;
     5328   3           auto_structure.a_element(I,J)  = 1;
     5329   3           auto_structure.a_element(I)(J) = 1;     
     5330   3  
     5331   3        end;
     5332   2  
     5333   2     end;
     5334   1  
     5335   1     if I ^= MAX_SIZE + 1 then
     5336   1        do;
     5337   2        put skip (one) list ('Loop termination error 3');
     5338   2        end;
     5339   1  
     5340   1     put skip(one) list('Loop 3 ended fine.');
     5341   1  
     5342   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5343   2  
     5344   2        do j = 1 to INN_SIZE;
     5345   3  
     5346   3           /*******************************************************/
     5347   3           /* The following assignments are semantically the same */
     5348   3           /* and should produce IDENTICAL code.                  */
     5349   3           /*******************************************************/
     5350   3  
     5351   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5352   3           a_element(i)(j)                = 1;
     5353   3           auto_structure(i).a_element(j) = 1;
     5354   3           auto_structure.a_element(i,j)  = 1;
     5355   3           auto_structure.a_element(i)(j) = 1;     
     5356   3  
     5357   3        end;
     5358   2  
     5359   2     end;
     5360   1  
     5361   1     if I ^= MAX_SIZE + 1 then
     5362   1        do;
     5363   2        put skip (one) list ('Loop termination error 4');
     5364   2        end;
     5365   1  
     5366   1     put skip(one) list('Loop 4 ended fine.');
     5367   1  
     5368   1     /****************************************************************/
     5369   1     /* This test ensures that the above code works when executed in */
     5370   1     /* a nested procedure.                                          */
     5371   1     /****************************************************************/
     5372   1  
     5373   1     put skip (one) list ('Im about to call the internal procedure now');
     5374   1  
     5375   1     call run_inner_proc;
     5376   1  
     5377   1   one = 1;
     5378   1  
     5379   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5380   2  
     5381   2        do J = 1 to INN_SIZE;
     5382   3  
     5383   3           /*******************************************************/
     5384   3           /* The following assignments are semantically the same */
     5385   3           /* and should produce IDENTICAL code.                  */
     5386   3           /*******************************************************/
     5387   3  
     5388   3           s_element(I,J)                   = 1;
     5389   3           s_element(I)(J)                  = 1;
     5390   3           static_structure(I).s_element(J) = 1;
     5391   3           static_structure.s_element(I,J)  = 1;
     5392   3           static_structure.s_element(I)(J) = 1;     
     5393   3  
     5394   3        end;
     5395   2  
     5396   2     end;
     5397   1  
     5398   1     if I ^= MAX_SIZE + 1 then
     5399   1        do;
     5400   2        put skip (one) list ('Loop termination error 1');
     5401   2        end;
     5402   1  
     5403   1     put skip(one) list('Loop 1 ended fine.');
     5404   1  
     5405   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5406   2  
     5407   2        do j = 1 to INN_SIZE;
     5408   3  
     5409   3           /*******************************************************/
     5410   3           /* The following assignments are semantically the same */
     5411   3           /* and should produce IDENTICAL code.                  */
     5412   3           /*******************************************************/
     5413   3  
     5414   3           s_element(i,j)                   = 1;
     5415   3           s_element(i)(j)                  = 1;
     5416   3           static_structure(i).s_element(j) = 1;
     5417   3           static_structure.s_element(i,j)  = 1;
     5418   3           static_structure.s_element(i)(j) = 1;     
     5419   3  
     5420   3        end;
     5421   2  
     5422   2     end;
     5423   1  
     5424   1     if I ^= MAX_SIZE + 1 then
     5425   1        do;
     5426   2        put skip (one) list ('Loop termination error 2');
     5427   2        end;
     5428   1  
     5429   1     put skip(one) list('Loop 2 ended fine.');
     5430   1  
     5431   1  
     5432   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5433   2  
     5434   2        do J = 1 to INN_SIZE;
     5435   3  
     5436   3           /*******************************************************/
     5437   3           /* The following assignments are semantically the same */
     5438   3           /* and should produce IDENTICAL code.                  */
     5439   3           /*******************************************************/
     5440   3  
     5441   3           a_element(I,J)                 = 1;
     5442   3           a_element(I)(J)                = 1;
     5443   3           auto_structure(I).a_element(J) = 1;
     5444   3           auto_structure.a_element(I,J)  = 1;
     5445   3           auto_structure.a_element(I)(J) = 1;     
     5446   3  
     5447   3        end;
     5448   2  
     5449   2     end;
     5450   1  
     5451   1     if I ^= MAX_SIZE + 1 then
     5452   1        do;
     5453   2        put skip (one) list ('Loop termination error 3');
     5454   2        end;
     5455   1  
     5456   1     put skip(one) list('Loop 3 ended fine.');
     5457   1  
     5458   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5459   2  
     5460   2        do j = 1 to INN_SIZE;
     5461   3  
     5462   3           /*******************************************************/
     5463   3           /* The following assignments are semantically the same */
     5464   3           /* and should produce IDENTICAL code.                  */
     5465   3           /*******************************************************/
     5466   3  
     5467   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5468   3           a_element(i)(j)                = 1;
     5469   3           auto_structure(i).a_element(j) = 1;
     5470   3           auto_structure.a_element(i,j)  = 1;
     5471   3           auto_structure.a_element(i)(j) = 1;     
     5472   3  
     5473   3        end;
     5474   2  
     5475   2     end;
     5476   1  
     5477   1     if I ^= MAX_SIZE + 1 then
     5478   1        do;
     5479   2        put skip (one) list ('Loop termination error 4');
     5480   2        end;
     5481   1  
     5482   1     put skip(one) list('Loop 4 ended fine.');
     5483   1  
     5484   1     /****************************************************************/
     5485   1     /* This test ensures that the above code works when executed in */
     5486   1     /* a nested procedure.                                          */
     5487   1     /****************************************************************/
     5488   1  
     5489   1     put skip (one) list ('Im about to call the internal procedure now');
     5490   1  
     5491   1     call run_inner_proc;
     5492   1  
     5493   1   one = 1;
     5494   1  
     5495   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5496   2  
     5497   2        do J = 1 to INN_SIZE;
     5498   3  
     5499   3           /*******************************************************/
     5500   3           /* The following assignments are semantically the same */
     5501   3           /* and should produce IDENTICAL code.                  */
     5502   3           /*******************************************************/
     5503   3  
     5504   3           s_element(I,J)                   = 1;
     5505   3           s_element(I)(J)                  = 1;
     5506   3           static_structure(I).s_element(J) = 1;
     5507   3           static_structure.s_element(I,J)  = 1;
     5508   3           static_structure.s_element(I)(J) = 1;     
     5509   3  
     5510   3        end;
     5511   2  
     5512   2     end;
     5513   1  
     5514   1     if I ^= MAX_SIZE + 1 then
     5515   1        do;
     5516   2        put skip (one) list ('Loop termination error 1');
     5517   2        end;
     5518   1  
     5519   1     put skip(one) list('Loop 1 ended fine.');
     5520   1  
     5521   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5522   2  
     5523   2        do j = 1 to INN_SIZE;
     5524   3  
     5525   3           /*******************************************************/
     5526   3           /* The following assignments are semantically the same */
     5527   3           /* and should produce IDENTICAL code.                  */
     5528   3           /*******************************************************/
     5529   3  
     5530   3           s_element(i,j)                   = 1;
     5531   3           s_element(i)(j)                  = 1;
     5532   3           static_structure(i).s_element(j) = 1;
     5533   3           static_structure.s_element(i,j)  = 1;
     5534   3           static_structure.s_element(i)(j) = 1;     
     5535   3  
     5536   3        end;
     5537   2  
     5538   2     end;
     5539   1  
     5540   1     if I ^= MAX_SIZE + 1 then
     5541   1        do;
     5542   2        put skip (one) list ('Loop termination error 2');
     5543   2        end;
     5544   1  
     5545   1     put skip(one) list('Loop 2 ended fine.');
     5546   1  
     5547   1  
     5548   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5549   2  
     5550   2        do J = 1 to INN_SIZE;
     5551   3  
     5552   3           /*******************************************************/
     5553   3           /* The following assignments are semantically the same */
     5554   3           /* and should produce IDENTICAL code.                  */
     5555   3           /*******************************************************/
     5556   3  
     5557   3           a_element(I,J)                 = 1;
     5558   3           a_element(I)(J)                = 1;
     5559   3           auto_structure(I).a_element(J) = 1;
     5560   3           auto_structure.a_element(I,J)  = 1;
     5561   3           auto_structure.a_element(I)(J) = 1;     
     5562   3  
     5563   3        end;
     5564   2  
     5565   2     end;
     5566   1  
     5567   1     if I ^= MAX_SIZE + 1 then
     5568   1        do;
     5569   2        put skip (one) list ('Loop termination error 3');
     5570   2        end;
     5571   1  
     5572   1     put skip(one) list('Loop 3 ended fine.');
     5573   1  
     5574   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5575   2  
     5576   2        do j = 1 to INN_SIZE;
     5577   3  
     5578   3           /*******************************************************/
     5579   3           /* The following assignments are semantically the same */
     5580   3           /* and should produce IDENTICAL code.                  */
     5581   3           /*******************************************************/
     5582   3  
     5583   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5584   3           a_element(i)(j)                = 1;
     5585   3           auto_structure(i).a_element(j) = 1;
     5586   3           auto_structure.a_element(i,j)  = 1;
     5587   3           auto_structure.a_element(i)(j) = 1;     
     5588   3  
     5589   3        end;
     5590   2  
     5591   2     end;
     5592   1  
     5593   1     if I ^= MAX_SIZE + 1 then
     5594   1        do;
     5595   2        put skip (one) list ('Loop termination error 4');
     5596   2        end;
     5597   1  
     5598   1     put skip(one) list('Loop 4 ended fine.');
     5599   1  

Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   2

     5600   1     /****************************************************************/
     5601   1     /* This test ensures that the above code works when executed in */
     5602   1     /* a nested procedure.                                          */
     5603   1     /****************************************************************/
     5604   1  
     5605   1     put skip (one) list ('Im about to call the internal procedure now');
     5606   1  
     5607   1     call run_inner_proc;
     5608   1  
     5609   1   one = 1;
     5610   1  
     5611   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5612   2  
     5613   2        do J = 1 to INN_SIZE;
     5614   3  
     5615   3           /*******************************************************/
     5616   3           /* The following assignments are semantically the same */
     5617   3           /* and should produce IDENTICAL code.                  */
     5618   3           /*******************************************************/
     5619   3  
     5620   3           s_element(I,J)                   = 1;
     5621   3           s_element(I)(J)                  = 1;
     5622   3           static_structure(I).s_element(J) = 1;
     5623   3           static_structure.s_element(I,J)  = 1;
     5624   3           static_structure.s_element(I)(J) = 1;     
     5625   3  
     5626   3        end;
     5627   2  
     5628   2     end;
     5629   1  
     5630   1     if I ^= MAX_SIZE + 1 then
     5631   1        do;
     5632   2        put skip (one) list ('Loop termination error 1');
     5633   2        end;
     5634   1  
     5635   1     put skip(one) list('Loop 1 ended fine.');
     5636   1  
     5637   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5638   2  
     5639   2        do j = 1 to INN_SIZE;
     5640   3  
     5641   3           /*******************************************************/
     5642   3           /* The following assignments are semantically the same */
     5643   3           /* and should produce IDENTICAL code.                  */
     5644   3           /*******************************************************/
     5645   3  
     5646   3           s_element(i,j)                   = 1;
     5647   3           s_element(i)(j)                  = 1;
     5648   3           static_structure(i).s_element(j) = 1;
     5649   3           static_structure.s_element(i,j)  = 1;
     5650   3           static_structure.s_element(i)(j) = 1;     
     5651   3  
     5652   3        end;
     5653   2  
     5654   2     end;
     5655   1  
     5656   1     if I ^= MAX_SIZE + 1 then
     5657   1        do;
     5658   2        put skip (one) list ('Loop termination error 2');
     5659   2        end;
     5660   1  
     5661   1     put skip(one) list('Loop 2 ended fine.');
     5662   1  
     5663   1  
     5664   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5665   2  
     5666   2        do J = 1 to INN_SIZE;
     5667   3  
     5668   3           /*******************************************************/
     5669   3           /* The following assignments are semantically the same */
     5670   3           /* and should produce IDENTICAL code.                  */
     5671   3           /*******************************************************/
     5672   3  
     5673   3           a_element(I,J)                 = 1;
     5674   3           a_element(I)(J)                = 1;
     5675   3           auto_structure(I).a_element(J) = 1;
     5676   3           auto_structure.a_element(I,J)  = 1;
     5677   3           auto_structure.a_element(I)(J) = 1;     
     5678   3  
     5679   3        end;
     5680   2  
     5681   2     end;
     5682   1  
     5683   1     if I ^= MAX_SIZE + 1 then
     5684   1        do;
     5685   2        put skip (one) list ('Loop termination error 3');
     5686   2        end;
     5687   1  
     5688   1     put skip(one) list('Loop 3 ended fine.');
     5689   1  
     5690   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5691   2  
     5692   2        do j = 1 to INN_SIZE;
     5693   3  
     5694   3           /*******************************************************/
     5695   3           /* The following assignments are semantically the same */
     5696   3           /* and should produce IDENTICAL code.                  */
     5697   3           /*******************************************************/
     5698   3  
     5699   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5700   3           a_element(i)(j)                = 1;
     5701   3           auto_structure(i).a_element(j) = 1;
     5702   3           auto_structure.a_element(i,j)  = 1;
     5703   3           auto_structure.a_element(i)(j) = 1;     
     5704   3  
     5705   3        end;
     5706   2  
     5707   2     end;
     5708   1  
     5709   1     if I ^= MAX_SIZE + 1 then
     5710   1        do;
     5711   2        put skip (one) list ('Loop termination error 4');
     5712   2        end;
     5713   1  
     5714   1     put skip(one) list('Loop 4 ended fine.');
     5715   1  
     5716   1     /****************************************************************/
     5717   1     /* This test ensures that the above code works when executed in */
     5718   1     /* a nested procedure.                                          */
     5719   1     /****************************************************************/
     5720   1  
     5721   1     put skip (one) list ('Im about to call the internal procedure now');
     5722   1  
     5723   1     call run_inner_proc;
     5724   1  
     5725   1   one = 1;
     5726   1  
     5727   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5728   2  
     5729   2        do J = 1 to INN_SIZE;
     5730   3  
     5731   3           /*******************************************************/
     5732   3           /* The following assignments are semantically the same */
     5733   3           /* and should produce IDENTICAL code.                  */
     5734   3           /*******************************************************/
     5735   3  
     5736   3           s_element(I,J)                   = 1;
     5737   3           s_element(I)(J)                  = 1;
     5738   3           static_structure(I).s_element(J) = 1;
     5739   3           static_structure.s_element(I,J)  = 1;
     5740   3           static_structure.s_element(I)(J) = 1;     
     5741   3  
     5742   3        end;
     5743   2  
     5744   2     end;
     5745   1  
     5746   1     if I ^= MAX_SIZE + 1 then
     5747   1        do;
     5748   2        put skip (one) list ('Loop termination error 1');
     5749   2        end;
     5750   1  
     5751   1     put skip(one) list('Loop 1 ended fine.');
     5752   1  
     5753   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5754   2  
     5755   2        do j = 1 to INN_SIZE;
     5756   3  
     5757   3           /*******************************************************/
     5758   3           /* The following assignments are semantically the same */
     5759   3           /* and should produce IDENTICAL code.                  */
     5760   3           /*******************************************************/
     5761   3  
     5762   3           s_element(i,j)                   = 1;
     5763   3           s_element(i)(j)                  = 1;
     5764   3           static_structure(i).s_element(j) = 1;
     5765   3           static_structure.s_element(i,j)  = 1;
     5766   3           static_structure.s_element(i)(j) = 1;     
     5767   3  
     5768   3        end;
     5769   2  
     5770   2     end;
     5771   1  
     5772   1     if I ^= MAX_SIZE + 1 then
     5773   1        do;
     5774   2        put skip (one) list ('Loop termination error 2');
     5775   2        end;
     5776   1  
     5777   1     put skip(one) list('Loop 2 ended fine.');
     5778   1  
     5779   1  
     5780   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5781   2  
     5782   2        do J = 1 to INN_SIZE;
     5783   3  
     5784   3           /*******************************************************/
     5785   3           /* The following assignments are semantically the same */
     5786   3           /* and should produce IDENTICAL code.                  */
     5787   3           /*******************************************************/
     5788   3  
     5789   3           a_element(I,J)                 = 1;
     5790   3           a_element(I)(J)                = 1;
     5791   3           auto_structure(I).a_element(J) = 1;
     5792   3           auto_structure.a_element(I,J)  = 1;
     5793   3           auto_structure.a_element(I)(J) = 1;     
     5794   3  
     5795   3        end;
     5796   2  
     5797   2     end;
     5798   1  
     5799   1     if I ^= MAX_SIZE + 1 then
     5800   1        do;
     5801   2        put skip (one) list ('Loop termination error 3');
     5802   2        end;
     5803   1  
     5804   1     put skip(one) list('Loop 3 ended fine.');
     5805   1  
     5806   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5807   2  
     5808   2        do j = 1 to INN_SIZE;
     5809   3  
     5810   3           /*******************************************************/
     5811   3           /* The following assignments are semantically the same */
     5812   3           /* and should produce IDENTICAL code.                  */
     5813   3           /*******************************************************/
     5814   3  
     5815   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5816   3           a_element(i)(j)                = 1;
     5817   3           auto_structure(i).a_element(j) = 1;
     5818   3           auto_structure.a_element(i,j)  = 1;
     5819   3           auto_structure.a_element(i)(j) = 1;     
     5820   3  
     5821   3        end;
     5822   2  
     5823   2     end;
     5824   1  
     5825   1     if I ^= MAX_SIZE + 1 then
     5826   1        do;
     5827   2        put skip (one) list ('Loop termination error 4');
     5828   2        end;
     5829   1  
     5830   1     put skip(one) list('Loop 4 ended fine.');
     5831   1  
     5832   1     /****************************************************************/
     5833   1     /* This test ensures that the above code works when executed in */
     5834   1     /* a nested procedure.                                          */
     5835   1     /****************************************************************/
     5836   1  
     5837   1     put skip (one) list ('Im about to call the internal procedure now');
     5838   1  
     5839   1     call run_inner_proc;
     5840   1  
     5841   1   one = 1;
     5842   1  
     5843   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5844   2  
     5845   2        do J = 1 to INN_SIZE;
     5846   3  
     5847   3           /*******************************************************/
     5848   3           /* The following assignments are semantically the same */
     5849   3           /* and should produce IDENTICAL code.                  */
     5850   3           /*******************************************************/
     5851   3  
     5852   3           s_element(I,J)                   = 1;
     5853   3           s_element(I)(J)                  = 1;
     5854   3           static_structure(I).s_element(J) = 1;
     5855   3           static_structure.s_element(I,J)  = 1;
     5856   3           static_structure.s_element(I)(J) = 1;     
     5857   3  
     5858   3        end;
     5859   2  
     5860   2     end;
     5861   1  
     5862   1     if I ^= MAX_SIZE + 1 then
     5863   1        do;
     5864   2        put skip (one) list ('Loop termination error 1');
     5865   2        end;
     5866   1  
     5867   1     put skip(one) list('Loop 1 ended fine.');
     5868   1  
     5869   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5870   2  
     5871   2        do j = 1 to INN_SIZE;
     5872   3  
     5873   3           /*******************************************************/
     5874   3           /* The following assignments are semantically the same */
     5875   3           /* and should produce IDENTICAL code.                  */
     5876   3           /*******************************************************/
     5877   3  
     5878   3           s_element(i,j)                   = 1;
     5879   3           s_element(i)(j)                  = 1;
     5880   3           static_structure(i).s_element(j) = 1;
     5881   3           static_structure.s_element(i,j)  = 1;
     5882   3           static_structure.s_element(i)(j) = 1;     
     5883   3  
     5884   3        end;
     5885   2  
     5886   2     end;
     5887   1  
     5888   1     if I ^= MAX_SIZE + 1 then
     5889   1        do;
     5890   2        put skip (one) list ('Loop termination error 2');
     5891   2        end;
     5892   1  
     5893   1     put skip(one) list('Loop 2 ended fine.');
     5894   1  
     5895   1  
     5896   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     5897   2  
     5898   2        do J = 1 to INN_SIZE;
     5899   3  
     5900   3           /*******************************************************/
     5901   3           /* The following assignments are semantically the same */
     5902   3           /* and should produce IDENTICAL code.                  */
     5903   3           /*******************************************************/
     5904   3  
     5905   3           a_element(I,J)                 = 1;
     5906   3           a_element(I)(J)                = 1;
     5907   3           auto_structure(I).a_element(J) = 1;
     5908   3           auto_structure.a_element(I,J)  = 1;
     5909   3           auto_structure.a_element(I)(J) = 1;     
     5910   3  
     5911   3        end;
     5912   2  
     5913   2     end;
     5914   1  
     5915   1     if I ^= MAX_SIZE + 1 then
     5916   1        do;
     5917   2        put skip (one) list ('Loop termination error 3');
     5918   2        end;
     5919   1  
     5920   1     put skip(one) list('Loop 3 ended fine.');
     5921   1  
     5922   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     5923   2  
     5924   2        do j = 1 to INN_SIZE;
     5925   3  
     5926   3           /*******************************************************/
     5927   3           /* The following assignments are semantically the same */
     5928   3           /* and should produce IDENTICAL code.                  */
     5929   3           /*******************************************************/
     5930   3  
     5931   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     5932   3           a_element(i)(j)                = 1;
     5933   3           auto_structure(i).a_element(j) = 1;
     5934   3           auto_structure.a_element(i,j)  = 1;
     5935   3           auto_structure.a_element(i)(j) = 1;     
     5936   3  
     5937   3        end;
     5938   2  
     5939   2     end;
     5940   1  
     5941   1     if I ^= MAX_SIZE + 1 then
     5942   1        do;
     5943   2        put skip (one) list ('Loop termination error 4');
     5944   2        end;
     5945   1  
     5946   1     put skip(one) list('Loop 4 ended fine.');
     5947   1  
     5948   1     /****************************************************************/
     5949   1     /* This test ensures that the above code works when executed in */
     5950   1     /* a nested procedure.                                          */
     5951   1     /****************************************************************/
     5952   1  
     5953   1     put skip (one) list ('Im about to call the internal procedure now');
     5954   1  
     5955   1     call run_inner_proc;
     5956   1  
     5957   1   one = 1;
     5958   1  
     5959   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     5960   2  
     5961   2        do J = 1 to INN_SIZE;
     5962   3  
     5963   3           /*******************************************************/
     5964   3           /* The following assignments are semantically the same */
     5965   3           /* and should produce IDENTICAL code.                  */
     5966   3           /*******************************************************/
     5967   3  
     5968   3           s_element(I,J)                   = 1;
     5969   3           s_element(I)(J)                  = 1;
     5970   3           static_structure(I).s_element(J) = 1;
     5971   3           static_structure.s_element(I,J)  = 1;
     5972   3           static_structure.s_element(I)(J) = 1;     
     5973   3  
     5974   3        end;
     5975   2  
     5976   2     end;
     5977   1  
     5978   1     if I ^= MAX_SIZE + 1 then
     5979   1        do;
     5980   2        put skip (one) list ('Loop termination error 1');
     5981   2        end;
     5982   1  
     5983   1     put skip(one) list('Loop 1 ended fine.');
     5984   1  
     5985   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     5986   2  
     5987   2        do j = 1 to INN_SIZE;
     5988   3  
     5989   3           /*******************************************************/
     5990   3           /* The following assignments are semantically the same */
     5991   3           /* and should produce IDENTICAL code.                  */
     5992   3           /*******************************************************/
     5993   3  
     5994   3           s_element(i,j)                   = 1;
     5995   3           s_element(i)(j)                  = 1;
     5996   3           static_structure(i).s_element(j) = 1;
     5997   3           static_structure.s_element(i,j)  = 1;
     5998   3           static_structure.s_element(i)(j) = 1;     
     5999   3  
     6000   3        end;
     6001   2  
     6002   2     end;
     6003   1  
     6004   1     if I ^= MAX_SIZE + 1 then
     6005   1        do;
     6006   2        put skip (one) list ('Loop termination error 2');
     6007   2        end;
     6008   1  
     6009   1     put skip(one) list('Loop 2 ended fine.');
     6010   1  
     6011   1  
     6012   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6013   2  
     6014   2        do J = 1 to INN_SIZE;
     6015   3  
     6016   3           /*******************************************************/
     6017   3           /* The following assignments are semantically the same */
     6018   3           /* and should produce IDENTICAL code.                  */
     6019   3           /*******************************************************/
     6020   3  
     6021   3           a_element(I,J)                 = 1;
     6022   3           a_element(I)(J)                = 1;
     6023   3           auto_structure(I).a_element(J) = 1;
     6024   3           auto_structure.a_element(I,J)  = 1;
     6025   3           auto_structure.a_element(I)(J) = 1;     
     6026   3  
     6027   3        end;
     6028   2  
     6029   2     end;
     6030   1  
     6031   1     if I ^= MAX_SIZE + 1 then
     6032   1        do;
     6033   2        put skip (one) list ('Loop termination error 3');
     6034   2        end;
     6035   1  
     6036   1     put skip(one) list('Loop 3 ended fine.');
     6037   1  
     6038   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6039   2  
     6040   2        do j = 1 to INN_SIZE;
     6041   3  
     6042   3           /*******************************************************/
     6043   3           /* The following assignments are semantically the same */
     6044   3           /* and should produce IDENTICAL code.                  */
     6045   3           /*******************************************************/
     6046   3  
     6047   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6048   3           a_element(i)(j)                = 1;
     6049   3           auto_structure(i).a_element(j) = 1;
     6050   3           auto_structure.a_element(i,j)  = 1;
     6051   3           auto_structure.a_element(i)(j) = 1;     
     6052   3  
     6053   3        end;
     6054   2  
     6055   2     end;
     6056   1  
     6057   1     if I ^= MAX_SIZE + 1 then
     6058   1        do;
     6059   2        put skip (one) list ('Loop termination error 4');
     6060   2        end;
     6061   1  
     6062   1     put skip(one) list('Loop 4 ended fine.');
     6063   1  
     6064   1     /****************************************************************/
     6065   1     /* This test ensures that the above code works when executed in */
     6066   1     /* a nested procedure.                                          */
     6067   1     /****************************************************************/
     6068   1  
     6069   1     put skip (one) list ('Im about to call the internal procedure now');
     6070   1  
     6071   1     call run_inner_proc;
     6072   1  
     6073   1   one = 1;
     6074   1  
     6075   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6076   2  
     6077   2        do J = 1 to INN_SIZE;
     6078   3  
     6079   3           /*******************************************************/
     6080   3           /* The following assignments are semantically the same */
     6081   3           /* and should produce IDENTICAL code.                  */
     6082   3           /*******************************************************/
     6083   3  
     6084   3           s_element(I,J)                   = 1;
     6085   3           s_element(I)(J)                  = 1;
     6086   3           static_structure(I).s_element(J) = 1;
     6087   3           static_structure.s_element(I,J)  = 1;
     6088   3           static_structure.s_element(I)(J) = 1;     
     6089   3  
     6090   3        end;
     6091   2  
     6092   2     end;
     6093   1  
     6094   1     if I ^= MAX_SIZE + 1 then
     6095   1        do;
     6096   2        put skip (one) list ('Loop termination error 1');
     6097   2        end;
     6098   1  
     6099   1     put skip(one) list('Loop 1 ended fine.');
     6100   1  
     6101   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6102   2  
     6103   2        do j = 1 to INN_SIZE;
     6104   3  
     6105   3           /*******************************************************/
     6106   3           /* The following assignments are semantically the same */
     6107   3           /* and should produce IDENTICAL code.                  */
     6108   3           /*******************************************************/
     6109   3  
     6110   3           s_element(i,j)                   = 1;
     6111   3           s_element(i)(j)                  = 1;
     6112   3           static_structure(i).s_element(j) = 1;
     6113   3           static_structure.s_element(i,j)  = 1;
     6114   3           static_structure.s_element(i)(j) = 1;     
     6115   3  
     6116   3        end;
     6117   2  
     6118   2     end;
     6119   1  
     6120   1     if I ^= MAX_SIZE + 1 then
     6121   1        do;
     6122   2        put skip (one) list ('Loop termination error 2');
     6123   2        end;
     6124   1  
     6125   1     put skip(one) list('Loop 2 ended fine.');
     6126   1  
     6127   1  
     6128   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6129   2  
     6130   2        do J = 1 to INN_SIZE;
     6131   3  
     6132   3           /*******************************************************/
     6133   3           /* The following assignments are semantically the same */
     6134   3           /* and should produce IDENTICAL code.                  */
     6135   3           /*******************************************************/
     6136   3  
     6137   3           a_element(I,J)                 = 1;
     6138   3           a_element(I)(J)                = 1;
     6139   3           auto_structure(I).a_element(J) = 1;
     6140   3           auto_structure.a_element(I,J)  = 1;
     6141   3           auto_structure.a_element(I)(J) = 1;     
     6142   3  
     6143   3        end;
     6144   2  
     6145   2     end;
     6146   1  
     6147   1     if I ^= MAX_SIZE + 1 then
     6148   1        do;
     6149   2        put skip (one) list ('Loop termination error 3');
     6150   2        end;
     6151   1  
     6152   1     put skip(one) list('Loop 3 ended fine.');
     6153   1  
     6154   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6155   2  
     6156   2        do j = 1 to INN_SIZE;
     6157   3  
     6158   3           /*******************************************************/
     6159   3           /* The following assignments are semantically the same */
     6160   3           /* and should produce IDENTICAL code.                  */
     6161   3           /*******************************************************/
     6162   3  
     6163   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6164   3           a_element(i)(j)                = 1;
     6165   3           auto_structure(i).a_element(j) = 1;
     6166   3           auto_structure.a_element(i,j)  = 1;
     6167   3           auto_structure.a_element(i)(j) = 1;     
     6168   3  
     6169   3        end;
     6170   2  
     6171   2     end;
     6172   1  
     6173   1     if I ^= MAX_SIZE + 1 then
     6174   1        do;
     6175   2        put skip (one) list ('Loop termination error 4');
     6176   2        end;
     6177   1  
     6178   1     put skip(one) list('Loop 4 ended fine.');
     6179   1  
     6180   1     /****************************************************************/
     6181   1     /* This test ensures that the above code works when executed in */
     6182   1     /* a nested procedure.                                          */
     6183   1     /****************************************************************/
     6184   1  
     6185   1     put skip (one) list ('Im about to call the internal procedure now');
     6186   1  
     6187   1     call run_inner_proc;
     6188   1  
     6189   1   one = 1;
     6190   1  
     6191   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6192   2  
     6193   2        do J = 1 to INN_SIZE;
     6194   3  
     6195   3           /*******************************************************/
     6196   3           /* The following assignments are semantically the same */
     6197   3           /* and should produce IDENTICAL code.                  */
     6198   3           /*******************************************************/
     6199   3  
     6200   3           s_element(I,J)                   = 1;
     6201   3           s_element(I)(J)                  = 1;
     6202   3           static_structure(I).s_element(J) = 1;
     6203   3           static_structure.s_element(I,J)  = 1;
     6204   3           static_structure.s_element(I)(J) = 1;     
     6205   3  
     6206   3        end;
     6207   2  
     6208   2     end;
     6209   1  
     6210   1     if I ^= MAX_SIZE + 1 then
     6211   1        do;
     6212   2        put skip (one) list ('Loop termination error 1');
     6213   2        end;
     6214   1  
     6215   1     put skip(one) list('Loop 1 ended fine.');
     6216   1  
     6217   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6218   2  
     6219   2        do j = 1 to INN_SIZE;
     6220   3  
     6221   3           /*******************************************************/
     6222   3           /* The following assignments are semantically the same */
     6223   3           /* and should produce IDENTICAL code.                  */
     6224   3           /*******************************************************/
     6225   3  
     6226   3           s_element(i,j)                   = 1;
     6227   3           s_element(i)(j)                  = 1;
     6228   3           static_structure(i).s_element(j) = 1;
     6229   3           static_structure.s_element(i,j)  = 1;
     6230   3           static_structure.s_element(i)(j) = 1;     
     6231   3  
     6232   3        end;
     6233   2  
     6234   2     end;
     6235   1  
     6236   1     if I ^= MAX_SIZE + 1 then
     6237   1        do;
     6238   2        put skip (one) list ('Loop termination error 2');
     6239   2        end;
     6240   1  
     6241   1     put skip(one) list('Loop 2 ended fine.');
     6242   1  
     6243   1  
     6244   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6245   2  
     6246   2        do J = 1 to INN_SIZE;
     6247   3  
     6248   3           /*******************************************************/
     6249   3           /* The following assignments are semantically the same */
     6250   3           /* and should produce IDENTICAL code.                  */
     6251   3           /*******************************************************/
     6252   3  
     6253   3           a_element(I,J)                 = 1;
     6254   3           a_element(I)(J)                = 1;
     6255   3           auto_structure(I).a_element(J) = 1;
     6256   3           auto_structure.a_element(I,J)  = 1;
     6257   3           auto_structure.a_element(I)(J) = 1;     
     6258   3  
     6259   3        end;
     6260   2  
     6261   2     end;
     6262   1  
     6263   1     if I ^= MAX_SIZE + 1 then
     6264   1        do;
     6265   2        put skip (one) list ('Loop termination error 3');
     6266   2        end;
     6267   1  
     6268   1     put skip(one) list('Loop 3 ended fine.');
     6269   1  
     6270   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6271   2  
     6272   2        do j = 1 to INN_SIZE;
     6273   3  
     6274   3           /*******************************************************/
     6275   3           /* The following assignments are semantically the same */
     6276   3           /* and should produce IDENTICAL code.                  */
     6277   3           /*******************************************************/
     6278   3  
     6279   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6280   3           a_element(i)(j)                = 1;
     6281   3           auto_structure(i).a_element(j) = 1;
     6282   3           auto_structure.a_element(i,j)  = 1;
     6283   3           auto_structure.a_element(i)(j) = 1;     
     6284   3  
     6285   3        end;
     6286   2  
     6287   2     end;
     6288   1  
     6289   1     if I ^= MAX_SIZE + 1 then
     6290   1        do;
     6291   2        put skip (one) list ('Loop termination error 4');
     6292   2        end;
     6293   1  
     6294   1     put skip(one) list('Loop 4 ended fine.');
     6295   1  
     6296   1     /****************************************************************/
     6297   1     /* This test ensures that the above code works when executed in */
     6298   1     /* a nested procedure.                                          */
     6299   1     /****************************************************************/
     6300   1  
     6301   1     put skip (one) list ('Im about to call the internal procedure now');
     6302   1  
     6303   1     call run_inner_proc;
     6304   1  
     6305   1   one = 1;
     6306   1  
     6307   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6308   2  
     6309   2        do J = 1 to INN_SIZE;
     6310   3  
     6311   3           /*******************************************************/
     6312   3           /* The following assignments are semantically the same */
     6313   3           /* and should produce IDENTICAL code.                  */
     6314   3           /*******************************************************/
     6315   3  
     6316   3           s_element(I,J)                   = 1;
     6317   3           s_element(I)(J)                  = 1;
     6318   3           static_structure(I).s_element(J) = 1;
     6319   3           static_structure.s_element(I,J)  = 1;
     6320   3           static_structure.s_element(I)(J) = 1;     
     6321   3  
     6322   3        end;
     6323   2  
     6324   2     end;
     6325   1  
     6326   1     if I ^= MAX_SIZE + 1 then
     6327   1        do;
     6328   2        put skip (one) list ('Loop termination error 1');
     6329   2        end;
     6330   1  
     6331   1     put skip(one) list('Loop 1 ended fine.');
     6332   1  
     6333   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6334   2  
     6335   2        do j = 1 to INN_SIZE;
     6336   3  
     6337   3           /*******************************************************/
     6338   3           /* The following assignments are semantically the same */
     6339   3           /* and should produce IDENTICAL code.                  */
     6340   3           /*******************************************************/
     6341   3  
     6342   3           s_element(i,j)                   = 1;
     6343   3           s_element(i)(j)                  = 1;
     6344   3           static_structure(i).s_element(j) = 1;
     6345   3           static_structure.s_element(i,j)  = 1;
     6346   3           static_structure.s_element(i)(j) = 1;     
     6347   3  
     6348   3        end;
     6349   2  
     6350   2     end;
     6351   1  
     6352   1     if I ^= MAX_SIZE + 1 then
     6353   1        do;
     6354   2        put skip (one) list ('Loop termination error 2');
     6355   2        end;
     6356   1  
     6357   1     put skip(one) list('Loop 2 ended fine.');
     6358   1  
     6359   1  
     6360   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6361   2  
     6362   2        do J = 1 to INN_SIZE;
     6363   3  
     6364   3           /*******************************************************/
     6365   3           /* The following assignments are semantically the same */
     6366   3           /* and should produce IDENTICAL code.                  */
     6367   3           /*******************************************************/
     6368   3  
     6369   3           a_element(I,J)                 = 1;
     6370   3           a_element(I)(J)                = 1;
     6371   3           auto_structure(I).a_element(J) = 1;
     6372   3           auto_structure.a_element(I,J)  = 1;
     6373   3           auto_structure.a_element(I)(J) = 1;     
     6374   3  
     6375   3        end;
     6376   2  
     6377   2     end;
     6378   1  
     6379   1     if I ^= MAX_SIZE + 1 then
     6380   1        do;
     6381   2        put skip (one) list ('Loop termination error 3');
     6382   2        end;
     6383   1  
     6384   1     put skip(one) list('Loop 3 ended fine.');
     6385   1  
     6386   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6387   2  
     6388   2        do j = 1 to INN_SIZE;
     6389   3  
     6390   3           /*******************************************************/
     6391   3           /* The following assignments are semantically the same */
     6392   3           /* and should produce IDENTICAL code.                  */
     6393   3           /*******************************************************/
     6394   3  
     6395   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6396   3           a_element(i)(j)                = 1;
     6397   3           auto_structure(i).a_element(j) = 1;
     6398   3           auto_structure.a_element(i,j)  = 1;
     6399   3           auto_structure.a_element(i)(j) = 1;     
     6400   3  
     6401   3        end;
     6402   2  
     6403   2     end;
     6404   1  
     6405   1     if I ^= MAX_SIZE + 1 then
     6406   1        do;
     6407   2        put skip (one) list ('Loop termination error 4');
     6408   2        end;
     6409   1  
     6410   1     put skip(one) list('Loop 4 ended fine.');
     6411   1  
     6412   1     /****************************************************************/
     6413   1     /* This test ensures that the above code works when executed in */
     6414   1     /* a nested procedure.                                          */
     6415   1     /****************************************************************/
     6416   1  
     6417   1     put skip (one) list ('Im about to call the internal procedure now');
     6418   1  
     6419   1     call run_inner_proc;
     6420   1  
     6421   1   one = 1;
     6422   1  
     6423   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6424   2  
     6425   2        do J = 1 to INN_SIZE;
     6426   3  
     6427   3           /*******************************************************/
     6428   3           /* The following assignments are semantically the same */
     6429   3           /* and should produce IDENTICAL code.                  */
     6430   3           /*******************************************************/
     6431   3  
     6432   3           s_element(I,J)                   = 1;
     6433   3           s_element(I)(J)                  = 1;
     6434   3           static_structure(I).s_element(J) = 1;
     6435   3           static_structure.s_element(I,J)  = 1;
     6436   3           static_structure.s_element(I)(J) = 1;     
     6437   3  
     6438   3        end;
     6439   2  
     6440   2     end;
     6441   1  
     6442   1     if I ^= MAX_SIZE + 1 then
     6443   1        do;
     6444   2        put skip (one) list ('Loop termination error 1');
     6445   2        end;
     6446   1  
     6447   1     put skip(one) list('Loop 1 ended fine.');
     6448   1  
     6449   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6450   2  
     6451   2        do j = 1 to INN_SIZE;
     6452   3  
     6453   3           /*******************************************************/
     6454   3           /* The following assignments are semantically the same */
     6455   3           /* and should produce IDENTICAL code.                  */
     6456   3           /*******************************************************/
     6457   3  
     6458   3           s_element(i,j)                   = 1;
     6459   3           s_element(i)(j)                  = 1;
     6460   3           static_structure(i).s_element(j) = 1;
     6461   3           static_structure.s_element(i,j)  = 1;
     6462   3           static_structure.s_element(i)(j) = 1;     
     6463   3  
     6464   3        end;
     6465   2  
     6466   2     end;
     6467   1  
     6468   1     if I ^= MAX_SIZE + 1 then
     6469   1        do;
     6470   2        put skip (one) list ('Loop termination error 2');
     6471   2        end;
     6472   1  
     6473   1     put skip(one) list('Loop 2 ended fine.');
     6474   1  
     6475   1  
     6476   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6477   2  
     6478   2        do J = 1 to INN_SIZE;
     6479   3  
     6480   3           /*******************************************************/
     6481   3           /* The following assignments are semantically the same */
     6482   3           /* and should produce IDENTICAL code.                  */
     6483   3           /*******************************************************/
     6484   3  
     6485   3           a_element(I,J)                 = 1;
     6486   3           a_element(I)(J)                = 1;
     6487   3           auto_structure(I).a_element(J) = 1;
     6488   3           auto_structure.a_element(I,J)  = 1;
     6489   3           auto_structure.a_element(I)(J) = 1;     
     6490   3  
     6491   3        end;
     6492   2  
     6493   2     end;
     6494   1  
     6495   1     if I ^= MAX_SIZE + 1 then
     6496   1        do;
     6497   2        put skip (one) list ('Loop termination error 3');
     6498   2        end;
     6499   1  
     6500   1     put skip(one) list('Loop 3 ended fine.');
     6501   1  
     6502   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6503   2  
     6504   2        do j = 1 to INN_SIZE;
     6505   3  
     6506   3           /*******************************************************/
     6507   3           /* The following assignments are semantically the same */
     6508   3           /* and should produce IDENTICAL code.                  */
     6509   3           /*******************************************************/
     6510   3  
     6511   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6512   3           a_element(i)(j)                = 1;
     6513   3           auto_structure(i).a_element(j) = 1;
     6514   3           auto_structure.a_element(i,j)  = 1;
     6515   3           auto_structure.a_element(i)(j) = 1;     
     6516   3  
     6517   3        end;
     6518   2  
     6519   2     end;
     6520   1  
     6521   1     if I ^= MAX_SIZE + 1 then
     6522   1        do;
     6523   2        put skip (one) list ('Loop termination error 4');
     6524   2        end;
     6525   1  
     6526   1     put skip(one) list('Loop 4 ended fine.');
     6527   1  
     6528   1     /****************************************************************/
     6529   1     /* This test ensures that the above code works when executed in */
     6530   1     /* a nested procedure.                                          */
     6531   1     /****************************************************************/
     6532   1  
     6533   1     put skip (one) list ('Im about to call the internal procedure now');
     6534   1  
     6535   1     call run_inner_proc;
     6536   1  
     6537   1   one = 1;
     6538   1  
     6539   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6540   2  
     6541   2        do J = 1 to INN_SIZE;
     6542   3  
     6543   3           /*******************************************************/
     6544   3           /* The following assignments are semantically the same */
     6545   3           /* and should produce IDENTICAL code.                  */
     6546   3           /*******************************************************/
     6547   3  
     6548   3           s_element(I,J)                   = 1;
     6549   3           s_element(I)(J)                  = 1;
     6550   3           static_structure(I).s_element(J) = 1;
     6551   3           static_structure.s_element(I,J)  = 1;
     6552   3           static_structure.s_element(I)(J) = 1;     
     6553   3  
     6554   3        end;
     6555   2  
     6556   2     end;
     6557   1  
     6558   1     if I ^= MAX_SIZE + 1 then
     6559   1        do;
     6560   2        put skip (one) list ('Loop termination error 1');
     6561   2        end;
     6562   1  
     6563   1     put skip(one) list('Loop 1 ended fine.');
     6564   1  
     6565   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6566   2  
     6567   2        do j = 1 to INN_SIZE;
     6568   3  
     6569   3           /*******************************************************/
     6570   3           /* The following assignments are semantically the same */
     6571   3           /* and should produce IDENTICAL code.                  */
     6572   3           /*******************************************************/
     6573   3  
     6574   3           s_element(i,j)                   = 1;
     6575   3           s_element(i)(j)                  = 1;
     6576   3           static_structure(i).s_element(j) = 1;
     6577   3           static_structure.s_element(i,j)  = 1;
     6578   3           static_structure.s_element(i)(j) = 1;     
     6579   3  
     6580   3        end;
     6581   2  
     6582   2     end;
     6583   1  
     6584   1     if I ^= MAX_SIZE + 1 then
     6585   1        do;
     6586   2        put skip (one) list ('Loop termination error 2');
     6587   2        end;
     6588   1  
     6589   1     put skip(one) list('Loop 2 ended fine.');
     6590   1  
     6591   1  
     6592   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6593   2  
     6594   2        do J = 1 to INN_SIZE;
     6595   3  
     6596   3           /*******************************************************/
     6597   3           /* The following assignments are semantically the same */
     6598   3           /* and should produce IDENTICAL code.                  */
     6599   3           /*******************************************************/
     6600   3  
     6601   3           a_element(I,J)                 = 1;
     6602   3           a_element(I)(J)                = 1;
     6603   3           auto_structure(I).a_element(J) = 1;
     6604   3           auto_structure.a_element(I,J)  = 1;
     6605   3           auto_structure.a_element(I)(J) = 1;     
     6606   3  
     6607   3        end;
     6608   2  
     6609   2     end;
     6610   1  
     6611   1     if I ^= MAX_SIZE + 1 then
     6612   1        do;
     6613   2        put skip (one) list ('Loop termination error 3');
     6614   2        end;
     6615   1  
     6616   1     put skip(one) list('Loop 3 ended fine.');
     6617   1  
     6618   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6619   2  
     6620   2        do j = 1 to INN_SIZE;
     6621   3  
     6622   3           /*******************************************************/
     6623   3           /* The following assignments are semantically the same */
     6624   3           /* and should produce IDENTICAL code.                  */
     6625   3           /*******************************************************/
     6626   3  
     6627   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6628   3           a_element(i)(j)                = 1;
     6629   3           auto_structure(i).a_element(j) = 1;
     6630   3           auto_structure.a_element(i,j)  = 1;
     6631   3           auto_structure.a_element(i)(j) = 1;     
     6632   3  
     6633   3        end;
     6634   2  
     6635   2     end;
     6636   1  
     6637   1     if I ^= MAX_SIZE + 1 then
     6638   1        do;
     6639   2        put skip (one) list ('Loop termination error 4');
     6640   2        end;
     6641   1  
     6642   1     put skip(one) list('Loop 4 ended fine.');
     6643   1  
     6644   1     /****************************************************************/
     6645   1     /* This test ensures that the above code works when executed in */
     6646   1     /* a nested procedure.                                          */
     6647   1     /****************************************************************/
     6648   1  
     6649   1     put skip (one) list ('Im about to call the internal procedure now');
     6650   1  
     6651   1     call run_inner_proc;
     6652   1  
     6653   1   one = 1;
     6654   1  
     6655   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6656   2  
     6657   2        do J = 1 to INN_SIZE;
     6658   3  
     6659   3           /*******************************************************/
     6660   3           /* The following assignments are semantically the same */
     6661   3           /* and should produce IDENTICAL code.                  */
     6662   3           /*******************************************************/
     6663   3  
     6664   3           s_element(I,J)                   = 1;
     6665   3           s_element(I)(J)                  = 1;
     6666   3           static_structure(I).s_element(J) = 1;
     6667   3           static_structure.s_element(I,J)  = 1;
     6668   3           static_structure.s_element(I)(J) = 1;     
     6669   3  
     6670   3        end;
     6671   2  
     6672   2     end;
     6673   1  
     6674   1     if I ^= MAX_SIZE + 1 then
     6675   1        do;
     6676   2        put skip (one) list ('Loop termination error 1');
     6677   2        end;
     6678   1  
     6679   1     put skip(one) list('Loop 1 ended fine.');
     6680   1  
     6681   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6682   2  
     6683   2        do j = 1 to INN_SIZE;
     6684   3  
     6685   3           /*******************************************************/
     6686   3           /* The following assignments are semantically the same */
     6687   3           /* and should produce IDENTICAL code.                  */
     6688   3           /*******************************************************/
     6689   3  
     6690   3           s_element(i,j)                   = 1;
     6691   3           s_element(i)(j)                  = 1;
     6692   3           static_structure(i).s_element(j) = 1;
     6693   3           static_structure.s_element(i,j)  = 1;
     6694   3           static_structure.s_element(i)(j) = 1;     
     6695   3  
     6696   3        end;
     6697   2  
     6698   2     end;
     6699   1  
     6700   1     if I ^= MAX_SIZE + 1 then
     6701   1        do;
     6702   2        put skip (one) list ('Loop termination error 2');
     6703   2        end;
     6704   1  
     6705   1     put skip(one) list('Loop 2 ended fine.');
     6706   1  
     6707   1  
     6708   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6709   2  
     6710   2        do J = 1 to INN_SIZE;
     6711   3  
     6712   3           /*******************************************************/
     6713   3           /* The following assignments are semantically the same */
     6714   3           /* and should produce IDENTICAL code.                  */
     6715   3           /*******************************************************/
     6716   3  
     6717   3           a_element(I,J)                 = 1;
     6718   3           a_element(I)(J)                = 1;
     6719   3           auto_structure(I).a_element(J) = 1;
     6720   3           auto_structure.a_element(I,J)  = 1;
     6721   3           auto_structure.a_element(I)(J) = 1;     
     6722   3  
     6723   3        end;
     6724   2  
     6725   2     end;
     6726   1  
     6727   1     if I ^= MAX_SIZE + 1 then
     6728   1        do;
     6729   2        put skip (one) list ('Loop termination error 3');
     6730   2        end;
     6731   1  
     6732   1     put skip(one) list('Loop 3 ended fine.');
     6733   1  
     6734   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6735   2  
     6736   2        do j = 1 to INN_SIZE;
     6737   3  
     6738   3           /*******************************************************/
     6739   3           /* The following assignments are semantically the same */
     6740   3           /* and should produce IDENTICAL code.                  */
     6741   3           /*******************************************************/
     6742   3  
     6743   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6744   3           a_element(i)(j)                = 1;
     6745   3           auto_structure(i).a_element(j) = 1;
     6746   3           auto_structure.a_element(i,j)  = 1;
     6747   3           auto_structure.a_element(i)(j) = 1;     
     6748   3  
     6749   3        end;
     6750   2  
     6751   2     end;
     6752   1  
     6753   1     if I ^= MAX_SIZE + 1 then
     6754   1        do;
     6755   2        put skip (one) list ('Loop termination error 4');
     6756   2        end;
     6757   1  
     6758   1     put skip(one) list('Loop 4 ended fine.');
     6759   1  
     6760   1     /****************************************************************/
     6761   1     /* This test ensures that the above code works when executed in */
     6762   1     /* a nested procedure.                                          */
     6763   1     /****************************************************************/
     6764   1  
     6765   1     put skip (one) list ('Im about to call the internal procedure now');
     6766   1  
     6767   1     call run_inner_proc;
     6768   1  
     6769   1   one = 1;
     6770   1  
     6771   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6772   2  
     6773   2        do J = 1 to INN_SIZE;
     6774   3  
     6775   3           /*******************************************************/
     6776   3           /* The following assignments are semantically the same */
     6777   3           /* and should produce IDENTICAL code.                  */
     6778   3           /*******************************************************/
     6779   3  
     6780   3           s_element(I,J)                   = 1;
     6781   3           s_element(I)(J)                  = 1;
     6782   3           static_structure(I).s_element(J) = 1;
     6783   3           static_structure.s_element(I,J)  = 1;
     6784   3           static_structure.s_element(I)(J) = 1;     
     6785   3  
     6786   3        end;
     6787   2  
     6788   2     end;
     6789   1  
     6790   1     if I ^= MAX_SIZE + 1 then
     6791   1        do;
     6792   2        put skip (one) list ('Loop termination error 1');
     6793   2        end;
     6794   1  
     6795   1     put skip(one) list('Loop 1 ended fine.');
     6796   1  
     6797   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6798   2  
     6799   2        do j = 1 to INN_SIZE;
     6800   3  
     6801   3           /*******************************************************/
     6802   3           /* The following assignments are semantically the same */
     6803   3           /* and should produce IDENTICAL code.                  */
     6804   3           /*******************************************************/
     6805   3  
     6806   3           s_element(i,j)                   = 1;
     6807   3           s_element(i)(j)                  = 1;
     6808   3           static_structure(i).s_element(j) = 1;
     6809   3           static_structure.s_element(i,j)  = 1;
     6810   3           static_structure.s_element(i)(j) = 1;     
     6811   3  
     6812   3        end;
     6813   2  
     6814   2     end;
     6815   1  
     6816   1     if I ^= MAX_SIZE + 1 then
     6817   1        do;
     6818   2        put skip (one) list ('Loop termination error 2');
     6819   2        end;
     6820   1  
     6821   1     put skip(one) list('Loop 2 ended fine.');
     6822   1  
     6823   1  
     6824   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6825   2  
     6826   2        do J = 1 to INN_SIZE;
     6827   3  
     6828   3           /*******************************************************/
     6829   3           /* The following assignments are semantically the same */
     6830   3           /* and should produce IDENTICAL code.                  */
     6831   3           /*******************************************************/
     6832   3  
     6833   3           a_element(I,J)                 = 1;
     6834   3           a_element(I)(J)                = 1;
     6835   3           auto_structure(I).a_element(J) = 1;
     6836   3           auto_structure.a_element(I,J)  = 1;
     6837   3           auto_structure.a_element(I)(J) = 1;     
     6838   3  
     6839   3        end;
     6840   2  
     6841   2     end;
     6842   1  
     6843   1     if I ^= MAX_SIZE + 1 then
     6844   1        do;
     6845   2        put skip (one) list ('Loop termination error 3');
     6846   2        end;
     6847   1  
     6848   1     put skip(one) list('Loop 3 ended fine.');
     6849   1  
     6850   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6851   2  
     6852   2        do j = 1 to INN_SIZE;
     6853   3  
     6854   3           /*******************************************************/
     6855   3           /* The following assignments are semantically the same */
     6856   3           /* and should produce IDENTICAL code.                  */
     6857   3           /*******************************************************/
     6858   3  
     6859   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6860   3           a_element(i)(j)                = 1;
     6861   3           auto_structure(i).a_element(j) = 1;
     6862   3           auto_structure.a_element(i,j)  = 1;
     6863   3           auto_structure.a_element(i)(j) = 1;     
     6864   3  
     6865   3        end;
     6866   2  
     6867   2     end;
     6868   1  
     6869   1     if I ^= MAX_SIZE + 1 then
     6870   1        do;
     6871   2        put skip (one) list ('Loop termination error 4');
     6872   2        end;
     6873   1  
     6874   1     put skip(one) list('Loop 4 ended fine.');
     6875   1  
     6876   1     /****************************************************************/
     6877   1     /* This test ensures that the above code works when executed in */
     6878   1     /* a nested procedure.                                          */
     6879   1     /****************************************************************/
     6880   1  
     6881   1     put skip (one) list ('Im about to call the internal procedure now');
     6882   1  
     6883   1     call run_inner_proc;
     6884   1  
     6885   1   one = 1;
     6886   1  
     6887   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     6888   2  
     6889   2        do J = 1 to INN_SIZE;
     6890   3  
     6891   3           /*******************************************************/
     6892   3           /* The following assignments are semantically the same */
     6893   3           /* and should produce IDENTICAL code.                  */
     6894   3           /*******************************************************/
     6895   3  
     6896   3           s_element(I,J)                   = 1;
     6897   3           s_element(I)(J)                  = 1;
     6898   3           static_structure(I).s_element(J) = 1;
     6899   3           static_structure.s_element(I,J)  = 1;
     6900   3           static_structure.s_element(I)(J) = 1;     
     6901   3  
     6902   3        end;
     6903   2  
     6904   2     end;
     6905   1  
     6906   1     if I ^= MAX_SIZE + 1 then
     6907   1        do;
     6908   2        put skip (one) list ('Loop termination error 1');
     6909   2        end;
     6910   1  
     6911   1     put skip(one) list('Loop 1 ended fine.');
     6912   1  
     6913   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     6914   2  
     6915   2        do j = 1 to INN_SIZE;
     6916   3  
     6917   3           /*******************************************************/
     6918   3           /* The following assignments are semantically the same */
     6919   3           /* and should produce IDENTICAL code.                  */
     6920   3           /*******************************************************/
     6921   3  
     6922   3           s_element(i,j)                   = 1;
     6923   3           s_element(i)(j)                  = 1;
     6924   3           static_structure(i).s_element(j) = 1;
     6925   3           static_structure.s_element(i,j)  = 1;
     6926   3           static_structure.s_element(i)(j) = 1;     
     6927   3  
     6928   3        end;
     6929   2  
     6930   2     end;
     6931   1  
     6932   1     if I ^= MAX_SIZE + 1 then
     6933   1        do;
     6934   2        put skip (one) list ('Loop termination error 2');
     6935   2        end;
     6936   1  
     6937   1     put skip(one) list('Loop 2 ended fine.');
     6938   1  
     6939   1  
     6940   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     6941   2  
     6942   2        do J = 1 to INN_SIZE;
     6943   3  
     6944   3           /*******************************************************/
     6945   3           /* The following assignments are semantically the same */
     6946   3           /* and should produce IDENTICAL code.                  */
     6947   3           /*******************************************************/
     6948   3  
     6949   3           a_element(I,J)                 = 1;
     6950   3           a_element(I)(J)                = 1;
     6951   3           auto_structure(I).a_element(J) = 1;
     6952   3           auto_structure.a_element(I,J)  = 1;
     6953   3           auto_structure.a_element(I)(J) = 1;     
     6954   3  
     6955   3        end;
     6956   2  
     6957   2     end;
     6958   1  
     6959   1     if I ^= MAX_SIZE + 1 then
     6960   1        do;
     6961   2        put skip (one) list ('Loop termination error 3');
     6962   2        end;
     6963   1  
     6964   1     put skip(one) list('Loop 3 ended fine.');
     6965   1  
     6966   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     6967   2  
     6968   2        do j = 1 to INN_SIZE;
     6969   3  
     6970   3           /*******************************************************/
     6971   3           /* The following assignments are semantically the same */
     6972   3           /* and should produce IDENTICAL code.                  */
     6973   3           /*******************************************************/
     6974   3  
     6975   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     6976   3           a_element(i)(j)                = 1;
     6977   3           auto_structure(i).a_element(j) = 1;
     6978   3           auto_structure.a_element(i,j)  = 1;
     6979   3           auto_structure.a_element(i)(j) = 1;     
     6980   3  
     6981   3        end;
     6982   2  
     6983   2     end;
     6984   1  
     6985   1     if I ^= MAX_SIZE + 1 then
     6986   1        do;
     6987   2        put skip (one) list ('Loop termination error 4');
     6988   2        end;
     6989   1  
     6990   1     put skip(one) list('Loop 4 ended fine.');
     6991   1  
     6992   1     /****************************************************************/
     6993   1     /* This test ensures that the above code works when executed in */
     6994   1     /* a nested procedure.                                          */
     6995   1     /****************************************************************/
     6996   1  
     6997   1     put skip (one) list ('Im about to call the internal procedure now');
     6998   1  
     6999   1     call run_inner_proc;
     7000   1  
     7001   1   one = 1;
     7002   1  
     7003   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7004   2  
     7005   2        do J = 1 to INN_SIZE;
     7006   3  
     7007   3           /*******************************************************/
     7008   3           /* The following assignments are semantically the same */
     7009   3           /* and should produce IDENTICAL code.                  */
     7010   3           /*******************************************************/
     7011   3  
     7012   3           s_element(I,J)                   = 1;
     7013   3           s_element(I)(J)                  = 1;
     7014   3           static_structure(I).s_element(J) = 1;
     7015   3           static_structure.s_element(I,J)  = 1;
     7016   3           static_structure.s_element(I)(J) = 1;     
     7017   3  
     7018   3        end;
     7019   2  
     7020   2     end;
     7021   1  
     7022   1     if I ^= MAX_SIZE + 1 then
     7023   1        do;
     7024   2        put skip (one) list ('Loop termination error 1');
     7025   2        end;
     7026   1  
     7027   1     put skip(one) list('Loop 1 ended fine.');
     7028   1  
     7029   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7030   2  
     7031   2        do j = 1 to INN_SIZE;
     7032   3  
     7033   3           /*******************************************************/
     7034   3           /* The following assignments are semantically the same */
     7035   3           /* and should produce IDENTICAL code.                  */
     7036   3           /*******************************************************/
     7037   3  
     7038   3           s_element(i,j)                   = 1;
     7039   3           s_element(i)(j)                  = 1;
     7040   3           static_structure(i).s_element(j) = 1;
     7041   3           static_structure.s_element(i,j)  = 1;
     7042   3           static_structure.s_element(i)(j) = 1;     
     7043   3  
     7044   3        end;
     7045   2  
     7046   2     end;
     7047   1  
     7048   1     if I ^= MAX_SIZE + 1 then
     7049   1        do;
     7050   2        put skip (one) list ('Loop termination error 2');
     7051   2        end;
     7052   1  
     7053   1     put skip(one) list('Loop 2 ended fine.');
     7054   1  
     7055   1  
     7056   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7057   2  
     7058   2        do J = 1 to INN_SIZE;
     7059   3  
     7060   3           /*******************************************************/
     7061   3           /* The following assignments are semantically the same */
     7062   3           /* and should produce IDENTICAL code.                  */
     7063   3           /*******************************************************/
     7064   3  
     7065   3           a_element(I,J)                 = 1;
     7066   3           a_element(I)(J)                = 1;
     7067   3           auto_structure(I).a_element(J) = 1;
     7068   3           auto_structure.a_element(I,J)  = 1;
     7069   3           auto_structure.a_element(I)(J) = 1;     
     7070   3  
     7071   3        end;
     7072   2  
     7073   2     end;
     7074   1  
     7075   1     if I ^= MAX_SIZE + 1 then
     7076   1        do;
     7077   2        put skip (one) list ('Loop termination error 3');
     7078   2        end;
     7079   1  
     7080   1     put skip(one) list('Loop 3 ended fine.');
     7081   1  
     7082   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7083   2  
     7084   2        do j = 1 to INN_SIZE;
     7085   3  
     7086   3           /*******************************************************/
     7087   3           /* The following assignments are semantically the same */
     7088   3           /* and should produce IDENTICAL code.                  */
     7089   3           /*******************************************************/
     7090   3  
     7091   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7092   3           a_element(i)(j)                = 1;
     7093   3           auto_structure(i).a_element(j) = 1;
     7094   3           auto_structure.a_element(i,j)  = 1;
     7095   3           auto_structure.a_element(i)(j) = 1;     
     7096   3  
     7097   3        end;
     7098   2  
     7099   2     end;
     7100   1  
     7101   1     if I ^= MAX_SIZE + 1 then
     7102   1        do;
     7103   2        put skip (one) list ('Loop termination error 4');
     7104   2        end;
     7105   1  
     7106   1     put skip(one) list('Loop 4 ended fine.');
     7107   1  
     7108   1     /****************************************************************/
     7109   1     /* This test ensures that the above code works when executed in */
     7110   1     /* a nested procedure.                                          */
     7111   1     /****************************************************************/
     7112   1  
     7113   1     put skip (one) list ('Im about to call the internal procedure now');
     7114   1  
     7115   1     call run_inner_proc;
     7116   1  
     7117   1   one = 1;
     7118   1  
     7119   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7120   2  
     7121   2        do J = 1 to INN_SIZE;
     7122   3  
     7123   3           /*******************************************************/
     7124   3           /* The following assignments are semantically the same */
     7125   3           /* and should produce IDENTICAL code.                  */
     7126   3           /*******************************************************/
     7127   3  
     7128   3           s_element(I,J)                   = 1;
     7129   3           s_element(I)(J)                  = 1;
     7130   3           static_structure(I).s_element(J) = 1;
     7131   3           static_structure.s_element(I,J)  = 1;
     7132   3           static_structure.s_element(I)(J) = 1;     
     7133   3  
     7134   3        end;
     7135   2  
     7136   2     end;
     7137   1  
     7138   1     if I ^= MAX_SIZE + 1 then
     7139   1        do;
     7140   2        put skip (one) list ('Loop termination error 1');
     7141   2        end;
     7142   1  
     7143   1     put skip(one) list('Loop 1 ended fine.');
     7144   1  
     7145   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7146   2  
     7147   2        do j = 1 to INN_SIZE;
     7148   3  
     7149   3           /*******************************************************/
     7150   3           /* The following assignments are semantically the same */
     7151   3           /* and should produce IDENTICAL code.                  */
     7152   3           /*******************************************************/
     7153   3  
     7154   3           s_element(i,j)                   = 1;
     7155   3           s_element(i)(j)                  = 1;
     7156   3           static_structure(i).s_element(j) = 1;
     7157   3           static_structure.s_element(i,j)  = 1;
     7158   3           static_structure.s_element(i)(j) = 1;     
     7159   3  
     7160   3        end;
     7161   2  
     7162   2     end;
     7163   1  
     7164   1     if I ^= MAX_SIZE + 1 then
     7165   1        do;
     7166   2        put skip (one) list ('Loop termination error 2');
     7167   2        end;
     7168   1  
     7169   1     put skip(one) list('Loop 2 ended fine.');
     7170   1  
     7171   1  
     7172   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7173   2  
     7174   2        do J = 1 to INN_SIZE;
     7175   3  
     7176   3           /*******************************************************/
     7177   3           /* The following assignments are semantically the same */
     7178   3           /* and should produce IDENTICAL code.                  */
     7179   3           /*******************************************************/
     7180   3  
     7181   3           a_element(I,J)                 = 1;
     7182   3           a_element(I)(J)                = 1;
     7183   3           auto_structure(I).a_element(J) = 1;
     7184   3           auto_structure.a_element(I,J)  = 1;
     7185   3           auto_structure.a_element(I)(J) = 1;     
     7186   3  
     7187   3        end;
     7188   2  
     7189   2     end;
     7190   1  
     7191   1     if I ^= MAX_SIZE + 1 then
     7192   1        do;
     7193   2        put skip (one) list ('Loop termination error 3');
     7194   2        end;
     7195   1  
     7196   1     put skip(one) list('Loop 3 ended fine.');
     7197   1  
     7198   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7199   2  
     7200   2        do j = 1 to INN_SIZE;
     7201   3  
     7202   3           /*******************************************************/
     7203   3           /* The following assignments are semantically the same */
     7204   3           /* and should produce IDENTICAL code.                  */
     7205   3           /*******************************************************/
     7206   3  
     7207   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7208   3           a_element(i)(j)                = 1;
     7209   3           auto_structure(i).a_element(j) = 1;
     7210   3           auto_structure.a_element(i,j)  = 1;
     7211   3           auto_structure.a_element(i)(j) = 1;     
     7212   3  
     7213   3        end;
     7214   2  
     7215   2     end;
     7216   1  
     7217   1     if I ^= MAX_SIZE + 1 then
     7218   1        do;
     7219   2        put skip (one) list ('Loop termination error 4');
     7220   2        end;
     7221   1  
     7222   1     put skip(one) list('Loop 4 ended fine.');
     7223   1  
     7224   1     /****************************************************************/
     7225   1     /* This test ensures that the above code works when executed in */
     7226   1     /* a nested procedure.                                          */
     7227   1     /****************************************************************/
     7228   1  
     7229   1     put skip (one) list ('Im about to call the internal procedure now');
     7230   1  
     7231   1     call run_inner_proc;
     7232   1  
     7233   1   one = 1;
     7234   1  
     7235   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7236   2  
     7237   2        do J = 1 to INN_SIZE;
     7238   3  
     7239   3           /*******************************************************/
     7240   3           /* The following assignments are semantically the same */
     7241   3           /* and should produce IDENTICAL code.                  */
     7242   3           /*******************************************************/
     7243   3  
     7244   3           s_element(I,J)                   = 1;
     7245   3           s_element(I)(J)                  = 1;
     7246   3           static_structure(I).s_element(J) = 1;
     7247   3           static_structure.s_element(I,J)  = 1;
     7248   3           static_structure.s_element(I)(J) = 1;     
     7249   3  
     7250   3        end;
     7251   2  
     7252   2     end;
     7253   1  
     7254   1     if I ^= MAX_SIZE + 1 then
     7255   1        do;
     7256   2        put skip (one) list ('Loop termination error 1');
     7257   2        end;
     7258   1  
     7259   1     put skip(one) list('Loop 1 ended fine.');
     7260   1  
     7261   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7262   2  
     7263   2        do j = 1 to INN_SIZE;
     7264   3  
     7265   3           /*******************************************************/
     7266   3           /* The following assignments are semantically the same */
     7267   3           /* and should produce IDENTICAL code.                  */
     7268   3           /*******************************************************/
     7269   3  
     7270   3           s_element(i,j)                   = 1;
     7271   3           s_element(i)(j)                  = 1;
     7272   3           static_structure(i).s_element(j) = 1;
     7273   3           static_structure.s_element(i,j)  = 1;
     7274   3           static_structure.s_element(i)(j) = 1;     
     7275   3  
     7276   3        end;
     7277   2  
     7278   2     end;
     7279   1  
     7280   1     if I ^= MAX_SIZE + 1 then
     7281   1        do;
     7282   2        put skip (one) list ('Loop termination error 2');
     7283   2        end;
     7284   1  
     7285   1     put skip(one) list('Loop 2 ended fine.');
     7286   1  
     7287   1  
     7288   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7289   2  
     7290   2        do J = 1 to INN_SIZE;
     7291   3  
     7292   3           /*******************************************************/
     7293   3           /* The following assignments are semantically the same */
     7294   3           /* and should produce IDENTICAL code.                  */
     7295   3           /*******************************************************/
     7296   3  
     7297   3           a_element(I,J)                 = 1;
     7298   3           a_element(I)(J)                = 1;
     7299   3           auto_structure(I).a_element(J) = 1;
     7300   3           auto_structure.a_element(I,J)  = 1;
     7301   3           auto_structure.a_element(I)(J) = 1;     
     7302   3  
     7303   3        end;
     7304   2  
     7305   2     end;
     7306   1  
     7307   1     if I ^= MAX_SIZE + 1 then
     7308   1        do;
     7309   2        put skip (one) list ('Loop termination error 3');
     7310   2        end;
     7311   1  
     7312   1     put skip(one) list('Loop 3 ended fine.');
     7313   1  
     7314   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7315   2  
     7316   2        do j = 1 to INN_SIZE;
     7317   3  
     7318   3           /*******************************************************/
     7319   3           /* The following assignments are semantically the same */
     7320   3           /* and should produce IDENTICAL code.                  */
     7321   3           /*******************************************************/
     7322   3  
     7323   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7324   3           a_element(i)(j)                = 1;
     7325   3           auto_structure(i).a_element(j) = 1;
     7326   3           auto_structure.a_element(i,j)  = 1;
     7327   3           auto_structure.a_element(i)(j) = 1;     
     7328   3  
     7329   3        end;
     7330   2  
     7331   2     end;
     7332   1  
     7333   1     if I ^= MAX_SIZE + 1 then
     7334   1        do;
     7335   2        put skip (one) list ('Loop termination error 4');
     7336   2        end;
     7337   1  
     7338   1     put skip(one) list('Loop 4 ended fine.');
     7339   1  
     7340   1     /****************************************************************/
     7341   1     /* This test ensures that the above code works when executed in */
     7342   1     /* a nested procedure.                                          */
     7343   1     /****************************************************************/
     7344   1  
     7345   1     put skip (one) list ('Im about to call the internal procedure now');
     7346   1  
     7347   1     call run_inner_proc;
     7348   1  
     7349   1   one = 1;
     7350   1  
     7351   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7352   2  
     7353   2        do J = 1 to INN_SIZE;
     7354   3  
     7355   3           /*******************************************************/
     7356   3           /* The following assignments are semantically the same */
     7357   3           /* and should produce IDENTICAL code.                  */
     7358   3           /*******************************************************/
     7359   3  
     7360   3           s_element(I,J)                   = 1;
     7361   3           s_element(I)(J)                  = 1;
     7362   3           static_structure(I).s_element(J) = 1;
     7363   3           static_structure.s_element(I,J)  = 1;
     7364   3           static_structure.s_element(I)(J) = 1;     
     7365   3  
     7366   3        end;
     7367   2  
     7368   2     end;
     7369   1  
     7370   1     if I ^= MAX_SIZE + 1 then
     7371   1        do;
     7372   2        put skip (one) list ('Loop termination error 1');
     7373   2        end;
     7374   1  
     7375   1     put skip(one) list('Loop 1 ended fine.');
     7376   1  
     7377   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7378   2  
     7379   2        do j = 1 to INN_SIZE;
     7380   3  
     7381   3           /*******************************************************/
     7382   3           /* The following assignments are semantically the same */
     7383   3           /* and should produce IDENTICAL code.                  */
     7384   3           /*******************************************************/
     7385   3  
     7386   3           s_element(i,j)                   = 1;
     7387   3           s_element(i)(j)                  = 1;
     7388   3           static_structure(i).s_element(j) = 1;
     7389   3           static_structure.s_element(i,j)  = 1;
     7390   3           static_structure.s_element(i)(j) = 1;     
     7391   3  
     7392   3        end;
     7393   2  
     7394   2     end;
     7395   1  
     7396   1     if I ^= MAX_SIZE + 1 then
     7397   1        do;
     7398   2        put skip (one) list ('Loop termination error 2');
     7399   2        end;
     7400   1  
     7401   1     put skip(one) list('Loop 2 ended fine.');
     7402   1  
     7403   1  
     7404   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7405   2  
     7406   2        do J = 1 to INN_SIZE;
     7407   3  
     7408   3           /*******************************************************/
     7409   3           /* The following assignments are semantically the same */
     7410   3           /* and should produce IDENTICAL code.                  */
     7411   3           /*******************************************************/
     7412   3  
     7413   3           a_element(I,J)                 = 1;
     7414   3           a_element(I)(J)                = 1;
     7415   3           auto_structure(I).a_element(J) = 1;
     7416   3           auto_structure.a_element(I,J)  = 1;
     7417   3           auto_structure.a_element(I)(J) = 1;     
     7418   3  
     7419   3        end;
     7420   2  
     7421   2     end;
     7422   1  
     7423   1     if I ^= MAX_SIZE + 1 then
     7424   1        do;
     7425   2        put skip (one) list ('Loop termination error 3');
     7426   2        end;
     7427   1  
     7428   1     put skip(one) list('Loop 3 ended fine.');
     7429   1  
     7430   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7431   2  
     7432   2        do j = 1 to INN_SIZE;
     7433   3  
     7434   3           /*******************************************************/
     7435   3           /* The following assignments are semantically the same */
     7436   3           /* and should produce IDENTICAL code.                  */
     7437   3           /*******************************************************/
     7438   3  
     7439   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7440   3           a_element(i)(j)                = 1;
     7441   3           auto_structure(i).a_element(j) = 1;
     7442   3           auto_structure.a_element(i,j)  = 1;
     7443   3           auto_structure.a_element(i)(j) = 1;     
     7444   3  
     7445   3        end;
     7446   2  
     7447   2     end;
     7448   1  
     7449   1     if I ^= MAX_SIZE + 1 then
     7450   1        do;
     7451   2        put skip (one) list ('Loop termination error 4');
     7452   2        end;
     7453   1  
     7454   1     put skip(one) list('Loop 4 ended fine.');
     7455   1  
     7456   1     /****************************************************************/
     7457   1     /* This test ensures that the above code works when executed in */
     7458   1     /* a nested procedure.                                          */
     7459   1     /****************************************************************/
     7460   1  
     7461   1     put skip (one) list ('Im about to call the internal procedure now');
     7462   1  
     7463   1     call run_inner_proc;
     7464   1  
     7465   1   one = 1;
     7466   1  
     7467   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7468   2  
     7469   2        do J = 1 to INN_SIZE;
     7470   3  
     7471   3           /*******************************************************/
     7472   3           /* The following assignments are semantically the same */
     7473   3           /* and should produce IDENTICAL code.                  */
     7474   3           /*******************************************************/
     7475   3  
     7476   3           s_element(I,J)                   = 1;
     7477   3           s_element(I)(J)                  = 1;
     7478   3           static_structure(I).s_element(J) = 1;
     7479   3           static_structure.s_element(I,J)  = 1;
     7480   3           static_structure.s_element(I)(J) = 1;     
     7481   3  
     7482   3        end;
     7483   2  
     7484   2     end;
     7485   1  
     7486   1     if I ^= MAX_SIZE + 1 then
     7487   1        do;
     7488   2        put skip (one) list ('Loop termination error 1');
     7489   2        end;
     7490   1  
     7491   1     put skip(one) list('Loop 1 ended fine.');
     7492   1  
     7493   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7494   2  
     7495   2        do j = 1 to INN_SIZE;
     7496   3  
     7497   3           /*******************************************************/
     7498   3           /* The following assignments are semantically the same */
     7499   3           /* and should produce IDENTICAL code.                  */
     7500   3           /*******************************************************/
     7501   3  
     7502   3           s_element(i,j)                   = 1;
     7503   3           s_element(i)(j)                  = 1;
     7504   3           static_structure(i).s_element(j) = 1;
     7505   3           static_structure.s_element(i,j)  = 1;
     7506   3           static_structure.s_element(i)(j) = 1;     
     7507   3  
     7508   3        end;
     7509   2  
     7510   2     end;
     7511   1  
     7512   1     if I ^= MAX_SIZE + 1 then
     7513   1        do;
     7514   2        put skip (one) list ('Loop termination error 2');
     7515   2        end;
     7516   1  
     7517   1     put skip(one) list('Loop 2 ended fine.');
     7518   1  
     7519   1  
     7520   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7521   2  
     7522   2        do J = 1 to INN_SIZE;
     7523   3  
     7524   3           /*******************************************************/
     7525   3           /* The following assignments are semantically the same */
     7526   3           /* and should produce IDENTICAL code.                  */
     7527   3           /*******************************************************/
     7528   3  
     7529   3           a_element(I,J)                 = 1;
     7530   3           a_element(I)(J)                = 1;
     7531   3           auto_structure(I).a_element(J) = 1;
     7532   3           auto_structure.a_element(I,J)  = 1;
     7533   3           auto_structure.a_element(I)(J) = 1;     
     7534   3  
     7535   3        end;
     7536   2  
     7537   2     end;
     7538   1  
     7539   1     if I ^= MAX_SIZE + 1 then
     7540   1        do;
     7541   2        put skip (one) list ('Loop termination error 3');
     7542   2        end;
     7543   1  
     7544   1     put skip(one) list('Loop 3 ended fine.');
     7545   1  
     7546   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7547   2  
     7548   2        do j = 1 to INN_SIZE;
     7549   3  
     7550   3           /*******************************************************/
     7551   3           /* The following assignments are semantically the same */
     7552   3           /* and should produce IDENTICAL code.                  */
     7553   3           /*******************************************************/
     7554   3  
     7555   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7556   3           a_element(i)(j)                = 1;
     7557   3           auto_structure(i).a_element(j) = 1;
     7558   3           auto_structure.a_element(i,j)  = 1;
     7559   3           auto_structure.a_element(i)(j) = 1;     
     7560   3  
     7561   3        end;
     7562   2  
     7563   2     end;
     7564   1  
     7565   1     if I ^= MAX_SIZE + 1 then
     7566   1        do;
     7567   2        put skip (one) list ('Loop termination error 4');
     7568   2        end;
     7569   1  
     7570   1     put skip(one) list('Loop 4 ended fine.');
     7571   1  
     7572   1     /****************************************************************/
     7573   1     /* This test ensures that the above code works when executed in */
     7574   1     /* a nested procedure.                                          */
     7575   1     /****************************************************************/
     7576   1  
     7577   1     put skip (one) list ('Im about to call the internal procedure now');
     7578   1  
     7579   1     call run_inner_proc;
     7580   1  
     7581   1   one = 1;
     7582   1  
     7583   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7584   2  
     7585   2        do J = 1 to INN_SIZE;
     7586   3  
     7587   3           /*******************************************************/
     7588   3           /* The following assignments are semantically the same */
     7589   3           /* and should produce IDENTICAL code.                  */
     7590   3           /*******************************************************/
     7591   3  
     7592   3           s_element(I,J)                   = 1;
     7593   3           s_element(I)(J)                  = 1;
     7594   3           static_structure(I).s_element(J) = 1;
     7595   3           static_structure.s_element(I,J)  = 1;
     7596   3           static_structure.s_element(I)(J) = 1;     
     7597   3  
     7598   3        end;
     7599   2  
     7600   2     end;
     7601   1  
     7602   1     if I ^= MAX_SIZE + 1 then
     7603   1        do;
     7604   2        put skip (one) list ('Loop termination error 1');
     7605   2        end;
     7606   1  
     7607   1     put skip(one) list('Loop 1 ended fine.');
     7608   1  
     7609   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7610   2  
     7611   2        do j = 1 to INN_SIZE;
     7612   3  
     7613   3           /*******************************************************/
     7614   3           /* The following assignments are semantically the same */
     7615   3           /* and should produce IDENTICAL code.                  */
     7616   3           /*******************************************************/
     7617   3  
     7618   3           s_element(i,j)                   = 1;
     7619   3           s_element(i)(j)                  = 1;
     7620   3           static_structure(i).s_element(j) = 1;
     7621   3           static_structure.s_element(i,j)  = 1;
     7622   3           static_structure.s_element(i)(j) = 1;     
     7623   3  
     7624   3        end;
     7625   2  
     7626   2     end;
     7627   1  
     7628   1     if I ^= MAX_SIZE + 1 then
     7629   1        do;
     7630   2        put skip (one) list ('Loop termination error 2');
     7631   2        end;
     7632   1  
     7633   1     put skip(one) list('Loop 2 ended fine.');
     7634   1  
     7635   1  
     7636   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7637   2  
     7638   2        do J = 1 to INN_SIZE;
     7639   3  
     7640   3           /*******************************************************/
     7641   3           /* The following assignments are semantically the same */
     7642   3           /* and should produce IDENTICAL code.                  */
     7643   3           /*******************************************************/
     7644   3  
     7645   3           a_element(I,J)                 = 1;
     7646   3           a_element(I)(J)                = 1;
     7647   3           auto_structure(I).a_element(J) = 1;
     7648   3           auto_structure.a_element(I,J)  = 1;
     7649   3           auto_structure.a_element(I)(J) = 1;     
     7650   3  
     7651   3        end;
     7652   2  
     7653   2     end;
     7654   1  
     7655   1     if I ^= MAX_SIZE + 1 then
     7656   1        do;
     7657   2        put skip (one) list ('Loop termination error 3');
     7658   2        end;
     7659   1  
     7660   1     put skip(one) list('Loop 3 ended fine.');
     7661   1  
     7662   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7663   2  
     7664   2        do j = 1 to INN_SIZE;
     7665   3  
     7666   3           /*******************************************************/
     7667   3           /* The following assignments are semantically the same */
     7668   3           /* and should produce IDENTICAL code.                  */
     7669   3           /*******************************************************/
     7670   3  
     7671   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7672   3           a_element(i)(j)                = 1;
     7673   3           auto_structure(i).a_element(j) = 1;
     7674   3           auto_structure.a_element(i,j)  = 1;
     7675   3           auto_structure.a_element(i)(j) = 1;     
     7676   3  
     7677   3        end;
     7678   2  
     7679   2     end;
     7680   1  
     7681   1     if I ^= MAX_SIZE + 1 then
     7682   1        do;
     7683   2        put skip (one) list ('Loop termination error 4');
     7684   2        end;
     7685   1  
     7686   1     put skip(one) list('Loop 4 ended fine.');
     7687   1  
     7688   1     /****************************************************************/
     7689   1     /* This test ensures that the above code works when executed in */
     7690   1     /* a nested procedure.                                          */
     7691   1     /****************************************************************/
     7692   1  
     7693   1     put skip (one) list ('Im about to call the internal procedure now');
     7694   1  
     7695   1     call run_inner_proc;
     7696   1  
     7697   1   one = 1;
     7698   1  
     7699   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7700   2  
     7701   2        do J = 1 to INN_SIZE;
     7702   3  
     7703   3           /*******************************************************/
     7704   3           /* The following assignments are semantically the same */
     7705   3           /* and should produce IDENTICAL code.                  */
     7706   3           /*******************************************************/
     7707   3  
     7708   3           s_element(I,J)                   = 1;
     7709   3           s_element(I)(J)                  = 1;
     7710   3           static_structure(I).s_element(J) = 1;
     7711   3           static_structure.s_element(I,J)  = 1;
     7712   3           static_structure.s_element(I)(J) = 1;     
     7713   3  
     7714   3        end;
     7715   2  
     7716   2     end;
     7717   1  
     7718   1     if I ^= MAX_SIZE + 1 then
     7719   1        do;
     7720   2        put skip (one) list ('Loop termination error 1');
     7721   2        end;
     7722   1  
     7723   1     put skip(one) list('Loop 1 ended fine.');
     7724   1  
     7725   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7726   2  
     7727   2        do j = 1 to INN_SIZE;
     7728   3  
     7729   3           /*******************************************************/
     7730   3           /* The following assignments are semantically the same */
     7731   3           /* and should produce IDENTICAL code.                  */
     7732   3           /*******************************************************/
     7733   3  
     7734   3           s_element(i,j)                   = 1;
     7735   3           s_element(i)(j)                  = 1;
     7736   3           static_structure(i).s_element(j) = 1;
     7737   3           static_structure.s_element(i,j)  = 1;
     7738   3           static_structure.s_element(i)(j) = 1;     
     7739   3  
     7740   3        end;
     7741   2  
     7742   2     end;
     7743   1  
     7744   1     if I ^= MAX_SIZE + 1 then
     7745   1        do;
     7746   2        put skip (one) list ('Loop termination error 2');
     7747   2        end;
     7748   1  
     7749   1     put skip(one) list('Loop 2 ended fine.');
     7750   1  
     7751   1  
     7752   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7753   2  
     7754   2        do J = 1 to INN_SIZE;
     7755   3  
     7756   3           /*******************************************************/
     7757   3           /* The following assignments are semantically the same */
     7758   3           /* and should produce IDENTICAL code.                  */
     7759   3           /*******************************************************/
     7760   3  
     7761   3           a_element(I,J)                 = 1;
     7762   3           a_element(I)(J)                = 1;
     7763   3           auto_structure(I).a_element(J) = 1;
     7764   3           auto_structure.a_element(I,J)  = 1;
     7765   3           auto_structure.a_element(I)(J) = 1;     
     7766   3  
     7767   3        end;
     7768   2  
     7769   2     end;
     7770   1  
     7771   1     if I ^= MAX_SIZE + 1 then
     7772   1        do;
     7773   2        put skip (one) list ('Loop termination error 3');
     7774   2        end;
     7775   1  
     7776   1     put skip(one) list('Loop 3 ended fine.');
     7777   1  
     7778   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7779   2  
     7780   2        do j = 1 to INN_SIZE;
     7781   3  
     7782   3           /*******************************************************/
     7783   3           /* The following assignments are semantically the same */
     7784   3           /* and should produce IDENTICAL code.                  */
     7785   3           /*******************************************************/
     7786   3  
     7787   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7788   3           a_element(i)(j)                = 1;
     7789   3           auto_structure(i).a_element(j) = 1;
     7790   3           auto_structure.a_element(i,j)  = 1;
     7791   3           auto_structure.a_element(i)(j) = 1;     
     7792   3  
     7793   3        end;
     7794   2  
     7795   2     end;
     7796   1  
     7797   1     if I ^= MAX_SIZE + 1 then
     7798   1        do;
     7799   2        put skip (one) list ('Loop termination error 4');
     7800   2        end;
     7801   1  
     7802   1     put skip(one) list('Loop 4 ended fine.');
     7803   1  
     7804   1     /****************************************************************/
     7805   1     /* This test ensures that the above code works when executed in */
     7806   1     /* a nested procedure.                                          */
     7807   1     /****************************************************************/
     7808   1  
     7809   1     put skip (one) list ('Im about to call the internal procedure now');
     7810   1  
     7811   1     call run_inner_proc;
     7812   1  
     7813   1   one = 1;
     7814   1  
     7815   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7816   2  
     7817   2        do J = 1 to INN_SIZE;
     7818   3  
     7819   3           /*******************************************************/
     7820   3           /* The following assignments are semantically the same */
     7821   3           /* and should produce IDENTICAL code.                  */
     7822   3           /*******************************************************/
     7823   3  
     7824   3           s_element(I,J)                   = 1;
     7825   3           s_element(I)(J)                  = 1;
     7826   3           static_structure(I).s_element(J) = 1;
     7827   3           static_structure.s_element(I,J)  = 1;
     7828   3           static_structure.s_element(I)(J) = 1;     
     7829   3  
     7830   3        end;
     7831   2  
     7832   2     end;
     7833   1  
     7834   1     if I ^= MAX_SIZE + 1 then
     7835   1        do;
     7836   2        put skip (one) list ('Loop termination error 1');
     7837   2        end;
     7838   1  
     7839   1     put skip(one) list('Loop 1 ended fine.');
     7840   1  
     7841   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7842   2  
     7843   2        do j = 1 to INN_SIZE;
     7844   3  
     7845   3           /*******************************************************/
     7846   3           /* The following assignments are semantically the same */
     7847   3           /* and should produce IDENTICAL code.                  */
     7848   3           /*******************************************************/
     7849   3  
     7850   3           s_element(i,j)                   = 1;
     7851   3           s_element(i)(j)                  = 1;
     7852   3           static_structure(i).s_element(j) = 1;
     7853   3           static_structure.s_element(i,j)  = 1;
     7854   3           static_structure.s_element(i)(j) = 1;     
     7855   3  
     7856   3        end;
     7857   2  
     7858   2     end;
     7859   1  
     7860   1     if I ^= MAX_SIZE + 1 then
     7861   1        do;
     7862   2        put skip (one) list ('Loop termination error 2');
     7863   2        end;
     7864   1  
     7865   1     put skip(one) list('Loop 2 ended fine.');
     7866   1  
     7867   1  
     7868   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7869   2  
     7870   2        do J = 1 to INN_SIZE;
     7871   3  
     7872   3           /*******************************************************/
     7873   3           /* The following assignments are semantically the same */
     7874   3           /* and should produce IDENTICAL code.                  */
     7875   3           /*******************************************************/
     7876   3  
     7877   3           a_element(I,J)                 = 1;
     7878   3           a_element(I)(J)                = 1;
     7879   3           auto_structure(I).a_element(J) = 1;
     7880   3           auto_structure.a_element(I,J)  = 1;
     7881   3           auto_structure.a_element(I)(J) = 1;     
     7882   3  
     7883   3        end;
     7884   2  
     7885   2     end;
     7886   1  
     7887   1     if I ^= MAX_SIZE + 1 then
     7888   1        do;
     7889   2        put skip (one) list ('Loop termination error 3');
     7890   2        end;
     7891   1  
     7892   1     put skip(one) list('Loop 3 ended fine.');
     7893   1  
     7894   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     7895   2  
     7896   2        do j = 1 to INN_SIZE;
     7897   3  
     7898   3           /*******************************************************/
     7899   3           /* The following assignments are semantically the same */
     7900   3           /* and should produce IDENTICAL code.                  */
     7901   3           /*******************************************************/
     7902   3  
     7903   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     7904   3           a_element(i)(j)                = 1;
     7905   3           auto_structure(i).a_element(j) = 1;
     7906   3           auto_structure.a_element(i,j)  = 1;
     7907   3           auto_structure.a_element(i)(j) = 1;     
     7908   3  
     7909   3        end;
     7910   2  
     7911   2     end;
     7912   1  
     7913   1     if I ^= MAX_SIZE + 1 then
     7914   1        do;
     7915   2        put skip (one) list ('Loop termination error 4');
     7916   2        end;
     7917   1  
     7918   1     put skip(one) list('Loop 4 ended fine.');
     7919   1  
     7920   1     /****************************************************************/
     7921   1     /* This test ensures that the above code works when executed in */
     7922   1     /* a nested procedure.                                          */
     7923   1     /****************************************************************/
     7924   1  
     7925   1     put skip (one) list ('Im about to call the internal procedure now');
     7926   1  
     7927   1     call run_inner_proc;
     7928   1  
     7929   1   one = 1;
     7930   1  
     7931   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     7932   2  
     7933   2        do J = 1 to INN_SIZE;
     7934   3  
     7935   3           /*******************************************************/
     7936   3           /* The following assignments are semantically the same */
     7937   3           /* and should produce IDENTICAL code.                  */
     7938   3           /*******************************************************/
     7939   3  
     7940   3           s_element(I,J)                   = 1;
     7941   3           s_element(I)(J)                  = 1;
     7942   3           static_structure(I).s_element(J) = 1;
     7943   3           static_structure.s_element(I,J)  = 1;
     7944   3           static_structure.s_element(I)(J) = 1;     
     7945   3  
     7946   3        end;
     7947   2  
     7948   2     end;
     7949   1  
     7950   1     if I ^= MAX_SIZE + 1 then
     7951   1        do;
     7952   2        put skip (one) list ('Loop termination error 1');
     7953   2        end;
     7954   1  
     7955   1     put skip(one) list('Loop 1 ended fine.');
     7956   1  
     7957   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     7958   2  
     7959   2        do j = 1 to INN_SIZE;
     7960   3  
     7961   3           /*******************************************************/
     7962   3           /* The following assignments are semantically the same */
     7963   3           /* and should produce IDENTICAL code.                  */
     7964   3           /*******************************************************/
     7965   3  
     7966   3           s_element(i,j)                   = 1;
     7967   3           s_element(i)(j)                  = 1;
     7968   3           static_structure(i).s_element(j) = 1;
     7969   3           static_structure.s_element(i,j)  = 1;
     7970   3           static_structure.s_element(i)(j) = 1;     
     7971   3  
     7972   3        end;
     7973   2  
     7974   2     end;
     7975   1  
     7976   1     if I ^= MAX_SIZE + 1 then
     7977   1        do;
     7978   2        put skip (one) list ('Loop termination error 2');
     7979   2        end;
     7980   1  
     7981   1     put skip(one) list('Loop 2 ended fine.');
     7982   1  
     7983   1  
     7984   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     7985   2  
     7986   2        do J = 1 to INN_SIZE;
     7987   3  
     7988   3           /*******************************************************/
     7989   3           /* The following assignments are semantically the same */
     7990   3           /* and should produce IDENTICAL code.                  */
     7991   3           /*******************************************************/
     7992   3  
     7993   3           a_element(I,J)                 = 1;
     7994   3           a_element(I)(J)                = 1;
     7995   3           auto_structure(I).a_element(J) = 1;
     7996   3           auto_structure.a_element(I,J)  = 1;
     7997   3           auto_structure.a_element(I)(J) = 1;     
     7998   3  
     7999   3        end;
     8000   2  
     8001   2     end;
     8002   1  
     8003   1     if I ^= MAX_SIZE + 1 then
     8004   1        do;
     8005   2        put skip (one) list ('Loop termination error 3');
     8006   2        end;
     8007   1  
     8008   1     put skip(one) list('Loop 3 ended fine.');
     8009   1  
     8010   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8011   2  
     8012   2        do j = 1 to INN_SIZE;
     8013   3  
     8014   3           /*******************************************************/
     8015   3           /* The following assignments are semantically the same */
     8016   3           /* and should produce IDENTICAL code.                  */
     8017   3           /*******************************************************/
     8018   3  
     8019   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8020   3           a_element(i)(j)                = 1;
     8021   3           auto_structure(i).a_element(j) = 1;
     8022   3           auto_structure.a_element(i,j)  = 1;
     8023   3           auto_structure.a_element(i)(j) = 1;     
     8024   3  
     8025   3        end;
     8026   2  
     8027   2     end;
     8028   1  
     8029   1     if I ^= MAX_SIZE + 1 then
     8030   1        do;
     8031   2        put skip (one) list ('Loop termination error 4');
     8032   2        end;
     8033   1  
     8034   1     put skip(one) list('Loop 4 ended fine.');
     8035   1  
     8036   1     /****************************************************************/
     8037   1     /* This test ensures that the above code works when executed in */
     8038   1     /* a nested procedure.                                          */
     8039   1     /****************************************************************/
     8040   1  
     8041   1     put skip (one) list ('Im about to call the internal procedure now');
     8042   1  
     8043   1     call run_inner_proc;
     8044   1  
     8045   1   one = 1;
     8046   1  
     8047   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8048   2  
     8049   2        do J = 1 to INN_SIZE;
     8050   3  
     8051   3           /*******************************************************/
     8052   3           /* The following assignments are semantically the same */
     8053   3           /* and should produce IDENTICAL code.                  */
     8054   3           /*******************************************************/
     8055   3  
     8056   3           s_element(I,J)                   = 1;
     8057   3           s_element(I)(J)                  = 1;
     8058   3           static_structure(I).s_element(J) = 1;
     8059   3           static_structure.s_element(I,J)  = 1;
     8060   3           static_structure.s_element(I)(J) = 1;     
     8061   3  
     8062   3        end;
     8063   2  
     8064   2     end;
     8065   1  
     8066   1     if I ^= MAX_SIZE + 1 then
     8067   1        do;
     8068   2        put skip (one) list ('Loop termination error 1');
     8069   2        end;
     8070   1  
     8071   1     put skip(one) list('Loop 1 ended fine.');
     8072   1  
     8073   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8074   2  
     8075   2        do j = 1 to INN_SIZE;
     8076   3  
     8077   3           /*******************************************************/
     8078   3           /* The following assignments are semantically the same */
     8079   3           /* and should produce IDENTICAL code.                  */
     8080   3           /*******************************************************/
     8081   3  
     8082   3           s_element(i,j)                   = 1;
     8083   3           s_element(i)(j)                  = 1;
     8084   3           static_structure(i).s_element(j) = 1;
     8085   3           static_structure.s_element(i,j)  = 1;
     8086   3           static_structure.s_element(i)(j) = 1;     
     8087   3  
     8088   3        end;
     8089   2  
     8090   2     end;
     8091   1  
     8092   1     if I ^= MAX_SIZE + 1 then
     8093   1        do;
     8094   2        put skip (one) list ('Loop termination error 2');
     8095   2        end;
     8096   1  
     8097   1     put skip(one) list('Loop 2 ended fine.');
     8098   1  
     8099   1  
     8100   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8101   2  
     8102   2        do J = 1 to INN_SIZE;
     8103   3  
     8104   3           /*******************************************************/
     8105   3           /* The following assignments are semantically the same */
     8106   3           /* and should produce IDENTICAL code.                  */
     8107   3           /*******************************************************/
     8108   3  
     8109   3           a_element(I,J)                 = 1;
     8110   3           a_element(I)(J)                = 1;
     8111   3           auto_structure(I).a_element(J) = 1;
     8112   3           auto_structure.a_element(I,J)  = 1;
     8113   3           auto_structure.a_element(I)(J) = 1;     
     8114   3  
     8115   3        end;
     8116   2  
     8117   2     end;
     8118   1  
     8119   1     if I ^= MAX_SIZE + 1 then
     8120   1        do;
     8121   2        put skip (one) list ('Loop termination error 3');
     8122   2        end;
     8123   1  
     8124   1     put skip(one) list('Loop 3 ended fine.');
     8125   1  
     8126   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8127   2  
     8128   2        do j = 1 to INN_SIZE;
     8129   3  
     8130   3           /*******************************************************/
     8131   3           /* The following assignments are semantically the same */
     8132   3           /* and should produce IDENTICAL code.                  */
     8133   3           /*******************************************************/
     8134   3  
     8135   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8136   3           a_element(i)(j)                = 1;
     8137   3           auto_structure(i).a_element(j) = 1;
     8138   3           auto_structure.a_element(i,j)  = 1;
     8139   3           auto_structure.a_element(i)(j) = 1;     
     8140   3  
     8141   3        end;
     8142   2  
     8143   2     end;
     8144   1  
     8145   1     if I ^= MAX_SIZE + 1 then
     8146   1        do;
     8147   2        put skip (one) list ('Loop termination error 4');
     8148   2        end;
     8149   1  
     8150   1     put skip(one) list('Loop 4 ended fine.');
     8151   1  
     8152   1     /****************************************************************/
     8153   1     /* This test ensures that the above code works when executed in */
     8154   1     /* a nested procedure.                                          */
     8155   1     /****************************************************************/
     8156   1  
     8157   1     put skip (one) list ('Im about to call the internal procedure now');
     8158   1  
     8159   1     call run_inner_proc;
     8160   1  
     8161   1   one = 1;
     8162   1  
     8163   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8164   2  
     8165   2        do J = 1 to INN_SIZE;
     8166   3  
     8167   3           /*******************************************************/
     8168   3           /* The following assignments are semantically the same */
     8169   3           /* and should produce IDENTICAL code.                  */
     8170   3           /*******************************************************/
     8171   3  
     8172   3           s_element(I,J)                   = 1;
     8173   3           s_element(I)(J)                  = 1;
     8174   3           static_structure(I).s_element(J) = 1;
     8175   3           static_structure.s_element(I,J)  = 1;
     8176   3           static_structure.s_element(I)(J) = 1;     
     8177   3  
     8178   3        end;
     8179   2  
     8180   2     end;
     8181   1  
     8182   1     if I ^= MAX_SIZE + 1 then
     8183   1        do;
     8184   2        put skip (one) list ('Loop termination error 1');
     8185   2        end;
     8186   1  
     8187   1     put skip(one) list('Loop 1 ended fine.');
     8188   1  
     8189   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8190   2  
     8191   2        do j = 1 to INN_SIZE;
     8192   3  
     8193   3           /*******************************************************/
     8194   3           /* The following assignments are semantically the same */
     8195   3           /* and should produce IDENTICAL code.                  */
     8196   3           /*******************************************************/
     8197   3  
     8198   3           s_element(i,j)                   = 1;
     8199   3           s_element(i)(j)                  = 1;
     8200   3           static_structure(i).s_element(j) = 1;
     8201   3           static_structure.s_element(i,j)  = 1;
     8202   3           static_structure.s_element(i)(j) = 1;     
     8203   3  
     8204   3        end;
     8205   2  
     8206   2     end;
     8207   1  
     8208   1     if I ^= MAX_SIZE + 1 then
     8209   1        do;
     8210   2        put skip (one) list ('Loop termination error 2');
     8211   2        end;
     8212   1  
     8213   1     put skip(one) list('Loop 2 ended fine.');
     8214   1  
     8215   1  
     8216   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8217   2  
     8218   2        do J = 1 to INN_SIZE;
     8219   3  
     8220   3           /*******************************************************/
     8221   3           /* The following assignments are semantically the same */
     8222   3           /* and should produce IDENTICAL code.                  */
     8223   3           /*******************************************************/
     8224   3  
     8225   3           a_element(I,J)                 = 1;
     8226   3           a_element(I)(J)                = 1;
     8227   3           auto_structure(I).a_element(J) = 1;
     8228   3           auto_structure.a_element(I,J)  = 1;
     8229   3           auto_structure.a_element(I)(J) = 1;     
     8230   3  
     8231   3        end;
     8232   2  
     8233   2     end;
     8234   1  
     8235   1     if I ^= MAX_SIZE + 1 then
     8236   1        do;
     8237   2        put skip (one) list ('Loop termination error 3');
     8238   2        end;
     8239   1  
     8240   1     put skip(one) list('Loop 3 ended fine.');
     8241   1  
     8242   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8243   2  
     8244   2        do j = 1 to INN_SIZE;
     8245   3  
     8246   3           /*******************************************************/
     8247   3           /* The following assignments are semantically the same */
     8248   3           /* and should produce IDENTICAL code.                  */
     8249   3           /*******************************************************/
     8250   3  
     8251   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8252   3           a_element(i)(j)                = 1;
     8253   3           auto_structure(i).a_element(j) = 1;
     8254   3           auto_structure.a_element(i,j)  = 1;
     8255   3           auto_structure.a_element(i)(j) = 1;     
     8256   3  
     8257   3        end;
     8258   2  
     8259   2     end;
     8260   1  
     8261   1     if I ^= MAX_SIZE + 1 then
     8262   1        do;
     8263   2        put skip (one) list ('Loop termination error 4');
     8264   2        end;
     8265   1  
     8266   1     put skip(one) list('Loop 4 ended fine.');
     8267   1  
     8268   1     /****************************************************************/
     8269   1     /* This test ensures that the above code works when executed in */
     8270   1     /* a nested procedure.                                          */
     8271   1     /****************************************************************/
     8272   1  
     8273   1     put skip (one) list ('Im about to call the internal procedure now');
     8274   1  
     8275   1     call run_inner_proc;
     8276   1  
     8277   1   one = 1;
     8278   1  
     8279   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8280   2  
     8281   2        do J = 1 to INN_SIZE;
     8282   3  
     8283   3           /*******************************************************/
     8284   3           /* The following assignments are semantically the same */
     8285   3           /* and should produce IDENTICAL code.                  */
     8286   3           /*******************************************************/
     8287   3  
     8288   3           s_element(I,J)                   = 1;
     8289   3           s_element(I)(J)                  = 1;
     8290   3           static_structure(I).s_element(J) = 1;
     8291   3           static_structure.s_element(I,J)  = 1;
     8292   3           static_structure.s_element(I)(J) = 1;     
     8293   3  
     8294   3        end;
     8295   2  
     8296   2     end;
     8297   1  
     8298   1     if I ^= MAX_SIZE + 1 then
     8299   1        do;
     8300   2        put skip (one) list ('Loop termination error 1');
     8301   2        end;
     8302   1  
     8303   1     put skip(one) list('Loop 1 ended fine.');
     8304   1  
     8305   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8306   2  
     8307   2        do j = 1 to INN_SIZE;
     8308   3  
     8309   3           /*******************************************************/
     8310   3           /* The following assignments are semantically the same */
     8311   3           /* and should produce IDENTICAL code.                  */
     8312   3           /*******************************************************/
     8313   3  
     8314   3           s_element(i,j)                   = 1;
     8315   3           s_element(i)(j)                  = 1;
     8316   3           static_structure(i).s_element(j) = 1;
     8317   3           static_structure.s_element(i,j)  = 1;
     8318   3           static_structure.s_element(i)(j) = 1;     
     8319   3  
     8320   3        end;
     8321   2  
     8322   2     end;
     8323   1  
     8324   1     if I ^= MAX_SIZE + 1 then
     8325   1        do;
     8326   2        put skip (one) list ('Loop termination error 2');
     8327   2        end;
     8328   1  
     8329   1     put skip(one) list('Loop 2 ended fine.');
     8330   1  
     8331   1  
     8332   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8333   2  
     8334   2        do J = 1 to INN_SIZE;
     8335   3  
     8336   3           /*******************************************************/
     8337   3           /* The following assignments are semantically the same */
     8338   3           /* and should produce IDENTICAL code.                  */
     8339   3           /*******************************************************/
     8340   3  
     8341   3           a_element(I,J)                 = 1;
     8342   3           a_element(I)(J)                = 1;
     8343   3           auto_structure(I).a_element(J) = 1;
     8344   3           auto_structure.a_element(I,J)  = 1;
     8345   3           auto_structure.a_element(I)(J) = 1;     
     8346   3  
     8347   3        end;
     8348   2  
     8349   2     end;
     8350   1  
     8351   1     if I ^= MAX_SIZE + 1 then
     8352   1        do;
     8353   2        put skip (one) list ('Loop termination error 3');
     8354   2        end;
     8355   1  
     8356   1     put skip(one) list('Loop 3 ended fine.');
     8357   1  
     8358   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8359   2  
     8360   2        do j = 1 to INN_SIZE;
     8361   3  
     8362   3           /*******************************************************/
     8363   3           /* The following assignments are semantically the same */
     8364   3           /* and should produce IDENTICAL code.                  */
     8365   3           /*******************************************************/
     8366   3  
     8367   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8368   3           a_element(i)(j)                = 1;
     8369   3           auto_structure(i).a_element(j) = 1;
     8370   3           auto_structure.a_element(i,j)  = 1;
     8371   3           auto_structure.a_element(i)(j) = 1;     
     8372   3  
     8373   3        end;
     8374   2  
     8375   2     end;
     8376   1  
     8377   1     if I ^= MAX_SIZE + 1 then
     8378   1        do;
     8379   2        put skip (one) list ('Loop termination error 4');
     8380   2        end;
     8381   1  
     8382   1     put skip(one) list('Loop 4 ended fine.');
     8383   1  
     8384   1     /****************************************************************/
     8385   1     /* This test ensures that the above code works when executed in */
     8386   1     /* a nested procedure.                                          */
     8387   1     /****************************************************************/
     8388   1  
     8389   1     put skip (one) list ('Im about to call the internal procedure now');
     8390   1  
     8391   1     call run_inner_proc;
     8392   1  
     8393   1   one = 1;
     8394   1  
     8395   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8396   2  
     8397   2        do J = 1 to INN_SIZE;
     8398   3  
     8399   3           /*******************************************************/
     8400   3           /* The following assignments are semantically the same */
     8401   3           /* and should produce IDENTICAL code.                  */
     8402   3           /*******************************************************/
     8403   3  
     8404   3           s_element(I,J)                   = 1;
     8405   3           s_element(I)(J)                  = 1;
     8406   3           static_structure(I).s_element(J) = 1;
     8407   3           static_structure.s_element(I,J)  = 1;
     8408   3           static_structure.s_element(I)(J) = 1;     
     8409   3  
     8410   3        end;
     8411   2  
     8412   2     end;
     8413   1  
     8414   1     if I ^= MAX_SIZE + 1 then
     8415   1        do;
     8416   2        put skip (one) list ('Loop termination error 1');
     8417   2        end;
     8418   1  
     8419   1     put skip(one) list('Loop 1 ended fine.');
     8420   1  
     8421   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8422   2  
     8423   2        do j = 1 to INN_SIZE;
     8424   3  
     8425   3           /*******************************************************/
     8426   3           /* The following assignments are semantically the same */
     8427   3           /* and should produce IDENTICAL code.                  */
     8428   3           /*******************************************************/
     8429   3  
     8430   3           s_element(i,j)                   = 1;
     8431   3           s_element(i)(j)                  = 1;
     8432   3           static_structure(i).s_element(j) = 1;
     8433   3           static_structure.s_element(i,j)  = 1;
     8434   3           static_structure.s_element(i)(j) = 1;     
     8435   3  
     8436   3        end;
     8437   2  
     8438   2     end;
     8439   1  
     8440   1     if I ^= MAX_SIZE + 1 then
     8441   1        do;
     8442   2        put skip (one) list ('Loop termination error 2');
     8443   2        end;
     8444   1  
     8445   1     put skip(one) list('Loop 2 ended fine.');
     8446   1  
     8447   1  
     8448   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8449   2  
     8450   2        do J = 1 to INN_SIZE;
     8451   3  
     8452   3           /*******************************************************/
     8453   3           /* The following assignments are semantically the same */
     8454   3           /* and should produce IDENTICAL code.                  */
     8455   3           /*******************************************************/
     8456   3  
     8457   3           a_element(I,J)                 = 1;
     8458   3           a_element(I)(J)                = 1;
     8459   3           auto_structure(I).a_element(J) = 1;
     8460   3           auto_structure.a_element(I,J)  = 1;
     8461   3           auto_structure.a_element(I)(J) = 1;     
     8462   3  
     8463   3        end;
     8464   2  
     8465   2     end;
     8466   1  
     8467   1     if I ^= MAX_SIZE + 1 then
     8468   1        do;
     8469   2        put skip (one) list ('Loop termination error 3');
     8470   2        end;
     8471   1  
     8472   1     put skip(one) list('Loop 3 ended fine.');
     8473   1  
     8474   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8475   2  
     8476   2        do j = 1 to INN_SIZE;
     8477   3  
     8478   3           /*******************************************************/
     8479   3           /* The following assignments are semantically the same */
     8480   3           /* and should produce IDENTICAL code.                  */
     8481   3           /*******************************************************/
     8482   3  
     8483   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8484   3           a_element(i)(j)                = 1;
     8485   3           auto_structure(i).a_element(j) = 1;
     8486   3           auto_structure.a_element(i,j)  = 1;
     8487   3           auto_structure.a_element(i)(j) = 1;     
     8488   3  
     8489   3        end;
     8490   2  
     8491   2     end;
     8492   1  
     8493   1     if I ^= MAX_SIZE + 1 then
     8494   1        do;
     8495   2        put skip (one) list ('Loop termination error 4');
     8496   2        end;
     8497   1  
     8498   1     put skip(one) list('Loop 4 ended fine.');
     8499   1  
     8500   1     /****************************************************************/
     8501   1     /* This test ensures that the above code works when executed in */
     8502   1     /* a nested procedure.                                          */
     8503   1     /****************************************************************/
     8504   1  
     8505   1     put skip (one) list ('Im about to call the internal procedure now');
     8506   1  
     8507   1     call run_inner_proc;
     8508   1  
     8509   1   one = 1;
     8510   1  
     8511   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8512   2  
     8513   2        do J = 1 to INN_SIZE;
     8514   3  
     8515   3           /*******************************************************/
     8516   3           /* The following assignments are semantically the same */
     8517   3           /* and should produce IDENTICAL code.                  */
     8518   3           /*******************************************************/
     8519   3  
     8520   3           s_element(I,J)                   = 1;
     8521   3           s_element(I)(J)                  = 1;
     8522   3           static_structure(I).s_element(J) = 1;
     8523   3           static_structure.s_element(I,J)  = 1;
     8524   3           static_structure.s_element(I)(J) = 1;     
     8525   3  
     8526   3        end;
     8527   2  
     8528   2     end;
     8529   1  
     8530   1     if I ^= MAX_SIZE + 1 then
     8531   1        do;
     8532   2        put skip (one) list ('Loop termination error 1');
     8533   2        end;
     8534   1  
     8535   1     put skip(one) list('Loop 1 ended fine.');
     8536   1  
     8537   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8538   2  
     8539   2        do j = 1 to INN_SIZE;
     8540   3  
     8541   3           /*******************************************************/
     8542   3           /* The following assignments are semantically the same */
     8543   3           /* and should produce IDENTICAL code.                  */
     8544   3           /*******************************************************/
     8545   3  
     8546   3           s_element(i,j)                   = 1;
     8547   3           s_element(i)(j)                  = 1;
     8548   3           static_structure(i).s_element(j) = 1;
     8549   3           static_structure.s_element(i,j)  = 1;
     8550   3           static_structure.s_element(i)(j) = 1;     
     8551   3  
     8552   3        end;
     8553   2  
     8554   2     end;
     8555   1  
     8556   1     if I ^= MAX_SIZE + 1 then
     8557   1        do;
     8558   2        put skip (one) list ('Loop termination error 2');
     8559   2        end;
     8560   1  
     8561   1     put skip(one) list('Loop 2 ended fine.');
     8562   1  
     8563   1  
     8564   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8565   2  
     8566   2        do J = 1 to INN_SIZE;
     8567   3  
     8568   3           /*******************************************************/
     8569   3           /* The following assignments are semantically the same */
     8570   3           /* and should produce IDENTICAL code.                  */
     8571   3           /*******************************************************/
     8572   3  
     8573   3           a_element(I,J)                 = 1;
     8574   3           a_element(I)(J)                = 1;
     8575   3           auto_structure(I).a_element(J) = 1;
     8576   3           auto_structure.a_element(I,J)  = 1;
     8577   3           auto_structure.a_element(I)(J) = 1;     
     8578   3  
     8579   3        end;
     8580   2  
     8581   2     end;
     8582   1  
     8583   1     if I ^= MAX_SIZE + 1 then
     8584   1        do;
     8585   2        put skip (one) list ('Loop termination error 3');
     8586   2        end;
     8587   1  
     8588   1     put skip(one) list('Loop 3 ended fine.');
     8589   1  
     8590   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8591   2  
     8592   2        do j = 1 to INN_SIZE;
     8593   3  
     8594   3           /*******************************************************/
     8595   3           /* The following assignments are semantically the same */
     8596   3           /* and should produce IDENTICAL code.                  */
     8597   3           /*******************************************************/
     8598   3  
     8599   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8600   3           a_element(i)(j)                = 1;
     8601   3           auto_structure(i).a_element(j) = 1;
     8602   3           auto_structure.a_element(i,j)  = 1;
     8603   3           auto_structure.a_element(i)(j) = 1;     
     8604   3  
     8605   3        end;
     8606   2  
     8607   2     end;
     8608   1  
     8609   1     if I ^= MAX_SIZE + 1 then
     8610   1        do;
     8611   2        put skip (one) list ('Loop termination error 4');
     8612   2        end;
     8613   1  
     8614   1     put skip(one) list('Loop 4 ended fine.');
     8615   1  
     8616   1     /****************************************************************/
     8617   1     /* This test ensures that the above code works when executed in */
     8618   1     /* a nested procedure.                                          */
     8619   1     /****************************************************************/
     8620   1  
     8621   1     put skip (one) list ('Im about to call the internal procedure now');
     8622   1  
     8623   1     call run_inner_proc;
     8624   1  
     8625   1   one = 1;
     8626   1  
     8627   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8628   2  
     8629   2        do J = 1 to INN_SIZE;
     8630   3  
     8631   3           /*******************************************************/
     8632   3           /* The following assignments are semantically the same */
     8633   3           /* and should produce IDENTICAL code.                  */
     8634   3           /*******************************************************/
     8635   3  
     8636   3           s_element(I,J)                   = 1;
     8637   3           s_element(I)(J)                  = 1;
     8638   3           static_structure(I).s_element(J) = 1;
     8639   3           static_structure.s_element(I,J)  = 1;
     8640   3           static_structure.s_element(I)(J) = 1;     
     8641   3  
     8642   3        end;
     8643   2  
     8644   2     end;
     8645   1  
     8646   1     if I ^= MAX_SIZE + 1 then
     8647   1        do;
     8648   2        put skip (one) list ('Loop termination error 1');
     8649   2        end;
     8650   1  
     8651   1     put skip(one) list('Loop 1 ended fine.');
     8652   1  
     8653   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8654   2  
     8655   2        do j = 1 to INN_SIZE;
     8656   3  
     8657   3           /*******************************************************/
     8658   3           /* The following assignments are semantically the same */
     8659   3           /* and should produce IDENTICAL code.                  */
     8660   3           /*******************************************************/
     8661   3  
     8662   3           s_element(i,j)                   = 1;
     8663   3           s_element(i)(j)                  = 1;
     8664   3           static_structure(i).s_element(j) = 1;
     8665   3           static_structure.s_element(i,j)  = 1;
     8666   3           static_structure.s_element(i)(j) = 1;     
     8667   3  
     8668   3        end;
     8669   2  
     8670   2     end;
     8671   1  
     8672   1     if I ^= MAX_SIZE + 1 then
     8673   1        do;
     8674   2        put skip (one) list ('Loop termination error 2');
     8675   2        end;
     8676   1  
     8677   1     put skip(one) list('Loop 2 ended fine.');
     8678   1  
     8679   1  
     8680   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8681   2  
     8682   2        do J = 1 to INN_SIZE;
     8683   3  
     8684   3           /*******************************************************/
     8685   3           /* The following assignments are semantically the same */
     8686   3           /* and should produce IDENTICAL code.                  */
     8687   3           /*******************************************************/
     8688   3  
     8689   3           a_element(I,J)                 = 1;
     8690   3           a_element(I)(J)                = 1;
     8691   3           auto_structure(I).a_element(J) = 1;
     8692   3           auto_structure.a_element(I,J)  = 1;
     8693   3           auto_structure.a_element(I)(J) = 1;     
     8694   3  
     8695   3        end;
     8696   2  
     8697   2     end;
     8698   1  
     8699   1     if I ^= MAX_SIZE + 1 then
     8700   1        do;
     8701   2        put skip (one) list ('Loop termination error 3');
     8702   2        end;
     8703   1  
     8704   1     put skip(one) list('Loop 3 ended fine.');
     8705   1  
     8706   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8707   2  
     8708   2        do j = 1 to INN_SIZE;
     8709   3  
     8710   3           /*******************************************************/
     8711   3           /* The following assignments are semantically the same */
     8712   3           /* and should produce IDENTICAL code.                  */
     8713   3           /*******************************************************/
     8714   3  
     8715   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8716   3           a_element(i)(j)                = 1;
     8717   3           auto_structure(i).a_element(j) = 1;
     8718   3           auto_structure.a_element(i,j)  = 1;
     8719   3           auto_structure.a_element(i)(j) = 1;     
     8720   3  
     8721   3        end;
     8722   2  
     8723   2     end;
     8724   1  
     8725   1     if I ^= MAX_SIZE + 1 then
     8726   1        do;
     8727   2        put skip (one) list ('Loop termination error 4');
     8728   2        end;
     8729   1  
     8730   1     put skip(one) list('Loop 4 ended fine.');
     8731   1  
     8732   1     /****************************************************************/
     8733   1     /* This test ensures that the above code works when executed in */
     8734   1     /* a nested procedure.                                          */
     8735   1     /****************************************************************/
     8736   1  
     8737   1     put skip (one) list ('Im about to call the internal procedure now');
     8738   1  
     8739   1     call run_inner_proc;
     8740   1  
     8741   1   one = 1;
     8742   1  
     8743   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8744   2  
     8745   2        do J = 1 to INN_SIZE;
     8746   3  
     8747   3           /*******************************************************/
     8748   3           /* The following assignments are semantically the same */
     8749   3           /* and should produce IDENTICAL code.                  */
     8750   3           /*******************************************************/
     8751   3  
     8752   3           s_element(I,J)                   = 1;
     8753   3           s_element(I)(J)                  = 1;
     8754   3           static_structure(I).s_element(J) = 1;
     8755   3           static_structure.s_element(I,J)  = 1;
     8756   3           static_structure.s_element(I)(J) = 1;     
     8757   3  
     8758   3        end;
     8759   2  
     8760   2     end;
     8761   1  
     8762   1     if I ^= MAX_SIZE + 1 then
     8763   1        do;
     8764   2        put skip (one) list ('Loop termination error 1');
     8765   2        end;
     8766   1  
     8767   1     put skip(one) list('Loop 1 ended fine.');
     8768   1  
     8769   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8770   2  
     8771   2        do j = 1 to INN_SIZE;
     8772   3  
     8773   3           /*******************************************************/
     8774   3           /* The following assignments are semantically the same */
     8775   3           /* and should produce IDENTICAL code.                  */
     8776   3           /*******************************************************/
     8777   3  
     8778   3           s_element(i,j)                   = 1;
     8779   3           s_element(i)(j)                  = 1;
     8780   3           static_structure(i).s_element(j) = 1;
     8781   3           static_structure.s_element(i,j)  = 1;
     8782   3           static_structure.s_element(i)(j) = 1;     
     8783   3  
     8784   3        end;
     8785   2  
     8786   2     end;
     8787   1  
     8788   1     if I ^= MAX_SIZE + 1 then
     8789   1        do;
     8790   2        put skip (one) list ('Loop termination error 2');
     8791   2        end;
     8792   1  
     8793   1     put skip(one) list('Loop 2 ended fine.');
     8794   1  
     8795   1  
     8796   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8797   2  
     8798   2        do J = 1 to INN_SIZE;
     8799   3  
     8800   3           /*******************************************************/
     8801   3           /* The following assignments are semantically the same */
     8802   3           /* and should produce IDENTICAL code.                  */
     8803   3           /*******************************************************/
     8804   3  
     8805   3           a_element(I,J)                 = 1;
     8806   3           a_element(I)(J)                = 1;
     8807   3           auto_structure(I).a_element(J) = 1;
     8808   3           auto_structure.a_element(I,J)  = 1;
     8809   3           auto_structure.a_element(I)(J) = 1;     
     8810   3  
     8811   3        end;
     8812   2  
     8813   2     end;
     8814   1  
     8815   1     if I ^= MAX_SIZE + 1 then
     8816   1        do;
     8817   2        put skip (one) list ('Loop termination error 3');
     8818   2        end;
     8819   1  
     8820   1     put skip(one) list('Loop 3 ended fine.');
     8821   1  
     8822   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8823   2  
     8824   2        do j = 1 to INN_SIZE;
     8825   3  
     8826   3           /*******************************************************/
     8827   3           /* The following assignments are semantically the same */
     8828   3           /* and should produce IDENTICAL code.                  */
     8829   3           /*******************************************************/
     8830   3  
     8831   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8832   3           a_element(i)(j)                = 1;
     8833   3           auto_structure(i).a_element(j) = 1;
     8834   3           auto_structure.a_element(i,j)  = 1;
     8835   3           auto_structure.a_element(i)(j) = 1;     
     8836   3  
     8837   3        end;
     8838   2  
     8839   2     end;
     8840   1  
     8841   1     if I ^= MAX_SIZE + 1 then
     8842   1        do;
     8843   2        put skip (one) list ('Loop termination error 4');
     8844   2        end;
     8845   1  
     8846   1     put skip(one) list('Loop 4 ended fine.');
     8847   1  
     8848   1     /****************************************************************/
     8849   1     /* This test ensures that the above code works when executed in */
     8850   1     /* a nested procedure.                                          */
     8851   1     /****************************************************************/
     8852   1  
     8853   1     put skip (one) list ('Im about to call the internal procedure now');
     8854   1  
     8855   1     call run_inner_proc;
     8856   1  
     8857   1   one = 1;
     8858   1  
     8859   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8860   2  
     8861   2        do J = 1 to INN_SIZE;
     8862   3  
     8863   3           /*******************************************************/
     8864   3           /* The following assignments are semantically the same */
     8865   3           /* and should produce IDENTICAL code.                  */
     8866   3           /*******************************************************/
     8867   3  
     8868   3           s_element(I,J)                   = 1;
     8869   3           s_element(I)(J)                  = 1;
     8870   3           static_structure(I).s_element(J) = 1;
     8871   3           static_structure.s_element(I,J)  = 1;
     8872   3           static_structure.s_element(I)(J) = 1;     
     8873   3  
     8874   3        end;
     8875   2  
     8876   2     end;
     8877   1  
     8878   1     if I ^= MAX_SIZE + 1 then
     8879   1        do;
     8880   2        put skip (one) list ('Loop termination error 1');
     8881   2        end;
     8882   1  
     8883   1     put skip(one) list('Loop 1 ended fine.');
     8884   1  
     8885   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     8886   2  
     8887   2        do j = 1 to INN_SIZE;
     8888   3  
     8889   3           /*******************************************************/
     8890   3           /* The following assignments are semantically the same */
     8891   3           /* and should produce IDENTICAL code.                  */
     8892   3           /*******************************************************/
     8893   3  
     8894   3           s_element(i,j)                   = 1;
     8895   3           s_element(i)(j)                  = 1;
     8896   3           static_structure(i).s_element(j) = 1;
     8897   3           static_structure.s_element(i,j)  = 1;
     8898   3           static_structure.s_element(i)(j) = 1;     
     8899   3  
     8900   3        end;
     8901   2  
     8902   2     end;
     8903   1  
     8904   1     if I ^= MAX_SIZE + 1 then
     8905   1        do;
     8906   2        put skip (one) list ('Loop termination error 2');
     8907   2        end;
     8908   1  
     8909   1     put skip(one) list('Loop 2 ended fine.');
     8910   1  
     8911   1  
     8912   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     8913   2  
     8914   2        do J = 1 to INN_SIZE;
     8915   3  
     8916   3           /*******************************************************/
     8917   3           /* The following assignments are semantically the same */
     8918   3           /* and should produce IDENTICAL code.                  */
     8919   3           /*******************************************************/
     8920   3  
     8921   3           a_element(I,J)                 = 1;
     8922   3           a_element(I)(J)                = 1;
     8923   3           auto_structure(I).a_element(J) = 1;
     8924   3           auto_structure.a_element(I,J)  = 1;
     8925   3           auto_structure.a_element(I)(J) = 1;     
     8926   3  
     8927   3        end;
     8928   2  
     8929   2     end;
     8930   1  
     8931   1     if I ^= MAX_SIZE + 1 then
     8932   1        do;
     8933   2        put skip (one) list ('Loop termination error 3');
     8934   2        end;
     8935   1  
     8936   1     put skip(one) list('Loop 3 ended fine.');
     8937   1  
     8938   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     8939   2  
     8940   2        do j = 1 to INN_SIZE;
     8941   3  
     8942   3           /*******************************************************/
     8943   3           /* The following assignments are semantically the same */
     8944   3           /* and should produce IDENTICAL code.                  */
     8945   3           /*******************************************************/
     8946   3  
     8947   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     8948   3           a_element(i)(j)                = 1;
     8949   3           auto_structure(i).a_element(j) = 1;
     8950   3           auto_structure.a_element(i,j)  = 1;
     8951   3           auto_structure.a_element(i)(j) = 1;     
     8952   3  
     8953   3        end;
     8954   2  
     8955   2     end;
     8956   1  
     8957   1     if I ^= MAX_SIZE + 1 then
     8958   1        do;
     8959   2        put skip (one) list ('Loop termination error 4');
     8960   2        end;
     8961   1  
     8962   1     put skip(one) list('Loop 4 ended fine.');
     8963   1  
     8964   1     /****************************************************************/
     8965   1     /* This test ensures that the above code works when executed in */
     8966   1     /* a nested procedure.                                          */
     8967   1     /****************************************************************/
     8968   1  
     8969   1     put skip (one) list ('Im about to call the internal procedure now');
     8970   1  
     8971   1     call run_inner_proc;
     8972   1  
     8973   1   one = 1;
     8974   1  
     8975   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     8976   2  
     8977   2        do J = 1 to INN_SIZE;
     8978   3  
     8979   3           /*******************************************************/
     8980   3           /* The following assignments are semantically the same */
     8981   3           /* and should produce IDENTICAL code.                  */
     8982   3           /*******************************************************/
     8983   3  
     8984   3           s_element(I,J)                   = 1;
     8985   3           s_element(I)(J)                  = 1;
     8986   3           static_structure(I).s_element(J) = 1;
     8987   3           static_structure.s_element(I,J)  = 1;
     8988   3           static_structure.s_element(I)(J) = 1;     
     8989   3  
     8990   3        end;
     8991   2  
     8992   2     end;
     8993   1  
     8994   1     if I ^= MAX_SIZE + 1 then
     8995   1        do;
     8996   2        put skip (one) list ('Loop termination error 1');
     8997   2        end;
     8998   1  
     8999   1     put skip(one) list('Loop 1 ended fine.');
     9000   1  
     9001   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9002   2  
     9003   2        do j = 1 to INN_SIZE;
     9004   3  
     9005   3           /*******************************************************/
     9006   3           /* The following assignments are semantically the same */
     9007   3           /* and should produce IDENTICAL code.                  */
     9008   3           /*******************************************************/
     9009   3  
     9010   3           s_element(i,j)                   = 1;
     9011   3           s_element(i)(j)                  = 1;
     9012   3           static_structure(i).s_element(j) = 1;
     9013   3           static_structure.s_element(i,j)  = 1;
     9014   3           static_structure.s_element(i)(j) = 1;     
     9015   3  
     9016   3        end;
     9017   2  
     9018   2     end;
     9019   1  
     9020   1     if I ^= MAX_SIZE + 1 then
     9021   1        do;
     9022   2        put skip (one) list ('Loop termination error 2');
     9023   2        end;
     9024   1  
     9025   1     put skip(one) list('Loop 2 ended fine.');
     9026   1  
     9027   1  
     9028   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9029   2  
     9030   2        do J = 1 to INN_SIZE;
     9031   3  
     9032   3           /*******************************************************/
     9033   3           /* The following assignments are semantically the same */
     9034   3           /* and should produce IDENTICAL code.                  */
     9035   3           /*******************************************************/
     9036   3  
     9037   3           a_element(I,J)                 = 1;
     9038   3           a_element(I)(J)                = 1;
     9039   3           auto_structure(I).a_element(J) = 1;
     9040   3           auto_structure.a_element(I,J)  = 1;
     9041   3           auto_structure.a_element(I)(J) = 1;     
     9042   3  
     9043   3        end;
     9044   2  
     9045   2     end;
     9046   1  
     9047   1     if I ^= MAX_SIZE + 1 then
     9048   1        do;
     9049   2        put skip (one) list ('Loop termination error 3');
     9050   2        end;
     9051   1  
     9052   1     put skip(one) list('Loop 3 ended fine.');
     9053   1  
     9054   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9055   2  
     9056   2        do j = 1 to INN_SIZE;
     9057   3  
     9058   3           /*******************************************************/
     9059   3           /* The following assignments are semantically the same */
     9060   3           /* and should produce IDENTICAL code.                  */
     9061   3           /*******************************************************/
     9062   3  
     9063   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9064   3           a_element(i)(j)                = 1;
     9065   3           auto_structure(i).a_element(j) = 1;
     9066   3           auto_structure.a_element(i,j)  = 1;
     9067   3           auto_structure.a_element(i)(j) = 1;     
     9068   3  
     9069   3        end;
     9070   2  
     9071   2     end;
     9072   1  
     9073   1     if I ^= MAX_SIZE + 1 then
     9074   1        do;
     9075   2        put skip (one) list ('Loop termination error 4');
     9076   2        end;
     9077   1  
     9078   1     put skip(one) list('Loop 4 ended fine.');
     9079   1  
     9080   1     /****************************************************************/
     9081   1     /* This test ensures that the above code works when executed in */
     9082   1     /* a nested procedure.                                          */
     9083   1     /****************************************************************/
     9084   1  
     9085   1     put skip (one) list ('Im about to call the internal procedure now');
     9086   1  
     9087   1     call run_inner_proc;
     9088   1  
     9089   1   one = 1;
     9090   1  
     9091   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9092   2  
     9093   2        do J = 1 to INN_SIZE;
     9094   3  
     9095   3           /*******************************************************/
     9096   3           /* The following assignments are semantically the same */
     9097   3           /* and should produce IDENTICAL code.                  */
     9098   3           /*******************************************************/
     9099   3  
     9100   3           s_element(I,J)                   = 1;
     9101   3           s_element(I)(J)                  = 1;
     9102   3           static_structure(I).s_element(J) = 1;
     9103   3           static_structure.s_element(I,J)  = 1;
     9104   3           static_structure.s_element(I)(J) = 1;     
     9105   3  
     9106   3        end;
     9107   2  
     9108   2     end;
     9109   1  
     9110   1     if I ^= MAX_SIZE + 1 then
     9111   1        do;
     9112   2        put skip (one) list ('Loop termination error 1');
     9113   2        end;
     9114   1  
     9115   1     put skip(one) list('Loop 1 ended fine.');
     9116   1  
     9117   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9118   2  
     9119   2        do j = 1 to INN_SIZE;
     9120   3  
     9121   3           /*******************************************************/
     9122   3           /* The following assignments are semantically the same */
     9123   3           /* and should produce IDENTICAL code.                  */
     9124   3           /*******************************************************/
     9125   3  
     9126   3           s_element(i,j)                   = 1;
     9127   3           s_element(i)(j)                  = 1;
     9128   3           static_structure(i).s_element(j) = 1;
     9129   3           static_structure.s_element(i,j)  = 1;
     9130   3           static_structure.s_element(i)(j) = 1;     
     9131   3  
     9132   3        end;
     9133   2  
     9134   2     end;
     9135   1  
     9136   1     if I ^= MAX_SIZE + 1 then
     9137   1        do;
     9138   2        put skip (one) list ('Loop termination error 2');
     9139   2        end;
     9140   1  
     9141   1     put skip(one) list('Loop 2 ended fine.');
     9142   1  
     9143   1  
     9144   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9145   2  
     9146   2        do J = 1 to INN_SIZE;
     9147   3  
     9148   3           /*******************************************************/
     9149   3           /* The following assignments are semantically the same */
     9150   3           /* and should produce IDENTICAL code.                  */
     9151   3           /*******************************************************/
     9152   3  
     9153   3           a_element(I,J)                 = 1;
     9154   3           a_element(I)(J)                = 1;
     9155   3           auto_structure(I).a_element(J) = 1;
     9156   3           auto_structure.a_element(I,J)  = 1;
     9157   3           auto_structure.a_element(I)(J) = 1;     
     9158   3  
     9159   3        end;
     9160   2  
     9161   2     end;
     9162   1  
     9163   1     if I ^= MAX_SIZE + 1 then
     9164   1        do;
     9165   2        put skip (one) list ('Loop termination error 3');
     9166   2        end;
     9167   1  
     9168   1     put skip(one) list('Loop 3 ended fine.');
     9169   1  
     9170   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9171   2  
     9172   2        do j = 1 to INN_SIZE;
     9173   3  
     9174   3           /*******************************************************/
     9175   3           /* The following assignments are semantically the same */
     9176   3           /* and should produce IDENTICAL code.                  */
     9177   3           /*******************************************************/
     9178   3  
     9179   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9180   3           a_element(i)(j)                = 1;
     9181   3           auto_structure(i).a_element(j) = 1;
     9182   3           auto_structure.a_element(i,j)  = 1;
     9183   3           auto_structure.a_element(i)(j) = 1;     
     9184   3  
     9185   3        end;
     9186   2  
     9187   2     end;
     9188   1  
     9189   1     if I ^= MAX_SIZE + 1 then
     9190   1        do;
     9191   2        put skip (one) list ('Loop termination error 4');
     9192   2        end;
     9193   1  
     9194   1     put skip(one) list('Loop 4 ended fine.');
     9195   1  
     9196   1     /****************************************************************/
     9197   1     /* This test ensures that the above code works when executed in */
     9198   1     /* a nested procedure.                                          */
     9199   1     /****************************************************************/
     9200   1  
     9201   1     put skip (one) list ('Im about to call the internal procedure now');
     9202   1  
     9203   1     call run_inner_proc;
     9204   1  
     9205   1   one = 1;
     9206   1  
     9207   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9208   2  
     9209   2        do J = 1 to INN_SIZE;
     9210   3  
     9211   3           /*******************************************************/
     9212   3           /* The following assignments are semantically the same */
     9213   3           /* and should produce IDENTICAL code.                  */
     9214   3           /*******************************************************/
     9215   3  
     9216   3           s_element(I,J)                   = 1;
     9217   3           s_element(I)(J)                  = 1;
     9218   3           static_structure(I).s_element(J) = 1;
     9219   3           static_structure.s_element(I,J)  = 1;
     9220   3           static_structure.s_element(I)(J) = 1;     
     9221   3  
     9222   3        end;
     9223   2  
     9224   2     end;
     9225   1  
     9226   1     if I ^= MAX_SIZE + 1 then
     9227   1        do;
     9228   2        put skip (one) list ('Loop termination error 1');
     9229   2        end;
     9230   1  
     9231   1     put skip(one) list('Loop 1 ended fine.');
     9232   1  
     9233   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9234   2  
     9235   2        do j = 1 to INN_SIZE;
     9236   3  
     9237   3           /*******************************************************/
     9238   3           /* The following assignments are semantically the same */
     9239   3           /* and should produce IDENTICAL code.                  */
     9240   3           /*******************************************************/
     9241   3  
     9242   3           s_element(i,j)                   = 1;
     9243   3           s_element(i)(j)                  = 1;
     9244   3           static_structure(i).s_element(j) = 1;
     9245   3           static_structure.s_element(i,j)  = 1;
     9246   3           static_structure.s_element(i)(j) = 1;     
     9247   3  
     9248   3        end;
     9249   2  
     9250   2     end;
     9251   1  
     9252   1     if I ^= MAX_SIZE + 1 then
     9253   1        do;
     9254   2        put skip (one) list ('Loop termination error 2');
     9255   2        end;
     9256   1  
     9257   1     put skip(one) list('Loop 2 ended fine.');
     9258   1  
     9259   1  
     9260   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9261   2  
     9262   2        do J = 1 to INN_SIZE;
     9263   3  
     9264   3           /*******************************************************/
     9265   3           /* The following assignments are semantically the same */
     9266   3           /* and should produce IDENTICAL code.                  */
     9267   3           /*******************************************************/
     9268   3  
     9269   3           a_element(I,J)                 = 1;
     9270   3           a_element(I)(J)                = 1;
     9271   3           auto_structure(I).a_element(J) = 1;
     9272   3           auto_structure.a_element(I,J)  = 1;
     9273   3           auto_structure.a_element(I)(J) = 1;     
     9274   3  
     9275   3        end;
     9276   2  
     9277   2     end;
     9278   1  
     9279   1     if I ^= MAX_SIZE + 1 then
     9280   1        do;
     9281   2        put skip (one) list ('Loop termination error 3');
     9282   2        end;
     9283   1  
     9284   1     put skip(one) list('Loop 3 ended fine.');
     9285   1  
     9286   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9287   2  
     9288   2        do j = 1 to INN_SIZE;
     9289   3  
     9290   3           /*******************************************************/
     9291   3           /* The following assignments are semantically the same */
     9292   3           /* and should produce IDENTICAL code.                  */
     9293   3           /*******************************************************/
     9294   3  
     9295   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9296   3           a_element(i)(j)                = 1;
     9297   3           auto_structure(i).a_element(j) = 1;
     9298   3           auto_structure.a_element(i,j)  = 1;
     9299   3           auto_structure.a_element(i)(j) = 1;     
     9300   3  
     9301   3        end;
     9302   2  
     9303   2     end;
     9304   1  
     9305   1     if I ^= MAX_SIZE + 1 then
     9306   1        do;
     9307   2        put skip (one) list ('Loop termination error 4');
     9308   2        end;
     9309   1  
     9310   1     put skip(one) list('Loop 4 ended fine.');
     9311   1  
     9312   1     /****************************************************************/
     9313   1     /* This test ensures that the above code works when executed in */
     9314   1     /* a nested procedure.                                          */
     9315   1     /****************************************************************/
     9316   1  
     9317   1     put skip (one) list ('Im about to call the internal procedure now');
     9318   1  
     9319   1     call run_inner_proc;
     9320   1  
     9321   1   one = 1;
     9322   1  
     9323   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9324   2  
     9325   2        do J = 1 to INN_SIZE;
     9326   3  
     9327   3           /*******************************************************/
     9328   3           /* The following assignments are semantically the same */
     9329   3           /* and should produce IDENTICAL code.                  */
     9330   3           /*******************************************************/
     9331   3  
     9332   3           s_element(I,J)                   = 1;
     9333   3           s_element(I)(J)                  = 1;
     9334   3           static_structure(I).s_element(J) = 1;
     9335   3           static_structure.s_element(I,J)  = 1;
     9336   3           static_structure.s_element(I)(J) = 1;     
     9337   3  
     9338   3        end;
     9339   2  
     9340   2     end;
     9341   1  
     9342   1     if I ^= MAX_SIZE + 1 then
     9343   1        do;
     9344   2        put skip (one) list ('Loop termination error 1');
     9345   2        end;
     9346   1  
     9347   1     put skip(one) list('Loop 1 ended fine.');
     9348   1  
     9349   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9350   2  
     9351   2        do j = 1 to INN_SIZE;
     9352   3  
     9353   3           /*******************************************************/
     9354   3           /* The following assignments are semantically the same */
     9355   3           /* and should produce IDENTICAL code.                  */
     9356   3           /*******************************************************/
     9357   3  
     9358   3           s_element(i,j)                   = 1;
     9359   3           s_element(i)(j)                  = 1;
     9360   3           static_structure(i).s_element(j) = 1;
     9361   3           static_structure.s_element(i,j)  = 1;
     9362   3           static_structure.s_element(i)(j) = 1;     
     9363   3  
     9364   3        end;
     9365   2  
     9366   2     end;
     9367   1  
     9368   1     if I ^= MAX_SIZE + 1 then
     9369   1        do;
     9370   2        put skip (one) list ('Loop termination error 2');
     9371   2        end;
     9372   1  
     9373   1     put skip(one) list('Loop 2 ended fine.');
     9374   1  
     9375   1  
     9376   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9377   2  
     9378   2        do J = 1 to INN_SIZE;
     9379   3  
     9380   3           /*******************************************************/
     9381   3           /* The following assignments are semantically the same */
     9382   3           /* and should produce IDENTICAL code.                  */
     9383   3           /*******************************************************/
     9384   3  
     9385   3           a_element(I,J)                 = 1;
     9386   3           a_element(I)(J)                = 1;
     9387   3           auto_structure(I).a_element(J) = 1;
     9388   3           auto_structure.a_element(I,J)  = 1;
     9389   3           auto_structure.a_element(I)(J) = 1;     
     9390   3  
     9391   3        end;
     9392   2  
     9393   2     end;
     9394   1  
     9395   1     if I ^= MAX_SIZE + 1 then
     9396   1        do;
     9397   2        put skip (one) list ('Loop termination error 3');
     9398   2        end;
     9399   1  
     9400   1     put skip(one) list('Loop 3 ended fine.');
     9401   1  
     9402   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9403   2  
     9404   2        do j = 1 to INN_SIZE;
     9405   3  
     9406   3           /*******************************************************/
     9407   3           /* The following assignments are semantically the same */
     9408   3           /* and should produce IDENTICAL code.                  */
     9409   3           /*******************************************************/
     9410   3  
     9411   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9412   3           a_element(i)(j)                = 1;
     9413   3           auto_structure(i).a_element(j) = 1;
     9414   3           auto_structure.a_element(i,j)  = 1;
     9415   3           auto_structure.a_element(i)(j) = 1;     
     9416   3  
     9417   3        end;
     9418   2  
     9419   2     end;
     9420   1  
     9421   1     if I ^= MAX_SIZE + 1 then
     9422   1        do;
     9423   2        put skip (one) list ('Loop termination error 4');
     9424   2        end;
     9425   1  
     9426   1     put skip(one) list('Loop 4 ended fine.');
     9427   1  
     9428   1     /****************************************************************/
     9429   1     /* This test ensures that the above code works when executed in */
     9430   1     /* a nested procedure.                                          */
     9431   1     /****************************************************************/
     9432   1  
     9433   1     put skip (one) list ('Im about to call the internal procedure now');
     9434   1  
     9435   1     call run_inner_proc;
     9436   1  
     9437   1   one = 1;
     9438   1  
     9439   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9440   2  
     9441   2        do J = 1 to INN_SIZE;
     9442   3  
     9443   3           /*******************************************************/
     9444   3           /* The following assignments are semantically the same */
     9445   3           /* and should produce IDENTICAL code.                  */
     9446   3           /*******************************************************/
     9447   3  
     9448   3           s_element(I,J)                   = 1;
     9449   3           s_element(I)(J)                  = 1;
     9450   3           static_structure(I).s_element(J) = 1;
     9451   3           static_structure.s_element(I,J)  = 1;
     9452   3           static_structure.s_element(I)(J) = 1;     
     9453   3  
     9454   3        end;
     9455   2  
     9456   2     end;
     9457   1  
     9458   1     if I ^= MAX_SIZE + 1 then
     9459   1        do;
     9460   2        put skip (one) list ('Loop termination error 1');
     9461   2        end;
     9462   1  
     9463   1     put skip(one) list('Loop 1 ended fine.');
     9464   1  
     9465   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9466   2  
     9467   2        do j = 1 to INN_SIZE;
     9468   3  
     9469   3           /*******************************************************/
     9470   3           /* The following assignments are semantically the same */
     9471   3           /* and should produce IDENTICAL code.                  */
     9472   3           /*******************************************************/
     9473   3  
     9474   3           s_element(i,j)                   = 1;
     9475   3           s_element(i)(j)                  = 1;
     9476   3           static_structure(i).s_element(j) = 1;
     9477   3           static_structure.s_element(i,j)  = 1;
     9478   3           static_structure.s_element(i)(j) = 1;     
     9479   3  
     9480   3        end;
     9481   2  
     9482   2     end;
     9483   1  
     9484   1     if I ^= MAX_SIZE + 1 then
     9485   1        do;
     9486   2        put skip (one) list ('Loop termination error 2');
     9487   2        end;
     9488   1  
     9489   1     put skip(one) list('Loop 2 ended fine.');
     9490   1  
     9491   1  
     9492   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9493   2  
     9494   2        do J = 1 to INN_SIZE;
     9495   3  
     9496   3           /*******************************************************/
     9497   3           /* The following assignments are semantically the same */
     9498   3           /* and should produce IDENTICAL code.                  */
     9499   3           /*******************************************************/
     9500   3  
     9501   3           a_element(I,J)                 = 1;
     9502   3           a_element(I)(J)                = 1;
     9503   3           auto_structure(I).a_element(J) = 1;
     9504   3           auto_structure.a_element(I,J)  = 1;
     9505   3           auto_structure.a_element(I)(J) = 1;     
     9506   3  
     9507   3        end;
     9508   2  
     9509   2     end;
     9510   1  
     9511   1     if I ^= MAX_SIZE + 1 then
     9512   1        do;
     9513   2        put skip (one) list ('Loop termination error 3');
     9514   2        end;
     9515   1  
     9516   1     put skip(one) list('Loop 3 ended fine.');
     9517   1  
     9518   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9519   2  
     9520   2        do j = 1 to INN_SIZE;
     9521   3  
     9522   3           /*******************************************************/
     9523   3           /* The following assignments are semantically the same */
     9524   3           /* and should produce IDENTICAL code.                  */
     9525   3           /*******************************************************/
     9526   3  
     9527   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9528   3           a_element(i)(j)                = 1;
     9529   3           auto_structure(i).a_element(j) = 1;
     9530   3           auto_structure.a_element(i,j)  = 1;
     9531   3           auto_structure.a_element(i)(j) = 1;     
     9532   3  
     9533   3        end;
     9534   2  
     9535   2     end;
     9536   1  
     9537   1     if I ^= MAX_SIZE + 1 then
     9538   1        do;
     9539   2        put skip (one) list ('Loop termination error 4');
     9540   2        end;
     9541   1  
     9542   1     put skip(one) list('Loop 4 ended fine.');
     9543   1  
     9544   1     /****************************************************************/
     9545   1     /* This test ensures that the above code works when executed in */
     9546   1     /* a nested procedure.                                          */
     9547   1     /****************************************************************/
     9548   1  
     9549   1     put skip (one) list ('Im about to call the internal procedure now');
     9550   1  
     9551   1     call run_inner_proc;
     9552   1  
     9553   1   one = 1;
     9554   1  
     9555   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9556   2  
     9557   2        do J = 1 to INN_SIZE;
     9558   3  
     9559   3           /*******************************************************/
     9560   3           /* The following assignments are semantically the same */
     9561   3           /* and should produce IDENTICAL code.                  */
     9562   3           /*******************************************************/
     9563   3  
     9564   3           s_element(I,J)                   = 1;
     9565   3           s_element(I)(J)                  = 1;
     9566   3           static_structure(I).s_element(J) = 1;
     9567   3           static_structure.s_element(I,J)  = 1;
     9568   3           static_structure.s_element(I)(J) = 1;     
     9569   3  
     9570   3        end;
     9571   2  
     9572   2     end;
     9573   1  
     9574   1     if I ^= MAX_SIZE + 1 then
     9575   1        do;
     9576   2        put skip (one) list ('Loop termination error 1');
     9577   2        end;
     9578   1  
     9579   1     put skip(one) list('Loop 1 ended fine.');
     9580   1  
     9581   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9582   2  
     9583   2        do j = 1 to INN_SIZE;
     9584   3  
     9585   3           /*******************************************************/
     9586   3           /* The following assignments are semantically the same */
     9587   3           /* and should produce IDENTICAL code.                  */
     9588   3           /*******************************************************/
     9589   3  
     9590   3           s_element(i,j)                   = 1;
     9591   3           s_element(i)(j)                  = 1;
     9592   3           static_structure(i).s_element(j) = 1;
     9593   3           static_structure.s_element(i,j)  = 1;
     9594   3           static_structure.s_element(i)(j) = 1;     
     9595   3  
     9596   3        end;
     9597   2  
     9598   2     end;
     9599   1  
     9600   1     if I ^= MAX_SIZE + 1 then
     9601   1        do;
     9602   2        put skip (one) list ('Loop termination error 2');
     9603   2        end;
     9604   1  
     9605   1     put skip(one) list('Loop 2 ended fine.');
     9606   1  
     9607   1  
     9608   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9609   2  
     9610   2        do J = 1 to INN_SIZE;
     9611   3  
     9612   3           /*******************************************************/
     9613   3           /* The following assignments are semantically the same */
     9614   3           /* and should produce IDENTICAL code.                  */
     9615   3           /*******************************************************/
     9616   3  
     9617   3           a_element(I,J)                 = 1;
     9618   3           a_element(I)(J)                = 1;
     9619   3           auto_structure(I).a_element(J) = 1;
     9620   3           auto_structure.a_element(I,J)  = 1;
     9621   3           auto_structure.a_element(I)(J) = 1;     
     9622   3  
     9623   3        end;
     9624   2  
     9625   2     end;
     9626   1  
     9627   1     if I ^= MAX_SIZE + 1 then
     9628   1        do;
     9629   2        put skip (one) list ('Loop termination error 3');
     9630   2        end;
     9631   1  
     9632   1     put skip(one) list('Loop 3 ended fine.');
     9633   1  
     9634   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9635   2  
     9636   2        do j = 1 to INN_SIZE;
     9637   3  
     9638   3           /*******************************************************/
     9639   3           /* The following assignments are semantically the same */
     9640   3           /* and should produce IDENTICAL code.                  */
     9641   3           /*******************************************************/
     9642   3  
     9643   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9644   3           a_element(i)(j)                = 1;
     9645   3           auto_structure(i).a_element(j) = 1;
     9646   3           auto_structure.a_element(i,j)  = 1;
     9647   3           auto_structure.a_element(i)(j) = 1;     
     9648   3  
     9649   3        end;
     9650   2  
     9651   2     end;
     9652   1  
     9653   1     if I ^= MAX_SIZE + 1 then
     9654   1        do;
     9655   2        put skip (one) list ('Loop termination error 4');
     9656   2        end;
     9657   1  
     9658   1     put skip(one) list('Loop 4 ended fine.');
     9659   1  
     9660   1     /****************************************************************/
     9661   1     /* This test ensures that the above code works when executed in */
     9662   1     /* a nested procedure.                                          */
     9663   1     /****************************************************************/
     9664   1  
     9665   1     put skip (one) list ('Im about to call the internal procedure now');
     9666   1  
     9667   1     call run_inner_proc;
     9668   1  
     9669   1   one = 1;
     9670   1  
     9671   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9672   2  
     9673   2        do J = 1 to INN_SIZE;
     9674   3  
     9675   3           /*******************************************************/
     9676   3           /* The following assignments are semantically the same */
     9677   3           /* and should produce IDENTICAL code.                  */
     9678   3           /*******************************************************/
     9679   3  
     9680   3           s_element(I,J)                   = 1;
     9681   3           s_element(I)(J)                  = 1;
     9682   3           static_structure(I).s_element(J) = 1;
     9683   3           static_structure.s_element(I,J)  = 1;
     9684   3           static_structure.s_element(I)(J) = 1;     
     9685   3  
     9686   3        end;
     9687   2  
     9688   2     end;
     9689   1  
     9690   1     if I ^= MAX_SIZE + 1 then
     9691   1        do;
     9692   2        put skip (one) list ('Loop termination error 1');
     9693   2        end;
     9694   1  
     9695   1     put skip(one) list('Loop 1 ended fine.');
     9696   1  
     9697   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9698   2  
     9699   2        do j = 1 to INN_SIZE;
     9700   3  
     9701   3           /*******************************************************/
     9702   3           /* The following assignments are semantically the same */
     9703   3           /* and should produce IDENTICAL code.                  */
     9704   3           /*******************************************************/
     9705   3  
     9706   3           s_element(i,j)                   = 1;
     9707   3           s_element(i)(j)                  = 1;
     9708   3           static_structure(i).s_element(j) = 1;
     9709   3           static_structure.s_element(i,j)  = 1;
     9710   3           static_structure.s_element(i)(j) = 1;     
     9711   3  
     9712   3        end;
     9713   2  
     9714   2     end;
     9715   1  
     9716   1     if I ^= MAX_SIZE + 1 then
     9717   1        do;
     9718   2        put skip (one) list ('Loop termination error 2');
     9719   2        end;
     9720   1  
     9721   1     put skip(one) list('Loop 2 ended fine.');
     9722   1  
     9723   1  
     9724   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9725   2  
     9726   2        do J = 1 to INN_SIZE;
     9727   3  
     9728   3           /*******************************************************/
     9729   3           /* The following assignments are semantically the same */
     9730   3           /* and should produce IDENTICAL code.                  */
     9731   3           /*******************************************************/
     9732   3  
     9733   3           a_element(I,J)                 = 1;
     9734   3           a_element(I)(J)                = 1;
     9735   3           auto_structure(I).a_element(J) = 1;
     9736   3           auto_structure.a_element(I,J)  = 1;
     9737   3           auto_structure.a_element(I)(J) = 1;     
     9738   3  
     9739   3        end;
     9740   2  
     9741   2     end;
     9742   1  
     9743   1     if I ^= MAX_SIZE + 1 then
     9744   1        do;
     9745   2        put skip (one) list ('Loop termination error 3');
     9746   2        end;
     9747   1  
     9748   1     put skip(one) list('Loop 3 ended fine.');
     9749   1  
     9750   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9751   2  
     9752   2        do j = 1 to INN_SIZE;
     9753   3  
     9754   3           /*******************************************************/
     9755   3           /* The following assignments are semantically the same */
     9756   3           /* and should produce IDENTICAL code.                  */
     9757   3           /*******************************************************/
     9758   3  
     9759   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9760   3           a_element(i)(j)                = 1;
     9761   3           auto_structure(i).a_element(j) = 1;
     9762   3           auto_structure.a_element(i,j)  = 1;
     9763   3           auto_structure.a_element(i)(j) = 1;     
     9764   3  
     9765   3        end;
     9766   2  
     9767   2     end;
     9768   1  
     9769   1     if I ^= MAX_SIZE + 1 then
     9770   1        do;
     9771   2        put skip (one) list ('Loop termination error 4');
     9772   2        end;
     9773   1  
     9774   1     put skip(one) list('Loop 4 ended fine.');
     9775   1  
     9776   1     /****************************************************************/
     9777   1     /* This test ensures that the above code works when executed in */
     9778   1     /* a nested procedure.                                          */
     9779   1     /****************************************************************/
     9780   1  
     9781   1     put skip (one) list ('Im about to call the internal procedure now');
     9782   1  
     9783   1     call run_inner_proc;
     9784   1  
     9785   1   one = 1;
     9786   1  
     9787   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9788   2  
     9789   2        do J = 1 to INN_SIZE;
     9790   3  
     9791   3           /*******************************************************/
     9792   3           /* The following assignments are semantically the same */
     9793   3           /* and should produce IDENTICAL code.                  */
     9794   3           /*******************************************************/
     9795   3  
     9796   3           s_element(I,J)                   = 1;
     9797   3           s_element(I)(J)                  = 1;
     9798   3           static_structure(I).s_element(J) = 1;
     9799   3           static_structure.s_element(I,J)  = 1;
     9800   3           static_structure.s_element(I)(J) = 1;     
     9801   3  
     9802   3        end;
     9803   2  
     9804   2     end;
     9805   1  
     9806   1     if I ^= MAX_SIZE + 1 then
     9807   1        do;
     9808   2        put skip (one) list ('Loop termination error 1');
     9809   2        end;
     9810   1  
     9811   1     put skip(one) list('Loop 1 ended fine.');
     9812   1  
     9813   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9814   2  
     9815   2        do j = 1 to INN_SIZE;
     9816   3  
     9817   3           /*******************************************************/
     9818   3           /* The following assignments are semantically the same */
     9819   3           /* and should produce IDENTICAL code.                  */
     9820   3           /*******************************************************/
     9821   3  
     9822   3           s_element(i,j)                   = 1;
     9823   3           s_element(i)(j)                  = 1;
     9824   3           static_structure(i).s_element(j) = 1;
     9825   3           static_structure.s_element(i,j)  = 1;
     9826   3           static_structure.s_element(i)(j) = 1;     
     9827   3  
     9828   3        end;
     9829   2  
     9830   2     end;
     9831   1  
     9832   1     if I ^= MAX_SIZE + 1 then
     9833   1        do;
     9834   2        put skip (one) list ('Loop termination error 2');
     9835   2        end;
     9836   1  
     9837   1     put skip(one) list('Loop 2 ended fine.');
     9838   1  
     9839   1  
     9840   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9841   2  
     9842   2        do J = 1 to INN_SIZE;
     9843   3  
     9844   3           /*******************************************************/
     9845   3           /* The following assignments are semantically the same */
     9846   3           /* and should produce IDENTICAL code.                  */
     9847   3           /*******************************************************/
     9848   3  
     9849   3           a_element(I,J)                 = 1;
     9850   3           a_element(I)(J)                = 1;
     9851   3           auto_structure(I).a_element(J) = 1;
     9852   3           auto_structure.a_element(I,J)  = 1;
     9853   3           auto_structure.a_element(I)(J) = 1;     
     9854   3  
     9855   3        end;
     9856   2  
     9857   2     end;
     9858   1  
     9859   1     if I ^= MAX_SIZE + 1 then
     9860   1        do;
     9861   2        put skip (one) list ('Loop termination error 3');
     9862   2        end;
     9863   1  
     9864   1     put skip(one) list('Loop 3 ended fine.');
     9865   1  
     9866   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9867   2  
     9868   2        do j = 1 to INN_SIZE;
     9869   3  
     9870   3           /*******************************************************/
     9871   3           /* The following assignments are semantically the same */
     9872   3           /* and should produce IDENTICAL code.                  */
     9873   3           /*******************************************************/
     9874   3  
     9875   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9876   3           a_element(i)(j)                = 1;
     9877   3           auto_structure(i).a_element(j) = 1;
     9878   3           auto_structure.a_element(i,j)  = 1;
     9879   3           auto_structure.a_element(i)(j) = 1;     
     9880   3  
     9881   3        end;
     9882   2  
     9883   2     end;
     9884   1  
     9885   1     if I ^= MAX_SIZE + 1 then
     9886   1        do;
     9887   2        put skip (one) list ('Loop termination error 4');
     9888   2        end;
     9889   1  
     9890   1     put skip(one) list('Loop 4 ended fine.');
     9891   1  
     9892   1     /****************************************************************/
     9893   1     /* This test ensures that the above code works when executed in */
     9894   1     /* a nested procedure.                                          */
     9895   1     /****************************************************************/
     9896   1  
     9897   1     put skip (one) list ('Im about to call the internal procedure now');
     9898   1  
     9899   1     call run_inner_proc;
     9900   1  
     9901   1   one = 1;
     9902   1  
     9903   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
     9904   2  
     9905   2        do J = 1 to INN_SIZE;
     9906   3  
     9907   3           /*******************************************************/
     9908   3           /* The following assignments are semantically the same */
     9909   3           /* and should produce IDENTICAL code.                  */
     9910   3           /*******************************************************/
     9911   3  
     9912   3           s_element(I,J)                   = 1;
     9913   3           s_element(I)(J)                  = 1;
     9914   3           static_structure(I).s_element(J) = 1;
     9915   3           static_structure.s_element(I,J)  = 1;
     9916   3           static_structure.s_element(I)(J) = 1;     
     9917   3  
     9918   3        end;
     9919   2  
     9920   2     end;
     9921   1  
     9922   1     if I ^= MAX_SIZE + 1 then
     9923   1        do;
     9924   2        put skip (one) list ('Loop termination error 1');
     9925   2        end;
     9926   1  
     9927   1     put skip(one) list('Loop 1 ended fine.');
     9928   1  
     9929   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
     9930   2  
     9931   2        do j = 1 to INN_SIZE;
     9932   3  
     9933   3           /*******************************************************/
     9934   3           /* The following assignments are semantically the same */
     9935   3           /* and should produce IDENTICAL code.                  */
     9936   3           /*******************************************************/
     9937   3  
     9938   3           s_element(i,j)                   = 1;
     9939   3           s_element(i)(j)                  = 1;
     9940   3           static_structure(i).s_element(j) = 1;
     9941   3           static_structure.s_element(i,j)  = 1;
     9942   3           static_structure.s_element(i)(j) = 1;     
     9943   3  
     9944   3        end;
     9945   2  
     9946   2     end;
     9947   1  
     9948   1     if I ^= MAX_SIZE + 1 then
     9949   1        do;
     9950   2        put skip (one) list ('Loop termination error 2');
     9951   2        end;
     9952   1  
     9953   1     put skip(one) list('Loop 2 ended fine.');
     9954   1  
     9955   1  
     9956   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
     9957   2  
     9958   2        do J = 1 to INN_SIZE;
     9959   3  
     9960   3           /*******************************************************/
     9961   3           /* The following assignments are semantically the same */
     9962   3           /* and should produce IDENTICAL code.                  */
     9963   3           /*******************************************************/
     9964   3  
     9965   3           a_element(I,J)                 = 1;
     9966   3           a_element(I)(J)                = 1;
     9967   3           auto_structure(I).a_element(J) = 1;
     9968   3           auto_structure.a_element(I,J)  = 1;
     9969   3           auto_structure.a_element(I)(J) = 1;     
     9970   3  
     9971   3        end;
     9972   2  
     9973   2     end;
     9974   1  
     9975   1     if I ^= MAX_SIZE + 1 then
     9976   1        do;
     9977   2        put skip (one) list ('Loop termination error 3');
     9978   2        end;
     9979   1  
     9980   1     put skip(one) list('Loop 3 ended fine.');
     9981   1  
     9982   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
     9983   2  
     9984   2        do j = 1 to INN_SIZE;
     9985   3  
     9986   3           /*******************************************************/
     9987   3           /* The following assignments are semantically the same */
     9988   3           /* and should produce IDENTICAL code.                  */
     9989   3           /*******************************************************/
     9990   3  
     9991   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
     9992   3           a_element(i)(j)                = 1;
     9993   3           auto_structure(i).a_element(j) = 1;
     9994   3           auto_structure.a_element(i,j)  = 1;
     9995   3           auto_structure.a_element(i)(j) = 1;     
     9996   3  
     9997   3        end;
     9998   2  
     9999   2     end;
    10000   1  
    10001   1     if I ^= MAX_SIZE + 1 then
    10002   1        do;
    10003   2        put skip (one) list ('Loop termination error 4');
    10004   2        end;
    10005   1  
    10006   1     put skip(one) list('Loop 4 ended fine.');
    10007   1  
    10008   1     /****************************************************************/
    10009   1     /* This test ensures that the above code works when executed in */
    10010   1     /* a nested procedure.                                          */
    10011   1     /****************************************************************/
    10012   1  
    10013   1     put skip (one) list ('Im about to call the internal procedure now');
    10014   1  
    10015   1     call run_inner_proc;
    10016   1  
    10017   1   one = 1;
    10018   1  
    10019   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10020   2  
    10021   2        do J = 1 to INN_SIZE;
    10022   3  
    10023   3           /*******************************************************/
    10024   3           /* The following assignments are semantically the same */
    10025   3           /* and should produce IDENTICAL code.                  */
    10026   3           /*******************************************************/
    10027   3  
    10028   3           s_element(I,J)                   = 1;
    10029   3           s_element(I)(J)                  = 1;
    10030   3           static_structure(I).s_element(J) = 1;
    10031   3           static_structure.s_element(I,J)  = 1;
    10032   3           static_structure.s_element(I)(J) = 1;     
    10033   3  
    10034   3        end;
    10035   2  
    10036   2     end;
    10037   1  
    10038   1     if I ^= MAX_SIZE + 1 then
    10039   1        do;
    10040   2        put skip (one) list ('Loop termination error 1');
    10041   2        end;
    10042   1  
    10043   1     put skip(one) list('Loop 1 ended fine.');
    10044   1  
    10045   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10046   2  
    10047   2        do j = 1 to INN_SIZE;
    10048   3  
    10049   3           /*******************************************************/
    10050   3           /* The following assignments are semantically the same */
    10051   3           /* and should produce IDENTICAL code.                  */
    10052   3           /*******************************************************/
    10053   3  
    10054   3           s_element(i,j)                   = 1;
    10055   3           s_element(i)(j)                  = 1;
    10056   3           static_structure(i).s_element(j) = 1;
    10057   3           static_structure.s_element(i,j)  = 1;
    10058   3           static_structure.s_element(i)(j) = 1;     
    10059   3  
    10060   3        end;
    10061   2  
    10062   2     end;
    10063   1  
    10064   1     if I ^= MAX_SIZE + 1 then
    10065   1        do;
    10066   2        put skip (one) list ('Loop termination error 2');
    10067   2        end;
    10068   1  
    10069   1     put skip(one) list('Loop 2 ended fine.');
    10070   1  
    10071   1  
    10072   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10073   2  
    10074   2        do J = 1 to INN_SIZE;
    10075   3  
    10076   3           /*******************************************************/
    10077   3           /* The following assignments are semantically the same */
    10078   3           /* and should produce IDENTICAL code.                  */
    10079   3           /*******************************************************/
    10080   3  
    10081   3           a_element(I,J)                 = 1;
    10082   3           a_element(I)(J)                = 1;
    10083   3           auto_structure(I).a_element(J) = 1;
    10084   3           auto_structure.a_element(I,J)  = 1;
    10085   3           auto_structure.a_element(I)(J) = 1;     
    10086   3  
    10087   3        end;
    10088   2  
    10089   2     end;
    10090   1  
    10091   1     if I ^= MAX_SIZE + 1 then
    10092   1        do;
    10093   2        put skip (one) list ('Loop termination error 3');
    10094   2        end;
    10095   1  
    10096   1     put skip(one) list('Loop 3 ended fine.');
    10097   1  
    10098   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10099   2  
    10100   2        do j = 1 to INN_SIZE;
    10101   3  
    10102   3           /*******************************************************/
    10103   3           /* The following assignments are semantically the same */
    10104   3           /* and should produce IDENTICAL code.                  */
    10105   3           /*******************************************************/
    10106   3  
    10107   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10108   3           a_element(i)(j)                = 1;
    10109   3           auto_structure(i).a_element(j) = 1;
    10110   3           auto_structure.a_element(i,j)  = 1;
    10111   3           auto_structure.a_element(i)(j) = 1;     
    10112   3  
    10113   3        end;
    10114   2  
    10115   2     end;
    10116   1  
    10117   1     if I ^= MAX_SIZE + 1 then
    10118   1        do;
    10119   2        put skip (one) list ('Loop termination error 4');
    10120   2        end;
    10121   1  
    10122   1     put skip(one) list('Loop 4 ended fine.');
    10123   1  
    10124   1     /****************************************************************/
    10125   1     /* This test ensures that the above code works when executed in */
    10126   1     /* a nested procedure.                                          */
    10127   1     /****************************************************************/
    10128   1  
    10129   1     put skip (one) list ('Im about to call the internal procedure now');
    10130   1  
    10131   1     call run_inner_proc;
    10132   1  
    10133   1   one = 1;
    10134   1  
    10135   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10136   2  
    10137   2        do J = 1 to INN_SIZE;
    10138   3  
    10139   3           /*******************************************************/
    10140   3           /* The following assignments are semantically the same */
    10141   3           /* and should produce IDENTICAL code.                  */
    10142   3           /*******************************************************/
    10143   3  
    10144   3           s_element(I,J)                   = 1;
    10145   3           s_element(I)(J)                  = 1;
    10146   3           static_structure(I).s_element(J) = 1;
    10147   3           static_structure.s_element(I,J)  = 1;
    10148   3           static_structure.s_element(I)(J) = 1;     
    10149   3  
    10150   3        end;
    10151   2  
    10152   2     end;
    10153   1  
    10154   1     if I ^= MAX_SIZE + 1 then
    10155   1        do;
    10156   2        put skip (one) list ('Loop termination error 1');
    10157   2        end;
    10158   1  
    10159   1     put skip(one) list('Loop 1 ended fine.');
    10160   1  
    10161   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10162   2  
    10163   2        do j = 1 to INN_SIZE;
    10164   3  
    10165   3           /*******************************************************/
    10166   3           /* The following assignments are semantically the same */
    10167   3           /* and should produce IDENTICAL code.                  */
    10168   3           /*******************************************************/
    10169   3  
    10170   3           s_element(i,j)                   = 1;
    10171   3           s_element(i)(j)                  = 1;
    10172   3           static_structure(i).s_element(j) = 1;
    10173   3           static_structure.s_element(i,j)  = 1;
    10174   3           static_structure.s_element(i)(j) = 1;     
    10175   3  
    10176   3        end;
    10177   2  
    10178   2     end;
    10179   1  
    10180   1     if I ^= MAX_SIZE + 1 then
    10181   1        do;
    10182   2        put skip (one) list ('Loop termination error 2');
    10183   2        end;
    10184   1  
    10185   1     put skip(one) list('Loop 2 ended fine.');
    10186   1  
    10187   1  
    10188   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10189   2  
    10190   2        do J = 1 to INN_SIZE;
    10191   3  
    10192   3           /*******************************************************/
    10193   3           /* The following assignments are semantically the same */
    10194   3           /* and should produce IDENTICAL code.                  */
    10195   3           /*******************************************************/
    10196   3  
    10197   3           a_element(I,J)                 = 1;
    10198   3           a_element(I)(J)                = 1;
    10199   3           auto_structure(I).a_element(J) = 1;
    10200   3           auto_structure.a_element(I,J)  = 1;
    10201   3           auto_structure.a_element(I)(J) = 1;     
    10202   3  
    10203   3        end;
    10204   2  
    10205   2     end;
    10206   1  
    10207   1     if I ^= MAX_SIZE + 1 then
    10208   1        do;
    10209   2        put skip (one) list ('Loop termination error 3');
    10210   2        end;
    10211   1  
    10212   1     put skip(one) list('Loop 3 ended fine.');
    10213   1  
    10214   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10215   2  
    10216   2        do j = 1 to INN_SIZE;
    10217   3  
    10218   3           /*******************************************************/
    10219   3           /* The following assignments are semantically the same */
    10220   3           /* and should produce IDENTICAL code.                  */
    10221   3           /*******************************************************/
    10222   3  
    10223   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10224   3           a_element(i)(j)                = 1;
    10225   3           auto_structure(i).a_element(j) = 1;
    10226   3           auto_structure.a_element(i,j)  = 1;
    10227   3           auto_structure.a_element(i)(j) = 1;     
    10228   3  
    10229   3        end;
    10230   2  
    10231   2     end;
    10232   1  
    10233   1     if I ^= MAX_SIZE + 1 then
    10234   1        do;
    10235   2        put skip (one) list ('Loop termination error 4');
    10236   2        end;
    10237   1  
    10238   1     put skip(one) list('Loop 4 ended fine.');
    10239   1  
    10240   1     /****************************************************************/
    10241   1     /* This test ensures that the above code works when executed in */
    10242   1     /* a nested procedure.                                          */
    10243   1     /****************************************************************/
    10244   1  
    10245   1     put skip (one) list ('Im about to call the internal procedure now');
    10246   1  
    10247   1     call run_inner_proc;
    10248   1  
    10249   1   one = 1;
    10250   1  
    10251   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10252   2  
    10253   2        do J = 1 to INN_SIZE;
    10254   3  
    10255   3           /*******************************************************/
    10256   3           /* The following assignments are semantically the same */
    10257   3           /* and should produce IDENTICAL code.                  */
    10258   3           /*******************************************************/
    10259   3  
    10260   3           s_element(I,J)                   = 1;
    10261   3           s_element(I)(J)                  = 1;
    10262   3           static_structure(I).s_element(J) = 1;
    10263   3           static_structure.s_element(I,J)  = 1;
    10264   3           static_structure.s_element(I)(J) = 1;     
    10265   3  
    10266   3        end;
    10267   2  
    10268   2     end;
    10269   1  
    10270   1     if I ^= MAX_SIZE + 1 then
    10271   1        do;
    10272   2        put skip (one) list ('Loop termination error 1');
    10273   2        end;
    10274   1  
    10275   1     put skip(one) list('Loop 1 ended fine.');
    10276   1  
    10277   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10278   2  
    10279   2        do j = 1 to INN_SIZE;
    10280   3  
    10281   3           /*******************************************************/
    10282   3           /* The following assignments are semantically the same */
    10283   3           /* and should produce IDENTICAL code.                  */
    10284   3           /*******************************************************/
    10285   3  
    10286   3           s_element(i,j)                   = 1;
    10287   3           s_element(i)(j)                  = 1;
    10288   3           static_structure(i).s_element(j) = 1;
    10289   3           static_structure.s_element(i,j)  = 1;
    10290   3           static_structure.s_element(i)(j) = 1;     
    10291   3  
    10292   3        end;
    10293   2  
    10294   2     end;
    10295   1  
    10296   1     if I ^= MAX_SIZE + 1 then
    10297   1        do;
    10298   2        put skip (one) list ('Loop termination error 2');
    10299   2        end;
    10300   1  
    10301   1     put skip(one) list('Loop 2 ended fine.');
    10302   1  
    10303   1  
    10304   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10305   2  
    10306   2        do J = 1 to INN_SIZE;
    10307   3  
    10308   3           /*******************************************************/
    10309   3           /* The following assignments are semantically the same */
    10310   3           /* and should produce IDENTICAL code.                  */
    10311   3           /*******************************************************/
    10312   3  
    10313   3           a_element(I,J)                 = 1;
    10314   3           a_element(I)(J)                = 1;
    10315   3           auto_structure(I).a_element(J) = 1;
    10316   3           auto_structure.a_element(I,J)  = 1;
    10317   3           auto_structure.a_element(I)(J) = 1;     
    10318   3  
    10319   3        end;
    10320   2  
    10321   2     end;
    10322   1  
    10323   1     if I ^= MAX_SIZE + 1 then
    10324   1        do;
    10325   2        put skip (one) list ('Loop termination error 3');
    10326   2        end;
    10327   1  
    10328   1     put skip(one) list('Loop 3 ended fine.');
    10329   1  
    10330   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10331   2  
    10332   2        do j = 1 to INN_SIZE;
    10333   3  
    10334   3           /*******************************************************/
    10335   3           /* The following assignments are semantically the same */
    10336   3           /* and should produce IDENTICAL code.                  */
    10337   3           /*******************************************************/
    10338   3  
    10339   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10340   3           a_element(i)(j)                = 1;
    10341   3           auto_structure(i).a_element(j) = 1;
    10342   3           auto_structure.a_element(i,j)  = 1;
    10343   3           auto_structure.a_element(i)(j) = 1;     
    10344   3  
    10345   3        end;
    10346   2  
    10347   2     end;
    10348   1  
    10349   1     if I ^= MAX_SIZE + 1 then
    10350   1        do;
    10351   2        put skip (one) list ('Loop termination error 4');
    10352   2        end;
    10353   1  
    10354   1     put skip(one) list('Loop 4 ended fine.');
    10355   1  
    10356   1     /****************************************************************/
    10357   1     /* This test ensures that the above code works when executed in */
    10358   1     /* a nested procedure.                                          */
    10359   1     /****************************************************************/
    10360   1  
    10361   1     put skip (one) list ('Im about to call the internal procedure now');
    10362   1  
    10363   1     call run_inner_proc;
    10364   1  
    10365   1   one = 1;
    10366   1  
    10367   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10368   2  
    10369   2        do J = 1 to INN_SIZE;
    10370   3  
    10371   3           /*******************************************************/
    10372   3           /* The following assignments are semantically the same */
    10373   3           /* and should produce IDENTICAL code.                  */
    10374   3           /*******************************************************/
    10375   3  
    10376   3           s_element(I,J)                   = 1;
    10377   3           s_element(I)(J)                  = 1;
    10378   3           static_structure(I).s_element(J) = 1;
    10379   3           static_structure.s_element(I,J)  = 1;
    10380   3           static_structure.s_element(I)(J) = 1;     
    10381   3  
    10382   3        end;
    10383   2  
    10384   2     end;
    10385   1  
    10386   1     if I ^= MAX_SIZE + 1 then
    10387   1        do;
    10388   2        put skip (one) list ('Loop termination error 1');
    10389   2        end;
    10390   1  
    10391   1     put skip(one) list('Loop 1 ended fine.');
    10392   1  
    10393   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10394   2  
    10395   2        do j = 1 to INN_SIZE;
    10396   3  
    10397   3           /*******************************************************/
    10398   3           /* The following assignments are semantically the same */
    10399   3           /* and should produce IDENTICAL code.                  */
    10400   3           /*******************************************************/
    10401   3  
    10402   3           s_element(i,j)                   = 1;
    10403   3           s_element(i)(j)                  = 1;
    10404   3           static_structure(i).s_element(j) = 1;
    10405   3           static_structure.s_element(i,j)  = 1;
    10406   3           static_structure.s_element(i)(j) = 1;     
    10407   3  
    10408   3        end;
    10409   2  
    10410   2     end;
    10411   1  
    10412   1     if I ^= MAX_SIZE + 1 then
    10413   1        do;
    10414   2        put skip (one) list ('Loop termination error 2');
    10415   2        end;
    10416   1  
    10417   1     put skip(one) list('Loop 2 ended fine.');
    10418   1  
    10419   1  
    10420   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10421   2  
    10422   2        do J = 1 to INN_SIZE;
    10423   3  
    10424   3           /*******************************************************/
    10425   3           /* The following assignments are semantically the same */
    10426   3           /* and should produce IDENTICAL code.                  */
    10427   3           /*******************************************************/
    10428   3  
    10429   3           a_element(I,J)                 = 1;
    10430   3           a_element(I)(J)                = 1;
    10431   3           auto_structure(I).a_element(J) = 1;
    10432   3           auto_structure.a_element(I,J)  = 1;
    10433   3           auto_structure.a_element(I)(J) = 1;     
    10434   3  
    10435   3        end;
    10436   2  
    10437   2     end;
    10438   1  
    10439   1     if I ^= MAX_SIZE + 1 then
    10440   1        do;
    10441   2        put skip (one) list ('Loop termination error 3');
    10442   2        end;
    10443   1  
    10444   1     put skip(one) list('Loop 3 ended fine.');
    10445   1  
    10446   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10447   2  
    10448   2        do j = 1 to INN_SIZE;
    10449   3  
    10450   3           /*******************************************************/
    10451   3           /* The following assignments are semantically the same */
    10452   3           /* and should produce IDENTICAL code.                  */
    10453   3           /*******************************************************/
    10454   3  
    10455   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10456   3           a_element(i)(j)                = 1;
    10457   3           auto_structure(i).a_element(j) = 1;
    10458   3           auto_structure.a_element(i,j)  = 1;
    10459   3           auto_structure.a_element(i)(j) = 1;     
    10460   3  
    10461   3        end;
    10462   2  
    10463   2     end;
    10464   1  
    10465   1     if I ^= MAX_SIZE + 1 then
    10466   1        do;
    10467   2        put skip (one) list ('Loop termination error 4');
    10468   2        end;
    10469   1  
    10470   1     put skip(one) list('Loop 4 ended fine.');
    10471   1  
    10472   1     /****************************************************************/
    10473   1     /* This test ensures that the above code works when executed in */
    10474   1     /* a nested procedure.                                          */
    10475   1     /****************************************************************/
    10476   1  
    10477   1     put skip (one) list ('Im about to call the internal procedure now');
    10478   1  
    10479   1     call run_inner_proc;
    10480   1  
    10481   1   one = 1;
    10482   1  
    10483   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10484   2  
    10485   2        do J = 1 to INN_SIZE;
    10486   3  
    10487   3           /*******************************************************/
    10488   3           /* The following assignments are semantically the same */
    10489   3           /* and should produce IDENTICAL code.                  */
    10490   3           /*******************************************************/
    10491   3  
    10492   3           s_element(I,J)                   = 1;
    10493   3           s_element(I)(J)                  = 1;
    10494   3           static_structure(I).s_element(J) = 1;
    10495   3           static_structure.s_element(I,J)  = 1;
    10496   3           static_structure.s_element(I)(J) = 1;     
    10497   3  
    10498   3        end;
    10499   2  
    10500   2     end;
    10501   1  
    10502   1     if I ^= MAX_SIZE + 1 then
    10503   1        do;
    10504   2        put skip (one) list ('Loop termination error 1');
    10505   2        end;
    10506   1  
    10507   1     put skip(one) list('Loop 1 ended fine.');
    10508   1  
    10509   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10510   2  
    10511   2        do j = 1 to INN_SIZE;
    10512   3  
    10513   3           /*******************************************************/
    10514   3           /* The following assignments are semantically the same */
    10515   3           /* and should produce IDENTICAL code.                  */
    10516   3           /*******************************************************/
    10517   3  
    10518   3           s_element(i,j)                   = 1;
    10519   3           s_element(i)(j)                  = 1;
    10520   3           static_structure(i).s_element(j) = 1;
    10521   3           static_structure.s_element(i,j)  = 1;
    10522   3           static_structure.s_element(i)(j) = 1;     
    10523   3  
    10524   3        end;
    10525   2  
    10526   2     end;
    10527   1  
    10528   1     if I ^= MAX_SIZE + 1 then
    10529   1        do;
    10530   2        put skip (one) list ('Loop termination error 2');
    10531   2        end;
    10532   1  
    10533   1     put skip(one) list('Loop 2 ended fine.');
    10534   1  
    10535   1  
    10536   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10537   2  
    10538   2        do J = 1 to INN_SIZE;
    10539   3  
    10540   3           /*******************************************************/
    10541   3           /* The following assignments are semantically the same */
    10542   3           /* and should produce IDENTICAL code.                  */
    10543   3           /*******************************************************/
    10544   3  
    10545   3           a_element(I,J)                 = 1;
    10546   3           a_element(I)(J)                = 1;
    10547   3           auto_structure(I).a_element(J) = 1;
    10548   3           auto_structure.a_element(I,J)  = 1;
    10549   3           auto_structure.a_element(I)(J) = 1;     
    10550   3  
    10551   3        end;
    10552   2  
    10553   2     end;
    10554   1  
    10555   1     if I ^= MAX_SIZE + 1 then
    10556   1        do;
    10557   2        put skip (one) list ('Loop termination error 3');
    10558   2        end;
    10559   1  
    10560   1     put skip(one) list('Loop 3 ended fine.');
    10561   1  
    10562   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10563   2  
    10564   2        do j = 1 to INN_SIZE;
    10565   3  
    10566   3           /*******************************************************/
    10567   3           /* The following assignments are semantically the same */
    10568   3           /* and should produce IDENTICAL code.                  */
    10569   3           /*******************************************************/
    10570   3  
    10571   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10572   3           a_element(i)(j)                = 1;
    10573   3           auto_structure(i).a_element(j) = 1;
    10574   3           auto_structure.a_element(i,j)  = 1;
    10575   3           auto_structure.a_element(i)(j) = 1;     
    10576   3  
    10577   3        end;
    10578   2  
    10579   2     end;
    10580   1  
    10581   1     if I ^= MAX_SIZE + 1 then
    10582   1        do;
    10583   2        put skip (one) list ('Loop termination error 4');
    10584   2        end;
    10585   1  
    10586   1     put skip(one) list('Loop 4 ended fine.');
    10587   1  
    10588   1     /****************************************************************/
    10589   1     /* This test ensures that the above code works when executed in */
    10590   1     /* a nested procedure.                                          */
    10591   1     /****************************************************************/
    10592   1  
    10593   1     put skip (one) list ('Im about to call the internal procedure now');
    10594   1  
    10595   1     call run_inner_proc;
    10596   1  
    10597   1   one = 1;
    10598   1  
    10599   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10600   2  
    10601   2        do J = 1 to INN_SIZE;
    10602   3  
    10603   3           /*******************************************************/
    10604   3           /* The following assignments are semantically the same */
    10605   3           /* and should produce IDENTICAL code.                  */
    10606   3           /*******************************************************/
    10607   3  
    10608   3           s_element(I,J)                   = 1;
    10609   3           s_element(I)(J)                  = 1;
    10610   3           static_structure(I).s_element(J) = 1;
    10611   3           static_structure.s_element(I,J)  = 1;
    10612   3           static_structure.s_element(I)(J) = 1;     
    10613   3  
    10614   3        end;
    10615   2  
    10616   2     end;
    10617   1  
    10618   1     if I ^= MAX_SIZE + 1 then
    10619   1        do;
    10620   2        put skip (one) list ('Loop termination error 1');
    10621   2        end;
    10622   1  
    10623   1     put skip(one) list('Loop 1 ended fine.');
    10624   1  
    10625   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10626   2  
    10627   2        do j = 1 to INN_SIZE;
    10628   3  
    10629   3           /*******************************************************/
    10630   3           /* The following assignments are semantically the same */
    10631   3           /* and should produce IDENTICAL code.                  */
    10632   3           /*******************************************************/
    10633   3  
    10634   3           s_element(i,j)                   = 1;
    10635   3           s_element(i)(j)                  = 1;
    10636   3           static_structure(i).s_element(j) = 1;
    10637   3           static_structure.s_element(i,j)  = 1;
    10638   3           static_structure.s_element(i)(j) = 1;     
    10639   3  
    10640   3        end;
    10641   2  
    10642   2     end;
    10643   1  
    10644   1     if I ^= MAX_SIZE + 1 then
    10645   1        do;
    10646   2        put skip (one) list ('Loop termination error 2');
    10647   2        end;
    10648   1  
    10649   1     put skip(one) list('Loop 2 ended fine.');
    10650   1  
    10651   1  
    10652   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10653   2  
    10654   2        do J = 1 to INN_SIZE;
    10655   3  
    10656   3           /*******************************************************/
    10657   3           /* The following assignments are semantically the same */
    10658   3           /* and should produce IDENTICAL code.                  */
    10659   3           /*******************************************************/
    10660   3  
    10661   3           a_element(I,J)                 = 1;
    10662   3           a_element(I)(J)                = 1;
    10663   3           auto_structure(I).a_element(J) = 1;
    10664   3           auto_structure.a_element(I,J)  = 1;
    10665   3           auto_structure.a_element(I)(J) = 1;     
    10666   3  
    10667   3        end;
    10668   2  
    10669   2     end;
    10670   1  
    10671   1     if I ^= MAX_SIZE + 1 then
    10672   1        do;
    10673   2        put skip (one) list ('Loop termination error 3');
    10674   2        end;
    10675   1  
    10676   1     put skip(one) list('Loop 3 ended fine.');
    10677   1  
    10678   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10679   2  
    10680   2        do j = 1 to INN_SIZE;
    10681   3  
    10682   3           /*******************************************************/
    10683   3           /* The following assignments are semantically the same */
    10684   3           /* and should produce IDENTICAL code.                  */
    10685   3           /*******************************************************/
    10686   3  
    10687   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10688   3           a_element(i)(j)                = 1;
    10689   3           auto_structure(i).a_element(j) = 1;
    10690   3           auto_structure.a_element(i,j)  = 1;
    10691   3           auto_structure.a_element(i)(j) = 1;     
    10692   3  
    10693   3        end;
    10694   2  
    10695   2     end;
    10696   1  
    10697   1     if I ^= MAX_SIZE + 1 then
    10698   1        do;
    10699   2        put skip (one) list ('Loop termination error 4');
    10700   2        end;
    10701   1  
    10702   1     put skip(one) list('Loop 4 ended fine.');
    10703   1  
    10704   1     /****************************************************************/
    10705   1     /* This test ensures that the above code works when executed in */
    10706   1     /* a nested procedure.                                          */
    10707   1     /****************************************************************/
    10708   1  
    10709   1     put skip (one) list ('Im about to call the internal procedure now');
    10710   1  
    10711   1     call run_inner_proc;
    10712   1  
    10713   1   one = 1;
    10714   1  
    10715   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10716   2  
    10717   2        do J = 1 to INN_SIZE;
    10718   3  
    10719   3           /*******************************************************/
    10720   3           /* The following assignments are semantically the same */
    10721   3           /* and should produce IDENTICAL code.                  */
    10722   3           /*******************************************************/
    10723   3  
    10724   3           s_element(I,J)                   = 1;
    10725   3           s_element(I)(J)                  = 1;
    10726   3           static_structure(I).s_element(J) = 1;
    10727   3           static_structure.s_element(I,J)  = 1;
    10728   3           static_structure.s_element(I)(J) = 1;     
    10729   3  
    10730   3        end;
    10731   2  
    10732   2     end;
    10733   1  
    10734   1     if I ^= MAX_SIZE + 1 then
    10735   1        do;
    10736   2        put skip (one) list ('Loop termination error 1');
    10737   2        end;
    10738   1  
    10739   1     put skip(one) list('Loop 1 ended fine.');
    10740   1  
    10741   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10742   2  
    10743   2        do j = 1 to INN_SIZE;
    10744   3  
    10745   3           /*******************************************************/
    10746   3           /* The following assignments are semantically the same */
    10747   3           /* and should produce IDENTICAL code.                  */
    10748   3           /*******************************************************/
    10749   3  
    10750   3           s_element(i,j)                   = 1;
    10751   3           s_element(i)(j)                  = 1;
    10752   3           static_structure(i).s_element(j) = 1;
    10753   3           static_structure.s_element(i,j)  = 1;
    10754   3           static_structure.s_element(i)(j) = 1;     
    10755   3  
    10756   3        end;
    10757   2  
    10758   2     end;
    10759   1  
    10760   1     if I ^= MAX_SIZE + 1 then
    10761   1        do;
    10762   2        put skip (one) list ('Loop termination error 2');
    10763   2        end;
    10764   1  
    10765   1     put skip(one) list('Loop 2 ended fine.');
    10766   1  
    10767   1  
    10768   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10769   2  
    10770   2        do J = 1 to INN_SIZE;
    10771   3  
    10772   3           /*******************************************************/
    10773   3           /* The following assignments are semantically the same */
    10774   3           /* and should produce IDENTICAL code.                  */
    10775   3           /*******************************************************/
    10776   3  
    10777   3           a_element(I,J)                 = 1;
    10778   3           a_element(I)(J)                = 1;
    10779   3           auto_structure(I).a_element(J) = 1;
    10780   3           auto_structure.a_element(I,J)  = 1;
    10781   3           auto_structure.a_element(I)(J) = 1;     
    10782   3  
    10783   3        end;
    10784   2  
    10785   2     end;
    10786   1  
    10787   1     if I ^= MAX_SIZE + 1 then
    10788   1        do;
    10789   2        put skip (one) list ('Loop termination error 3');
    10790   2        end;
    10791   1  
    10792   1     put skip(one) list('Loop 3 ended fine.');
    10793   1  
    10794   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10795   2  
    10796   2        do j = 1 to INN_SIZE;
    10797   3  
    10798   3           /*******************************************************/
    10799   3           /* The following assignments are semantically the same */
    10800   3           /* and should produce IDENTICAL code.                  */
    10801   3           /*******************************************************/
    10802   3  
    10803   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10804   3           a_element(i)(j)                = 1;
    10805   3           auto_structure(i).a_element(j) = 1;
    10806   3           auto_structure.a_element(i,j)  = 1;
    10807   3           auto_structure.a_element(i)(j) = 1;     
    10808   3  
    10809   3        end;
    10810   2  
    10811   2     end;
    10812   1  
    10813   1     if I ^= MAX_SIZE + 1 then
    10814   1        do;
    10815   2        put skip (one) list ('Loop termination error 4');
    10816   2        end;
    10817   1  
    10818   1     put skip(one) list('Loop 4 ended fine.');
    10819   1  
    10820   1     /****************************************************************/
    10821   1     /* This test ensures that the above code works when executed in */
    10822   1     /* a nested procedure.                                          */
    10823   1     /****************************************************************/
    10824   1  
    10825   1     put skip (one) list ('Im about to call the internal procedure now');
    10826   1  
    10827   1     call run_inner_proc;
    10828   1  
    10829   1   one = 1;
    10830   1  
    10831   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10832   2  
    10833   2        do J = 1 to INN_SIZE;
    10834   3  
    10835   3           /*******************************************************/
    10836   3           /* The following assignments are semantically the same */
    10837   3           /* and should produce IDENTICAL code.                  */
    10838   3           /*******************************************************/
    10839   3  
    10840   3           s_element(I,J)                   = 1;
    10841   3           s_element(I)(J)                  = 1;
    10842   3           static_structure(I).s_element(J) = 1;
    10843   3           static_structure.s_element(I,J)  = 1;
    10844   3           static_structure.s_element(I)(J) = 1;     
    10845   3  
    10846   3        end;
    10847   2  
    10848   2     end;
    10849   1  
    10850   1     if I ^= MAX_SIZE + 1 then
    10851   1        do;
    10852   2        put skip (one) list ('Loop termination error 1');
    10853   2        end;
    10854   1  
    10855   1     put skip(one) list('Loop 1 ended fine.');
    10856   1  
    10857   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10858   2  
    10859   2        do j = 1 to INN_SIZE;
    10860   3  
    10861   3           /*******************************************************/
    10862   3           /* The following assignments are semantically the same */
    10863   3           /* and should produce IDENTICAL code.                  */
    10864   3           /*******************************************************/
    10865   3  
    10866   3           s_element(i,j)                   = 1;
    10867   3           s_element(i)(j)                  = 1;
    10868   3           static_structure(i).s_element(j) = 1;
    10869   3           static_structure.s_element(i,j)  = 1;
    10870   3           static_structure.s_element(i)(j) = 1;     
    10871   3  
    10872   3        end;
    10873   2  
    10874   2     end;
    10875   1  
    10876   1     if I ^= MAX_SIZE + 1 then
    10877   1        do;
    10878   2        put skip (one) list ('Loop termination error 2');
    10879   2        end;
    10880   1  
    10881   1     put skip(one) list('Loop 2 ended fine.');
    10882   1  
    10883   1  
    10884   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    10885   2  
    10886   2        do J = 1 to INN_SIZE;
    10887   3  
    10888   3           /*******************************************************/
    10889   3           /* The following assignments are semantically the same */
    10890   3           /* and should produce IDENTICAL code.                  */
    10891   3           /*******************************************************/
    10892   3  
    10893   3           a_element(I,J)                 = 1;
    10894   3           a_element(I)(J)                = 1;
    10895   3           auto_structure(I).a_element(J) = 1;
    10896   3           auto_structure.a_element(I,J)  = 1;
    10897   3           auto_structure.a_element(I)(J) = 1;     
    10898   3  
    10899   3        end;
    10900   2  
    10901   2     end;
    10902   1  
    10903   1     if I ^= MAX_SIZE + 1 then
    10904   1        do;
    10905   2        put skip (one) list ('Loop termination error 3');
    10906   2        end;
    10907   1  
    10908   1     put skip(one) list('Loop 3 ended fine.');
    10909   1  
    10910   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    10911   2  
    10912   2        do j = 1 to INN_SIZE;
    10913   3  
    10914   3           /*******************************************************/
    10915   3           /* The following assignments are semantically the same */
    10916   3           /* and should produce IDENTICAL code.                  */
    10917   3           /*******************************************************/
    10918   3  
    10919   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    10920   3           a_element(i)(j)                = 1;
    10921   3           auto_structure(i).a_element(j) = 1;
    10922   3           auto_structure.a_element(i,j)  = 1;
    10923   3           auto_structure.a_element(i)(j) = 1;     
    10924   3  
    10925   3        end;
    10926   2  
    10927   2     end;
    10928   1  
    10929   1     if I ^= MAX_SIZE + 1 then
    10930   1        do;
    10931   2        put skip (one) list ('Loop termination error 4');
    10932   2        end;
    10933   1  
    10934   1     put skip(one) list('Loop 4 ended fine.');
    10935   1  
    10936   1     /****************************************************************/
    10937   1     /* This test ensures that the above code works when executed in */
    10938   1     /* a nested procedure.                                          */
    10939   1     /****************************************************************/
    10940   1  
    10941   1     put skip (one) list ('Im about to call the internal procedure now');
    10942   1  
    10943   1     call run_inner_proc;
    10944   1  
    10945   1   one = 1;
    10946   1  
    10947   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    10948   2  
    10949   2        do J = 1 to INN_SIZE;
    10950   3  
    10951   3           /*******************************************************/
    10952   3           /* The following assignments are semantically the same */
    10953   3           /* and should produce IDENTICAL code.                  */
    10954   3           /*******************************************************/
    10955   3  
    10956   3           s_element(I,J)                   = 1;
    10957   3           s_element(I)(J)                  = 1;
    10958   3           static_structure(I).s_element(J) = 1;
    10959   3           static_structure.s_element(I,J)  = 1;
    10960   3           static_structure.s_element(I)(J) = 1;     
    10961   3  
    10962   3        end;
    10963   2  
    10964   2     end;
    10965   1  
    10966   1     if I ^= MAX_SIZE + 1 then
    10967   1        do;
    10968   2        put skip (one) list ('Loop termination error 1');
    10969   2        end;
    10970   1  
    10971   1     put skip(one) list('Loop 1 ended fine.');
    10972   1  
    10973   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    10974   2  
    10975   2        do j = 1 to INN_SIZE;
    10976   3  
    10977   3           /*******************************************************/
    10978   3           /* The following assignments are semantically the same */
    10979   3           /* and should produce IDENTICAL code.                  */
    10980   3           /*******************************************************/
    10981   3  
    10982   3           s_element(i,j)                   = 1;
    10983   3           s_element(i)(j)                  = 1;
    10984   3           static_structure(i).s_element(j) = 1;
    10985   3           static_structure.s_element(i,j)  = 1;
    10986   3           static_structure.s_element(i)(j) = 1;     
    10987   3  
    10988   3        end;
    10989   2  
    10990   2     end;
    10991   1  
    10992   1     if I ^= MAX_SIZE + 1 then
    10993   1        do;
    10994   2        put skip (one) list ('Loop termination error 2');
    10995   2        end;
    10996   1  
    10997   1     put skip(one) list('Loop 2 ended fine.');
    10998   1  
    10999   1  
    11000   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11001   2  
    11002   2        do J = 1 to INN_SIZE;
    11003   3  
    11004   3           /*******************************************************/
    11005   3           /* The following assignments are semantically the same */
    11006   3           /* and should produce IDENTICAL code.                  */
    11007   3           /*******************************************************/
    11008   3  
    11009   3           a_element(I,J)                 = 1;
    11010   3           a_element(I)(J)                = 1;
    11011   3           auto_structure(I).a_element(J) = 1;
    11012   3           auto_structure.a_element(I,J)  = 1;
    11013   3           auto_structure.a_element(I)(J) = 1;     
    11014   3  
    11015   3        end;
    11016   2  
    11017   2     end;
    11018   1  
    11019   1     if I ^= MAX_SIZE + 1 then
    11020   1        do;
    11021   2        put skip (one) list ('Loop termination error 3');
    11022   2        end;
    11023   1  
    11024   1     put skip(one) list('Loop 3 ended fine.');
    11025   1  
    11026   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11027   2  
    11028   2        do j = 1 to INN_SIZE;
    11029   3  
    11030   3           /*******************************************************/
    11031   3           /* The following assignments are semantically the same */
    11032   3           /* and should produce IDENTICAL code.                  */
    11033   3           /*******************************************************/
    11034   3  
    11035   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11036   3           a_element(i)(j)                = 1;
    11037   3           auto_structure(i).a_element(j) = 1;
    11038   3           auto_structure.a_element(i,j)  = 1;
    11039   3           auto_structure.a_element(i)(j) = 1;     
    11040   3  
    11041   3        end;
    11042   2  
    11043   2     end;
    11044   1  
    11045   1     if I ^= MAX_SIZE + 1 then
    11046   1        do;
    11047   2        put skip (one) list ('Loop termination error 4');
    11048   2        end;
    11049   1  
    11050   1     put skip(one) list('Loop 4 ended fine.');
    11051   1  
    11052   1     /****************************************************************/
    11053   1     /* This test ensures that the above code works when executed in */
    11054   1     /* a nested procedure.                                          */
    11055   1     /****************************************************************/
    11056   1  
    11057   1     put skip (one) list ('Im about to call the internal procedure now');
    11058   1  
    11059   1     call run_inner_proc;
    11060   1  
    11061   1   one = 1;
    11062   1  
    11063   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11064   2  
    11065   2        do J = 1 to INN_SIZE;
    11066   3  
    11067   3           /*******************************************************/
    11068   3           /* The following assignments are semantically the same */
    11069   3           /* and should produce IDENTICAL code.                  */
    11070   3           /*******************************************************/
    11071   3  
    11072   3           s_element(I,J)                   = 1;
    11073   3           s_element(I)(J)                  = 1;
    11074   3           static_structure(I).s_element(J) = 1;
    11075   3           static_structure.s_element(I,J)  = 1;
    11076   3           static_structure.s_element(I)(J) = 1;     
    11077   3  
    11078   3        end;
    11079   2  
    11080   2     end;
    11081   1  
    11082   1     if I ^= MAX_SIZE + 1 then
    11083   1        do;
    11084   2        put skip (one) list ('Loop termination error 1');
    11085   2        end;
    11086   1  
    11087   1     put skip(one) list('Loop 1 ended fine.');
    11088   1  
    11089   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11090   2  
    11091   2        do j = 1 to INN_SIZE;
    11092   3  
    11093   3           /*******************************************************/
    11094   3           /* The following assignments are semantically the same */
    11095   3           /* and should produce IDENTICAL code.                  */
    11096   3           /*******************************************************/
    11097   3  
    11098   3           s_element(i,j)                   = 1;
    11099   3           s_element(i)(j)                  = 1;
    11100   3           static_structure(i).s_element(j) = 1;
    11101   3           static_structure.s_element(i,j)  = 1;
    11102   3           static_structure.s_element(i)(j) = 1;     
    11103   3  
    11104   3        end;
    11105   2  
    11106   2     end;
    11107   1  
    11108   1     if I ^= MAX_SIZE + 1 then
    11109   1        do;
    11110   2        put skip (one) list ('Loop termination error 2');
    11111   2        end;
    11112   1  
    11113   1     put skip(one) list('Loop 2 ended fine.');
    11114   1  
    11115   1  
    11116   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11117   2  
    11118   2        do J = 1 to INN_SIZE;
    11119   3  
    11120   3           /*******************************************************/
    11121   3           /* The following assignments are semantically the same */
    11122   3           /* and should produce IDENTICAL code.                  */
    11123   3           /*******************************************************/
    11124   3  
    11125   3           a_element(I,J)                 = 1;
    11126   3           a_element(I)(J)                = 1;
    11127   3           auto_structure(I).a_element(J) = 1;
    11128   3           auto_structure.a_element(I,J)  = 1;
    11129   3           auto_structure.a_element(I)(J) = 1;     
    11130   3  
    11131   3        end;
    11132   2  
    11133   2     end;
    11134   1  
    11135   1     if I ^= MAX_SIZE + 1 then
    11136   1        do;
    11137   2        put skip (one) list ('Loop termination error 3');
    11138   2        end;
    11139   1  
    11140   1     put skip(one) list('Loop 3 ended fine.');
    11141   1  
    11142   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11143   2  
    11144   2        do j = 1 to INN_SIZE;
    11145   3  
    11146   3           /*******************************************************/
    11147   3           /* The following assignments are semantically the same */
    11148   3           /* and should produce IDENTICAL code.                  */
    11149   3           /*******************************************************/
    11150   3  
    11151   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11152   3           a_element(i)(j)                = 1;
    11153   3           auto_structure(i).a_element(j) = 1;
    11154   3           auto_structure.a_element(i,j)  = 1;
    11155   3           auto_structure.a_element(i)(j) = 1;     
    11156   3  
    11157   3        end;
    11158   2  
    11159   2     end;
    11160   1  
    11161   1     if I ^= MAX_SIZE + 1 then
    11162   1        do;
    11163   2        put skip (one) list ('Loop termination error 4');
    11164   2        end;
    11165   1  
    11166   1     put skip(one) list('Loop 4 ended fine.');
    11167   1  
    11168   1     /****************************************************************/
    11169   1     /* This test ensures that the above code works when executed in */
    11170   1     /* a nested procedure.                                          */
    11171   1     /****************************************************************/
    11172   1  
    11173   1     put skip (one) list ('Im about to call the internal procedure now');
    11174   1  
    11175   1     call run_inner_proc;
    11176   1  
    11177   1   one = 1;
    11178   1  
    11179   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11180   2  
    11181   2        do J = 1 to INN_SIZE;
    11182   3  
    11183   3           /*******************************************************/
    11184   3           /* The following assignments are semantically the same */
    11185   3           /* and should produce IDENTICAL code.                  */
    11186   3           /*******************************************************/
    11187   3  
    11188   3           s_element(I,J)                   = 1;
    11189   3           s_element(I)(J)                  = 1;
    11190   3           static_structure(I).s_element(J) = 1;
    11191   3           static_structure.s_element(I,J)  = 1;
    11192   3           static_structure.s_element(I)(J) = 1;     
    11193   3  
    11194   3        end;
    11195   2  
    11196   2     end;
    11197   1  
    11198   1     if I ^= MAX_SIZE + 1 then

Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   3

    11199   1        do;
    11200   2        put skip (one) list ('Loop termination error 1');
    11201   2        end;
    11202   1  
    11203   1     put skip(one) list('Loop 1 ended fine.');
    11204   1  
    11205   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11206   2  
    11207   2        do j = 1 to INN_SIZE;
    11208   3  
    11209   3           /*******************************************************/
    11210   3           /* The following assignments are semantically the same */
    11211   3           /* and should produce IDENTICAL code.                  */
    11212   3           /*******************************************************/
    11213   3  
    11214   3           s_element(i,j)                   = 1;
    11215   3           s_element(i)(j)                  = 1;
    11216   3           static_structure(i).s_element(j) = 1;
    11217   3           static_structure.s_element(i,j)  = 1;
    11218   3           static_structure.s_element(i)(j) = 1;     
    11219   3  
    11220   3        end;
    11221   2  
    11222   2     end;
    11223   1  
    11224   1     if I ^= MAX_SIZE + 1 then
    11225   1        do;
    11226   2        put skip (one) list ('Loop termination error 2');
    11227   2        end;
    11228   1  
    11229   1     put skip(one) list('Loop 2 ended fine.');
    11230   1  
    11231   1  
    11232   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11233   2  
    11234   2        do J = 1 to INN_SIZE;
    11235   3  
    11236   3           /*******************************************************/
    11237   3           /* The following assignments are semantically the same */
    11238   3           /* and should produce IDENTICAL code.                  */
    11239   3           /*******************************************************/
    11240   3  
    11241   3           a_element(I,J)                 = 1;
    11242   3           a_element(I)(J)                = 1;
    11243   3           auto_structure(I).a_element(J) = 1;
    11244   3           auto_structure.a_element(I,J)  = 1;
    11245   3           auto_structure.a_element(I)(J) = 1;     
    11246   3  
    11247   3        end;
    11248   2  
    11249   2     end;
    11250   1  
    11251   1     if I ^= MAX_SIZE + 1 then
    11252   1        do;
    11253   2        put skip (one) list ('Loop termination error 3');
    11254   2        end;
    11255   1  
    11256   1     put skip(one) list('Loop 3 ended fine.');
    11257   1  
    11258   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11259   2  
    11260   2        do j = 1 to INN_SIZE;
    11261   3  
    11262   3           /*******************************************************/
    11263   3           /* The following assignments are semantically the same */
    11264   3           /* and should produce IDENTICAL code.                  */
    11265   3           /*******************************************************/
    11266   3  
    11267   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11268   3           a_element(i)(j)                = 1;
    11269   3           auto_structure(i).a_element(j) = 1;
    11270   3           auto_structure.a_element(i,j)  = 1;
    11271   3           auto_structure.a_element(i)(j) = 1;     
    11272   3  
    11273   3        end;
    11274   2  
    11275   2     end;
    11276   1  
    11277   1     if I ^= MAX_SIZE + 1 then
    11278   1        do;
    11279   2        put skip (one) list ('Loop termination error 4');
    11280   2        end;
    11281   1  
    11282   1     put skip(one) list('Loop 4 ended fine.');
    11283   1  
    11284   1     /****************************************************************/
    11285   1     /* This test ensures that the above code works when executed in */
    11286   1     /* a nested procedure.                                          */
    11287   1     /****************************************************************/
    11288   1  
    11289   1     put skip (one) list ('Im about to call the internal procedure now');
    11290   1  
    11291   1     call run_inner_proc;
    11292   1  
    11293   1   one = 1;
    11294   1  
    11295   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11296   2  
    11297   2        do J = 1 to INN_SIZE;
    11298   3  
    11299   3           /*******************************************************/
    11300   3           /* The following assignments are semantically the same */
    11301   3           /* and should produce IDENTICAL code.                  */
    11302   3           /*******************************************************/
    11303   3  
    11304   3           s_element(I,J)                   = 1;
    11305   3           s_element(I)(J)                  = 1;
    11306   3           static_structure(I).s_element(J) = 1;
    11307   3           static_structure.s_element(I,J)  = 1;
    11308   3           static_structure.s_element(I)(J) = 1;     
    11309   3  
    11310   3        end;
    11311   2  
    11312   2     end;
    11313   1  
    11314   1     if I ^= MAX_SIZE + 1 then
    11315   1        do;
    11316   2        put skip (one) list ('Loop termination error 1');
    11317   2        end;
    11318   1  
    11319   1     put skip(one) list('Loop 1 ended fine.');
    11320   1  
    11321   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11322   2  
    11323   2        do j = 1 to INN_SIZE;
    11324   3  
    11325   3           /*******************************************************/
    11326   3           /* The following assignments are semantically the same */
    11327   3           /* and should produce IDENTICAL code.                  */
    11328   3           /*******************************************************/
    11329   3  
    11330   3           s_element(i,j)                   = 1;
    11331   3           s_element(i)(j)                  = 1;
    11332   3           static_structure(i).s_element(j) = 1;
    11333   3           static_structure.s_element(i,j)  = 1;
    11334   3           static_structure.s_element(i)(j) = 1;     
    11335   3  
    11336   3        end;
    11337   2  
    11338   2     end;
    11339   1  
    11340   1     if I ^= MAX_SIZE + 1 then
    11341   1        do;
    11342   2        put skip (one) list ('Loop termination error 2');
    11343   2        end;
    11344   1  
    11345   1     put skip(one) list('Loop 2 ended fine.');
    11346   1  
    11347   1  
    11348   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11349   2  
    11350   2        do J = 1 to INN_SIZE;
    11351   3  
    11352   3           /*******************************************************/
    11353   3           /* The following assignments are semantically the same */
    11354   3           /* and should produce IDENTICAL code.                  */
    11355   3           /*******************************************************/
    11356   3  
    11357   3           a_element(I,J)                 = 1;
    11358   3           a_element(I)(J)                = 1;
    11359   3           auto_structure(I).a_element(J) = 1;
    11360   3           auto_structure.a_element(I,J)  = 1;
    11361   3           auto_structure.a_element(I)(J) = 1;     
    11362   3  
    11363   3        end;
    11364   2  
    11365   2     end;
    11366   1  
    11367   1     if I ^= MAX_SIZE + 1 then
    11368   1        do;
    11369   2        put skip (one) list ('Loop termination error 3');
    11370   2        end;
    11371   1  
    11372   1     put skip(one) list('Loop 3 ended fine.');
    11373   1  
    11374   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11375   2  
    11376   2        do j = 1 to INN_SIZE;
    11377   3  
    11378   3           /*******************************************************/
    11379   3           /* The following assignments are semantically the same */
    11380   3           /* and should produce IDENTICAL code.                  */
    11381   3           /*******************************************************/
    11382   3  
    11383   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11384   3           a_element(i)(j)                = 1;
    11385   3           auto_structure(i).a_element(j) = 1;
    11386   3           auto_structure.a_element(i,j)  = 1;
    11387   3           auto_structure.a_element(i)(j) = 1;     
    11388   3  
    11389   3        end;
    11390   2  
    11391   2     end;
    11392   1  
    11393   1     if I ^= MAX_SIZE + 1 then
    11394   1        do;
    11395   2        put skip (one) list ('Loop termination error 4');
    11396   2        end;
    11397   1  
    11398   1     put skip(one) list('Loop 4 ended fine.');
    11399   1  
    11400   1     /****************************************************************/
    11401   1     /* This test ensures that the above code works when executed in */
    11402   1     /* a nested procedure.                                          */
    11403   1     /****************************************************************/
    11404   1  
    11405   1     put skip (one) list ('Im about to call the internal procedure now');
    11406   1  
    11407   1     call run_inner_proc;
    11408   1  
    11409   1   one = 1;
    11410   1  
    11411   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11412   2  
    11413   2        do J = 1 to INN_SIZE;
    11414   3  
    11415   3           /*******************************************************/
    11416   3           /* The following assignments are semantically the same */
    11417   3           /* and should produce IDENTICAL code.                  */
    11418   3           /*******************************************************/
    11419   3  
    11420   3           s_element(I,J)                   = 1;
    11421   3           s_element(I)(J)                  = 1;
    11422   3           static_structure(I).s_element(J) = 1;
    11423   3           static_structure.s_element(I,J)  = 1;
    11424   3           static_structure.s_element(I)(J) = 1;     
    11425   3  
    11426   3        end;
    11427   2  
    11428   2     end;
    11429   1  
    11430   1     if I ^= MAX_SIZE + 1 then
    11431   1        do;
    11432   2        put skip (one) list ('Loop termination error 1');
    11433   2        end;
    11434   1  
    11435   1     put skip(one) list('Loop 1 ended fine.');
    11436   1  
    11437   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11438   2  
    11439   2        do j = 1 to INN_SIZE;
    11440   3  
    11441   3           /*******************************************************/
    11442   3           /* The following assignments are semantically the same */
    11443   3           /* and should produce IDENTICAL code.                  */
    11444   3           /*******************************************************/
    11445   3  
    11446   3           s_element(i,j)                   = 1;
    11447   3           s_element(i)(j)                  = 1;
    11448   3           static_structure(i).s_element(j) = 1;
    11449   3           static_structure.s_element(i,j)  = 1;
    11450   3           static_structure.s_element(i)(j) = 1;     
    11451   3  
    11452   3        end;
    11453   2  
    11454   2     end;
    11455   1  
    11456   1     if I ^= MAX_SIZE + 1 then
    11457   1        do;
    11458   2        put skip (one) list ('Loop termination error 2');
    11459   2        end;
    11460   1  
    11461   1     put skip(one) list('Loop 2 ended fine.');
    11462   1  
    11463   1  
    11464   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11465   2  
    11466   2        do J = 1 to INN_SIZE;
    11467   3  
    11468   3           /*******************************************************/
    11469   3           /* The following assignments are semantically the same */
    11470   3           /* and should produce IDENTICAL code.                  */
    11471   3           /*******************************************************/
    11472   3  
    11473   3           a_element(I,J)                 = 1;
    11474   3           a_element(I)(J)                = 1;
    11475   3           auto_structure(I).a_element(J) = 1;
    11476   3           auto_structure.a_element(I,J)  = 1;
    11477   3           auto_structure.a_element(I)(J) = 1;     
    11478   3  
    11479   3        end;
    11480   2  
    11481   2     end;
    11482   1  
    11483   1     if I ^= MAX_SIZE + 1 then
    11484   1        do;
    11485   2        put skip (one) list ('Loop termination error 3');
    11486   2        end;
    11487   1  
    11488   1     put skip(one) list('Loop 3 ended fine.');
    11489   1  
    11490   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11491   2  
    11492   2        do j = 1 to INN_SIZE;
    11493   3  
    11494   3           /*******************************************************/
    11495   3           /* The following assignments are semantically the same */
    11496   3           /* and should produce IDENTICAL code.                  */
    11497   3           /*******************************************************/
    11498   3  
    11499   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11500   3           a_element(i)(j)                = 1;
    11501   3           auto_structure(i).a_element(j) = 1;
    11502   3           auto_structure.a_element(i,j)  = 1;
    11503   3           auto_structure.a_element(i)(j) = 1;     
    11504   3  
    11505   3        end;
    11506   2  
    11507   2     end;
    11508   1  
    11509   1     if I ^= MAX_SIZE + 1 then
    11510   1        do;
    11511   2        put skip (one) list ('Loop termination error 4');
    11512   2        end;
    11513   1  
    11514   1     put skip(one) list('Loop 4 ended fine.');
    11515   1  
    11516   1     /****************************************************************/
    11517   1     /* This test ensures that the above code works when executed in */
    11518   1     /* a nested procedure.                                          */
    11519   1     /****************************************************************/
    11520   1  
    11521   1     put skip (one) list ('Im about to call the internal procedure now');
    11522   1  
    11523   1     call run_inner_proc;
    11524   1  
    11525   1   one = 1;
    11526   1  
    11527   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11528   2  
    11529   2        do J = 1 to INN_SIZE;
    11530   3  
    11531   3           /*******************************************************/
    11532   3           /* The following assignments are semantically the same */
    11533   3           /* and should produce IDENTICAL code.                  */
    11534   3           /*******************************************************/
    11535   3  
    11536   3           s_element(I,J)                   = 1;
    11537   3           s_element(I)(J)                  = 1;
    11538   3           static_structure(I).s_element(J) = 1;
    11539   3           static_structure.s_element(I,J)  = 1;
    11540   3           static_structure.s_element(I)(J) = 1;     
    11541   3  
    11542   3        end;
    11543   2  
    11544   2     end;
    11545   1  
    11546   1     if I ^= MAX_SIZE + 1 then
    11547   1        do;
    11548   2        put skip (one) list ('Loop termination error 1');
    11549   2        end;
    11550   1  
    11551   1     put skip(one) list('Loop 1 ended fine.');
    11552   1  
    11553   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11554   2  
    11555   2        do j = 1 to INN_SIZE;
    11556   3  
    11557   3           /*******************************************************/
    11558   3           /* The following assignments are semantically the same */
    11559   3           /* and should produce IDENTICAL code.                  */
    11560   3           /*******************************************************/
    11561   3  
    11562   3           s_element(i,j)                   = 1;
    11563   3           s_element(i)(j)                  = 1;
    11564   3           static_structure(i).s_element(j) = 1;
    11565   3           static_structure.s_element(i,j)  = 1;
    11566   3           static_structure.s_element(i)(j) = 1;     
    11567   3  
    11568   3        end;
    11569   2  
    11570   2     end;
    11571   1  
    11572   1     if I ^= MAX_SIZE + 1 then
    11573   1        do;
    11574   2        put skip (one) list ('Loop termination error 2');
    11575   2        end;
    11576   1  
    11577   1     put skip(one) list('Loop 2 ended fine.');
    11578   1  
    11579   1  
    11580   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11581   2  
    11582   2        do J = 1 to INN_SIZE;
    11583   3  
    11584   3           /*******************************************************/
    11585   3           /* The following assignments are semantically the same */
    11586   3           /* and should produce IDENTICAL code.                  */
    11587   3           /*******************************************************/
    11588   3  
    11589   3           a_element(I,J)                 = 1;
    11590   3           a_element(I)(J)                = 1;
    11591   3           auto_structure(I).a_element(J) = 1;
    11592   3           auto_structure.a_element(I,J)  = 1;
    11593   3           auto_structure.a_element(I)(J) = 1;     
    11594   3  
    11595   3        end;
    11596   2  
    11597   2     end;
    11598   1  
    11599   1     if I ^= MAX_SIZE + 1 then
    11600   1        do;
    11601   2        put skip (one) list ('Loop termination error 3');
    11602   2        end;
    11603   1  
    11604   1     put skip(one) list('Loop 3 ended fine.');
    11605   1  
    11606   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11607   2  
    11608   2        do j = 1 to INN_SIZE;
    11609   3  
    11610   3           /*******************************************************/
    11611   3           /* The following assignments are semantically the same */
    11612   3           /* and should produce IDENTICAL code.                  */
    11613   3           /*******************************************************/
    11614   3  
    11615   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11616   3           a_element(i)(j)                = 1;
    11617   3           auto_structure(i).a_element(j) = 1;
    11618   3           auto_structure.a_element(i,j)  = 1;
    11619   3           auto_structure.a_element(i)(j) = 1;     
    11620   3  
    11621   3        end;
    11622   2  
    11623   2     end;
    11624   1  
    11625   1     if I ^= MAX_SIZE + 1 then
    11626   1        do;
    11627   2        put skip (one) list ('Loop termination error 4');
    11628   2        end;
    11629   1  
    11630   1     put skip(one) list('Loop 4 ended fine.');
    11631   1  
    11632   1     /****************************************************************/
    11633   1     /* This test ensures that the above code works when executed in */
    11634   1     /* a nested procedure.                                          */
    11635   1     /****************************************************************/
    11636   1  
    11637   1     put skip (one) list ('Im about to call the internal procedure now');
    11638   1  
    11639   1     call run_inner_proc;
    11640   1  
    11641   1   one = 1;
    11642   1  
    11643   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11644   2  
    11645   2        do J = 1 to INN_SIZE;
    11646   3  
    11647   3           /*******************************************************/
    11648   3           /* The following assignments are semantically the same */
    11649   3           /* and should produce IDENTICAL code.                  */
    11650   3           /*******************************************************/
    11651   3  
    11652   3           s_element(I,J)                   = 1;
    11653   3           s_element(I)(J)                  = 1;
    11654   3           static_structure(I).s_element(J) = 1;
    11655   3           static_structure.s_element(I,J)  = 1;
    11656   3           static_structure.s_element(I)(J) = 1;     
    11657   3  
    11658   3        end;
    11659   2  
    11660   2     end;
    11661   1  
    11662   1     if I ^= MAX_SIZE + 1 then
    11663   1        do;
    11664   2        put skip (one) list ('Loop termination error 1');
    11665   2        end;
    11666   1  
    11667   1     put skip(one) list('Loop 1 ended fine.');
    11668   1  
    11669   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11670   2  
    11671   2        do j = 1 to INN_SIZE;
    11672   3  
    11673   3           /*******************************************************/
    11674   3           /* The following assignments are semantically the same */
    11675   3           /* and should produce IDENTICAL code.                  */
    11676   3           /*******************************************************/
    11677   3  
    11678   3           s_element(i,j)                   = 1;
    11679   3           s_element(i)(j)                  = 1;
    11680   3           static_structure(i).s_element(j) = 1;
    11681   3           static_structure.s_element(i,j)  = 1;
    11682   3           static_structure.s_element(i)(j) = 1;     
    11683   3  
    11684   3        end;
    11685   2  
    11686   2     end;
    11687   1  
    11688   1     if I ^= MAX_SIZE + 1 then
    11689   1        do;
    11690   2        put skip (one) list ('Loop termination error 2');
    11691   2        end;
    11692   1  
    11693   1     put skip(one) list('Loop 2 ended fine.');
    11694   1  
    11695   1  
    11696   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11697   2  
    11698   2        do J = 1 to INN_SIZE;
    11699   3  
    11700   3           /*******************************************************/
    11701   3           /* The following assignments are semantically the same */
    11702   3           /* and should produce IDENTICAL code.                  */
    11703   3           /*******************************************************/
    11704   3  
    11705   3           a_element(I,J)                 = 1;
    11706   3           a_element(I)(J)                = 1;
    11707   3           auto_structure(I).a_element(J) = 1;
    11708   3           auto_structure.a_element(I,J)  = 1;
    11709   3           auto_structure.a_element(I)(J) = 1;     
    11710   3  
    11711   3        end;
    11712   2  
    11713   2     end;
    11714   1  
    11715   1     if I ^= MAX_SIZE + 1 then
    11716   1        do;
    11717   2        put skip (one) list ('Loop termination error 3');
    11718   2        end;
    11719   1  
    11720   1     put skip(one) list('Loop 3 ended fine.');
    11721   1  
    11722   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11723   2  
    11724   2        do j = 1 to INN_SIZE;
    11725   3  
    11726   3           /*******************************************************/
    11727   3           /* The following assignments are semantically the same */
    11728   3           /* and should produce IDENTICAL code.                  */
    11729   3           /*******************************************************/
    11730   3  
    11731   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11732   3           a_element(i)(j)                = 1;
    11733   3           auto_structure(i).a_element(j) = 1;
    11734   3           auto_structure.a_element(i,j)  = 1;
    11735   3           auto_structure.a_element(i)(j) = 1;     
    11736   3  
    11737   3        end;
    11738   2  
    11739   2     end;
    11740   1  
    11741   1     if I ^= MAX_SIZE + 1 then
    11742   1        do;
    11743   2        put skip (one) list ('Loop termination error 4');
    11744   2        end;
    11745   1  
    11746   1     put skip(one) list('Loop 4 ended fine.');
    11747   1  
    11748   1     /****************************************************************/
    11749   1     /* This test ensures that the above code works when executed in */
    11750   1     /* a nested procedure.                                          */
    11751   1     /****************************************************************/
    11752   1  
    11753   1     put skip (one) list ('Im about to call the internal procedure now');
    11754   1  
    11755   1     call run_inner_proc;
    11756   1  
    11757   1   one = 1;
    11758   1  
    11759   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11760   2  
    11761   2        do J = 1 to INN_SIZE;
    11762   3  
    11763   3           /*******************************************************/
    11764   3           /* The following assignments are semantically the same */
    11765   3           /* and should produce IDENTICAL code.                  */
    11766   3           /*******************************************************/
    11767   3  
    11768   3           s_element(I,J)                   = 1;
    11769   3           s_element(I)(J)                  = 1;
    11770   3           static_structure(I).s_element(J) = 1;
    11771   3           static_structure.s_element(I,J)  = 1;
    11772   3           static_structure.s_element(I)(J) = 1;     
    11773   3  
    11774   3        end;
    11775   2  
    11776   2     end;
    11777   1  
    11778   1     if I ^= MAX_SIZE + 1 then
    11779   1        do;
    11780   2        put skip (one) list ('Loop termination error 1');
    11781   2        end;
    11782   1  
    11783   1     put skip(one) list('Loop 1 ended fine.');
    11784   1  
    11785   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11786   2  
    11787   2        do j = 1 to INN_SIZE;
    11788   3  
    11789   3           /*******************************************************/
    11790   3           /* The following assignments are semantically the same */
    11791   3           /* and should produce IDENTICAL code.                  */
    11792   3           /*******************************************************/
    11793   3  
    11794   3           s_element(i,j)                   = 1;
    11795   3           s_element(i)(j)                  = 1;
    11796   3           static_structure(i).s_element(j) = 1;
    11797   3           static_structure.s_element(i,j)  = 1;
    11798   3           static_structure.s_element(i)(j) = 1;     
    11799   3  
    11800   3        end;
    11801   2  
    11802   2     end;
    11803   1  
    11804   1     if I ^= MAX_SIZE + 1 then
    11805   1        do;
    11806   2        put skip (one) list ('Loop termination error 2');
    11807   2        end;
    11808   1  
    11809   1     put skip(one) list('Loop 2 ended fine.');
    11810   1  
    11811   1  
    11812   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11813   2  
    11814   2        do J = 1 to INN_SIZE;
    11815   3  
    11816   3           /*******************************************************/
    11817   3           /* The following assignments are semantically the same */
    11818   3           /* and should produce IDENTICAL code.                  */
    11819   3           /*******************************************************/
    11820   3  
    11821   3           a_element(I,J)                 = 1;
    11822   3           a_element(I)(J)                = 1;
    11823   3           auto_structure(I).a_element(J) = 1;
    11824   3           auto_structure.a_element(I,J)  = 1;
    11825   3           auto_structure.a_element(I)(J) = 1;     
    11826   3  
    11827   3        end;
    11828   2  
    11829   2     end;
    11830   1  
    11831   1     if I ^= MAX_SIZE + 1 then
    11832   1        do;
    11833   2        put skip (one) list ('Loop termination error 3');
    11834   2        end;
    11835   1  
    11836   1     put skip(one) list('Loop 3 ended fine.');
    11837   1  
    11838   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11839   2  
    11840   2        do j = 1 to INN_SIZE;
    11841   3  
    11842   3           /*******************************************************/
    11843   3           /* The following assignments are semantically the same */
    11844   3           /* and should produce IDENTICAL code.                  */
    11845   3           /*******************************************************/
    11846   3  
    11847   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11848   3           a_element(i)(j)                = 1;
    11849   3           auto_structure(i).a_element(j) = 1;
    11850   3           auto_structure.a_element(i,j)  = 1;
    11851   3           auto_structure.a_element(i)(j) = 1;     
    11852   3  
    11853   3        end;
    11854   2  
    11855   2     end;
    11856   1  
    11857   1     if I ^= MAX_SIZE + 1 then
    11858   1        do;
    11859   2        put skip (one) list ('Loop termination error 4');
    11860   2        end;
    11861   1  
    11862   1     put skip(one) list('Loop 4 ended fine.');
    11863   1  
    11864   1     /****************************************************************/
    11865   1     /* This test ensures that the above code works when executed in */
    11866   1     /* a nested procedure.                                          */
    11867   1     /****************************************************************/
    11868   1  
    11869   1     put skip (one) list ('Im about to call the internal procedure now');
    11870   1  
    11871   1     call run_inner_proc;
    11872   1  
    11873   1   one = 1;
    11874   1  
    11875   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11876   2  
    11877   2        do J = 1 to INN_SIZE;
    11878   3  
    11879   3           /*******************************************************/
    11880   3           /* The following assignments are semantically the same */
    11881   3           /* and should produce IDENTICAL code.                  */
    11882   3           /*******************************************************/
    11883   3  
    11884   3           s_element(I,J)                   = 1;
    11885   3           s_element(I)(J)                  = 1;
    11886   3           static_structure(I).s_element(J) = 1;
    11887   3           static_structure.s_element(I,J)  = 1;
    11888   3           static_structure.s_element(I)(J) = 1;     
    11889   3  
    11890   3        end;
    11891   2  
    11892   2     end;
    11893   1  
    11894   1     if I ^= MAX_SIZE + 1 then
    11895   1        do;
    11896   2        put skip (one) list ('Loop termination error 1');
    11897   2        end;
    11898   1  
    11899   1     put skip(one) list('Loop 1 ended fine.');
    11900   1  
    11901   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    11902   2  
    11903   2        do j = 1 to INN_SIZE;
    11904   3  
    11905   3           /*******************************************************/
    11906   3           /* The following assignments are semantically the same */
    11907   3           /* and should produce IDENTICAL code.                  */
    11908   3           /*******************************************************/
    11909   3  
    11910   3           s_element(i,j)                   = 1;
    11911   3           s_element(i)(j)                  = 1;
    11912   3           static_structure(i).s_element(j) = 1;
    11913   3           static_structure.s_element(i,j)  = 1;
    11914   3           static_structure.s_element(i)(j) = 1;     
    11915   3  
    11916   3        end;
    11917   2  
    11918   2     end;
    11919   1  
    11920   1     if I ^= MAX_SIZE + 1 then
    11921   1        do;
    11922   2        put skip (one) list ('Loop termination error 2');
    11923   2        end;
    11924   1  
    11925   1     put skip(one) list('Loop 2 ended fine.');
    11926   1  
    11927   1  
    11928   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    11929   2  
    11930   2        do J = 1 to INN_SIZE;
    11931   3  
    11932   3           /*******************************************************/
    11933   3           /* The following assignments are semantically the same */
    11934   3           /* and should produce IDENTICAL code.                  */
    11935   3           /*******************************************************/
    11936   3  
    11937   3           a_element(I,J)                 = 1;
    11938   3           a_element(I)(J)                = 1;
    11939   3           auto_structure(I).a_element(J) = 1;
    11940   3           auto_structure.a_element(I,J)  = 1;
    11941   3           auto_structure.a_element(I)(J) = 1;     
    11942   3  
    11943   3        end;
    11944   2  
    11945   2     end;
    11946   1  
    11947   1     if I ^= MAX_SIZE + 1 then
    11948   1        do;
    11949   2        put skip (one) list ('Loop termination error 3');
    11950   2        end;
    11951   1  
    11952   1     put skip(one) list('Loop 3 ended fine.');
    11953   1  
    11954   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    11955   2  
    11956   2        do j = 1 to INN_SIZE;
    11957   3  
    11958   3           /*******************************************************/
    11959   3           /* The following assignments are semantically the same */
    11960   3           /* and should produce IDENTICAL code.                  */
    11961   3           /*******************************************************/
    11962   3  
    11963   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    11964   3           a_element(i)(j)                = 1;
    11965   3           auto_structure(i).a_element(j) = 1;
    11966   3           auto_structure.a_element(i,j)  = 1;
    11967   3           auto_structure.a_element(i)(j) = 1;     
    11968   3  
    11969   3        end;
    11970   2  
    11971   2     end;
    11972   1  
    11973   1     if I ^= MAX_SIZE + 1 then
    11974   1        do;
    11975   2        put skip (one) list ('Loop termination error 4');
    11976   2        end;
    11977   1  
    11978   1     put skip(one) list('Loop 4 ended fine.');
    11979   1  
    11980   1     /****************************************************************/
    11981   1     /* This test ensures that the above code works when executed in */
    11982   1     /* a nested procedure.                                          */
    11983   1     /****************************************************************/
    11984   1  
    11985   1     put skip (one) list ('Im about to call the internal procedure now');
    11986   1  
    11987   1     call run_inner_proc;
    11988   1  
    11989   1   one = 1;
    11990   1  
    11991   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    11992   2  
    11993   2        do J = 1 to INN_SIZE;
    11994   3  
    11995   3           /*******************************************************/
    11996   3           /* The following assignments are semantically the same */
    11997   3           /* and should produce IDENTICAL code.                  */
    11998   3           /*******************************************************/
    11999   3  
    12000   3           s_element(I,J)                   = 1;
    12001   3           s_element(I)(J)                  = 1;
    12002   3           static_structure(I).s_element(J) = 1;
    12003   3           static_structure.s_element(I,J)  = 1;
    12004   3           static_structure.s_element(I)(J) = 1;     
    12005   3  
    12006   3        end;
    12007   2  
    12008   2     end;
    12009   1  
    12010   1     if I ^= MAX_SIZE + 1 then
    12011   1        do;
    12012   2        put skip (one) list ('Loop termination error 1');
    12013   2        end;
    12014   1  
    12015   1     put skip(one) list('Loop 1 ended fine.');
    12016   1  
    12017   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12018   2  
    12019   2        do j = 1 to INN_SIZE;
    12020   3  
    12021   3           /*******************************************************/
    12022   3           /* The following assignments are semantically the same */
    12023   3           /* and should produce IDENTICAL code.                  */
    12024   3           /*******************************************************/
    12025   3  
    12026   3           s_element(i,j)                   = 1;
    12027   3           s_element(i)(j)                  = 1;
    12028   3           static_structure(i).s_element(j) = 1;
    12029   3           static_structure.s_element(i,j)  = 1;
    12030   3           static_structure.s_element(i)(j) = 1;     
    12031   3  
    12032   3        end;
    12033   2  
    12034   2     end;
    12035   1  
    12036   1     if I ^= MAX_SIZE + 1 then
    12037   1        do;
    12038   2        put skip (one) list ('Loop termination error 2');
    12039   2        end;
    12040   1  
    12041   1     put skip(one) list('Loop 2 ended fine.');
    12042   1  
    12043   1  
    12044   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12045   2  
    12046   2        do J = 1 to INN_SIZE;
    12047   3  
    12048   3           /*******************************************************/
    12049   3           /* The following assignments are semantically the same */
    12050   3           /* and should produce IDENTICAL code.                  */
    12051   3           /*******************************************************/
    12052   3  
    12053   3           a_element(I,J)                 = 1;
    12054   3           a_element(I)(J)                = 1;
    12055   3           auto_structure(I).a_element(J) = 1;
    12056   3           auto_structure.a_element(I,J)  = 1;
    12057   3           auto_structure.a_element(I)(J) = 1;     
    12058   3  
    12059   3        end;
    12060   2  
    12061   2     end;
    12062   1  
    12063   1     if I ^= MAX_SIZE + 1 then
    12064   1        do;
    12065   2        put skip (one) list ('Loop termination error 3');
    12066   2        end;
    12067   1  
    12068   1     put skip(one) list('Loop 3 ended fine.');
    12069   1  
    12070   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12071   2  
    12072   2        do j = 1 to INN_SIZE;
    12073   3  
    12074   3           /*******************************************************/
    12075   3           /* The following assignments are semantically the same */
    12076   3           /* and should produce IDENTICAL code.                  */
    12077   3           /*******************************************************/
    12078   3  
    12079   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12080   3           a_element(i)(j)                = 1;
    12081   3           auto_structure(i).a_element(j) = 1;
    12082   3           auto_structure.a_element(i,j)  = 1;
    12083   3           auto_structure.a_element(i)(j) = 1;     
    12084   3  
    12085   3        end;
    12086   2  
    12087   2     end;
    12088   1  
    12089   1     if I ^= MAX_SIZE + 1 then
    12090   1        do;
    12091   2        put skip (one) list ('Loop termination error 4');
    12092   2        end;
    12093   1  
    12094   1     put skip(one) list('Loop 4 ended fine.');
    12095   1  
    12096   1     /****************************************************************/
    12097   1     /* This test ensures that the above code works when executed in */
    12098   1     /* a nested procedure.                                          */
    12099   1     /****************************************************************/
    12100   1  
    12101   1     put skip (one) list ('Im about to call the internal procedure now');
    12102   1  
    12103   1     call run_inner_proc;
    12104   1  
    12105   1   one = 1;
    12106   1  
    12107   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12108   2  
    12109   2        do J = 1 to INN_SIZE;
    12110   3  
    12111   3           /*******************************************************/
    12112   3           /* The following assignments are semantically the same */
    12113   3           /* and should produce IDENTICAL code.                  */
    12114   3           /*******************************************************/
    12115   3  
    12116   3           s_element(I,J)                   = 1;
    12117   3           s_element(I)(J)                  = 1;
    12118   3           static_structure(I).s_element(J) = 1;
    12119   3           static_structure.s_element(I,J)  = 1;
    12120   3           static_structure.s_element(I)(J) = 1;     
    12121   3  
    12122   3        end;
    12123   2  
    12124   2     end;
    12125   1  
    12126   1     if I ^= MAX_SIZE + 1 then
    12127   1        do;
    12128   2        put skip (one) list ('Loop termination error 1');
    12129   2        end;
    12130   1  
    12131   1     put skip(one) list('Loop 1 ended fine.');
    12132   1  
    12133   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12134   2  
    12135   2        do j = 1 to INN_SIZE;
    12136   3  
    12137   3           /*******************************************************/
    12138   3           /* The following assignments are semantically the same */
    12139   3           /* and should produce IDENTICAL code.                  */
    12140   3           /*******************************************************/
    12141   3  
    12142   3           s_element(i,j)                   = 1;
    12143   3           s_element(i)(j)                  = 1;
    12144   3           static_structure(i).s_element(j) = 1;
    12145   3           static_structure.s_element(i,j)  = 1;
    12146   3           static_structure.s_element(i)(j) = 1;     
    12147   3  
    12148   3        end;
    12149   2  
    12150   2     end;
    12151   1  
    12152   1     if I ^= MAX_SIZE + 1 then
    12153   1        do;
    12154   2        put skip (one) list ('Loop termination error 2');
    12155   2        end;
    12156   1  
    12157   1     put skip(one) list('Loop 2 ended fine.');
    12158   1  
    12159   1  
    12160   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12161   2  
    12162   2        do J = 1 to INN_SIZE;
    12163   3  
    12164   3           /*******************************************************/
    12165   3           /* The following assignments are semantically the same */
    12166   3           /* and should produce IDENTICAL code.                  */
    12167   3           /*******************************************************/
    12168   3  
    12169   3           a_element(I,J)                 = 1;
    12170   3           a_element(I)(J)                = 1;
    12171   3           auto_structure(I).a_element(J) = 1;
    12172   3           auto_structure.a_element(I,J)  = 1;
    12173   3           auto_structure.a_element(I)(J) = 1;     
    12174   3  
    12175   3        end;
    12176   2  
    12177   2     end;
    12178   1  
    12179   1     if I ^= MAX_SIZE + 1 then
    12180   1        do;
    12181   2        put skip (one) list ('Loop termination error 3');
    12182   2        end;
    12183   1  
    12184   1     put skip(one) list('Loop 3 ended fine.');
    12185   1  
    12186   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12187   2  
    12188   2        do j = 1 to INN_SIZE;
    12189   3  
    12190   3           /*******************************************************/
    12191   3           /* The following assignments are semantically the same */
    12192   3           /* and should produce IDENTICAL code.                  */
    12193   3           /*******************************************************/
    12194   3  
    12195   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12196   3           a_element(i)(j)                = 1;
    12197   3           auto_structure(i).a_element(j) = 1;
    12198   3           auto_structure.a_element(i,j)  = 1;
    12199   3           auto_structure.a_element(i)(j) = 1;     
    12200   3  
    12201   3        end;
    12202   2  
    12203   2     end;
    12204   1  
    12205   1     if I ^= MAX_SIZE + 1 then
    12206   1        do;
    12207   2        put skip (one) list ('Loop termination error 4');
    12208   2        end;
    12209   1  
    12210   1     put skip(one) list('Loop 4 ended fine.');
    12211   1  
    12212   1     /****************************************************************/
    12213   1     /* This test ensures that the above code works when executed in */
    12214   1     /* a nested procedure.                                          */
    12215   1     /****************************************************************/
    12216   1  
    12217   1     put skip (one) list ('Im about to call the internal procedure now');
    12218   1  
    12219   1     call run_inner_proc;
    12220   1  
    12221   1   one = 1;
    12222   1  
    12223   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12224   2  
    12225   2        do J = 1 to INN_SIZE;
    12226   3  
    12227   3           /*******************************************************/
    12228   3           /* The following assignments are semantically the same */
    12229   3           /* and should produce IDENTICAL code.                  */
    12230   3           /*******************************************************/
    12231   3  
    12232   3           s_element(I,J)                   = 1;
    12233   3           s_element(I)(J)                  = 1;
    12234   3           static_structure(I).s_element(J) = 1;
    12235   3           static_structure.s_element(I,J)  = 1;
    12236   3           static_structure.s_element(I)(J) = 1;     
    12237   3  
    12238   3        end;
    12239   2  
    12240   2     end;
    12241   1  
    12242   1     if I ^= MAX_SIZE + 1 then
    12243   1        do;
    12244   2        put skip (one) list ('Loop termination error 1');
    12245   2        end;
    12246   1  
    12247   1     put skip(one) list('Loop 1 ended fine.');
    12248   1  
    12249   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12250   2  
    12251   2        do j = 1 to INN_SIZE;
    12252   3  
    12253   3           /*******************************************************/
    12254   3           /* The following assignments are semantically the same */
    12255   3           /* and should produce IDENTICAL code.                  */
    12256   3           /*******************************************************/
    12257   3  
    12258   3           s_element(i,j)                   = 1;
    12259   3           s_element(i)(j)                  = 1;
    12260   3           static_structure(i).s_element(j) = 1;
    12261   3           static_structure.s_element(i,j)  = 1;
    12262   3           static_structure.s_element(i)(j) = 1;     
    12263   3  
    12264   3        end;
    12265   2  
    12266   2     end;
    12267   1  
    12268   1     if I ^= MAX_SIZE + 1 then
    12269   1        do;
    12270   2        put skip (one) list ('Loop termination error 2');
    12271   2        end;
    12272   1  
    12273   1     put skip(one) list('Loop 2 ended fine.');
    12274   1  
    12275   1  
    12276   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12277   2  
    12278   2        do J = 1 to INN_SIZE;
    12279   3  
    12280   3           /*******************************************************/
    12281   3           /* The following assignments are semantically the same */
    12282   3           /* and should produce IDENTICAL code.                  */
    12283   3           /*******************************************************/
    12284   3  
    12285   3           a_element(I,J)                 = 1;
    12286   3           a_element(I)(J)                = 1;
    12287   3           auto_structure(I).a_element(J) = 1;
    12288   3           auto_structure.a_element(I,J)  = 1;
    12289   3           auto_structure.a_element(I)(J) = 1;     
    12290   3  
    12291   3        end;
    12292   2  
    12293   2     end;
    12294   1  
    12295   1     if I ^= MAX_SIZE + 1 then
    12296   1        do;
    12297   2        put skip (one) list ('Loop termination error 3');
    12298   2        end;
    12299   1  
    12300   1     put skip(one) list('Loop 3 ended fine.');
    12301   1  
    12302   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12303   2  
    12304   2        do j = 1 to INN_SIZE;
    12305   3  
    12306   3           /*******************************************************/
    12307   3           /* The following assignments are semantically the same */
    12308   3           /* and should produce IDENTICAL code.                  */
    12309   3           /*******************************************************/
    12310   3  
    12311   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12312   3           a_element(i)(j)                = 1;
    12313   3           auto_structure(i).a_element(j) = 1;
    12314   3           auto_structure.a_element(i,j)  = 1;
    12315   3           auto_structure.a_element(i)(j) = 1;     
    12316   3  
    12317   3        end;
    12318   2  
    12319   2     end;
    12320   1  
    12321   1     if I ^= MAX_SIZE + 1 then
    12322   1        do;
    12323   2        put skip (one) list ('Loop termination error 4');
    12324   2        end;
    12325   1  
    12326   1     put skip(one) list('Loop 4 ended fine.');
    12327   1  
    12328   1     /****************************************************************/
    12329   1     /* This test ensures that the above code works when executed in */
    12330   1     /* a nested procedure.                                          */
    12331   1     /****************************************************************/
    12332   1  
    12333   1     put skip (one) list ('Im about to call the internal procedure now');
    12334   1  
    12335   1     call run_inner_proc;
    12336   1  
    12337   1   one = 1;
    12338   1  
    12339   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12340   2  
    12341   2        do J = 1 to INN_SIZE;
    12342   3  
    12343   3           /*******************************************************/
    12344   3           /* The following assignments are semantically the same */
    12345   3           /* and should produce IDENTICAL code.                  */
    12346   3           /*******************************************************/
    12347   3  
    12348   3           s_element(I,J)                   = 1;
    12349   3           s_element(I)(J)                  = 1;
    12350   3           static_structure(I).s_element(J) = 1;
    12351   3           static_structure.s_element(I,J)  = 1;
    12352   3           static_structure.s_element(I)(J) = 1;     
    12353   3  
    12354   3        end;
    12355   2  
    12356   2     end;
    12357   1  
    12358   1     if I ^= MAX_SIZE + 1 then
    12359   1        do;
    12360   2        put skip (one) list ('Loop termination error 1');
    12361   2        end;
    12362   1  
    12363   1     put skip(one) list('Loop 1 ended fine.');
    12364   1  
    12365   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12366   2  
    12367   2        do j = 1 to INN_SIZE;
    12368   3  
    12369   3           /*******************************************************/
    12370   3           /* The following assignments are semantically the same */
    12371   3           /* and should produce IDENTICAL code.                  */
    12372   3           /*******************************************************/
    12373   3  
    12374   3           s_element(i,j)                   = 1;
    12375   3           s_element(i)(j)                  = 1;
    12376   3           static_structure(i).s_element(j) = 1;
    12377   3           static_structure.s_element(i,j)  = 1;
    12378   3           static_structure.s_element(i)(j) = 1;     
    12379   3  
    12380   3        end;
    12381   2  
    12382   2     end;
    12383   1  
    12384   1     if I ^= MAX_SIZE + 1 then
    12385   1        do;
    12386   2        put skip (one) list ('Loop termination error 2');
    12387   2        end;
    12388   1  
    12389   1     put skip(one) list('Loop 2 ended fine.');
    12390   1  
    12391   1  
    12392   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12393   2  
    12394   2        do J = 1 to INN_SIZE;
    12395   3  
    12396   3           /*******************************************************/
    12397   3           /* The following assignments are semantically the same */
    12398   3           /* and should produce IDENTICAL code.                  */
    12399   3           /*******************************************************/
    12400   3  
    12401   3           a_element(I,J)                 = 1;
    12402   3           a_element(I)(J)                = 1;
    12403   3           auto_structure(I).a_element(J) = 1;
    12404   3           auto_structure.a_element(I,J)  = 1;
    12405   3           auto_structure.a_element(I)(J) = 1;     
    12406   3  
    12407   3        end;
    12408   2  
    12409   2     end;
    12410   1  
    12411   1     if I ^= MAX_SIZE + 1 then
    12412   1        do;
    12413   2        put skip (one) list ('Loop termination error 3');
    12414   2        end;
    12415   1  
    12416   1     put skip(one) list('Loop 3 ended fine.');
    12417   1  
    12418   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12419   2  
    12420   2        do j = 1 to INN_SIZE;
    12421   3  
    12422   3           /*******************************************************/
    12423   3           /* The following assignments are semantically the same */
    12424   3           /* and should produce IDENTICAL code.                  */
    12425   3           /*******************************************************/
    12426   3  
    12427   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12428   3           a_element(i)(j)                = 1;
    12429   3           auto_structure(i).a_element(j) = 1;
    12430   3           auto_structure.a_element(i,j)  = 1;
    12431   3           auto_structure.a_element(i)(j) = 1;     
    12432   3  
    12433   3        end;
    12434   2  
    12435   2     end;
    12436   1  
    12437   1     if I ^= MAX_SIZE + 1 then
    12438   1        do;
    12439   2        put skip (one) list ('Loop termination error 4');
    12440   2        end;
    12441   1  
    12442   1     put skip(one) list('Loop 4 ended fine.');
    12443   1  
    12444   1     /****************************************************************/
    12445   1     /* This test ensures that the above code works when executed in */
    12446   1     /* a nested procedure.                                          */
    12447   1     /****************************************************************/
    12448   1  
    12449   1     put skip (one) list ('Im about to call the internal procedure now');
    12450   1  
    12451   1     call run_inner_proc;
    12452   1  
    12453   1   one = 1;
    12454   1  
    12455   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12456   2  
    12457   2        do J = 1 to INN_SIZE;
    12458   3  
    12459   3           /*******************************************************/
    12460   3           /* The following assignments are semantically the same */
    12461   3           /* and should produce IDENTICAL code.                  */
    12462   3           /*******************************************************/
    12463   3  
    12464   3           s_element(I,J)                   = 1;
    12465   3           s_element(I)(J)                  = 1;
    12466   3           static_structure(I).s_element(J) = 1;
    12467   3           static_structure.s_element(I,J)  = 1;
    12468   3           static_structure.s_element(I)(J) = 1;     
    12469   3  
    12470   3        end;
    12471   2  
    12472   2     end;
    12473   1  
    12474   1     if I ^= MAX_SIZE + 1 then
    12475   1        do;
    12476   2        put skip (one) list ('Loop termination error 1');
    12477   2        end;
    12478   1  
    12479   1     put skip(one) list('Loop 1 ended fine.');
    12480   1  
    12481   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12482   2  
    12483   2        do j = 1 to INN_SIZE;
    12484   3  
    12485   3           /*******************************************************/
    12486   3           /* The following assignments are semantically the same */
    12487   3           /* and should produce IDENTICAL code.                  */
    12488   3           /*******************************************************/
    12489   3  
    12490   3           s_element(i,j)                   = 1;
    12491   3           s_element(i)(j)                  = 1;
    12492   3           static_structure(i).s_element(j) = 1;
    12493   3           static_structure.s_element(i,j)  = 1;
    12494   3           static_structure.s_element(i)(j) = 1;     
    12495   3  
    12496   3        end;
    12497   2  
    12498   2     end;
    12499   1  
    12500   1     if I ^= MAX_SIZE + 1 then
    12501   1        do;
    12502   2        put skip (one) list ('Loop termination error 2');
    12503   2        end;
    12504   1  
    12505   1     put skip(one) list('Loop 2 ended fine.');
    12506   1  
    12507   1  
    12508   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12509   2  
    12510   2        do J = 1 to INN_SIZE;
    12511   3  
    12512   3           /*******************************************************/
    12513   3           /* The following assignments are semantically the same */
    12514   3           /* and should produce IDENTICAL code.                  */
    12515   3           /*******************************************************/
    12516   3  
    12517   3           a_element(I,J)                 = 1;
    12518   3           a_element(I)(J)                = 1;
    12519   3           auto_structure(I).a_element(J) = 1;
    12520   3           auto_structure.a_element(I,J)  = 1;
    12521   3           auto_structure.a_element(I)(J) = 1;     
    12522   3  
    12523   3        end;
    12524   2  
    12525   2     end;
    12526   1  
    12527   1     if I ^= MAX_SIZE + 1 then
    12528   1        do;
    12529   2        put skip (one) list ('Loop termination error 3');
    12530   2        end;
    12531   1  
    12532   1     put skip(one) list('Loop 3 ended fine.');
    12533   1  
    12534   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12535   2  
    12536   2        do j = 1 to INN_SIZE;
    12537   3  
    12538   3           /*******************************************************/
    12539   3           /* The following assignments are semantically the same */
    12540   3           /* and should produce IDENTICAL code.                  */
    12541   3           /*******************************************************/
    12542   3  
    12543   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12544   3           a_element(i)(j)                = 1;
    12545   3           auto_structure(i).a_element(j) = 1;
    12546   3           auto_structure.a_element(i,j)  = 1;
    12547   3           auto_structure.a_element(i)(j) = 1;     
    12548   3  
    12549   3        end;
    12550   2  
    12551   2     end;
    12552   1  
    12553   1     if I ^= MAX_SIZE + 1 then
    12554   1        do;
    12555   2        put skip (one) list ('Loop termination error 4');
    12556   2        end;
    12557   1  
    12558   1     put skip(one) list('Loop 4 ended fine.');
    12559   1  
    12560   1     /****************************************************************/
    12561   1     /* This test ensures that the above code works when executed in */
    12562   1     /* a nested procedure.                                          */
    12563   1     /****************************************************************/
    12564   1  
    12565   1     put skip (one) list ('Im about to call the internal procedure now');
    12566   1  
    12567   1     call run_inner_proc;
    12568   1  
    12569   1   one = 1;
    12570   1  
    12571   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12572   2  
    12573   2        do J = 1 to INN_SIZE;
    12574   3  
    12575   3           /*******************************************************/
    12576   3           /* The following assignments are semantically the same */
    12577   3           /* and should produce IDENTICAL code.                  */
    12578   3           /*******************************************************/
    12579   3  
    12580   3           s_element(I,J)                   = 1;
    12581   3           s_element(I)(J)                  = 1;
    12582   3           static_structure(I).s_element(J) = 1;
    12583   3           static_structure.s_element(I,J)  = 1;
    12584   3           static_structure.s_element(I)(J) = 1;     
    12585   3  
    12586   3        end;
    12587   2  
    12588   2     end;
    12589   1  
    12590   1     if I ^= MAX_SIZE + 1 then
    12591   1        do;
    12592   2        put skip (one) list ('Loop termination error 1');
    12593   2        end;
    12594   1  
    12595   1     put skip(one) list('Loop 1 ended fine.');
    12596   1  
    12597   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12598   2  
    12599   2        do j = 1 to INN_SIZE;
    12600   3  
    12601   3           /*******************************************************/
    12602   3           /* The following assignments are semantically the same */
    12603   3           /* and should produce IDENTICAL code.                  */
    12604   3           /*******************************************************/
    12605   3  
    12606   3           s_element(i,j)                   = 1;
    12607   3           s_element(i)(j)                  = 1;
    12608   3           static_structure(i).s_element(j) = 1;
    12609   3           static_structure.s_element(i,j)  = 1;
    12610   3           static_structure.s_element(i)(j) = 1;     
    12611   3  
    12612   3        end;
    12613   2  
    12614   2     end;
    12615   1  
    12616   1     if I ^= MAX_SIZE + 1 then
    12617   1        do;
    12618   2        put skip (one) list ('Loop termination error 2');
    12619   2        end;
    12620   1  
    12621   1     put skip(one) list('Loop 2 ended fine.');
    12622   1  
    12623   1  
    12624   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12625   2  
    12626   2        do J = 1 to INN_SIZE;
    12627   3  
    12628   3           /*******************************************************/
    12629   3           /* The following assignments are semantically the same */
    12630   3           /* and should produce IDENTICAL code.                  */
    12631   3           /*******************************************************/
    12632   3  
    12633   3           a_element(I,J)                 = 1;
    12634   3           a_element(I)(J)                = 1;
    12635   3           auto_structure(I).a_element(J) = 1;
    12636   3           auto_structure.a_element(I,J)  = 1;
    12637   3           auto_structure.a_element(I)(J) = 1;     
    12638   3  
    12639   3        end;
    12640   2  
    12641   2     end;
    12642   1  
    12643   1     if I ^= MAX_SIZE + 1 then
    12644   1        do;
    12645   2        put skip (one) list ('Loop termination error 3');
    12646   2        end;
    12647   1  
    12648   1     put skip(one) list('Loop 3 ended fine.');
    12649   1  
    12650   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12651   2  
    12652   2        do j = 1 to INN_SIZE;
    12653   3  
    12654   3           /*******************************************************/
    12655   3           /* The following assignments are semantically the same */
    12656   3           /* and should produce IDENTICAL code.                  */
    12657   3           /*******************************************************/
    12658   3  
    12659   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12660   3           a_element(i)(j)                = 1;
    12661   3           auto_structure(i).a_element(j) = 1;
    12662   3           auto_structure.a_element(i,j)  = 1;
    12663   3           auto_structure.a_element(i)(j) = 1;     
    12664   3  
    12665   3        end;
    12666   2  
    12667   2     end;
    12668   1  
    12669   1     if I ^= MAX_SIZE + 1 then
    12670   1        do;
    12671   2        put skip (one) list ('Loop termination error 4');
    12672   2        end;
    12673   1  
    12674   1     put skip(one) list('Loop 4 ended fine.');
    12675   1  
    12676   1     /****************************************************************/
    12677   1     /* This test ensures that the above code works when executed in */
    12678   1     /* a nested procedure.                                          */
    12679   1     /****************************************************************/
    12680   1  
    12681   1     put skip (one) list ('Im about to call the internal procedure now');
    12682   1  
    12683   1     call run_inner_proc;
    12684   1  
    12685   1   one = 1;
    12686   1  
    12687   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12688   2  
    12689   2        do J = 1 to INN_SIZE;
    12690   3  
    12691   3           /*******************************************************/
    12692   3           /* The following assignments are semantically the same */
    12693   3           /* and should produce IDENTICAL code.                  */
    12694   3           /*******************************************************/
    12695   3  
    12696   3           s_element(I,J)                   = 1;
    12697   3           s_element(I)(J)                  = 1;
    12698   3           static_structure(I).s_element(J) = 1;
    12699   3           static_structure.s_element(I,J)  = 1;
    12700   3           static_structure.s_element(I)(J) = 1;     
    12701   3  
    12702   3        end;
    12703   2  
    12704   2     end;
    12705   1  
    12706   1     if I ^= MAX_SIZE + 1 then
    12707   1        do;
    12708   2        put skip (one) list ('Loop termination error 1');
    12709   2        end;
    12710   1  
    12711   1     put skip(one) list('Loop 1 ended fine.');
    12712   1  
    12713   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12714   2  
    12715   2        do j = 1 to INN_SIZE;
    12716   3  
    12717   3           /*******************************************************/
    12718   3           /* The following assignments are semantically the same */
    12719   3           /* and should produce IDENTICAL code.                  */
    12720   3           /*******************************************************/
    12721   3  
    12722   3           s_element(i,j)                   = 1;
    12723   3           s_element(i)(j)                  = 1;
    12724   3           static_structure(i).s_element(j) = 1;
    12725   3           static_structure.s_element(i,j)  = 1;
    12726   3           static_structure.s_element(i)(j) = 1;     
    12727   3  
    12728   3        end;
    12729   2  
    12730   2     end;
    12731   1  
    12732   1     if I ^= MAX_SIZE + 1 then
    12733   1        do;
    12734   2        put skip (one) list ('Loop termination error 2');
    12735   2        end;
    12736   1  
    12737   1     put skip(one) list('Loop 2 ended fine.');
    12738   1  
    12739   1  
    12740   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12741   2  
    12742   2        do J = 1 to INN_SIZE;
    12743   3  
    12744   3           /*******************************************************/
    12745   3           /* The following assignments are semantically the same */
    12746   3           /* and should produce IDENTICAL code.                  */
    12747   3           /*******************************************************/
    12748   3  
    12749   3           a_element(I,J)                 = 1;
    12750   3           a_element(I)(J)                = 1;
    12751   3           auto_structure(I).a_element(J) = 1;
    12752   3           auto_structure.a_element(I,J)  = 1;
    12753   3           auto_structure.a_element(I)(J) = 1;     
    12754   3  
    12755   3        end;
    12756   2  
    12757   2     end;
    12758   1  
    12759   1     if I ^= MAX_SIZE + 1 then
    12760   1        do;
    12761   2        put skip (one) list ('Loop termination error 3');
    12762   2        end;
    12763   1  
    12764   1     put skip(one) list('Loop 3 ended fine.');
    12765   1  
    12766   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12767   2  
    12768   2        do j = 1 to INN_SIZE;
    12769   3  
    12770   3           /*******************************************************/
    12771   3           /* The following assignments are semantically the same */
    12772   3           /* and should produce IDENTICAL code.                  */
    12773   3           /*******************************************************/
    12774   3  
    12775   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12776   3           a_element(i)(j)                = 1;
    12777   3           auto_structure(i).a_element(j) = 1;
    12778   3           auto_structure.a_element(i,j)  = 1;
    12779   3           auto_structure.a_element(i)(j) = 1;     
    12780   3  
    12781   3        end;
    12782   2  
    12783   2     end;
    12784   1  
    12785   1     if I ^= MAX_SIZE + 1 then
    12786   1        do;
    12787   2        put skip (one) list ('Loop termination error 4');
    12788   2        end;
    12789   1  
    12790   1     put skip(one) list('Loop 4 ended fine.');
    12791   1  
    12792   1     /****************************************************************/
    12793   1     /* This test ensures that the above code works when executed in */
    12794   1     /* a nested procedure.                                          */
    12795   1     /****************************************************************/
    12796   1  
    12797   1     put skip (one) list ('Im about to call the internal procedure now');
    12798   1  
    12799   1     call run_inner_proc;
    12800   1  
    12801   1   one = 1;
    12802   1  
    12803   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12804   2  
    12805   2        do J = 1 to INN_SIZE;
    12806   3  
    12807   3           /*******************************************************/
    12808   3           /* The following assignments are semantically the same */
    12809   3           /* and should produce IDENTICAL code.                  */
    12810   3           /*******************************************************/
    12811   3  
    12812   3           s_element(I,J)                   = 1;
    12813   3           s_element(I)(J)                  = 1;
    12814   3           static_structure(I).s_element(J) = 1;
    12815   3           static_structure.s_element(I,J)  = 1;
    12816   3           static_structure.s_element(I)(J) = 1;     
    12817   3  
    12818   3        end;
    12819   2  
    12820   2     end;
    12821   1  
    12822   1     if I ^= MAX_SIZE + 1 then
    12823   1        do;
    12824   2        put skip (one) list ('Loop termination error 1');
    12825   2        end;
    12826   1  
    12827   1     put skip(one) list('Loop 1 ended fine.');
    12828   1  
    12829   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12830   2  
    12831   2        do j = 1 to INN_SIZE;
    12832   3  
    12833   3           /*******************************************************/
    12834   3           /* The following assignments are semantically the same */
    12835   3           /* and should produce IDENTICAL code.                  */
    12836   3           /*******************************************************/
    12837   3  
    12838   3           s_element(i,j)                   = 1;
    12839   3           s_element(i)(j)                  = 1;
    12840   3           static_structure(i).s_element(j) = 1;
    12841   3           static_structure.s_element(i,j)  = 1;
    12842   3           static_structure.s_element(i)(j) = 1;     
    12843   3  
    12844   3        end;
    12845   2  
    12846   2     end;
    12847   1  
    12848   1     if I ^= MAX_SIZE + 1 then
    12849   1        do;
    12850   2        put skip (one) list ('Loop termination error 2');
    12851   2        end;
    12852   1  
    12853   1     put skip(one) list('Loop 2 ended fine.');
    12854   1  
    12855   1  
    12856   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12857   2  
    12858   2        do J = 1 to INN_SIZE;
    12859   3  
    12860   3           /*******************************************************/
    12861   3           /* The following assignments are semantically the same */
    12862   3           /* and should produce IDENTICAL code.                  */
    12863   3           /*******************************************************/
    12864   3  
    12865   3           a_element(I,J)                 = 1;
    12866   3           a_element(I)(J)                = 1;
    12867   3           auto_structure(I).a_element(J) = 1;
    12868   3           auto_structure.a_element(I,J)  = 1;
    12869   3           auto_structure.a_element(I)(J) = 1;     
    12870   3  
    12871   3        end;
    12872   2  
    12873   2     end;
    12874   1  
    12875   1     if I ^= MAX_SIZE + 1 then
    12876   1        do;
    12877   2        put skip (one) list ('Loop termination error 3');
    12878   2        end;
    12879   1  
    12880   1     put skip(one) list('Loop 3 ended fine.');
    12881   1  
    12882   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12883   2  
    12884   2        do j = 1 to INN_SIZE;
    12885   3  
    12886   3           /*******************************************************/
    12887   3           /* The following assignments are semantically the same */
    12888   3           /* and should produce IDENTICAL code.                  */
    12889   3           /*******************************************************/
    12890   3  
    12891   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    12892   3           a_element(i)(j)                = 1;
    12893   3           auto_structure(i).a_element(j) = 1;
    12894   3           auto_structure.a_element(i,j)  = 1;
    12895   3           auto_structure.a_element(i)(j) = 1;     
    12896   3  
    12897   3        end;
    12898   2  
    12899   2     end;
    12900   1  
    12901   1     if I ^= MAX_SIZE + 1 then
    12902   1        do;
    12903   2        put skip (one) list ('Loop termination error 4');
    12904   2        end;
    12905   1  
    12906   1     put skip(one) list('Loop 4 ended fine.');
    12907   1  
    12908   1     /****************************************************************/
    12909   1     /* This test ensures that the above code works when executed in */
    12910   1     /* a nested procedure.                                          */
    12911   1     /****************************************************************/
    12912   1  
    12913   1     put skip (one) list ('Im about to call the internal procedure now');
    12914   1  
    12915   1     call run_inner_proc;
    12916   1  
    12917   1   one = 1;
    12918   1  
    12919   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    12920   2  
    12921   2        do J = 1 to INN_SIZE;
    12922   3  
    12923   3           /*******************************************************/
    12924   3           /* The following assignments are semantically the same */
    12925   3           /* and should produce IDENTICAL code.                  */
    12926   3           /*******************************************************/
    12927   3  
    12928   3           s_element(I,J)                   = 1;
    12929   3           s_element(I)(J)                  = 1;
    12930   3           static_structure(I).s_element(J) = 1;
    12931   3           static_structure.s_element(I,J)  = 1;
    12932   3           static_structure.s_element(I)(J) = 1;     
    12933   3  
    12934   3        end;
    12935   2  
    12936   2     end;
    12937   1  
    12938   1     if I ^= MAX_SIZE + 1 then
    12939   1        do;
    12940   2        put skip (one) list ('Loop termination error 1');
    12941   2        end;
    12942   1  
    12943   1     put skip(one) list('Loop 1 ended fine.');
    12944   1  
    12945   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    12946   2  
    12947   2        do j = 1 to INN_SIZE;
    12948   3  
    12949   3           /*******************************************************/
    12950   3           /* The following assignments are semantically the same */
    12951   3           /* and should produce IDENTICAL code.                  */
    12952   3           /*******************************************************/
    12953   3  
    12954   3           s_element(i,j)                   = 1;
    12955   3           s_element(i)(j)                  = 1;
    12956   3           static_structure(i).s_element(j) = 1;
    12957   3           static_structure.s_element(i,j)  = 1;
    12958   3           static_structure.s_element(i)(j) = 1;     
    12959   3  
    12960   3        end;
    12961   2  
    12962   2     end;
    12963   1  
    12964   1     if I ^= MAX_SIZE + 1 then
    12965   1        do;
    12966   2        put skip (one) list ('Loop termination error 2');
    12967   2        end;
    12968   1  
    12969   1     put skip(one) list('Loop 2 ended fine.');
    12970   1  
    12971   1  
    12972   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    12973   2  
    12974   2        do J = 1 to INN_SIZE;
    12975   3  
    12976   3           /*******************************************************/
    12977   3           /* The following assignments are semantically the same */
    12978   3           /* and should produce IDENTICAL code.                  */
    12979   3           /*******************************************************/
    12980   3  
    12981   3           a_element(I,J)                 = 1;
    12982   3           a_element(I)(J)                = 1;
    12983   3           auto_structure(I).a_element(J) = 1;
    12984   3           auto_structure.a_element(I,J)  = 1;
    12985   3           auto_structure.a_element(I)(J) = 1;     
    12986   3  
    12987   3        end;
    12988   2  
    12989   2     end;
    12990   1  
    12991   1     if I ^= MAX_SIZE + 1 then
    12992   1        do;
    12993   2        put skip (one) list ('Loop termination error 3');
    12994   2        end;
    12995   1  
    12996   1     put skip(one) list('Loop 3 ended fine.');
    12997   1  
    12998   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    12999   2  
    13000   2        do j = 1 to INN_SIZE;
    13001   3  
    13002   3           /*******************************************************/
    13003   3           /* The following assignments are semantically the same */
    13004   3           /* and should produce IDENTICAL code.                  */
    13005   3           /*******************************************************/
    13006   3  
    13007   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13008   3           a_element(i)(j)                = 1;
    13009   3           auto_structure(i).a_element(j) = 1;
    13010   3           auto_structure.a_element(i,j)  = 1;
    13011   3           auto_structure.a_element(i)(j) = 1;     
    13012   3  
    13013   3        end;
    13014   2  
    13015   2     end;
    13016   1  
    13017   1     if I ^= MAX_SIZE + 1 then
    13018   1        do;
    13019   2        put skip (one) list ('Loop termination error 4');
    13020   2        end;
    13021   1  
    13022   1     put skip(one) list('Loop 4 ended fine.');
    13023   1  
    13024   1     /****************************************************************/
    13025   1     /* This test ensures that the above code works when executed in */
    13026   1     /* a nested procedure.                                          */
    13027   1     /****************************************************************/
    13028   1  
    13029   1     put skip (one) list ('Im about to call the internal procedure now');
    13030   1  
    13031   1     call run_inner_proc;
    13032   1  
    13033   1   one = 1;
    13034   1  
    13035   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13036   2  
    13037   2        do J = 1 to INN_SIZE;
    13038   3  
    13039   3           /*******************************************************/
    13040   3           /* The following assignments are semantically the same */
    13041   3           /* and should produce IDENTICAL code.                  */
    13042   3           /*******************************************************/
    13043   3  
    13044   3           s_element(I,J)                   = 1;
    13045   3           s_element(I)(J)                  = 1;
    13046   3           static_structure(I).s_element(J) = 1;
    13047   3           static_structure.s_element(I,J)  = 1;
    13048   3           static_structure.s_element(I)(J) = 1;     
    13049   3  
    13050   3        end;
    13051   2  
    13052   2     end;
    13053   1  
    13054   1     if I ^= MAX_SIZE + 1 then
    13055   1        do;
    13056   2        put skip (one) list ('Loop termination error 1');
    13057   2        end;
    13058   1  
    13059   1     put skip(one) list('Loop 1 ended fine.');
    13060   1  
    13061   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13062   2  
    13063   2        do j = 1 to INN_SIZE;
    13064   3  
    13065   3           /*******************************************************/
    13066   3           /* The following assignments are semantically the same */
    13067   3           /* and should produce IDENTICAL code.                  */
    13068   3           /*******************************************************/
    13069   3  
    13070   3           s_element(i,j)                   = 1;
    13071   3           s_element(i)(j)                  = 1;
    13072   3           static_structure(i).s_element(j) = 1;
    13073   3           static_structure.s_element(i,j)  = 1;
    13074   3           static_structure.s_element(i)(j) = 1;     
    13075   3  
    13076   3        end;
    13077   2  
    13078   2     end;
    13079   1  
    13080   1     if I ^= MAX_SIZE + 1 then
    13081   1        do;
    13082   2        put skip (one) list ('Loop termination error 2');
    13083   2        end;
    13084   1  
    13085   1     put skip(one) list('Loop 2 ended fine.');
    13086   1  
    13087   1  
    13088   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13089   2  
    13090   2        do J = 1 to INN_SIZE;
    13091   3  
    13092   3           /*******************************************************/
    13093   3           /* The following assignments are semantically the same */
    13094   3           /* and should produce IDENTICAL code.                  */
    13095   3           /*******************************************************/
    13096   3  
    13097   3           a_element(I,J)                 = 1;
    13098   3           a_element(I)(J)                = 1;
    13099   3           auto_structure(I).a_element(J) = 1;
    13100   3           auto_structure.a_element(I,J)  = 1;
    13101   3           auto_structure.a_element(I)(J) = 1;     
    13102   3  
    13103   3        end;
    13104   2  
    13105   2     end;
    13106   1  
    13107   1     if I ^= MAX_SIZE + 1 then
    13108   1        do;
    13109   2        put skip (one) list ('Loop termination error 3');
    13110   2        end;
    13111   1  
    13112   1     put skip(one) list('Loop 3 ended fine.');
    13113   1  
    13114   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13115   2  
    13116   2        do j = 1 to INN_SIZE;
    13117   3  
    13118   3           /*******************************************************/
    13119   3           /* The following assignments are semantically the same */
    13120   3           /* and should produce IDENTICAL code.                  */
    13121   3           /*******************************************************/
    13122   3  
    13123   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13124   3           a_element(i)(j)                = 1;
    13125   3           auto_structure(i).a_element(j) = 1;
    13126   3           auto_structure.a_element(i,j)  = 1;
    13127   3           auto_structure.a_element(i)(j) = 1;     
    13128   3  
    13129   3        end;
    13130   2  
    13131   2     end;
    13132   1  
    13133   1     if I ^= MAX_SIZE + 1 then
    13134   1        do;
    13135   2        put skip (one) list ('Loop termination error 4');
    13136   2        end;
    13137   1  
    13138   1     put skip(one) list('Loop 4 ended fine.');
    13139   1  
    13140   1     /****************************************************************/
    13141   1     /* This test ensures that the above code works when executed in */
    13142   1     /* a nested procedure.                                          */
    13143   1     /****************************************************************/
    13144   1  
    13145   1     put skip (one) list ('Im about to call the internal procedure now');
    13146   1  
    13147   1     call run_inner_proc;
    13148   1  
    13149   1   one = 1;
    13150   1  
    13151   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13152   2  
    13153   2        do J = 1 to INN_SIZE;
    13154   3  
    13155   3           /*******************************************************/
    13156   3           /* The following assignments are semantically the same */
    13157   3           /* and should produce IDENTICAL code.                  */
    13158   3           /*******************************************************/
    13159   3  
    13160   3           s_element(I,J)                   = 1;
    13161   3           s_element(I)(J)                  = 1;
    13162   3           static_structure(I).s_element(J) = 1;
    13163   3           static_structure.s_element(I,J)  = 1;
    13164   3           static_structure.s_element(I)(J) = 1;     
    13165   3  
    13166   3        end;
    13167   2  
    13168   2     end;
    13169   1  
    13170   1     if I ^= MAX_SIZE + 1 then
    13171   1        do;
    13172   2        put skip (one) list ('Loop termination error 1');
    13173   2        end;
    13174   1  
    13175   1     put skip(one) list('Loop 1 ended fine.');
    13176   1  
    13177   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13178   2  
    13179   2        do j = 1 to INN_SIZE;
    13180   3  
    13181   3           /*******************************************************/
    13182   3           /* The following assignments are semantically the same */
    13183   3           /* and should produce IDENTICAL code.                  */
    13184   3           /*******************************************************/
    13185   3  
    13186   3           s_element(i,j)                   = 1;
    13187   3           s_element(i)(j)                  = 1;
    13188   3           static_structure(i).s_element(j) = 1;
    13189   3           static_structure.s_element(i,j)  = 1;
    13190   3           static_structure.s_element(i)(j) = 1;     
    13191   3  
    13192   3        end;
    13193   2  
    13194   2     end;
    13195   1  
    13196   1     if I ^= MAX_SIZE + 1 then
    13197   1        do;
    13198   2        put skip (one) list ('Loop termination error 2');
    13199   2        end;
    13200   1  
    13201   1     put skip(one) list('Loop 2 ended fine.');
    13202   1  
    13203   1  
    13204   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13205   2  
    13206   2        do J = 1 to INN_SIZE;
    13207   3  
    13208   3           /*******************************************************/
    13209   3           /* The following assignments are semantically the same */
    13210   3           /* and should produce IDENTICAL code.                  */
    13211   3           /*******************************************************/
    13212   3  
    13213   3           a_element(I,J)                 = 1;
    13214   3           a_element(I)(J)                = 1;
    13215   3           auto_structure(I).a_element(J) = 1;
    13216   3           auto_structure.a_element(I,J)  = 1;
    13217   3           auto_structure.a_element(I)(J) = 1;     
    13218   3  
    13219   3        end;
    13220   2  
    13221   2     end;
    13222   1  
    13223   1     if I ^= MAX_SIZE + 1 then
    13224   1        do;
    13225   2        put skip (one) list ('Loop termination error 3');
    13226   2        end;
    13227   1  
    13228   1     put skip(one) list('Loop 3 ended fine.');
    13229   1  
    13230   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13231   2  
    13232   2        do j = 1 to INN_SIZE;
    13233   3  
    13234   3           /*******************************************************/
    13235   3           /* The following assignments are semantically the same */
    13236   3           /* and should produce IDENTICAL code.                  */
    13237   3           /*******************************************************/
    13238   3  
    13239   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13240   3           a_element(i)(j)                = 1;
    13241   3           auto_structure(i).a_element(j) = 1;
    13242   3           auto_structure.a_element(i,j)  = 1;
    13243   3           auto_structure.a_element(i)(j) = 1;     
    13244   3  
    13245   3        end;
    13246   2  
    13247   2     end;
    13248   1  
    13249   1     if I ^= MAX_SIZE + 1 then
    13250   1        do;
    13251   2        put skip (one) list ('Loop termination error 4');
    13252   2        end;
    13253   1  
    13254   1     put skip(one) list('Loop 4 ended fine.');
    13255   1  
    13256   1     /****************************************************************/
    13257   1     /* This test ensures that the above code works when executed in */
    13258   1     /* a nested procedure.                                          */
    13259   1     /****************************************************************/
    13260   1  
    13261   1     put skip (one) list ('Im about to call the internal procedure now');
    13262   1  
    13263   1     call run_inner_proc;
    13264   1  
    13265   1   one = 1;
    13266   1  
    13267   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13268   2  
    13269   2        do J = 1 to INN_SIZE;
    13270   3  
    13271   3           /*******************************************************/
    13272   3           /* The following assignments are semantically the same */
    13273   3           /* and should produce IDENTICAL code.                  */
    13274   3           /*******************************************************/
    13275   3  
    13276   3           s_element(I,J)                   = 1;
    13277   3           s_element(I)(J)                  = 1;
    13278   3           static_structure(I).s_element(J) = 1;
    13279   3           static_structure.s_element(I,J)  = 1;
    13280   3           static_structure.s_element(I)(J) = 1;     
    13281   3  
    13282   3        end;
    13283   2  
    13284   2     end;
    13285   1  
    13286   1     if I ^= MAX_SIZE + 1 then
    13287   1        do;
    13288   2        put skip (one) list ('Loop termination error 1');
    13289   2        end;
    13290   1  
    13291   1     put skip(one) list('Loop 1 ended fine.');
    13292   1  
    13293   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13294   2  
    13295   2        do j = 1 to INN_SIZE;
    13296   3  
    13297   3           /*******************************************************/
    13298   3           /* The following assignments are semantically the same */
    13299   3           /* and should produce IDENTICAL code.                  */
    13300   3           /*******************************************************/
    13301   3  
    13302   3           s_element(i,j)                   = 1;
    13303   3           s_element(i)(j)                  = 1;
    13304   3           static_structure(i).s_element(j) = 1;
    13305   3           static_structure.s_element(i,j)  = 1;
    13306   3           static_structure.s_element(i)(j) = 1;     
    13307   3  
    13308   3        end;
    13309   2  
    13310   2     end;
    13311   1  
    13312   1     if I ^= MAX_SIZE + 1 then
    13313   1        do;
    13314   2        put skip (one) list ('Loop termination error 2');
    13315   2        end;
    13316   1  
    13317   1     put skip(one) list('Loop 2 ended fine.');
    13318   1  
    13319   1  
    13320   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13321   2  
    13322   2        do J = 1 to INN_SIZE;
    13323   3  
    13324   3           /*******************************************************/
    13325   3           /* The following assignments are semantically the same */
    13326   3           /* and should produce IDENTICAL code.                  */
    13327   3           /*******************************************************/
    13328   3  
    13329   3           a_element(I,J)                 = 1;
    13330   3           a_element(I)(J)                = 1;
    13331   3           auto_structure(I).a_element(J) = 1;
    13332   3           auto_structure.a_element(I,J)  = 1;
    13333   3           auto_structure.a_element(I)(J) = 1;     
    13334   3  
    13335   3        end;
    13336   2  
    13337   2     end;
    13338   1  
    13339   1     if I ^= MAX_SIZE + 1 then
    13340   1        do;
    13341   2        put skip (one) list ('Loop termination error 3');
    13342   2        end;
    13343   1  
    13344   1     put skip(one) list('Loop 3 ended fine.');
    13345   1  
    13346   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13347   2  
    13348   2        do j = 1 to INN_SIZE;
    13349   3  
    13350   3           /*******************************************************/
    13351   3           /* The following assignments are semantically the same */
    13352   3           /* and should produce IDENTICAL code.                  */
    13353   3           /*******************************************************/
    13354   3  
    13355   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13356   3           a_element(i)(j)                = 1;
    13357   3           auto_structure(i).a_element(j) = 1;
    13358   3           auto_structure.a_element(i,j)  = 1;
    13359   3           auto_structure.a_element(i)(j) = 1;     
    13360   3  
    13361   3        end;
    13362   2  
    13363   2     end;
    13364   1  
    13365   1     if I ^= MAX_SIZE + 1 then
    13366   1        do;
    13367   2        put skip (one) list ('Loop termination error 4');
    13368   2        end;
    13369   1  
    13370   1     put skip(one) list('Loop 4 ended fine.');
    13371   1  
    13372   1     /****************************************************************/
    13373   1     /* This test ensures that the above code works when executed in */
    13374   1     /* a nested procedure.                                          */
    13375   1     /****************************************************************/
    13376   1  
    13377   1     put skip (one) list ('Im about to call the internal procedure now');
    13378   1  
    13379   1     call run_inner_proc;
    13380   1  
    13381   1   one = 1;
    13382   1  
    13383   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13384   2  
    13385   2        do J = 1 to INN_SIZE;
    13386   3  
    13387   3           /*******************************************************/
    13388   3           /* The following assignments are semantically the same */
    13389   3           /* and should produce IDENTICAL code.                  */
    13390   3           /*******************************************************/
    13391   3  
    13392   3           s_element(I,J)                   = 1;
    13393   3           s_element(I)(J)                  = 1;
    13394   3           static_structure(I).s_element(J) = 1;
    13395   3           static_structure.s_element(I,J)  = 1;
    13396   3           static_structure.s_element(I)(J) = 1;     
    13397   3  
    13398   3        end;
    13399   2  
    13400   2     end;
    13401   1  
    13402   1     if I ^= MAX_SIZE + 1 then
    13403   1        do;
    13404   2        put skip (one) list ('Loop termination error 1');
    13405   2        end;
    13406   1  
    13407   1     put skip(one) list('Loop 1 ended fine.');
    13408   1  
    13409   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13410   2  
    13411   2        do j = 1 to INN_SIZE;
    13412   3  
    13413   3           /*******************************************************/
    13414   3           /* The following assignments are semantically the same */
    13415   3           /* and should produce IDENTICAL code.                  */
    13416   3           /*******************************************************/
    13417   3  
    13418   3           s_element(i,j)                   = 1;
    13419   3           s_element(i)(j)                  = 1;
    13420   3           static_structure(i).s_element(j) = 1;
    13421   3           static_structure.s_element(i,j)  = 1;
    13422   3           static_structure.s_element(i)(j) = 1;     
    13423   3  
    13424   3        end;
    13425   2  
    13426   2     end;
    13427   1  
    13428   1     if I ^= MAX_SIZE + 1 then
    13429   1        do;
    13430   2        put skip (one) list ('Loop termination error 2');
    13431   2        end;
    13432   1  
    13433   1     put skip(one) list('Loop 2 ended fine.');
    13434   1  
    13435   1  
    13436   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13437   2  
    13438   2        do J = 1 to INN_SIZE;
    13439   3  
    13440   3           /*******************************************************/
    13441   3           /* The following assignments are semantically the same */
    13442   3           /* and should produce IDENTICAL code.                  */
    13443   3           /*******************************************************/
    13444   3  
    13445   3           a_element(I,J)                 = 1;
    13446   3           a_element(I)(J)                = 1;
    13447   3           auto_structure(I).a_element(J) = 1;
    13448   3           auto_structure.a_element(I,J)  = 1;
    13449   3           auto_structure.a_element(I)(J) = 1;     
    13450   3  
    13451   3        end;
    13452   2  
    13453   2     end;
    13454   1  
    13455   1     if I ^= MAX_SIZE + 1 then
    13456   1        do;
    13457   2        put skip (one) list ('Loop termination error 3');
    13458   2        end;
    13459   1  
    13460   1     put skip(one) list('Loop 3 ended fine.');
    13461   1  
    13462   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13463   2  
    13464   2        do j = 1 to INN_SIZE;
    13465   3  
    13466   3           /*******************************************************/
    13467   3           /* The following assignments are semantically the same */
    13468   3           /* and should produce IDENTICAL code.                  */
    13469   3           /*******************************************************/
    13470   3  
    13471   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13472   3           a_element(i)(j)                = 1;
    13473   3           auto_structure(i).a_element(j) = 1;
    13474   3           auto_structure.a_element(i,j)  = 1;
    13475   3           auto_structure.a_element(i)(j) = 1;     
    13476   3  
    13477   3        end;
    13478   2  
    13479   2     end;
    13480   1  
    13481   1     if I ^= MAX_SIZE + 1 then
    13482   1        do;
    13483   2        put skip (one) list ('Loop termination error 4');
    13484   2        end;
    13485   1  
    13486   1     put skip(one) list('Loop 4 ended fine.');
    13487   1  
    13488   1     /****************************************************************/
    13489   1     /* This test ensures that the above code works when executed in */
    13490   1     /* a nested procedure.                                          */
    13491   1     /****************************************************************/
    13492   1  
    13493   1     put skip (one) list ('Im about to call the internal procedure now');
    13494   1  
    13495   1     call run_inner_proc;
    13496   1  
    13497   1   one = 1;
    13498   1  
    13499   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13500   2  
    13501   2        do J = 1 to INN_SIZE;
    13502   3  
    13503   3           /*******************************************************/
    13504   3           /* The following assignments are semantically the same */
    13505   3           /* and should produce IDENTICAL code.                  */
    13506   3           /*******************************************************/
    13507   3  
    13508   3           s_element(I,J)                   = 1;
    13509   3           s_element(I)(J)                  = 1;
    13510   3           static_structure(I).s_element(J) = 1;
    13511   3           static_structure.s_element(I,J)  = 1;
    13512   3           static_structure.s_element(I)(J) = 1;     
    13513   3  
    13514   3        end;
    13515   2  
    13516   2     end;
    13517   1  
    13518   1     if I ^= MAX_SIZE + 1 then
    13519   1        do;
    13520   2        put skip (one) list ('Loop termination error 1');
    13521   2        end;
    13522   1  
    13523   1     put skip(one) list('Loop 1 ended fine.');
    13524   1  
    13525   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13526   2  
    13527   2        do j = 1 to INN_SIZE;
    13528   3  
    13529   3           /*******************************************************/
    13530   3           /* The following assignments are semantically the same */
    13531   3           /* and should produce IDENTICAL code.                  */
    13532   3           /*******************************************************/
    13533   3  
    13534   3           s_element(i,j)                   = 1;
    13535   3           s_element(i)(j)                  = 1;
    13536   3           static_structure(i).s_element(j) = 1;
    13537   3           static_structure.s_element(i,j)  = 1;
    13538   3           static_structure.s_element(i)(j) = 1;     
    13539   3  
    13540   3        end;
    13541   2  
    13542   2     end;
    13543   1  
    13544   1     if I ^= MAX_SIZE + 1 then
    13545   1        do;
    13546   2        put skip (one) list ('Loop termination error 2');
    13547   2        end;
    13548   1  
    13549   1     put skip(one) list('Loop 2 ended fine.');
    13550   1  
    13551   1  
    13552   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13553   2  
    13554   2        do J = 1 to INN_SIZE;
    13555   3  
    13556   3           /*******************************************************/
    13557   3           /* The following assignments are semantically the same */
    13558   3           /* and should produce IDENTICAL code.                  */
    13559   3           /*******************************************************/
    13560   3  
    13561   3           a_element(I,J)                 = 1;
    13562   3           a_element(I)(J)                = 1;
    13563   3           auto_structure(I).a_element(J) = 1;
    13564   3           auto_structure.a_element(I,J)  = 1;
    13565   3           auto_structure.a_element(I)(J) = 1;     
    13566   3  
    13567   3        end;
    13568   2  
    13569   2     end;
    13570   1  
    13571   1     if I ^= MAX_SIZE + 1 then
    13572   1        do;
    13573   2        put skip (one) list ('Loop termination error 3');
    13574   2        end;
    13575   1  
    13576   1     put skip(one) list('Loop 3 ended fine.');
    13577   1  
    13578   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13579   2  
    13580   2        do j = 1 to INN_SIZE;
    13581   3  
    13582   3           /*******************************************************/
    13583   3           /* The following assignments are semantically the same */
    13584   3           /* and should produce IDENTICAL code.                  */
    13585   3           /*******************************************************/
    13586   3  
    13587   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13588   3           a_element(i)(j)                = 1;
    13589   3           auto_structure(i).a_element(j) = 1;
    13590   3           auto_structure.a_element(i,j)  = 1;
    13591   3           auto_structure.a_element(i)(j) = 1;     
    13592   3  
    13593   3        end;
    13594   2  
    13595   2     end;
    13596   1  
    13597   1     if I ^= MAX_SIZE + 1 then
    13598   1        do;
    13599   2        put skip (one) list ('Loop termination error 4');
    13600   2        end;
    13601   1  
    13602   1     put skip(one) list('Loop 4 ended fine.');
    13603   1  
    13604   1     /****************************************************************/
    13605   1     /* This test ensures that the above code works when executed in */
    13606   1     /* a nested procedure.                                          */
    13607   1     /****************************************************************/
    13608   1  
    13609   1     put skip (one) list ('Im about to call the internal procedure now');
    13610   1  
    13611   1     call run_inner_proc;
    13612   1  
    13613   1   one = 1;
    13614   1  
    13615   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13616   2  
    13617   2        do J = 1 to INN_SIZE;
    13618   3  
    13619   3           /*******************************************************/
    13620   3           /* The following assignments are semantically the same */
    13621   3           /* and should produce IDENTICAL code.                  */
    13622   3           /*******************************************************/
    13623   3  
    13624   3           s_element(I,J)                   = 1;
    13625   3           s_element(I)(J)                  = 1;
    13626   3           static_structure(I).s_element(J) = 1;
    13627   3           static_structure.s_element(I,J)  = 1;
    13628   3           static_structure.s_element(I)(J) = 1;     
    13629   3  
    13630   3        end;
    13631   2  
    13632   2     end;
    13633   1  
    13634   1     if I ^= MAX_SIZE + 1 then
    13635   1        do;
    13636   2        put skip (one) list ('Loop termination error 1');
    13637   2        end;
    13638   1  
    13639   1     put skip(one) list('Loop 1 ended fine.');
    13640   1  
    13641   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13642   2  
    13643   2        do j = 1 to INN_SIZE;
    13644   3  
    13645   3           /*******************************************************/
    13646   3           /* The following assignments are semantically the same */
    13647   3           /* and should produce IDENTICAL code.                  */
    13648   3           /*******************************************************/
    13649   3  
    13650   3           s_element(i,j)                   = 1;
    13651   3           s_element(i)(j)                  = 1;
    13652   3           static_structure(i).s_element(j) = 1;
    13653   3           static_structure.s_element(i,j)  = 1;
    13654   3           static_structure.s_element(i)(j) = 1;     
    13655   3  
    13656   3        end;
    13657   2  
    13658   2     end;
    13659   1  
    13660   1     if I ^= MAX_SIZE + 1 then
    13661   1        do;
    13662   2        put skip (one) list ('Loop termination error 2');
    13663   2        end;
    13664   1  
    13665   1     put skip(one) list('Loop 2 ended fine.');
    13666   1  
    13667   1  
    13668   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13669   2  
    13670   2        do J = 1 to INN_SIZE;
    13671   3  
    13672   3           /*******************************************************/
    13673   3           /* The following assignments are semantically the same */
    13674   3           /* and should produce IDENTICAL code.                  */
    13675   3           /*******************************************************/
    13676   3  
    13677   3           a_element(I,J)                 = 1;
    13678   3           a_element(I)(J)                = 1;
    13679   3           auto_structure(I).a_element(J) = 1;
    13680   3           auto_structure.a_element(I,J)  = 1;
    13681   3           auto_structure.a_element(I)(J) = 1;     
    13682   3  
    13683   3        end;
    13684   2  
    13685   2     end;
    13686   1  
    13687   1     if I ^= MAX_SIZE + 1 then
    13688   1        do;
    13689   2        put skip (one) list ('Loop termination error 3');
    13690   2        end;
    13691   1  
    13692   1     put skip(one) list('Loop 3 ended fine.');
    13693   1  
    13694   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13695   2  
    13696   2        do j = 1 to INN_SIZE;
    13697   3  
    13698   3           /*******************************************************/
    13699   3           /* The following assignments are semantically the same */
    13700   3           /* and should produce IDENTICAL code.                  */
    13701   3           /*******************************************************/
    13702   3  
    13703   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13704   3           a_element(i)(j)                = 1;
    13705   3           auto_structure(i).a_element(j) = 1;
    13706   3           auto_structure.a_element(i,j)  = 1;
    13707   3           auto_structure.a_element(i)(j) = 1;     
    13708   3  
    13709   3        end;
    13710   2  
    13711   2     end;
    13712   1  
    13713   1     if I ^= MAX_SIZE + 1 then
    13714   1        do;
    13715   2        put skip (one) list ('Loop termination error 4');
    13716   2        end;
    13717   1  
    13718   1     put skip(one) list('Loop 4 ended fine.');
    13719   1  
    13720   1     /****************************************************************/
    13721   1     /* This test ensures that the above code works when executed in */
    13722   1     /* a nested procedure.                                          */
    13723   1     /****************************************************************/
    13724   1  
    13725   1     put skip (one) list ('Im about to call the internal procedure now');
    13726   1  
    13727   1     call run_inner_proc;
    13728   1  
    13729   1   one = 1;
    13730   1  
    13731   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13732   2  
    13733   2        do J = 1 to INN_SIZE;
    13734   3  
    13735   3           /*******************************************************/
    13736   3           /* The following assignments are semantically the same */
    13737   3           /* and should produce IDENTICAL code.                  */
    13738   3           /*******************************************************/
    13739   3  
    13740   3           s_element(I,J)                   = 1;
    13741   3           s_element(I)(J)                  = 1;
    13742   3           static_structure(I).s_element(J) = 1;
    13743   3           static_structure.s_element(I,J)  = 1;
    13744   3           static_structure.s_element(I)(J) = 1;     
    13745   3  
    13746   3        end;
    13747   2  
    13748   2     end;
    13749   1  
    13750   1     if I ^= MAX_SIZE + 1 then
    13751   1        do;
    13752   2        put skip (one) list ('Loop termination error 1');
    13753   2        end;
    13754   1  
    13755   1     put skip(one) list('Loop 1 ended fine.');
    13756   1  
    13757   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13758   2  
    13759   2        do j = 1 to INN_SIZE;
    13760   3  
    13761   3           /*******************************************************/
    13762   3           /* The following assignments are semantically the same */
    13763   3           /* and should produce IDENTICAL code.                  */
    13764   3           /*******************************************************/
    13765   3  
    13766   3           s_element(i,j)                   = 1;
    13767   3           s_element(i)(j)                  = 1;
    13768   3           static_structure(i).s_element(j) = 1;
    13769   3           static_structure.s_element(i,j)  = 1;
    13770   3           static_structure.s_element(i)(j) = 1;     
    13771   3  
    13772   3        end;
    13773   2  
    13774   2     end;
    13775   1  
    13776   1     if I ^= MAX_SIZE + 1 then
    13777   1        do;
    13778   2        put skip (one) list ('Loop termination error 2');
    13779   2        end;
    13780   1  
    13781   1     put skip(one) list('Loop 2 ended fine.');
    13782   1  
    13783   1  
    13784   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13785   2  
    13786   2        do J = 1 to INN_SIZE;
    13787   3  
    13788   3           /*******************************************************/
    13789   3           /* The following assignments are semantically the same */
    13790   3           /* and should produce IDENTICAL code.                  */
    13791   3           /*******************************************************/
    13792   3  
    13793   3           a_element(I,J)                 = 1;
    13794   3           a_element(I)(J)                = 1;
    13795   3           auto_structure(I).a_element(J) = 1;
    13796   3           auto_structure.a_element(I,J)  = 1;
    13797   3           auto_structure.a_element(I)(J) = 1;     
    13798   3  
    13799   3        end;
    13800   2  
    13801   2     end;
    13802   1  
    13803   1     if I ^= MAX_SIZE + 1 then
    13804   1        do;
    13805   2        put skip (one) list ('Loop termination error 3');
    13806   2        end;
    13807   1  
    13808   1     put skip(one) list('Loop 3 ended fine.');
    13809   1  
    13810   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13811   2  
    13812   2        do j = 1 to INN_SIZE;
    13813   3  
    13814   3           /*******************************************************/
    13815   3           /* The following assignments are semantically the same */
    13816   3           /* and should produce IDENTICAL code.                  */
    13817   3           /*******************************************************/
    13818   3  
    13819   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13820   3           a_element(i)(j)                = 1;
    13821   3           auto_structure(i).a_element(j) = 1;
    13822   3           auto_structure.a_element(i,j)  = 1;
    13823   3           auto_structure.a_element(i)(j) = 1;     
    13824   3  
    13825   3        end;
    13826   2  
    13827   2     end;
    13828   1  
    13829   1     if I ^= MAX_SIZE + 1 then
    13830   1        do;
    13831   2        put skip (one) list ('Loop termination error 4');
    13832   2        end;
    13833   1  
    13834   1     put skip(one) list('Loop 4 ended fine.');
    13835   1  
    13836   1     /****************************************************************/
    13837   1     /* This test ensures that the above code works when executed in */
    13838   1     /* a nested procedure.                                          */
    13839   1     /****************************************************************/
    13840   1  
    13841   1     put skip (one) list ('Im about to call the internal procedure now');
    13842   1  
    13843   1     call run_inner_proc;
    13844   1  
    13845   1   one = 1;
    13846   1  
    13847   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13848   2  
    13849   2        do J = 1 to INN_SIZE;
    13850   3  
    13851   3           /*******************************************************/
    13852   3           /* The following assignments are semantically the same */
    13853   3           /* and should produce IDENTICAL code.                  */
    13854   3           /*******************************************************/
    13855   3  
    13856   3           s_element(I,J)                   = 1;
    13857   3           s_element(I)(J)                  = 1;
    13858   3           static_structure(I).s_element(J) = 1;
    13859   3           static_structure.s_element(I,J)  = 1;
    13860   3           static_structure.s_element(I)(J) = 1;     
    13861   3  
    13862   3        end;
    13863   2  
    13864   2     end;
    13865   1  
    13866   1     if I ^= MAX_SIZE + 1 then
    13867   1        do;
    13868   2        put skip (one) list ('Loop termination error 1');
    13869   2        end;
    13870   1  
    13871   1     put skip(one) list('Loop 1 ended fine.');
    13872   1  
    13873   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13874   2  
    13875   2        do j = 1 to INN_SIZE;
    13876   3  
    13877   3           /*******************************************************/
    13878   3           /* The following assignments are semantically the same */
    13879   3           /* and should produce IDENTICAL code.                  */
    13880   3           /*******************************************************/
    13881   3  
    13882   3           s_element(i,j)                   = 1;
    13883   3           s_element(i)(j)                  = 1;
    13884   3           static_structure(i).s_element(j) = 1;
    13885   3           static_structure.s_element(i,j)  = 1;
    13886   3           static_structure.s_element(i)(j) = 1;     
    13887   3  
    13888   3        end;
    13889   2  
    13890   2     end;
    13891   1  
    13892   1     if I ^= MAX_SIZE + 1 then
    13893   1        do;
    13894   2        put skip (one) list ('Loop termination error 2');
    13895   2        end;
    13896   1  
    13897   1     put skip(one) list('Loop 2 ended fine.');
    13898   1  
    13899   1  
    13900   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    13901   2  
    13902   2        do J = 1 to INN_SIZE;
    13903   3  
    13904   3           /*******************************************************/
    13905   3           /* The following assignments are semantically the same */
    13906   3           /* and should produce IDENTICAL code.                  */
    13907   3           /*******************************************************/
    13908   3  
    13909   3           a_element(I,J)                 = 1;
    13910   3           a_element(I)(J)                = 1;
    13911   3           auto_structure(I).a_element(J) = 1;
    13912   3           auto_structure.a_element(I,J)  = 1;
    13913   3           auto_structure.a_element(I)(J) = 1;     
    13914   3  
    13915   3        end;
    13916   2  
    13917   2     end;
    13918   1  
    13919   1     if I ^= MAX_SIZE + 1 then
    13920   1        do;
    13921   2        put skip (one) list ('Loop termination error 3');
    13922   2        end;
    13923   1  
    13924   1     put skip(one) list('Loop 3 ended fine.');
    13925   1  
    13926   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    13927   2  
    13928   2        do j = 1 to INN_SIZE;
    13929   3  
    13930   3           /*******************************************************/
    13931   3           /* The following assignments are semantically the same */
    13932   3           /* and should produce IDENTICAL code.                  */
    13933   3           /*******************************************************/
    13934   3  
    13935   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    13936   3           a_element(i)(j)                = 1;
    13937   3           auto_structure(i).a_element(j) = 1;
    13938   3           auto_structure.a_element(i,j)  = 1;
    13939   3           auto_structure.a_element(i)(j) = 1;     
    13940   3  
    13941   3        end;
    13942   2  
    13943   2     end;
    13944   1  
    13945   1     if I ^= MAX_SIZE + 1 then
    13946   1        do;
    13947   2        put skip (one) list ('Loop termination error 4');
    13948   2        end;
    13949   1  
    13950   1     put skip(one) list('Loop 4 ended fine.');
    13951   1  
    13952   1     /****************************************************************/
    13953   1     /* This test ensures that the above code works when executed in */
    13954   1     /* a nested procedure.                                          */
    13955   1     /****************************************************************/
    13956   1  
    13957   1     put skip (one) list ('Im about to call the internal procedure now');
    13958   1  
    13959   1     call run_inner_proc;
    13960   1  
    13961   1   one = 1;
    13962   1  
    13963   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    13964   2  
    13965   2        do J = 1 to INN_SIZE;
    13966   3  
    13967   3           /*******************************************************/
    13968   3           /* The following assignments are semantically the same */
    13969   3           /* and should produce IDENTICAL code.                  */
    13970   3           /*******************************************************/
    13971   3  
    13972   3           s_element(I,J)                   = 1;
    13973   3           s_element(I)(J)                  = 1;
    13974   3           static_structure(I).s_element(J) = 1;
    13975   3           static_structure.s_element(I,J)  = 1;
    13976   3           static_structure.s_element(I)(J) = 1;     
    13977   3  
    13978   3        end;
    13979   2  
    13980   2     end;
    13981   1  
    13982   1     if I ^= MAX_SIZE + 1 then
    13983   1        do;
    13984   2        put skip (one) list ('Loop termination error 1');
    13985   2        end;
    13986   1  
    13987   1     put skip(one) list('Loop 1 ended fine.');
    13988   1  
    13989   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    13990   2  
    13991   2        do j = 1 to INN_SIZE;
    13992   3  
    13993   3           /*******************************************************/
    13994   3           /* The following assignments are semantically the same */
    13995   3           /* and should produce IDENTICAL code.                  */
    13996   3           /*******************************************************/
    13997   3  
    13998   3           s_element(i,j)                   = 1;
    13999   3           s_element(i)(j)                  = 1;
    14000   3           static_structure(i).s_element(j) = 1;
    14001   3           static_structure.s_element(i,j)  = 1;
    14002   3           static_structure.s_element(i)(j) = 1;     
    14003   3  
    14004   3        end;
    14005   2  
    14006   2     end;
    14007   1  
    14008   1     if I ^= MAX_SIZE + 1 then
    14009   1        do;
    14010   2        put skip (one) list ('Loop termination error 2');
    14011   2        end;
    14012   1  
    14013   1     put skip(one) list('Loop 2 ended fine.');
    14014   1  
    14015   1  
    14016   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14017   2  
    14018   2        do J = 1 to INN_SIZE;
    14019   3  
    14020   3           /*******************************************************/
    14021   3           /* The following assignments are semantically the same */
    14022   3           /* and should produce IDENTICAL code.                  */
    14023   3           /*******************************************************/
    14024   3  
    14025   3           a_element(I,J)                 = 1;
    14026   3           a_element(I)(J)                = 1;
    14027   3           auto_structure(I).a_element(J) = 1;
    14028   3           auto_structure.a_element(I,J)  = 1;
    14029   3           auto_structure.a_element(I)(J) = 1;     
    14030   3  
    14031   3        end;
    14032   2  
    14033   2     end;
    14034   1  
    14035   1     if I ^= MAX_SIZE + 1 then
    14036   1        do;
    14037   2        put skip (one) list ('Loop termination error 3');
    14038   2        end;
    14039   1  
    14040   1     put skip(one) list('Loop 3 ended fine.');
    14041   1  
    14042   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14043   2  
    14044   2        do j = 1 to INN_SIZE;
    14045   3  
    14046   3           /*******************************************************/
    14047   3           /* The following assignments are semantically the same */
    14048   3           /* and should produce IDENTICAL code.                  */
    14049   3           /*******************************************************/
    14050   3  
    14051   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14052   3           a_element(i)(j)                = 1;
    14053   3           auto_structure(i).a_element(j) = 1;
    14054   3           auto_structure.a_element(i,j)  = 1;
    14055   3           auto_structure.a_element(i)(j) = 1;     
    14056   3  
    14057   3        end;
    14058   2  
    14059   2     end;
    14060   1  
    14061   1     if I ^= MAX_SIZE + 1 then
    14062   1        do;
    14063   2        put skip (one) list ('Loop termination error 4');
    14064   2        end;
    14065   1  
    14066   1     put skip(one) list('Loop 4 ended fine.');
    14067   1  
    14068   1     /****************************************************************/
    14069   1     /* This test ensures that the above code works when executed in */
    14070   1     /* a nested procedure.                                          */
    14071   1     /****************************************************************/
    14072   1  
    14073   1     put skip (one) list ('Im about to call the internal procedure now');
    14074   1  
    14075   1     call run_inner_proc;
    14076   1  
    14077   1   one = 1;
    14078   1  
    14079   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14080   2  
    14081   2        do J = 1 to INN_SIZE;
    14082   3  
    14083   3           /*******************************************************/
    14084   3           /* The following assignments are semantically the same */
    14085   3           /* and should produce IDENTICAL code.                  */
    14086   3           /*******************************************************/
    14087   3  
    14088   3           s_element(I,J)                   = 1;
    14089   3           s_element(I)(J)                  = 1;
    14090   3           static_structure(I).s_element(J) = 1;
    14091   3           static_structure.s_element(I,J)  = 1;
    14092   3           static_structure.s_element(I)(J) = 1;     
    14093   3  
    14094   3        end;
    14095   2  
    14096   2     end;
    14097   1  
    14098   1     if I ^= MAX_SIZE + 1 then
    14099   1        do;
    14100   2        put skip (one) list ('Loop termination error 1');
    14101   2        end;
    14102   1  
    14103   1     put skip(one) list('Loop 1 ended fine.');
    14104   1  
    14105   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14106   2  
    14107   2        do j = 1 to INN_SIZE;
    14108   3  
    14109   3           /*******************************************************/
    14110   3           /* The following assignments are semantically the same */
    14111   3           /* and should produce IDENTICAL code.                  */
    14112   3           /*******************************************************/
    14113   3  
    14114   3           s_element(i,j)                   = 1;
    14115   3           s_element(i)(j)                  = 1;
    14116   3           static_structure(i).s_element(j) = 1;
    14117   3           static_structure.s_element(i,j)  = 1;
    14118   3           static_structure.s_element(i)(j) = 1;     
    14119   3  
    14120   3        end;
    14121   2  
    14122   2     end;
    14123   1  
    14124   1     if I ^= MAX_SIZE + 1 then
    14125   1        do;
    14126   2        put skip (one) list ('Loop termination error 2');
    14127   2        end;
    14128   1  
    14129   1     put skip(one) list('Loop 2 ended fine.');
    14130   1  
    14131   1  
    14132   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14133   2  
    14134   2        do J = 1 to INN_SIZE;
    14135   3  
    14136   3           /*******************************************************/
    14137   3           /* The following assignments are semantically the same */
    14138   3           /* and should produce IDENTICAL code.                  */
    14139   3           /*******************************************************/
    14140   3  
    14141   3           a_element(I,J)                 = 1;
    14142   3           a_element(I)(J)                = 1;
    14143   3           auto_structure(I).a_element(J) = 1;
    14144   3           auto_structure.a_element(I,J)  = 1;
    14145   3           auto_structure.a_element(I)(J) = 1;     
    14146   3  
    14147   3        end;
    14148   2  
    14149   2     end;
    14150   1  
    14151   1     if I ^= MAX_SIZE + 1 then
    14152   1        do;
    14153   2        put skip (one) list ('Loop termination error 3');
    14154   2        end;
    14155   1  
    14156   1     put skip(one) list('Loop 3 ended fine.');
    14157   1  
    14158   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14159   2  
    14160   2        do j = 1 to INN_SIZE;
    14161   3  
    14162   3           /*******************************************************/
    14163   3           /* The following assignments are semantically the same */
    14164   3           /* and should produce IDENTICAL code.                  */
    14165   3           /*******************************************************/
    14166   3  
    14167   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14168   3           a_element(i)(j)                = 1;
    14169   3           auto_structure(i).a_element(j) = 1;
    14170   3           auto_structure.a_element(i,j)  = 1;
    14171   3           auto_structure.a_element(i)(j) = 1;     
    14172   3  
    14173   3        end;
    14174   2  
    14175   2     end;
    14176   1  
    14177   1     if I ^= MAX_SIZE + 1 then
    14178   1        do;
    14179   2        put skip (one) list ('Loop termination error 4');
    14180   2        end;
    14181   1  
    14182   1     put skip(one) list('Loop 4 ended fine.');
    14183   1  
    14184   1     /****************************************************************/
    14185   1     /* This test ensures that the above code works when executed in */
    14186   1     /* a nested procedure.                                          */
    14187   1     /****************************************************************/
    14188   1  
    14189   1     put skip (one) list ('Im about to call the internal procedure now');
    14190   1  
    14191   1     call run_inner_proc;
    14192   1  
    14193   1   one = 1;
    14194   1  
    14195   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14196   2  
    14197   2        do J = 1 to INN_SIZE;
    14198   3  
    14199   3           /*******************************************************/
    14200   3           /* The following assignments are semantically the same */
    14201   3           /* and should produce IDENTICAL code.                  */
    14202   3           /*******************************************************/
    14203   3  
    14204   3           s_element(I,J)                   = 1;
    14205   3           s_element(I)(J)                  = 1;
    14206   3           static_structure(I).s_element(J) = 1;
    14207   3           static_structure.s_element(I,J)  = 1;
    14208   3           static_structure.s_element(I)(J) = 1;     
    14209   3  
    14210   3        end;
    14211   2  
    14212   2     end;
    14213   1  
    14214   1     if I ^= MAX_SIZE + 1 then
    14215   1        do;
    14216   2        put skip (one) list ('Loop termination error 1');
    14217   2        end;
    14218   1  
    14219   1     put skip(one) list('Loop 1 ended fine.');
    14220   1  
    14221   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14222   2  
    14223   2        do j = 1 to INN_SIZE;
    14224   3  
    14225   3           /*******************************************************/
    14226   3           /* The following assignments are semantically the same */
    14227   3           /* and should produce IDENTICAL code.                  */
    14228   3           /*******************************************************/
    14229   3  
    14230   3           s_element(i,j)                   = 1;
    14231   3           s_element(i)(j)                  = 1;
    14232   3           static_structure(i).s_element(j) = 1;
    14233   3           static_structure.s_element(i,j)  = 1;
    14234   3           static_structure.s_element(i)(j) = 1;     
    14235   3  
    14236   3        end;
    14237   2  
    14238   2     end;
    14239   1  
    14240   1     if I ^= MAX_SIZE + 1 then
    14241   1        do;
    14242   2        put skip (one) list ('Loop termination error 2');
    14243   2        end;
    14244   1  
    14245   1     put skip(one) list('Loop 2 ended fine.');
    14246   1  
    14247   1  
    14248   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14249   2  
    14250   2        do J = 1 to INN_SIZE;
    14251   3  
    14252   3           /*******************************************************/
    14253   3           /* The following assignments are semantically the same */
    14254   3           /* and should produce IDENTICAL code.                  */
    14255   3           /*******************************************************/
    14256   3  
    14257   3           a_element(I,J)                 = 1;
    14258   3           a_element(I)(J)                = 1;
    14259   3           auto_structure(I).a_element(J) = 1;
    14260   3           auto_structure.a_element(I,J)  = 1;
    14261   3           auto_structure.a_element(I)(J) = 1;     
    14262   3  
    14263   3        end;
    14264   2  
    14265   2     end;
    14266   1  
    14267   1     if I ^= MAX_SIZE + 1 then
    14268   1        do;
    14269   2        put skip (one) list ('Loop termination error 3');
    14270   2        end;
    14271   1  
    14272   1     put skip(one) list('Loop 3 ended fine.');
    14273   1  
    14274   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14275   2  
    14276   2        do j = 1 to INN_SIZE;
    14277   3  
    14278   3           /*******************************************************/
    14279   3           /* The following assignments are semantically the same */
    14280   3           /* and should produce IDENTICAL code.                  */
    14281   3           /*******************************************************/
    14282   3  
    14283   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14284   3           a_element(i)(j)                = 1;
    14285   3           auto_structure(i).a_element(j) = 1;
    14286   3           auto_structure.a_element(i,j)  = 1;
    14287   3           auto_structure.a_element(i)(j) = 1;     
    14288   3  
    14289   3        end;
    14290   2  
    14291   2     end;
    14292   1  
    14293   1     if I ^= MAX_SIZE + 1 then
    14294   1        do;
    14295   2        put skip (one) list ('Loop termination error 4');
    14296   2        end;
    14297   1  
    14298   1     put skip(one) list('Loop 4 ended fine.');
    14299   1  
    14300   1     /****************************************************************/
    14301   1     /* This test ensures that the above code works when executed in */
    14302   1     /* a nested procedure.                                          */
    14303   1     /****************************************************************/
    14304   1  
    14305   1     put skip (one) list ('Im about to call the internal procedure now');
    14306   1  
    14307   1     call run_inner_proc;
    14308   1  
    14309   1   one = 1;
    14310   1  
    14311   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14312   2  
    14313   2        do J = 1 to INN_SIZE;
    14314   3  
    14315   3           /*******************************************************/
    14316   3           /* The following assignments are semantically the same */
    14317   3           /* and should produce IDENTICAL code.                  */
    14318   3           /*******************************************************/
    14319   3  
    14320   3           s_element(I,J)                   = 1;
    14321   3           s_element(I)(J)                  = 1;
    14322   3           static_structure(I).s_element(J) = 1;
    14323   3           static_structure.s_element(I,J)  = 1;
    14324   3           static_structure.s_element(I)(J) = 1;     
    14325   3  
    14326   3        end;
    14327   2  
    14328   2     end;
    14329   1  
    14330   1     if I ^= MAX_SIZE + 1 then
    14331   1        do;
    14332   2        put skip (one) list ('Loop termination error 1');
    14333   2        end;
    14334   1  
    14335   1     put skip(one) list('Loop 1 ended fine.');
    14336   1  
    14337   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14338   2  
    14339   2        do j = 1 to INN_SIZE;
    14340   3  
    14341   3           /*******************************************************/
    14342   3           /* The following assignments are semantically the same */
    14343   3           /* and should produce IDENTICAL code.                  */
    14344   3           /*******************************************************/
    14345   3  
    14346   3           s_element(i,j)                   = 1;
    14347   3           s_element(i)(j)                  = 1;
    14348   3           static_structure(i).s_element(j) = 1;
    14349   3           static_structure.s_element(i,j)  = 1;
    14350   3           static_structure.s_element(i)(j) = 1;     
    14351   3  
    14352   3        end;
    14353   2  
    14354   2     end;
    14355   1  
    14356   1     if I ^= MAX_SIZE + 1 then
    14357   1        do;
    14358   2        put skip (one) list ('Loop termination error 2');
    14359   2        end;
    14360   1  
    14361   1     put skip(one) list('Loop 2 ended fine.');
    14362   1  
    14363   1  
    14364   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14365   2  
    14366   2        do J = 1 to INN_SIZE;
    14367   3  
    14368   3           /*******************************************************/
    14369   3           /* The following assignments are semantically the same */
    14370   3           /* and should produce IDENTICAL code.                  */
    14371   3           /*******************************************************/
    14372   3  
    14373   3           a_element(I,J)                 = 1;
    14374   3           a_element(I)(J)                = 1;
    14375   3           auto_structure(I).a_element(J) = 1;
    14376   3           auto_structure.a_element(I,J)  = 1;
    14377   3           auto_structure.a_element(I)(J) = 1;     
    14378   3  
    14379   3        end;
    14380   2  
    14381   2     end;
    14382   1  
    14383   1     if I ^= MAX_SIZE + 1 then
    14384   1        do;
    14385   2        put skip (one) list ('Loop termination error 3');
    14386   2        end;
    14387   1  
    14388   1     put skip(one) list('Loop 3 ended fine.');
    14389   1  
    14390   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14391   2  
    14392   2        do j = 1 to INN_SIZE;
    14393   3  
    14394   3           /*******************************************************/
    14395   3           /* The following assignments are semantically the same */
    14396   3           /* and should produce IDENTICAL code.                  */
    14397   3           /*******************************************************/
    14398   3  
    14399   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14400   3           a_element(i)(j)                = 1;
    14401   3           auto_structure(i).a_element(j) = 1;
    14402   3           auto_structure.a_element(i,j)  = 1;
    14403   3           auto_structure.a_element(i)(j) = 1;     
    14404   3  
    14405   3        end;
    14406   2  
    14407   2     end;
    14408   1  
    14409   1     if I ^= MAX_SIZE + 1 then
    14410   1        do;
    14411   2        put skip (one) list ('Loop termination error 4');
    14412   2        end;
    14413   1  
    14414   1     put skip(one) list('Loop 4 ended fine.');
    14415   1  
    14416   1     /****************************************************************/
    14417   1     /* This test ensures that the above code works when executed in */
    14418   1     /* a nested procedure.                                          */
    14419   1     /****************************************************************/
    14420   1  
    14421   1     put skip (one) list ('Im about to call the internal procedure now');
    14422   1  
    14423   1     call run_inner_proc;
    14424   1  
    14425   1   one = 1;
    14426   1  
    14427   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14428   2  
    14429   2        do J = 1 to INN_SIZE;
    14430   3  
    14431   3           /*******************************************************/
    14432   3           /* The following assignments are semantically the same */
    14433   3           /* and should produce IDENTICAL code.                  */
    14434   3           /*******************************************************/
    14435   3  
    14436   3           s_element(I,J)                   = 1;
    14437   3           s_element(I)(J)                  = 1;
    14438   3           static_structure(I).s_element(J) = 1;
    14439   3           static_structure.s_element(I,J)  = 1;
    14440   3           static_structure.s_element(I)(J) = 1;     
    14441   3  
    14442   3        end;
    14443   2  
    14444   2     end;
    14445   1  
    14446   1     if I ^= MAX_SIZE + 1 then
    14447   1        do;
    14448   2        put skip (one) list ('Loop termination error 1');
    14449   2        end;
    14450   1  
    14451   1     put skip(one) list('Loop 1 ended fine.');
    14452   1  
    14453   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14454   2  
    14455   2        do j = 1 to INN_SIZE;
    14456   3  
    14457   3           /*******************************************************/
    14458   3           /* The following assignments are semantically the same */
    14459   3           /* and should produce IDENTICAL code.                  */
    14460   3           /*******************************************************/
    14461   3  
    14462   3           s_element(i,j)                   = 1;
    14463   3           s_element(i)(j)                  = 1;
    14464   3           static_structure(i).s_element(j) = 1;
    14465   3           static_structure.s_element(i,j)  = 1;
    14466   3           static_structure.s_element(i)(j) = 1;     
    14467   3  
    14468   3        end;
    14469   2  
    14470   2     end;
    14471   1  
    14472   1     if I ^= MAX_SIZE + 1 then
    14473   1        do;
    14474   2        put skip (one) list ('Loop termination error 2');
    14475   2        end;
    14476   1  
    14477   1     put skip(one) list('Loop 2 ended fine.');
    14478   1  
    14479   1  
    14480   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14481   2  
    14482   2        do J = 1 to INN_SIZE;
    14483   3  
    14484   3           /*******************************************************/
    14485   3           /* The following assignments are semantically the same */
    14486   3           /* and should produce IDENTICAL code.                  */
    14487   3           /*******************************************************/
    14488   3  
    14489   3           a_element(I,J)                 = 1;
    14490   3           a_element(I)(J)                = 1;
    14491   3           auto_structure(I).a_element(J) = 1;
    14492   3           auto_structure.a_element(I,J)  = 1;
    14493   3           auto_structure.a_element(I)(J) = 1;     
    14494   3  
    14495   3        end;
    14496   2  
    14497   2     end;
    14498   1  
    14499   1     if I ^= MAX_SIZE + 1 then
    14500   1        do;
    14501   2        put skip (one) list ('Loop termination error 3');
    14502   2        end;
    14503   1  
    14504   1     put skip(one) list('Loop 3 ended fine.');
    14505   1  
    14506   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14507   2  
    14508   2        do j = 1 to INN_SIZE;
    14509   3  
    14510   3           /*******************************************************/
    14511   3           /* The following assignments are semantically the same */
    14512   3           /* and should produce IDENTICAL code.                  */
    14513   3           /*******************************************************/
    14514   3  
    14515   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14516   3           a_element(i)(j)                = 1;
    14517   3           auto_structure(i).a_element(j) = 1;
    14518   3           auto_structure.a_element(i,j)  = 1;
    14519   3           auto_structure.a_element(i)(j) = 1;     
    14520   3  
    14521   3        end;
    14522   2  
    14523   2     end;
    14524   1  
    14525   1     if I ^= MAX_SIZE + 1 then
    14526   1        do;
    14527   2        put skip (one) list ('Loop termination error 4');
    14528   2        end;
    14529   1  
    14530   1     put skip(one) list('Loop 4 ended fine.');
    14531   1  
    14532   1     /****************************************************************/
    14533   1     /* This test ensures that the above code works when executed in */
    14534   1     /* a nested procedure.                                          */
    14535   1     /****************************************************************/
    14536   1  
    14537   1     put skip (one) list ('Im about to call the internal procedure now');
    14538   1  
    14539   1     call run_inner_proc;
    14540   1  
    14541   1   one = 1;
    14542   1  
    14543   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14544   2  
    14545   2        do J = 1 to INN_SIZE;
    14546   3  
    14547   3           /*******************************************************/
    14548   3           /* The following assignments are semantically the same */
    14549   3           /* and should produce IDENTICAL code.                  */
    14550   3           /*******************************************************/
    14551   3  
    14552   3           s_element(I,J)                   = 1;
    14553   3           s_element(I)(J)                  = 1;
    14554   3           static_structure(I).s_element(J) = 1;
    14555   3           static_structure.s_element(I,J)  = 1;
    14556   3           static_structure.s_element(I)(J) = 1;     
    14557   3  
    14558   3        end;
    14559   2  
    14560   2     end;
    14561   1  
    14562   1     if I ^= MAX_SIZE + 1 then
    14563   1        do;
    14564   2        put skip (one) list ('Loop termination error 1');
    14565   2        end;
    14566   1  
    14567   1     put skip(one) list('Loop 1 ended fine.');
    14568   1  
    14569   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14570   2  
    14571   2        do j = 1 to INN_SIZE;
    14572   3  
    14573   3           /*******************************************************/
    14574   3           /* The following assignments are semantically the same */
    14575   3           /* and should produce IDENTICAL code.                  */
    14576   3           /*******************************************************/
    14577   3  
    14578   3           s_element(i,j)                   = 1;
    14579   3           s_element(i)(j)                  = 1;
    14580   3           static_structure(i).s_element(j) = 1;
    14581   3           static_structure.s_element(i,j)  = 1;
    14582   3           static_structure.s_element(i)(j) = 1;     
    14583   3  
    14584   3        end;
    14585   2  
    14586   2     end;
    14587   1  
    14588   1     if I ^= MAX_SIZE + 1 then
    14589   1        do;
    14590   2        put skip (one) list ('Loop termination error 2');
    14591   2        end;
    14592   1  
    14593   1     put skip(one) list('Loop 2 ended fine.');
    14594   1  
    14595   1  
    14596   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14597   2  
    14598   2        do J = 1 to INN_SIZE;
    14599   3  
    14600   3           /*******************************************************/
    14601   3           /* The following assignments are semantically the same */
    14602   3           /* and should produce IDENTICAL code.                  */
    14603   3           /*******************************************************/
    14604   3  
    14605   3           a_element(I,J)                 = 1;
    14606   3           a_element(I)(J)                = 1;
    14607   3           auto_structure(I).a_element(J) = 1;
    14608   3           auto_structure.a_element(I,J)  = 1;
    14609   3           auto_structure.a_element(I)(J) = 1;     
    14610   3  
    14611   3        end;
    14612   2  
    14613   2     end;
    14614   1  
    14615   1     if I ^= MAX_SIZE + 1 then
    14616   1        do;
    14617   2        put skip (one) list ('Loop termination error 3');
    14618   2        end;
    14619   1  
    14620   1     put skip(one) list('Loop 3 ended fine.');
    14621   1  
    14622   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14623   2  
    14624   2        do j = 1 to INN_SIZE;
    14625   3  
    14626   3           /*******************************************************/
    14627   3           /* The following assignments are semantically the same */
    14628   3           /* and should produce IDENTICAL code.                  */
    14629   3           /*******************************************************/
    14630   3  
    14631   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14632   3           a_element(i)(j)                = 1;
    14633   3           auto_structure(i).a_element(j) = 1;
    14634   3           auto_structure.a_element(i,j)  = 1;
    14635   3           auto_structure.a_element(i)(j) = 1;     
    14636   3  
    14637   3        end;
    14638   2  
    14639   2     end;
    14640   1  
    14641   1     if I ^= MAX_SIZE + 1 then
    14642   1        do;
    14643   2        put skip (one) list ('Loop termination error 4');
    14644   2        end;
    14645   1  
    14646   1     put skip(one) list('Loop 4 ended fine.');
    14647   1  
    14648   1     /****************************************************************/
    14649   1     /* This test ensures that the above code works when executed in */
    14650   1     /* a nested procedure.                                          */
    14651   1     /****************************************************************/
    14652   1  
    14653   1     put skip (one) list ('Im about to call the internal procedure now');
    14654   1  
    14655   1     call run_inner_proc;
    14656   1  
    14657   1   one = 1;
    14658   1  
    14659   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14660   2  
    14661   2        do J = 1 to INN_SIZE;
    14662   3  
    14663   3           /*******************************************************/
    14664   3           /* The following assignments are semantically the same */
    14665   3           /* and should produce IDENTICAL code.                  */
    14666   3           /*******************************************************/
    14667   3  
    14668   3           s_element(I,J)                   = 1;
    14669   3           s_element(I)(J)                  = 1;
    14670   3           static_structure(I).s_element(J) = 1;
    14671   3           static_structure.s_element(I,J)  = 1;
    14672   3           static_structure.s_element(I)(J) = 1;     
    14673   3  
    14674   3        end;
    14675   2  
    14676   2     end;
    14677   1  
    14678   1     if I ^= MAX_SIZE + 1 then
    14679   1        do;
    14680   2        put skip (one) list ('Loop termination error 1');
    14681   2        end;
    14682   1  
    14683   1     put skip(one) list('Loop 1 ended fine.');
    14684   1  
    14685   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14686   2  
    14687   2        do j = 1 to INN_SIZE;
    14688   3  
    14689   3           /*******************************************************/
    14690   3           /* The following assignments are semantically the same */
    14691   3           /* and should produce IDENTICAL code.                  */
    14692   3           /*******************************************************/
    14693   3  
    14694   3           s_element(i,j)                   = 1;
    14695   3           s_element(i)(j)                  = 1;
    14696   3           static_structure(i).s_element(j) = 1;
    14697   3           static_structure.s_element(i,j)  = 1;
    14698   3           static_structure.s_element(i)(j) = 1;     
    14699   3  
    14700   3        end;
    14701   2  
    14702   2     end;
    14703   1  
    14704   1     if I ^= MAX_SIZE + 1 then
    14705   1        do;
    14706   2        put skip (one) list ('Loop termination error 2');
    14707   2        end;
    14708   1  
    14709   1     put skip(one) list('Loop 2 ended fine.');
    14710   1  
    14711   1  
    14712   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14713   2  
    14714   2        do J = 1 to INN_SIZE;
    14715   3  
    14716   3           /*******************************************************/
    14717   3           /* The following assignments are semantically the same */
    14718   3           /* and should produce IDENTICAL code.                  */
    14719   3           /*******************************************************/
    14720   3  
    14721   3           a_element(I,J)                 = 1;
    14722   3           a_element(I)(J)                = 1;
    14723   3           auto_structure(I).a_element(J) = 1;
    14724   3           auto_structure.a_element(I,J)  = 1;
    14725   3           auto_structure.a_element(I)(J) = 1;     
    14726   3  
    14727   3        end;
    14728   2  
    14729   2     end;
    14730   1  
    14731   1     if I ^= MAX_SIZE + 1 then
    14732   1        do;
    14733   2        put skip (one) list ('Loop termination error 3');
    14734   2        end;
    14735   1  
    14736   1     put skip(one) list('Loop 3 ended fine.');
    14737   1  
    14738   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14739   2  
    14740   2        do j = 1 to INN_SIZE;
    14741   3  
    14742   3           /*******************************************************/
    14743   3           /* The following assignments are semantically the same */
    14744   3           /* and should produce IDENTICAL code.                  */
    14745   3           /*******************************************************/
    14746   3  
    14747   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14748   3           a_element(i)(j)                = 1;
    14749   3           auto_structure(i).a_element(j) = 1;
    14750   3           auto_structure.a_element(i,j)  = 1;
    14751   3           auto_structure.a_element(i)(j) = 1;     
    14752   3  
    14753   3        end;
    14754   2  
    14755   2     end;
    14756   1  
    14757   1     if I ^= MAX_SIZE + 1 then
    14758   1        do;
    14759   2        put skip (one) list ('Loop termination error 4');
    14760   2        end;
    14761   1  
    14762   1     put skip(one) list('Loop 4 ended fine.');
    14763   1  
    14764   1     /****************************************************************/
    14765   1     /* This test ensures that the above code works when executed in */
    14766   1     /* a nested procedure.                                          */
    14767   1     /****************************************************************/
    14768   1  
    14769   1     put skip (one) list ('Im about to call the internal procedure now');
    14770   1  
    14771   1     call run_inner_proc;
    14772   1  
    14773   1   one = 1;
    14774   1  
    14775   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14776   2  
    14777   2        do J = 1 to INN_SIZE;
    14778   3  
    14779   3           /*******************************************************/
    14780   3           /* The following assignments are semantically the same */
    14781   3           /* and should produce IDENTICAL code.                  */
    14782   3           /*******************************************************/
    14783   3  
    14784   3           s_element(I,J)                   = 1;
    14785   3           s_element(I)(J)                  = 1;
    14786   3           static_structure(I).s_element(J) = 1;
    14787   3           static_structure.s_element(I,J)  = 1;
    14788   3           static_structure.s_element(I)(J) = 1;     
    14789   3  
    14790   3        end;
    14791   2  
    14792   2     end;
    14793   1  
    14794   1     if I ^= MAX_SIZE + 1 then
    14795   1        do;
    14796   2        put skip (one) list ('Loop termination error 1');
    14797   2        end;
    14798   1  
    14799   1     put skip(one) list('Loop 1 ended fine.');
    14800   1  
    14801   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14802   2  
    14803   2        do j = 1 to INN_SIZE;
    14804   3  
    14805   3           /*******************************************************/
    14806   3           /* The following assignments are semantically the same */
    14807   3           /* and should produce IDENTICAL code.                  */
    14808   3           /*******************************************************/
    14809   3  
    14810   3           s_element(i,j)                   = 1;
    14811   3           s_element(i)(j)                  = 1;
    14812   3           static_structure(i).s_element(j) = 1;
    14813   3           static_structure.s_element(i,j)  = 1;
    14814   3           static_structure.s_element(i)(j) = 1;     
    14815   3  
    14816   3        end;
    14817   2  
    14818   2     end;
    14819   1  
    14820   1     if I ^= MAX_SIZE + 1 then
    14821   1        do;
    14822   2        put skip (one) list ('Loop termination error 2');
    14823   2        end;
    14824   1  
    14825   1     put skip(one) list('Loop 2 ended fine.');
    14826   1  
    14827   1  
    14828   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14829   2  
    14830   2        do J = 1 to INN_SIZE;
    14831   3  
    14832   3           /*******************************************************/
    14833   3           /* The following assignments are semantically the same */
    14834   3           /* and should produce IDENTICAL code.                  */
    14835   3           /*******************************************************/
    14836   3  
    14837   3           a_element(I,J)                 = 1;
    14838   3           a_element(I)(J)                = 1;
    14839   3           auto_structure(I).a_element(J) = 1;
    14840   3           auto_structure.a_element(I,J)  = 1;
    14841   3           auto_structure.a_element(I)(J) = 1;     
    14842   3  
    14843   3        end;
    14844   2  
    14845   2     end;
    14846   1  
    14847   1     if I ^= MAX_SIZE + 1 then
    14848   1        do;
    14849   2        put skip (one) list ('Loop termination error 3');
    14850   2        end;
    14851   1  
    14852   1     put skip(one) list('Loop 3 ended fine.');
    14853   1  
    14854   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14855   2  
    14856   2        do j = 1 to INN_SIZE;
    14857   3  
    14858   3           /*******************************************************/
    14859   3           /* The following assignments are semantically the same */
    14860   3           /* and should produce IDENTICAL code.                  */
    14861   3           /*******************************************************/
    14862   3  
    14863   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14864   3           a_element(i)(j)                = 1;
    14865   3           auto_structure(i).a_element(j) = 1;
    14866   3           auto_structure.a_element(i,j)  = 1;
    14867   3           auto_structure.a_element(i)(j) = 1;     
    14868   3  
    14869   3        end;
    14870   2  
    14871   2     end;
    14872   1  
    14873   1     if I ^= MAX_SIZE + 1 then
    14874   1        do;
    14875   2        put skip (one) list ('Loop termination error 4');
    14876   2        end;
    14877   1  
    14878   1     put skip(one) list('Loop 4 ended fine.');
    14879   1  
    14880   1     /****************************************************************/
    14881   1     /* This test ensures that the above code works when executed in */
    14882   1     /* a nested procedure.                                          */
    14883   1     /****************************************************************/
    14884   1  
    14885   1     put skip (one) list ('Im about to call the internal procedure now');
    14886   1  
    14887   1     call run_inner_proc;
    14888   1  
    14889   1   one = 1;
    14890   1  
    14891   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    14892   2  
    14893   2        do J = 1 to INN_SIZE;
    14894   3  
    14895   3           /*******************************************************/
    14896   3           /* The following assignments are semantically the same */
    14897   3           /* and should produce IDENTICAL code.                  */
    14898   3           /*******************************************************/
    14899   3  
    14900   3           s_element(I,J)                   = 1;
    14901   3           s_element(I)(J)                  = 1;
    14902   3           static_structure(I).s_element(J) = 1;
    14903   3           static_structure.s_element(I,J)  = 1;
    14904   3           static_structure.s_element(I)(J) = 1;     
    14905   3  
    14906   3        end;
    14907   2  
    14908   2     end;
    14909   1  
    14910   1     if I ^= MAX_SIZE + 1 then
    14911   1        do;
    14912   2        put skip (one) list ('Loop termination error 1');
    14913   2        end;
    14914   1  
    14915   1     put skip(one) list('Loop 1 ended fine.');
    14916   1  
    14917   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    14918   2  
    14919   2        do j = 1 to INN_SIZE;
    14920   3  
    14921   3           /*******************************************************/
    14922   3           /* The following assignments are semantically the same */
    14923   3           /* and should produce IDENTICAL code.                  */
    14924   3           /*******************************************************/
    14925   3  
    14926   3           s_element(i,j)                   = 1;
    14927   3           s_element(i)(j)                  = 1;
    14928   3           static_structure(i).s_element(j) = 1;
    14929   3           static_structure.s_element(i,j)  = 1;
    14930   3           static_structure.s_element(i)(j) = 1;     
    14931   3  
    14932   3        end;
    14933   2  
    14934   2     end;
    14935   1  
    14936   1     if I ^= MAX_SIZE + 1 then
    14937   1        do;
    14938   2        put skip (one) list ('Loop termination error 2');
    14939   2        end;
    14940   1  
    14941   1     put skip(one) list('Loop 2 ended fine.');
    14942   1  
    14943   1  
    14944   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    14945   2  
    14946   2        do J = 1 to INN_SIZE;
    14947   3  
    14948   3           /*******************************************************/
    14949   3           /* The following assignments are semantically the same */
    14950   3           /* and should produce IDENTICAL code.                  */
    14951   3           /*******************************************************/
    14952   3  
    14953   3           a_element(I,J)                 = 1;
    14954   3           a_element(I)(J)                = 1;
    14955   3           auto_structure(I).a_element(J) = 1;
    14956   3           auto_structure.a_element(I,J)  = 1;
    14957   3           auto_structure.a_element(I)(J) = 1;     
    14958   3  
    14959   3        end;
    14960   2  
    14961   2     end;
    14962   1  
    14963   1     if I ^= MAX_SIZE + 1 then
    14964   1        do;
    14965   2        put skip (one) list ('Loop termination error 3');
    14966   2        end;
    14967   1  
    14968   1     put skip(one) list('Loop 3 ended fine.');
    14969   1  
    14970   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    14971   2  
    14972   2        do j = 1 to INN_SIZE;
    14973   3  
    14974   3           /*******************************************************/
    14975   3           /* The following assignments are semantically the same */
    14976   3           /* and should produce IDENTICAL code.                  */
    14977   3           /*******************************************************/
    14978   3  
    14979   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    14980   3           a_element(i)(j)                = 1;
    14981   3           auto_structure(i).a_element(j) = 1;
    14982   3           auto_structure.a_element(i,j)  = 1;
    14983   3           auto_structure.a_element(i)(j) = 1;     
    14984   3  
    14985   3        end;
    14986   2  
    14987   2     end;
    14988   1  
    14989   1     if I ^= MAX_SIZE + 1 then
    14990   1        do;
    14991   2        put skip (one) list ('Loop termination error 4');
    14992   2        end;
    14993   1  
    14994   1     put skip(one) list('Loop 4 ended fine.');
    14995   1  
    14996   1     /****************************************************************/
    14997   1     /* This test ensures that the above code works when executed in */
    14998   1     /* a nested procedure.                                          */
    14999   1     /****************************************************************/
    15000   1  
    15001   1     put skip (one) list ('Im about to call the internal procedure now');
    15002   1  
    15003   1     call run_inner_proc;
    15004   1  
    15005   1   one = 1;
    15006   1  
    15007   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15008   2  
    15009   2        do J = 1 to INN_SIZE;
    15010   3  
    15011   3           /*******************************************************/
    15012   3           /* The following assignments are semantically the same */
    15013   3           /* and should produce IDENTICAL code.                  */
    15014   3           /*******************************************************/
    15015   3  
    15016   3           s_element(I,J)                   = 1;
    15017   3           s_element(I)(J)                  = 1;
    15018   3           static_structure(I).s_element(J) = 1;
    15019   3           static_structure.s_element(I,J)  = 1;
    15020   3           static_structure.s_element(I)(J) = 1;     
    15021   3  
    15022   3        end;
    15023   2  
    15024   2     end;
    15025   1  
    15026   1     if I ^= MAX_SIZE + 1 then
    15027   1        do;
    15028   2        put skip (one) list ('Loop termination error 1');
    15029   2        end;
    15030   1  
    15031   1     put skip(one) list('Loop 1 ended fine.');
    15032   1  
    15033   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15034   2  
    15035   2        do j = 1 to INN_SIZE;
    15036   3  
    15037   3           /*******************************************************/
    15038   3           /* The following assignments are semantically the same */
    15039   3           /* and should produce IDENTICAL code.                  */
    15040   3           /*******************************************************/
    15041   3  
    15042   3           s_element(i,j)                   = 1;
    15043   3           s_element(i)(j)                  = 1;
    15044   3           static_structure(i).s_element(j) = 1;
    15045   3           static_structure.s_element(i,j)  = 1;
    15046   3           static_structure.s_element(i)(j) = 1;     
    15047   3  
    15048   3        end;
    15049   2  
    15050   2     end;
    15051   1  
    15052   1     if I ^= MAX_SIZE + 1 then
    15053   1        do;
    15054   2        put skip (one) list ('Loop termination error 2');
    15055   2        end;
    15056   1  
    15057   1     put skip(one) list('Loop 2 ended fine.');
    15058   1  
    15059   1  
    15060   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15061   2  
    15062   2        do J = 1 to INN_SIZE;
    15063   3  
    15064   3           /*******************************************************/
    15065   3           /* The following assignments are semantically the same */
    15066   3           /* and should produce IDENTICAL code.                  */
    15067   3           /*******************************************************/
    15068   3  
    15069   3           a_element(I,J)                 = 1;
    15070   3           a_element(I)(J)                = 1;
    15071   3           auto_structure(I).a_element(J) = 1;
    15072   3           auto_structure.a_element(I,J)  = 1;
    15073   3           auto_structure.a_element(I)(J) = 1;     
    15074   3  
    15075   3        end;
    15076   2  
    15077   2     end;
    15078   1  
    15079   1     if I ^= MAX_SIZE + 1 then
    15080   1        do;
    15081   2        put skip (one) list ('Loop termination error 3');
    15082   2        end;
    15083   1  
    15084   1     put skip(one) list('Loop 3 ended fine.');
    15085   1  
    15086   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15087   2  
    15088   2        do j = 1 to INN_SIZE;
    15089   3  
    15090   3           /*******************************************************/
    15091   3           /* The following assignments are semantically the same */
    15092   3           /* and should produce IDENTICAL code.                  */
    15093   3           /*******************************************************/
    15094   3  
    15095   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15096   3           a_element(i)(j)                = 1;
    15097   3           auto_structure(i).a_element(j) = 1;
    15098   3           auto_structure.a_element(i,j)  = 1;
    15099   3           auto_structure.a_element(i)(j) = 1;     
    15100   3  
    15101   3        end;
    15102   2  
    15103   2     end;
    15104   1  
    15105   1     if I ^= MAX_SIZE + 1 then
    15106   1        do;
    15107   2        put skip (one) list ('Loop termination error 4');
    15108   2        end;
    15109   1  
    15110   1     put skip(one) list('Loop 4 ended fine.');
    15111   1  
    15112   1     /****************************************************************/
    15113   1     /* This test ensures that the above code works when executed in */
    15114   1     /* a nested procedure.                                          */
    15115   1     /****************************************************************/
    15116   1  
    15117   1     put skip (one) list ('Im about to call the internal procedure now');
    15118   1  
    15119   1     call run_inner_proc;
    15120   1  
    15121   1   one = 1;
    15122   1  
    15123   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15124   2  
    15125   2        do J = 1 to INN_SIZE;
    15126   3  
    15127   3           /*******************************************************/
    15128   3           /* The following assignments are semantically the same */
    15129   3           /* and should produce IDENTICAL code.                  */
    15130   3           /*******************************************************/
    15131   3  
    15132   3           s_element(I,J)                   = 1;
    15133   3           s_element(I)(J)                  = 1;
    15134   3           static_structure(I).s_element(J) = 1;
    15135   3           static_structure.s_element(I,J)  = 1;
    15136   3           static_structure.s_element(I)(J) = 1;     
    15137   3  
    15138   3        end;
    15139   2  
    15140   2     end;
    15141   1  
    15142   1     if I ^= MAX_SIZE + 1 then
    15143   1        do;
    15144   2        put skip (one) list ('Loop termination error 1');
    15145   2        end;
    15146   1  
    15147   1     put skip(one) list('Loop 1 ended fine.');
    15148   1  
    15149   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15150   2  
    15151   2        do j = 1 to INN_SIZE;
    15152   3  
    15153   3           /*******************************************************/
    15154   3           /* The following assignments are semantically the same */
    15155   3           /* and should produce IDENTICAL code.                  */
    15156   3           /*******************************************************/
    15157   3  
    15158   3           s_element(i,j)                   = 1;
    15159   3           s_element(i)(j)                  = 1;
    15160   3           static_structure(i).s_element(j) = 1;
    15161   3           static_structure.s_element(i,j)  = 1;
    15162   3           static_structure.s_element(i)(j) = 1;     
    15163   3  
    15164   3        end;
    15165   2  
    15166   2     end;
    15167   1  
    15168   1     if I ^= MAX_SIZE + 1 then
    15169   1        do;
    15170   2        put skip (one) list ('Loop termination error 2');
    15171   2        end;
    15172   1  
    15173   1     put skip(one) list('Loop 2 ended fine.');
    15174   1  
    15175   1  
    15176   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15177   2  
    15178   2        do J = 1 to INN_SIZE;
    15179   3  
    15180   3           /*******************************************************/
    15181   3           /* The following assignments are semantically the same */
    15182   3           /* and should produce IDENTICAL code.                  */
    15183   3           /*******************************************************/
    15184   3  
    15185   3           a_element(I,J)                 = 1;
    15186   3           a_element(I)(J)                = 1;
    15187   3           auto_structure(I).a_element(J) = 1;
    15188   3           auto_structure.a_element(I,J)  = 1;
    15189   3           auto_structure.a_element(I)(J) = 1;     
    15190   3  
    15191   3        end;
    15192   2  
    15193   2     end;
    15194   1  
    15195   1     if I ^= MAX_SIZE + 1 then
    15196   1        do;
    15197   2        put skip (one) list ('Loop termination error 3');
    15198   2        end;
    15199   1  
    15200   1     put skip(one) list('Loop 3 ended fine.');
    15201   1  
    15202   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15203   2  
    15204   2        do j = 1 to INN_SIZE;
    15205   3  
    15206   3           /*******************************************************/
    15207   3           /* The following assignments are semantically the same */
    15208   3           /* and should produce IDENTICAL code.                  */
    15209   3           /*******************************************************/
    15210   3  
    15211   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15212   3           a_element(i)(j)                = 1;
    15213   3           auto_structure(i).a_element(j) = 1;
    15214   3           auto_structure.a_element(i,j)  = 1;
    15215   3           auto_structure.a_element(i)(j) = 1;     
    15216   3  
    15217   3        end;
    15218   2  
    15219   2     end;
    15220   1  
    15221   1     if I ^= MAX_SIZE + 1 then
    15222   1        do;
    15223   2        put skip (one) list ('Loop termination error 4');
    15224   2        end;
    15225   1  
    15226   1     put skip(one) list('Loop 4 ended fine.');
    15227   1  
    15228   1     /****************************************************************/
    15229   1     /* This test ensures that the above code works when executed in */
    15230   1     /* a nested procedure.                                          */
    15231   1     /****************************************************************/
    15232   1  
    15233   1     put skip (one) list ('Im about to call the internal procedure now');
    15234   1  
    15235   1     call run_inner_proc;
    15236   1  
    15237   1   one = 1;
    15238   1  
    15239   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15240   2  
    15241   2        do J = 1 to INN_SIZE;
    15242   3  
    15243   3           /*******************************************************/
    15244   3           /* The following assignments are semantically the same */
    15245   3           /* and should produce IDENTICAL code.                  */
    15246   3           /*******************************************************/
    15247   3  
    15248   3           s_element(I,J)                   = 1;
    15249   3           s_element(I)(J)                  = 1;
    15250   3           static_structure(I).s_element(J) = 1;
    15251   3           static_structure.s_element(I,J)  = 1;
    15252   3           static_structure.s_element(I)(J) = 1;     
    15253   3  
    15254   3        end;
    15255   2  
    15256   2     end;
    15257   1  
    15258   1     if I ^= MAX_SIZE + 1 then
    15259   1        do;
    15260   2        put skip (one) list ('Loop termination error 1');
    15261   2        end;
    15262   1  
    15263   1     put skip(one) list('Loop 1 ended fine.');
    15264   1  
    15265   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15266   2  
    15267   2        do j = 1 to INN_SIZE;
    15268   3  
    15269   3           /*******************************************************/
    15270   3           /* The following assignments are semantically the same */
    15271   3           /* and should produce IDENTICAL code.                  */
    15272   3           /*******************************************************/
    15273   3  
    15274   3           s_element(i,j)                   = 1;
    15275   3           s_element(i)(j)                  = 1;
    15276   3           static_structure(i).s_element(j) = 1;
    15277   3           static_structure.s_element(i,j)  = 1;
    15278   3           static_structure.s_element(i)(j) = 1;     
    15279   3  
    15280   3        end;
    15281   2  
    15282   2     end;
    15283   1  
    15284   1     if I ^= MAX_SIZE + 1 then
    15285   1        do;
    15286   2        put skip (one) list ('Loop termination error 2');
    15287   2        end;
    15288   1  
    15289   1     put skip(one) list('Loop 2 ended fine.');
    15290   1  
    15291   1  
    15292   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15293   2  
    15294   2        do J = 1 to INN_SIZE;
    15295   3  
    15296   3           /*******************************************************/
    15297   3           /* The following assignments are semantically the same */
    15298   3           /* and should produce IDENTICAL code.                  */
    15299   3           /*******************************************************/
    15300   3  
    15301   3           a_element(I,J)                 = 1;
    15302   3           a_element(I)(J)                = 1;
    15303   3           auto_structure(I).a_element(J) = 1;
    15304   3           auto_structure.a_element(I,J)  = 1;
    15305   3           auto_structure.a_element(I)(J) = 1;     
    15306   3  
    15307   3        end;
    15308   2  
    15309   2     end;
    15310   1  
    15311   1     if I ^= MAX_SIZE + 1 then
    15312   1        do;
    15313   2        put skip (one) list ('Loop termination error 3');
    15314   2        end;
    15315   1  
    15316   1     put skip(one) list('Loop 3 ended fine.');
    15317   1  
    15318   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15319   2  
    15320   2        do j = 1 to INN_SIZE;
    15321   3  
    15322   3           /*******************************************************/
    15323   3           /* The following assignments are semantically the same */
    15324   3           /* and should produce IDENTICAL code.                  */
    15325   3           /*******************************************************/
    15326   3  
    15327   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15328   3           a_element(i)(j)                = 1;
    15329   3           auto_structure(i).a_element(j) = 1;
    15330   3           auto_structure.a_element(i,j)  = 1;
    15331   3           auto_structure.a_element(i)(j) = 1;     
    15332   3  
    15333   3        end;
    15334   2  
    15335   2     end;
    15336   1  
    15337   1     if I ^= MAX_SIZE + 1 then
    15338   1        do;
    15339   2        put skip (one) list ('Loop termination error 4');
    15340   2        end;
    15341   1  
    15342   1     put skip(one) list('Loop 4 ended fine.');
    15343   1  
    15344   1     /****************************************************************/
    15345   1     /* This test ensures that the above code works when executed in */
    15346   1     /* a nested procedure.                                          */
    15347   1     /****************************************************************/
    15348   1  
    15349   1     put skip (one) list ('Im about to call the internal procedure now');
    15350   1  
    15351   1     call run_inner_proc;
    15352   1  
    15353   1   one = 1;
    15354   1  
    15355   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15356   2  
    15357   2        do J = 1 to INN_SIZE;
    15358   3  
    15359   3           /*******************************************************/
    15360   3           /* The following assignments are semantically the same */
    15361   3           /* and should produce IDENTICAL code.                  */
    15362   3           /*******************************************************/
    15363   3  
    15364   3           s_element(I,J)                   = 1;
    15365   3           s_element(I)(J)                  = 1;
    15366   3           static_structure(I).s_element(J) = 1;
    15367   3           static_structure.s_element(I,J)  = 1;
    15368   3           static_structure.s_element(I)(J) = 1;     
    15369   3  
    15370   3        end;
    15371   2  
    15372   2     end;
    15373   1  
    15374   1     if I ^= MAX_SIZE + 1 then
    15375   1        do;
    15376   2        put skip (one) list ('Loop termination error 1');
    15377   2        end;
    15378   1  
    15379   1     put skip(one) list('Loop 1 ended fine.');
    15380   1  
    15381   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15382   2  
    15383   2        do j = 1 to INN_SIZE;
    15384   3  
    15385   3           /*******************************************************/
    15386   3           /* The following assignments are semantically the same */
    15387   3           /* and should produce IDENTICAL code.                  */
    15388   3           /*******************************************************/
    15389   3  
    15390   3           s_element(i,j)                   = 1;
    15391   3           s_element(i)(j)                  = 1;
    15392   3           static_structure(i).s_element(j) = 1;
    15393   3           static_structure.s_element(i,j)  = 1;
    15394   3           static_structure.s_element(i)(j) = 1;     
    15395   3  
    15396   3        end;
    15397   2  
    15398   2     end;
    15399   1  
    15400   1     if I ^= MAX_SIZE + 1 then
    15401   1        do;
    15402   2        put skip (one) list ('Loop termination error 2');
    15403   2        end;
    15404   1  
    15405   1     put skip(one) list('Loop 2 ended fine.');
    15406   1  
    15407   1  
    15408   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15409   2  
    15410   2        do J = 1 to INN_SIZE;
    15411   3  
    15412   3           /*******************************************************/
    15413   3           /* The following assignments are semantically the same */
    15414   3           /* and should produce IDENTICAL code.                  */
    15415   3           /*******************************************************/
    15416   3  
    15417   3           a_element(I,J)                 = 1;
    15418   3           a_element(I)(J)                = 1;
    15419   3           auto_structure(I).a_element(J) = 1;
    15420   3           auto_structure.a_element(I,J)  = 1;
    15421   3           auto_structure.a_element(I)(J) = 1;     
    15422   3  
    15423   3        end;
    15424   2  
    15425   2     end;
    15426   1  
    15427   1     if I ^= MAX_SIZE + 1 then
    15428   1        do;
    15429   2        put skip (one) list ('Loop termination error 3');
    15430   2        end;
    15431   1  
    15432   1     put skip(one) list('Loop 3 ended fine.');
    15433   1  
    15434   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15435   2  
    15436   2        do j = 1 to INN_SIZE;
    15437   3  
    15438   3           /*******************************************************/
    15439   3           /* The following assignments are semantically the same */
    15440   3           /* and should produce IDENTICAL code.                  */
    15441   3           /*******************************************************/
    15442   3  
    15443   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15444   3           a_element(i)(j)                = 1;
    15445   3           auto_structure(i).a_element(j) = 1;
    15446   3           auto_structure.a_element(i,j)  = 1;
    15447   3           auto_structure.a_element(i)(j) = 1;     
    15448   3  
    15449   3        end;
    15450   2  
    15451   2     end;
    15452   1  
    15453   1     if I ^= MAX_SIZE + 1 then
    15454   1        do;
    15455   2        put skip (one) list ('Loop termination error 4');
    15456   2        end;
    15457   1  
    15458   1     put skip(one) list('Loop 4 ended fine.');
    15459   1  
    15460   1     /****************************************************************/
    15461   1     /* This test ensures that the above code works when executed in */
    15462   1     /* a nested procedure.                                          */
    15463   1     /****************************************************************/
    15464   1  
    15465   1     put skip (one) list ('Im about to call the internal procedure now');
    15466   1  
    15467   1     call run_inner_proc;
    15468   1  
    15469   1   one = 1;
    15470   1  
    15471   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15472   2  
    15473   2        do J = 1 to INN_SIZE;
    15474   3  
    15475   3           /*******************************************************/
    15476   3           /* The following assignments are semantically the same */
    15477   3           /* and should produce IDENTICAL code.                  */
    15478   3           /*******************************************************/
    15479   3  
    15480   3           s_element(I,J)                   = 1;
    15481   3           s_element(I)(J)                  = 1;
    15482   3           static_structure(I).s_element(J) = 1;
    15483   3           static_structure.s_element(I,J)  = 1;
    15484   3           static_structure.s_element(I)(J) = 1;     
    15485   3  
    15486   3        end;
    15487   2  
    15488   2     end;
    15489   1  
    15490   1     if I ^= MAX_SIZE + 1 then
    15491   1        do;
    15492   2        put skip (one) list ('Loop termination error 1');
    15493   2        end;
    15494   1  
    15495   1     put skip(one) list('Loop 1 ended fine.');
    15496   1  
    15497   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15498   2  
    15499   2        do j = 1 to INN_SIZE;
    15500   3  
    15501   3           /*******************************************************/
    15502   3           /* The following assignments are semantically the same */
    15503   3           /* and should produce IDENTICAL code.                  */
    15504   3           /*******************************************************/
    15505   3  
    15506   3           s_element(i,j)                   = 1;
    15507   3           s_element(i)(j)                  = 1;
    15508   3           static_structure(i).s_element(j) = 1;
    15509   3           static_structure.s_element(i,j)  = 1;
    15510   3           static_structure.s_element(i)(j) = 1;     
    15511   3  
    15512   3        end;
    15513   2  
    15514   2     end;
    15515   1  
    15516   1     if I ^= MAX_SIZE + 1 then
    15517   1        do;
    15518   2        put skip (one) list ('Loop termination error 2');
    15519   2        end;
    15520   1  
    15521   1     put skip(one) list('Loop 2 ended fine.');
    15522   1  
    15523   1  
    15524   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15525   2  
    15526   2        do J = 1 to INN_SIZE;
    15527   3  
    15528   3           /*******************************************************/
    15529   3           /* The following assignments are semantically the same */
    15530   3           /* and should produce IDENTICAL code.                  */
    15531   3           /*******************************************************/
    15532   3  
    15533   3           a_element(I,J)                 = 1;
    15534   3           a_element(I)(J)                = 1;
    15535   3           auto_structure(I).a_element(J) = 1;
    15536   3           auto_structure.a_element(I,J)  = 1;
    15537   3           auto_structure.a_element(I)(J) = 1;     
    15538   3  
    15539   3        end;
    15540   2  
    15541   2     end;
    15542   1  
    15543   1     if I ^= MAX_SIZE + 1 then
    15544   1        do;
    15545   2        put skip (one) list ('Loop termination error 3');
    15546   2        end;
    15547   1  
    15548   1     put skip(one) list('Loop 3 ended fine.');
    15549   1  
    15550   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15551   2  
    15552   2        do j = 1 to INN_SIZE;
    15553   3  
    15554   3           /*******************************************************/
    15555   3           /* The following assignments are semantically the same */
    15556   3           /* and should produce IDENTICAL code.                  */
    15557   3           /*******************************************************/
    15558   3  
    15559   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15560   3           a_element(i)(j)                = 1;
    15561   3           auto_structure(i).a_element(j) = 1;
    15562   3           auto_structure.a_element(i,j)  = 1;
    15563   3           auto_structure.a_element(i)(j) = 1;     
    15564   3  
    15565   3        end;
    15566   2  
    15567   2     end;
    15568   1  
    15569   1     if I ^= MAX_SIZE + 1 then
    15570   1        do;
    15571   2        put skip (one) list ('Loop termination error 4');
    15572   2        end;
    15573   1  
    15574   1     put skip(one) list('Loop 4 ended fine.');
    15575   1  
    15576   1     /****************************************************************/
    15577   1     /* This test ensures that the above code works when executed in */
    15578   1     /* a nested procedure.                                          */
    15579   1     /****************************************************************/
    15580   1  
    15581   1     put skip (one) list ('Im about to call the internal procedure now');
    15582   1  
    15583   1     call run_inner_proc;
    15584   1  
    15585   1   one = 1;
    15586   1  
    15587   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15588   2  
    15589   2        do J = 1 to INN_SIZE;
    15590   3  
    15591   3           /*******************************************************/
    15592   3           /* The following assignments are semantically the same */
    15593   3           /* and should produce IDENTICAL code.                  */
    15594   3           /*******************************************************/
    15595   3  
    15596   3           s_element(I,J)                   = 1;
    15597   3           s_element(I)(J)                  = 1;
    15598   3           static_structure(I).s_element(J) = 1;
    15599   3           static_structure.s_element(I,J)  = 1;
    15600   3           static_structure.s_element(I)(J) = 1;     
    15601   3  
    15602   3        end;
    15603   2  
    15604   2     end;
    15605   1  
    15606   1     if I ^= MAX_SIZE + 1 then
    15607   1        do;
    15608   2        put skip (one) list ('Loop termination error 1');
    15609   2        end;
    15610   1  
    15611   1     put skip(one) list('Loop 1 ended fine.');
    15612   1  
    15613   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15614   2  
    15615   2        do j = 1 to INN_SIZE;
    15616   3  
    15617   3           /*******************************************************/
    15618   3           /* The following assignments are semantically the same */
    15619   3           /* and should produce IDENTICAL code.                  */
    15620   3           /*******************************************************/
    15621   3  
    15622   3           s_element(i,j)                   = 1;
    15623   3           s_element(i)(j)                  = 1;
    15624   3           static_structure(i).s_element(j) = 1;
    15625   3           static_structure.s_element(i,j)  = 1;
    15626   3           static_structure.s_element(i)(j) = 1;     
    15627   3  
    15628   3        end;
    15629   2  
    15630   2     end;
    15631   1  
    15632   1     if I ^= MAX_SIZE + 1 then
    15633   1        do;
    15634   2        put skip (one) list ('Loop termination error 2');
    15635   2        end;
    15636   1  
    15637   1     put skip(one) list('Loop 2 ended fine.');
    15638   1  
    15639   1  
    15640   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15641   2  
    15642   2        do J = 1 to INN_SIZE;
    15643   3  
    15644   3           /*******************************************************/
    15645   3           /* The following assignments are semantically the same */
    15646   3           /* and should produce IDENTICAL code.                  */
    15647   3           /*******************************************************/
    15648   3  
    15649   3           a_element(I,J)                 = 1;
    15650   3           a_element(I)(J)                = 1;
    15651   3           auto_structure(I).a_element(J) = 1;
    15652   3           auto_structure.a_element(I,J)  = 1;
    15653   3           auto_structure.a_element(I)(J) = 1;     
    15654   3  
    15655   3        end;
    15656   2  
    15657   2     end;
    15658   1  
    15659   1     if I ^= MAX_SIZE + 1 then
    15660   1        do;
    15661   2        put skip (one) list ('Loop termination error 3');
    15662   2        end;
    15663   1  
    15664   1     put skip(one) list('Loop 3 ended fine.');
    15665   1  
    15666   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15667   2  
    15668   2        do j = 1 to INN_SIZE;
    15669   3  
    15670   3           /*******************************************************/
    15671   3           /* The following assignments are semantically the same */
    15672   3           /* and should produce IDENTICAL code.                  */
    15673   3           /*******************************************************/
    15674   3  
    15675   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15676   3           a_element(i)(j)                = 1;
    15677   3           auto_structure(i).a_element(j) = 1;
    15678   3           auto_structure.a_element(i,j)  = 1;
    15679   3           auto_structure.a_element(i)(j) = 1;     
    15680   3  
    15681   3        end;
    15682   2  
    15683   2     end;
    15684   1  
    15685   1     if I ^= MAX_SIZE + 1 then
    15686   1        do;
    15687   2        put skip (one) list ('Loop termination error 4');
    15688   2        end;
    15689   1  
    15690   1     put skip(one) list('Loop 4 ended fine.');
    15691   1  
    15692   1     /****************************************************************/
    15693   1     /* This test ensures that the above code works when executed in */
    15694   1     /* a nested procedure.                                          */
    15695   1     /****************************************************************/
    15696   1  
    15697   1     put skip (one) list ('Im about to call the internal procedure now');
    15698   1  
    15699   1     call run_inner_proc;
    15700   1  
    15701   1   one = 1;
    15702   1  
    15703   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15704   2  
    15705   2        do J = 1 to INN_SIZE;
    15706   3  
    15707   3           /*******************************************************/
    15708   3           /* The following assignments are semantically the same */
    15709   3           /* and should produce IDENTICAL code.                  */
    15710   3           /*******************************************************/
    15711   3  
    15712   3           s_element(I,J)                   = 1;
    15713   3           s_element(I)(J)                  = 1;
    15714   3           static_structure(I).s_element(J) = 1;
    15715   3           static_structure.s_element(I,J)  = 1;
    15716   3           static_structure.s_element(I)(J) = 1;     
    15717   3  
    15718   3        end;
    15719   2  
    15720   2     end;
    15721   1  
    15722   1     if I ^= MAX_SIZE + 1 then
    15723   1        do;
    15724   2        put skip (one) list ('Loop termination error 1');
    15725   2        end;
    15726   1  
    15727   1     put skip(one) list('Loop 1 ended fine.');
    15728   1  
    15729   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15730   2  
    15731   2        do j = 1 to INN_SIZE;
    15732   3  
    15733   3           /*******************************************************/
    15734   3           /* The following assignments are semantically the same */
    15735   3           /* and should produce IDENTICAL code.                  */
    15736   3           /*******************************************************/
    15737   3  
    15738   3           s_element(i,j)                   = 1;
    15739   3           s_element(i)(j)                  = 1;
    15740   3           static_structure(i).s_element(j) = 1;
    15741   3           static_structure.s_element(i,j)  = 1;
    15742   3           static_structure.s_element(i)(j) = 1;     
    15743   3  
    15744   3        end;
    15745   2  
    15746   2     end;
    15747   1  
    15748   1     if I ^= MAX_SIZE + 1 then
    15749   1        do;
    15750   2        put skip (one) list ('Loop termination error 2');
    15751   2        end;
    15752   1  
    15753   1     put skip(one) list('Loop 2 ended fine.');
    15754   1  
    15755   1  
    15756   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15757   2  
    15758   2        do J = 1 to INN_SIZE;
    15759   3  
    15760   3           /*******************************************************/
    15761   3           /* The following assignments are semantically the same */
    15762   3           /* and should produce IDENTICAL code.                  */
    15763   3           /*******************************************************/
    15764   3  
    15765   3           a_element(I,J)                 = 1;
    15766   3           a_element(I)(J)                = 1;
    15767   3           auto_structure(I).a_element(J) = 1;
    15768   3           auto_structure.a_element(I,J)  = 1;
    15769   3           auto_structure.a_element(I)(J) = 1;     
    15770   3  
    15771   3        end;
    15772   2  
    15773   2     end;
    15774   1  
    15775   1     if I ^= MAX_SIZE + 1 then
    15776   1        do;
    15777   2        put skip (one) list ('Loop termination error 3');
    15778   2        end;
    15779   1  
    15780   1     put skip(one) list('Loop 3 ended fine.');
    15781   1  
    15782   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15783   2  
    15784   2        do j = 1 to INN_SIZE;
    15785   3  
    15786   3           /*******************************************************/
    15787   3           /* The following assignments are semantically the same */
    15788   3           /* and should produce IDENTICAL code.                  */
    15789   3           /*******************************************************/
    15790   3  
    15791   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15792   3           a_element(i)(j)                = 1;
    15793   3           auto_structure(i).a_element(j) = 1;
    15794   3           auto_structure.a_element(i,j)  = 1;
    15795   3           auto_structure.a_element(i)(j) = 1;     
    15796   3  
    15797   3        end;
    15798   2  
    15799   2     end;
    15800   1  
    15801   1     if I ^= MAX_SIZE + 1 then
    15802   1        do;
    15803   2        put skip (one) list ('Loop termination error 4');
    15804   2        end;
    15805   1  
    15806   1     put skip(one) list('Loop 4 ended fine.');
    15807   1  
    15808   1     /****************************************************************/
    15809   1     /* This test ensures that the above code works when executed in */
    15810   1     /* a nested procedure.                                          */
    15811   1     /****************************************************************/
    15812   1  
    15813   1     put skip (one) list ('Im about to call the internal procedure now');
    15814   1  
    15815   1     call run_inner_proc;
    15816   1  
    15817   1   one = 1;
    15818   1  
    15819   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15820   2  
    15821   2        do J = 1 to INN_SIZE;
    15822   3  
    15823   3           /*******************************************************/
    15824   3           /* The following assignments are semantically the same */
    15825   3           /* and should produce IDENTICAL code.                  */
    15826   3           /*******************************************************/
    15827   3  
    15828   3           s_element(I,J)                   = 1;
    15829   3           s_element(I)(J)                  = 1;
    15830   3           static_structure(I).s_element(J) = 1;
    15831   3           static_structure.s_element(I,J)  = 1;
    15832   3           static_structure.s_element(I)(J) = 1;     
    15833   3  
    15834   3        end;
    15835   2  
    15836   2     end;
    15837   1  
    15838   1     if I ^= MAX_SIZE + 1 then
    15839   1        do;
    15840   2        put skip (one) list ('Loop termination error 1');
    15841   2        end;
    15842   1  
    15843   1     put skip(one) list('Loop 1 ended fine.');
    15844   1  
    15845   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15846   2  
    15847   2        do j = 1 to INN_SIZE;
    15848   3  
    15849   3           /*******************************************************/
    15850   3           /* The following assignments are semantically the same */
    15851   3           /* and should produce IDENTICAL code.                  */
    15852   3           /*******************************************************/
    15853   3  
    15854   3           s_element(i,j)                   = 1;
    15855   3           s_element(i)(j)                  = 1;
    15856   3           static_structure(i).s_element(j) = 1;
    15857   3           static_structure.s_element(i,j)  = 1;
    15858   3           static_structure.s_element(i)(j) = 1;     
    15859   3  
    15860   3        end;
    15861   2  
    15862   2     end;
    15863   1  
    15864   1     if I ^= MAX_SIZE + 1 then
    15865   1        do;
    15866   2        put skip (one) list ('Loop termination error 2');
    15867   2        end;
    15868   1  
    15869   1     put skip(one) list('Loop 2 ended fine.');
    15870   1  
    15871   1  
    15872   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15873   2  
    15874   2        do J = 1 to INN_SIZE;
    15875   3  
    15876   3           /*******************************************************/
    15877   3           /* The following assignments are semantically the same */
    15878   3           /* and should produce IDENTICAL code.                  */
    15879   3           /*******************************************************/
    15880   3  
    15881   3           a_element(I,J)                 = 1;
    15882   3           a_element(I)(J)                = 1;
    15883   3           auto_structure(I).a_element(J) = 1;
    15884   3           auto_structure.a_element(I,J)  = 1;
    15885   3           auto_structure.a_element(I)(J) = 1;     
    15886   3  
    15887   3        end;
    15888   2  
    15889   2     end;
    15890   1  
    15891   1     if I ^= MAX_SIZE + 1 then
    15892   1        do;
    15893   2        put skip (one) list ('Loop termination error 3');
    15894   2        end;
    15895   1  
    15896   1     put skip(one) list('Loop 3 ended fine.');
    15897   1  
    15898   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    15899   2  
    15900   2        do j = 1 to INN_SIZE;
    15901   3  
    15902   3           /*******************************************************/
    15903   3           /* The following assignments are semantically the same */
    15904   3           /* and should produce IDENTICAL code.                  */
    15905   3           /*******************************************************/
    15906   3  
    15907   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    15908   3           a_element(i)(j)                = 1;
    15909   3           auto_structure(i).a_element(j) = 1;
    15910   3           auto_structure.a_element(i,j)  = 1;
    15911   3           auto_structure.a_element(i)(j) = 1;     
    15912   3  
    15913   3        end;
    15914   2  
    15915   2     end;
    15916   1  
    15917   1     if I ^= MAX_SIZE + 1 then
    15918   1        do;
    15919   2        put skip (one) list ('Loop termination error 4');
    15920   2        end;
    15921   1  
    15922   1     put skip(one) list('Loop 4 ended fine.');
    15923   1  
    15924   1     /****************************************************************/
    15925   1     /* This test ensures that the above code works when executed in */
    15926   1     /* a nested procedure.                                          */
    15927   1     /****************************************************************/
    15928   1  
    15929   1     put skip (one) list ('Im about to call the internal procedure now');
    15930   1  
    15931   1     call run_inner_proc;
    15932   1  
    15933   1   one = 1;
    15934   1  
    15935   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    15936   2  
    15937   2        do J = 1 to INN_SIZE;
    15938   3  
    15939   3           /*******************************************************/
    15940   3           /* The following assignments are semantically the same */
    15941   3           /* and should produce IDENTICAL code.                  */
    15942   3           /*******************************************************/
    15943   3  
    15944   3           s_element(I,J)                   = 1;
    15945   3           s_element(I)(J)                  = 1;
    15946   3           static_structure(I).s_element(J) = 1;
    15947   3           static_structure.s_element(I,J)  = 1;
    15948   3           static_structure.s_element(I)(J) = 1;     
    15949   3  
    15950   3        end;
    15951   2  
    15952   2     end;
    15953   1  
    15954   1     if I ^= MAX_SIZE + 1 then
    15955   1        do;
    15956   2        put skip (one) list ('Loop termination error 1');
    15957   2        end;
    15958   1  
    15959   1     put skip(one) list('Loop 1 ended fine.');
    15960   1  
    15961   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    15962   2  
    15963   2        do j = 1 to INN_SIZE;
    15964   3  
    15965   3           /*******************************************************/
    15966   3           /* The following assignments are semantically the same */
    15967   3           /* and should produce IDENTICAL code.                  */
    15968   3           /*******************************************************/
    15969   3  
    15970   3           s_element(i,j)                   = 1;
    15971   3           s_element(i)(j)                  = 1;
    15972   3           static_structure(i).s_element(j) = 1;
    15973   3           static_structure.s_element(i,j)  = 1;
    15974   3           static_structure.s_element(i)(j) = 1;     
    15975   3  
    15976   3        end;
    15977   2  
    15978   2     end;
    15979   1  
    15980   1     if I ^= MAX_SIZE + 1 then
    15981   1        do;
    15982   2        put skip (one) list ('Loop termination error 2');
    15983   2        end;
    15984   1  
    15985   1     put skip(one) list('Loop 2 ended fine.');
    15986   1  
    15987   1  
    15988   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    15989   2  
    15990   2        do J = 1 to INN_SIZE;
    15991   3  
    15992   3           /*******************************************************/
    15993   3           /* The following assignments are semantically the same */
    15994   3           /* and should produce IDENTICAL code.                  */
    15995   3           /*******************************************************/
    15996   3  
    15997   3           a_element(I,J)                 = 1;
    15998   3           a_element(I)(J)                = 1;
    15999   3           auto_structure(I).a_element(J) = 1;
    16000   3           auto_structure.a_element(I,J)  = 1;
    16001   3           auto_structure.a_element(I)(J) = 1;     
    16002   3  
    16003   3        end;
    16004   2  
    16005   2     end;
    16006   1  
    16007   1     if I ^= MAX_SIZE + 1 then
    16008   1        do;
    16009   2        put skip (one) list ('Loop termination error 3');
    16010   2        end;
    16011   1  
    16012   1     put skip(one) list('Loop 3 ended fine.');
    16013   1  
    16014   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16015   2  
    16016   2        do j = 1 to INN_SIZE;
    16017   3  
    16018   3           /*******************************************************/
    16019   3           /* The following assignments are semantically the same */
    16020   3           /* and should produce IDENTICAL code.                  */
    16021   3           /*******************************************************/
    16022   3  
    16023   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16024   3           a_element(i)(j)                = 1;
    16025   3           auto_structure(i).a_element(j) = 1;
    16026   3           auto_structure.a_element(i,j)  = 1;
    16027   3           auto_structure.a_element(i)(j) = 1;     
    16028   3  
    16029   3        end;
    16030   2  
    16031   2     end;
    16032   1  
    16033   1     if I ^= MAX_SIZE + 1 then
    16034   1        do;
    16035   2        put skip (one) list ('Loop termination error 4');
    16036   2        end;
    16037   1  
    16038   1     put skip(one) list('Loop 4 ended fine.');
    16039   1  
    16040   1     /****************************************************************/
    16041   1     /* This test ensures that the above code works when executed in */
    16042   1     /* a nested procedure.                                          */
    16043   1     /****************************************************************/
    16044   1  
    16045   1     put skip (one) list ('Im about to call the internal procedure now');
    16046   1  
    16047   1     call run_inner_proc;
    16048   1  
    16049   1   one = 1;
    16050   1  
    16051   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16052   2  
    16053   2        do J = 1 to INN_SIZE;
    16054   3  
    16055   3           /*******************************************************/
    16056   3           /* The following assignments are semantically the same */
    16057   3           /* and should produce IDENTICAL code.                  */
    16058   3           /*******************************************************/
    16059   3  
    16060   3           s_element(I,J)                   = 1;
    16061   3           s_element(I)(J)                  = 1;
    16062   3           static_structure(I).s_element(J) = 1;
    16063   3           static_structure.s_element(I,J)  = 1;
    16064   3           static_structure.s_element(I)(J) = 1;     
    16065   3  
    16066   3        end;
    16067   2  
    16068   2     end;
    16069   1  
    16070   1     if I ^= MAX_SIZE + 1 then
    16071   1        do;
    16072   2        put skip (one) list ('Loop termination error 1');
    16073   2        end;
    16074   1  
    16075   1     put skip(one) list('Loop 1 ended fine.');
    16076   1  
    16077   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16078   2  
    16079   2        do j = 1 to INN_SIZE;
    16080   3  
    16081   3           /*******************************************************/
    16082   3           /* The following assignments are semantically the same */
    16083   3           /* and should produce IDENTICAL code.                  */
    16084   3           /*******************************************************/
    16085   3  
    16086   3           s_element(i,j)                   = 1;
    16087   3           s_element(i)(j)                  = 1;
    16088   3           static_structure(i).s_element(j) = 1;
    16089   3           static_structure.s_element(i,j)  = 1;
    16090   3           static_structure.s_element(i)(j) = 1;     
    16091   3  
    16092   3        end;
    16093   2  
    16094   2     end;
    16095   1  
    16096   1     if I ^= MAX_SIZE + 1 then
    16097   1        do;
    16098   2        put skip (one) list ('Loop termination error 2');
    16099   2        end;
    16100   1  
    16101   1     put skip(one) list('Loop 2 ended fine.');
    16102   1  
    16103   1  
    16104   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16105   2  
    16106   2        do J = 1 to INN_SIZE;
    16107   3  
    16108   3           /*******************************************************/
    16109   3           /* The following assignments are semantically the same */
    16110   3           /* and should produce IDENTICAL code.                  */
    16111   3           /*******************************************************/
    16112   3  
    16113   3           a_element(I,J)                 = 1;
    16114   3           a_element(I)(J)                = 1;
    16115   3           auto_structure(I).a_element(J) = 1;
    16116   3           auto_structure.a_element(I,J)  = 1;
    16117   3           auto_structure.a_element(I)(J) = 1;     
    16118   3  
    16119   3        end;
    16120   2  
    16121   2     end;
    16122   1  
    16123   1     if I ^= MAX_SIZE + 1 then
    16124   1        do;
    16125   2        put skip (one) list ('Loop termination error 3');
    16126   2        end;
    16127   1  
    16128   1     put skip(one) list('Loop 3 ended fine.');
    16129   1  
    16130   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16131   2  
    16132   2        do j = 1 to INN_SIZE;
    16133   3  
    16134   3           /*******************************************************/
    16135   3           /* The following assignments are semantically the same */
    16136   3           /* and should produce IDENTICAL code.                  */
    16137   3           /*******************************************************/
    16138   3  
    16139   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16140   3           a_element(i)(j)                = 1;
    16141   3           auto_structure(i).a_element(j) = 1;
    16142   3           auto_structure.a_element(i,j)  = 1;
    16143   3           auto_structure.a_element(i)(j) = 1;     
    16144   3  
    16145   3        end;
    16146   2  
    16147   2     end;
    16148   1  
    16149   1     if I ^= MAX_SIZE + 1 then
    16150   1        do;
    16151   2        put skip (one) list ('Loop termination error 4');
    16152   2        end;
    16153   1  
    16154   1     put skip(one) list('Loop 4 ended fine.');
    16155   1  
    16156   1     /****************************************************************/
    16157   1     /* This test ensures that the above code works when executed in */
    16158   1     /* a nested procedure.                                          */
    16159   1     /****************************************************************/
    16160   1  
    16161   1     put skip (one) list ('Im about to call the internal procedure now');
    16162   1  
    16163   1     call run_inner_proc;
    16164   1  
    16165   1   one = 1;
    16166   1  
    16167   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16168   2  
    16169   2        do J = 1 to INN_SIZE;
    16170   3  
    16171   3           /*******************************************************/
    16172   3           /* The following assignments are semantically the same */
    16173   3           /* and should produce IDENTICAL code.                  */
    16174   3           /*******************************************************/
    16175   3  
    16176   3           s_element(I,J)                   = 1;
    16177   3           s_element(I)(J)                  = 1;
    16178   3           static_structure(I).s_element(J) = 1;
    16179   3           static_structure.s_element(I,J)  = 1;
    16180   3           static_structure.s_element(I)(J) = 1;     
    16181   3  
    16182   3        end;
    16183   2  
    16184   2     end;
    16185   1  
    16186   1     if I ^= MAX_SIZE + 1 then
    16187   1        do;
    16188   2        put skip (one) list ('Loop termination error 1');
    16189   2        end;
    16190   1  
    16191   1     put skip(one) list('Loop 1 ended fine.');
    16192   1  
    16193   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16194   2  
    16195   2        do j = 1 to INN_SIZE;
    16196   3  
    16197   3           /*******************************************************/
    16198   3           /* The following assignments are semantically the same */
    16199   3           /* and should produce IDENTICAL code.                  */
    16200   3           /*******************************************************/
    16201   3  
    16202   3           s_element(i,j)                   = 1;
    16203   3           s_element(i)(j)                  = 1;
    16204   3           static_structure(i).s_element(j) = 1;
    16205   3           static_structure.s_element(i,j)  = 1;
    16206   3           static_structure.s_element(i)(j) = 1;     
    16207   3  
    16208   3        end;
    16209   2  
    16210   2     end;
    16211   1  
    16212   1     if I ^= MAX_SIZE + 1 then
    16213   1        do;
    16214   2        put skip (one) list ('Loop termination error 2');
    16215   2        end;
    16216   1  
    16217   1     put skip(one) list('Loop 2 ended fine.');
    16218   1  
    16219   1  
    16220   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16221   2  
    16222   2        do J = 1 to INN_SIZE;
    16223   3  
    16224   3           /*******************************************************/
    16225   3           /* The following assignments are semantically the same */
    16226   3           /* and should produce IDENTICAL code.                  */
    16227   3           /*******************************************************/
    16228   3  
    16229   3           a_element(I,J)                 = 1;
    16230   3           a_element(I)(J)                = 1;
    16231   3           auto_structure(I).a_element(J) = 1;
    16232   3           auto_structure.a_element(I,J)  = 1;
    16233   3           auto_structure.a_element(I)(J) = 1;     
    16234   3  
    16235   3        end;
    16236   2  
    16237   2     end;
    16238   1  
    16239   1     if I ^= MAX_SIZE + 1 then
    16240   1        do;
    16241   2        put skip (one) list ('Loop termination error 3');
    16242   2        end;
    16243   1  
    16244   1     put skip(one) list('Loop 3 ended fine.');
    16245   1  
    16246   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16247   2  
    16248   2        do j = 1 to INN_SIZE;
    16249   3  
    16250   3           /*******************************************************/
    16251   3           /* The following assignments are semantically the same */
    16252   3           /* and should produce IDENTICAL code.                  */
    16253   3           /*******************************************************/
    16254   3  
    16255   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16256   3           a_element(i)(j)                = 1;
    16257   3           auto_structure(i).a_element(j) = 1;
    16258   3           auto_structure.a_element(i,j)  = 1;
    16259   3           auto_structure.a_element(i)(j) = 1;     
    16260   3  
    16261   3        end;
    16262   2  
    16263   2     end;
    16264   1  
    16265   1     if I ^= MAX_SIZE + 1 then
    16266   1        do;
    16267   2        put skip (one) list ('Loop termination error 4');
    16268   2        end;
    16269   1  
    16270   1     put skip(one) list('Loop 4 ended fine.');
    16271   1  
    16272   1     /****************************************************************/
    16273   1     /* This test ensures that the above code works when executed in */
    16274   1     /* a nested procedure.                                          */
    16275   1     /****************************************************************/
    16276   1  
    16277   1     put skip (one) list ('Im about to call the internal procedure now');
    16278   1  
    16279   1     call run_inner_proc;
    16280   1  
    16281   1   one = 1;
    16282   1  
    16283   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16284   2  
    16285   2        do J = 1 to INN_SIZE;
    16286   3  
    16287   3           /*******************************************************/
    16288   3           /* The following assignments are semantically the same */
    16289   3           /* and should produce IDENTICAL code.                  */
    16290   3           /*******************************************************/
    16291   3  
    16292   3           s_element(I,J)                   = 1;
    16293   3           s_element(I)(J)                  = 1;
    16294   3           static_structure(I).s_element(J) = 1;
    16295   3           static_structure.s_element(I,J)  = 1;
    16296   3           static_structure.s_element(I)(J) = 1;     
    16297   3  
    16298   3        end;
    16299   2  
    16300   2     end;
    16301   1  
    16302   1     if I ^= MAX_SIZE + 1 then
    16303   1        do;
    16304   2        put skip (one) list ('Loop termination error 1');
    16305   2        end;
    16306   1  
    16307   1     put skip(one) list('Loop 1 ended fine.');
    16308   1  
    16309   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16310   2  
    16311   2        do j = 1 to INN_SIZE;
    16312   3  
    16313   3           /*******************************************************/
    16314   3           /* The following assignments are semantically the same */
    16315   3           /* and should produce IDENTICAL code.                  */
    16316   3           /*******************************************************/
    16317   3  
    16318   3           s_element(i,j)                   = 1;
    16319   3           s_element(i)(j)                  = 1;
    16320   3           static_structure(i).s_element(j) = 1;
    16321   3           static_structure.s_element(i,j)  = 1;
    16322   3           static_structure.s_element(i)(j) = 1;     
    16323   3  
    16324   3        end;
    16325   2  
    16326   2     end;
    16327   1  
    16328   1     if I ^= MAX_SIZE + 1 then
    16329   1        do;
    16330   2        put skip (one) list ('Loop termination error 2');
    16331   2        end;
    16332   1  
    16333   1     put skip(one) list('Loop 2 ended fine.');
    16334   1  
    16335   1  
    16336   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16337   2  
    16338   2        do J = 1 to INN_SIZE;
    16339   3  
    16340   3           /*******************************************************/
    16341   3           /* The following assignments are semantically the same */
    16342   3           /* and should produce IDENTICAL code.                  */
    16343   3           /*******************************************************/
    16344   3  
    16345   3           a_element(I,J)                 = 1;
    16346   3           a_element(I)(J)                = 1;
    16347   3           auto_structure(I).a_element(J) = 1;
    16348   3           auto_structure.a_element(I,J)  = 1;
    16349   3           auto_structure.a_element(I)(J) = 1;     
    16350   3  
    16351   3        end;
    16352   2  
    16353   2     end;
    16354   1  
    16355   1     if I ^= MAX_SIZE + 1 then
    16356   1        do;
    16357   2        put skip (one) list ('Loop termination error 3');
    16358   2        end;
    16359   1  
    16360   1     put skip(one) list('Loop 3 ended fine.');
    16361   1  
    16362   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16363   2  
    16364   2        do j = 1 to INN_SIZE;
    16365   3  
    16366   3           /*******************************************************/
    16367   3           /* The following assignments are semantically the same */
    16368   3           /* and should produce IDENTICAL code.                  */
    16369   3           /*******************************************************/
    16370   3  
    16371   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16372   3           a_element(i)(j)                = 1;
    16373   3           auto_structure(i).a_element(j) = 1;
    16374   3           auto_structure.a_element(i,j)  = 1;
    16375   3           auto_structure.a_element(i)(j) = 1;     
    16376   3  
    16377   3        end;
    16378   2  
    16379   2     end;
    16380   1  
    16381   1     if I ^= MAX_SIZE + 1 then
    16382   1        do;
    16383   2        put skip (one) list ('Loop termination error 4');
    16384   2        end;
    16385   1  
    16386   1     put skip(one) list('Loop 4 ended fine.');
    16387   1  
    16388   1     /****************************************************************/
    16389   1     /* This test ensures that the above code works when executed in */
    16390   1     /* a nested procedure.                                          */
    16391   1     /****************************************************************/
    16392   1  
    16393   1     put skip (one) list ('Im about to call the internal procedure now');
    16394   1  
    16395   1     call run_inner_proc;
    16396   1  
    16397   1   one = 1;
    16398   1  
    16399   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16400   2  
    16401   2        do J = 1 to INN_SIZE;
    16402   3  
    16403   3           /*******************************************************/
    16404   3           /* The following assignments are semantically the same */
    16405   3           /* and should produce IDENTICAL code.                  */
    16406   3           /*******************************************************/
    16407   3  
    16408   3           s_element(I,J)                   = 1;
    16409   3           s_element(I)(J)                  = 1;
    16410   3           static_structure(I).s_element(J) = 1;
    16411   3           static_structure.s_element(I,J)  = 1;
    16412   3           static_structure.s_element(I)(J) = 1;     
    16413   3  
    16414   3        end;
    16415   2  
    16416   2     end;
    16417   1  
    16418   1     if I ^= MAX_SIZE + 1 then
    16419   1        do;
    16420   2        put skip (one) list ('Loop termination error 1');
    16421   2        end;
    16422   1  
    16423   1     put skip(one) list('Loop 1 ended fine.');
    16424   1  
    16425   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16426   2  
    16427   2        do j = 1 to INN_SIZE;
    16428   3  
    16429   3           /*******************************************************/
    16430   3           /* The following assignments are semantically the same */
    16431   3           /* and should produce IDENTICAL code.                  */
    16432   3           /*******************************************************/
    16433   3  
    16434   3           s_element(i,j)                   = 1;
    16435   3           s_element(i)(j)                  = 1;
    16436   3           static_structure(i).s_element(j) = 1;
    16437   3           static_structure.s_element(i,j)  = 1;
    16438   3           static_structure.s_element(i)(j) = 1;     
    16439   3  
    16440   3        end;
    16441   2  
    16442   2     end;
    16443   1  
    16444   1     if I ^= MAX_SIZE + 1 then
    16445   1        do;
    16446   2        put skip (one) list ('Loop termination error 2');
    16447   2        end;
    16448   1  
    16449   1     put skip(one) list('Loop 2 ended fine.');
    16450   1  
    16451   1  
    16452   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16453   2  
    16454   2        do J = 1 to INN_SIZE;
    16455   3  
    16456   3           /*******************************************************/
    16457   3           /* The following assignments are semantically the same */
    16458   3           /* and should produce IDENTICAL code.                  */
    16459   3           /*******************************************************/
    16460   3  
    16461   3           a_element(I,J)                 = 1;
    16462   3           a_element(I)(J)                = 1;
    16463   3           auto_structure(I).a_element(J) = 1;
    16464   3           auto_structure.a_element(I,J)  = 1;
    16465   3           auto_structure.a_element(I)(J) = 1;     
    16466   3  
    16467   3        end;
    16468   2  
    16469   2     end;
    16470   1  
    16471   1     if I ^= MAX_SIZE + 1 then
    16472   1        do;
    16473   2        put skip (one) list ('Loop termination error 3');
    16474   2        end;
    16475   1  
    16476   1     put skip(one) list('Loop 3 ended fine.');
    16477   1  
    16478   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16479   2  
    16480   2        do j = 1 to INN_SIZE;
    16481   3  
    16482   3           /*******************************************************/
    16483   3           /* The following assignments are semantically the same */
    16484   3           /* and should produce IDENTICAL code.                  */
    16485   3           /*******************************************************/
    16486   3  
    16487   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16488   3           a_element(i)(j)                = 1;
    16489   3           auto_structure(i).a_element(j) = 1;
    16490   3           auto_structure.a_element(i,j)  = 1;
    16491   3           auto_structure.a_element(i)(j) = 1;     
    16492   3  
    16493   3        end;
    16494   2  
    16495   2     end;
    16496   1  
    16497   1     if I ^= MAX_SIZE + 1 then
    16498   1        do;
    16499   2        put skip (one) list ('Loop termination error 4');
    16500   2        end;
    16501   1  
    16502   1     put skip(one) list('Loop 4 ended fine.');
    16503   1  
    16504   1     /****************************************************************/
    16505   1     /* This test ensures that the above code works when executed in */
    16506   1     /* a nested procedure.                                          */
    16507   1     /****************************************************************/
    16508   1  
    16509   1     put skip (one) list ('Im about to call the internal procedure now');
    16510   1  
    16511   1     call run_inner_proc;
    16512   1  
    16513   1   one = 1;
    16514   1  
    16515   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16516   2  
    16517   2        do J = 1 to INN_SIZE;
    16518   3  
    16519   3           /*******************************************************/
    16520   3           /* The following assignments are semantically the same */
    16521   3           /* and should produce IDENTICAL code.                  */
    16522   3           /*******************************************************/
    16523   3  
    16524   3           s_element(I,J)                   = 1;
    16525   3           s_element(I)(J)                  = 1;
    16526   3           static_structure(I).s_element(J) = 1;
    16527   3           static_structure.s_element(I,J)  = 1;
    16528   3           static_structure.s_element(I)(J) = 1;     
    16529   3  
    16530   3        end;
    16531   2  
    16532   2     end;
    16533   1  
    16534   1     if I ^= MAX_SIZE + 1 then
    16535   1        do;
    16536   2        put skip (one) list ('Loop termination error 1');
    16537   2        end;
    16538   1  
    16539   1     put skip(one) list('Loop 1 ended fine.');
    16540   1  
    16541   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16542   2  
    16543   2        do j = 1 to INN_SIZE;
    16544   3  
    16545   3           /*******************************************************/
    16546   3           /* The following assignments are semantically the same */
    16547   3           /* and should produce IDENTICAL code.                  */
    16548   3           /*******************************************************/
    16549   3  
    16550   3           s_element(i,j)                   = 1;
    16551   3           s_element(i)(j)                  = 1;
    16552   3           static_structure(i).s_element(j) = 1;
    16553   3           static_structure.s_element(i,j)  = 1;
    16554   3           static_structure.s_element(i)(j) = 1;     
    16555   3  
    16556   3        end;
    16557   2  
    16558   2     end;
    16559   1  
    16560   1     if I ^= MAX_SIZE + 1 then
    16561   1        do;
    16562   2        put skip (one) list ('Loop termination error 2');
    16563   2        end;
    16564   1  
    16565   1     put skip(one) list('Loop 2 ended fine.');
    16566   1  
    16567   1  
    16568   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16569   2  
    16570   2        do J = 1 to INN_SIZE;
    16571   3  
    16572   3           /*******************************************************/
    16573   3           /* The following assignments are semantically the same */
    16574   3           /* and should produce IDENTICAL code.                  */
    16575   3           /*******************************************************/
    16576   3  
    16577   3           a_element(I,J)                 = 1;
    16578   3           a_element(I)(J)                = 1;
    16579   3           auto_structure(I).a_element(J) = 1;
    16580   3           auto_structure.a_element(I,J)  = 1;
    16581   3           auto_structure.a_element(I)(J) = 1;     
    16582   3  
    16583   3        end;
    16584   2  
    16585   2     end;
    16586   1  
    16587   1     if I ^= MAX_SIZE + 1 then
    16588   1        do;
    16589   2        put skip (one) list ('Loop termination error 3');
    16590   2        end;
    16591   1  
    16592   1     put skip(one) list('Loop 3 ended fine.');
    16593   1  
    16594   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16595   2  
    16596   2        do j = 1 to INN_SIZE;
    16597   3  
    16598   3           /*******************************************************/
    16599   3           /* The following assignments are semantically the same */
    16600   3           /* and should produce IDENTICAL code.                  */
    16601   3           /*******************************************************/
    16602   3  
    16603   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16604   3           a_element(i)(j)                = 1;
    16605   3           auto_structure(i).a_element(j) = 1;
    16606   3           auto_structure.a_element(i,j)  = 1;
    16607   3           auto_structure.a_element(i)(j) = 1;     
    16608   3  
    16609   3        end;
    16610   2  
    16611   2     end;
    16612   1  
    16613   1     if I ^= MAX_SIZE + 1 then
    16614   1        do;
    16615   2        put skip (one) list ('Loop termination error 4');
    16616   2        end;
    16617   1  
    16618   1     put skip(one) list('Loop 4 ended fine.');
    16619   1  
    16620   1     /****************************************************************/
    16621   1     /* This test ensures that the above code works when executed in */
    16622   1     /* a nested procedure.                                          */
    16623   1     /****************************************************************/
    16624   1  
    16625   1     put skip (one) list ('Im about to call the internal procedure now');
    16626   1  
    16627   1     call run_inner_proc;
    16628   1  
    16629   1   one = 1;
    16630   1  
    16631   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16632   2  
    16633   2        do J = 1 to INN_SIZE;
    16634   3  
    16635   3           /*******************************************************/
    16636   3           /* The following assignments are semantically the same */
    16637   3           /* and should produce IDENTICAL code.                  */
    16638   3           /*******************************************************/
    16639   3  
    16640   3           s_element(I,J)                   = 1;
    16641   3           s_element(I)(J)                  = 1;
    16642   3           static_structure(I).s_element(J) = 1;
    16643   3           static_structure.s_element(I,J)  = 1;
    16644   3           static_structure.s_element(I)(J) = 1;     
    16645   3  
    16646   3        end;
    16647   2  
    16648   2     end;
    16649   1  
    16650   1     if I ^= MAX_SIZE + 1 then
    16651   1        do;
    16652   2        put skip (one) list ('Loop termination error 1');
    16653   2        end;
    16654   1  
    16655   1     put skip(one) list('Loop 1 ended fine.');
    16656   1  
    16657   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16658   2  
    16659   2        do j = 1 to INN_SIZE;
    16660   3  
    16661   3           /*******************************************************/
    16662   3           /* The following assignments are semantically the same */
    16663   3           /* and should produce IDENTICAL code.                  */
    16664   3           /*******************************************************/
    16665   3  
    16666   3           s_element(i,j)                   = 1;
    16667   3           s_element(i)(j)                  = 1;
    16668   3           static_structure(i).s_element(j) = 1;
    16669   3           static_structure.s_element(i,j)  = 1;
    16670   3           static_structure.s_element(i)(j) = 1;     
    16671   3  
    16672   3        end;
    16673   2  
    16674   2     end;
    16675   1  
    16676   1     if I ^= MAX_SIZE + 1 then
    16677   1        do;
    16678   2        put skip (one) list ('Loop termination error 2');
    16679   2        end;
    16680   1  
    16681   1     put skip(one) list('Loop 2 ended fine.');
    16682   1  
    16683   1  
    16684   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16685   2  
    16686   2        do J = 1 to INN_SIZE;
    16687   3  
    16688   3           /*******************************************************/
    16689   3           /* The following assignments are semantically the same */
    16690   3           /* and should produce IDENTICAL code.                  */
    16691   3           /*******************************************************/
    16692   3  
    16693   3           a_element(I,J)                 = 1;
    16694   3           a_element(I)(J)                = 1;
    16695   3           auto_structure(I).a_element(J) = 1;
    16696   3           auto_structure.a_element(I,J)  = 1;
    16697   3           auto_structure.a_element(I)(J) = 1;     
    16698   3  
    16699   3        end;
    16700   2  
    16701   2     end;
    16702   1  
    16703   1     if I ^= MAX_SIZE + 1 then
    16704   1        do;
    16705   2        put skip (one) list ('Loop termination error 3');
    16706   2        end;
    16707   1  
    16708   1     put skip(one) list('Loop 3 ended fine.');
    16709   1  
    16710   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16711   2  
    16712   2        do j = 1 to INN_SIZE;
    16713   3  
    16714   3           /*******************************************************/
    16715   3           /* The following assignments are semantically the same */
    16716   3           /* and should produce IDENTICAL code.                  */
    16717   3           /*******************************************************/
    16718   3  
    16719   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16720   3           a_element(i)(j)                = 1;
    16721   3           auto_structure(i).a_element(j) = 1;
    16722   3           auto_structure.a_element(i,j)  = 1;
    16723   3           auto_structure.a_element(i)(j) = 1;     
    16724   3  
    16725   3        end;
    16726   2  
    16727   2     end;
    16728   1  
    16729   1     if I ^= MAX_SIZE + 1 then
    16730   1        do;
    16731   2        put skip (one) list ('Loop termination error 4');
    16732   2        end;
    16733   1  
    16734   1     put skip(one) list('Loop 4 ended fine.');
    16735   1  
    16736   1     /****************************************************************/
    16737   1     /* This test ensures that the above code works when executed in */
    16738   1     /* a nested procedure.                                          */
    16739   1     /****************************************************************/
    16740   1  
    16741   1     put skip (one) list ('Im about to call the internal procedure now');
    16742   1  
    16743   1     call run_inner_proc;
    16744   1  
    16745   1   one = 1;
    16746   1  
    16747   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16748   2  
    16749   2        do J = 1 to INN_SIZE;
    16750   3  
    16751   3           /*******************************************************/
    16752   3           /* The following assignments are semantically the same */
    16753   3           /* and should produce IDENTICAL code.                  */
    16754   3           /*******************************************************/
    16755   3  
    16756   3           s_element(I,J)                   = 1;
    16757   3           s_element(I)(J)                  = 1;
    16758   3           static_structure(I).s_element(J) = 1;
    16759   3           static_structure.s_element(I,J)  = 1;
    16760   3           static_structure.s_element(I)(J) = 1;     
    16761   3  
    16762   3        end;
    16763   2  
    16764   2     end;
    16765   1  
    16766   1     if I ^= MAX_SIZE + 1 then
    16767   1        do;
    16768   2        put skip (one) list ('Loop termination error 1');
    16769   2        end;
    16770   1  
    16771   1     put skip(one) list('Loop 1 ended fine.');
    16772   1  
    16773   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16774   2  
    16775   2        do j = 1 to INN_SIZE;
    16776   3  
    16777   3           /*******************************************************/
    16778   3           /* The following assignments are semantically the same */
    16779   3           /* and should produce IDENTICAL code.                  */
    16780   3           /*******************************************************/
    16781   3  
    16782   3           s_element(i,j)                   = 1;
    16783   3           s_element(i)(j)                  = 1;
    16784   3           static_structure(i).s_element(j) = 1;
    16785   3           static_structure.s_element(i,j)  = 1;
    16786   3           static_structure.s_element(i)(j) = 1;     
    16787   3  
    16788   3        end;
    16789   2  
    16790   2     end;
    16791   1  
    16792   1     if I ^= MAX_SIZE + 1 then
    16793   1        do;
    16794   2        put skip (one) list ('Loop termination error 2');
    16795   2        end;
    16796   1  
    16797   1     put skip(one) list('Loop 2 ended fine.');

Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   4

    16798   1  
    16799   1  
    16800   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16801   2  
    16802   2        do J = 1 to INN_SIZE;
    16803   3  
    16804   3           /*******************************************************/
    16805   3           /* The following assignments are semantically the same */
    16806   3           /* and should produce IDENTICAL code.                  */
    16807   3           /*******************************************************/
    16808   3  
    16809   3           a_element(I,J)                 = 1;
    16810   3           a_element(I)(J)                = 1;
    16811   3           auto_structure(I).a_element(J) = 1;
    16812   3           auto_structure.a_element(I,J)  = 1;
    16813   3           auto_structure.a_element(I)(J) = 1;     
    16814   3  
    16815   3        end;
    16816   2  
    16817   2     end;
    16818   1  
    16819   1     if I ^= MAX_SIZE + 1 then
    16820   1        do;
    16821   2        put skip (one) list ('Loop termination error 3');
    16822   2        end;
    16823   1  
    16824   1     put skip(one) list('Loop 3 ended fine.');
    16825   1  
    16826   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16827   2  
    16828   2        do j = 1 to INN_SIZE;
    16829   3  
    16830   3           /*******************************************************/
    16831   3           /* The following assignments are semantically the same */
    16832   3           /* and should produce IDENTICAL code.                  */
    16833   3           /*******************************************************/
    16834   3  
    16835   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16836   3           a_element(i)(j)                = 1;
    16837   3           auto_structure(i).a_element(j) = 1;
    16838   3           auto_structure.a_element(i,j)  = 1;
    16839   3           auto_structure.a_element(i)(j) = 1;     
    16840   3  
    16841   3        end;
    16842   2  
    16843   2     end;
    16844   1  
    16845   1     if I ^= MAX_SIZE + 1 then
    16846   1        do;
    16847   2        put skip (one) list ('Loop termination error 4');
    16848   2        end;
    16849   1  
    16850   1     put skip(one) list('Loop 4 ended fine.');
    16851   1  
    16852   1     /****************************************************************/
    16853   1     /* This test ensures that the above code works when executed in */
    16854   1     /* a nested procedure.                                          */
    16855   1     /****************************************************************/
    16856   1  
    16857   1     put skip (one) list ('Im about to call the internal procedure now');
    16858   1  
    16859   1     call run_inner_proc;
    16860   1  
    16861   1   one = 1;
    16862   1  
    16863   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16864   2  
    16865   2        do J = 1 to INN_SIZE;
    16866   3  
    16867   3           /*******************************************************/
    16868   3           /* The following assignments are semantically the same */
    16869   3           /* and should produce IDENTICAL code.                  */
    16870   3           /*******************************************************/
    16871   3  
    16872   3           s_element(I,J)                   = 1;
    16873   3           s_element(I)(J)                  = 1;
    16874   3           static_structure(I).s_element(J) = 1;
    16875   3           static_structure.s_element(I,J)  = 1;
    16876   3           static_structure.s_element(I)(J) = 1;     
    16877   3  
    16878   3        end;
    16879   2  
    16880   2     end;
    16881   1  
    16882   1     if I ^= MAX_SIZE + 1 then
    16883   1        do;
    16884   2        put skip (one) list ('Loop termination error 1');
    16885   2        end;
    16886   1  
    16887   1     put skip(one) list('Loop 1 ended fine.');
    16888   1  
    16889   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    16890   2  
    16891   2        do j = 1 to INN_SIZE;
    16892   3  
    16893   3           /*******************************************************/
    16894   3           /* The following assignments are semantically the same */
    16895   3           /* and should produce IDENTICAL code.                  */
    16896   3           /*******************************************************/
    16897   3  
    16898   3           s_element(i,j)                   = 1;
    16899   3           s_element(i)(j)                  = 1;
    16900   3           static_structure(i).s_element(j) = 1;
    16901   3           static_structure.s_element(i,j)  = 1;
    16902   3           static_structure.s_element(i)(j) = 1;     
    16903   3  
    16904   3        end;
    16905   2  
    16906   2     end;
    16907   1  
    16908   1     if I ^= MAX_SIZE + 1 then
    16909   1        do;
    16910   2        put skip (one) list ('Loop termination error 2');
    16911   2        end;
    16912   1  
    16913   1     put skip(one) list('Loop 2 ended fine.');
    16914   1  
    16915   1  
    16916   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    16917   2  
    16918   2        do J = 1 to INN_SIZE;
    16919   3  
    16920   3           /*******************************************************/
    16921   3           /* The following assignments are semantically the same */
    16922   3           /* and should produce IDENTICAL code.                  */
    16923   3           /*******************************************************/
    16924   3  
    16925   3           a_element(I,J)                 = 1;
    16926   3           a_element(I)(J)                = 1;
    16927   3           auto_structure(I).a_element(J) = 1;
    16928   3           auto_structure.a_element(I,J)  = 1;
    16929   3           auto_structure.a_element(I)(J) = 1;     
    16930   3  
    16931   3        end;
    16932   2  
    16933   2     end;
    16934   1  
    16935   1     if I ^= MAX_SIZE + 1 then
    16936   1        do;
    16937   2        put skip (one) list ('Loop termination error 3');
    16938   2        end;
    16939   1  
    16940   1     put skip(one) list('Loop 3 ended fine.');
    16941   1  
    16942   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    16943   2  
    16944   2        do j = 1 to INN_SIZE;
    16945   3  
    16946   3           /*******************************************************/
    16947   3           /* The following assignments are semantically the same */
    16948   3           /* and should produce IDENTICAL code.                  */
    16949   3           /*******************************************************/
    16950   3  
    16951   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    16952   3           a_element(i)(j)                = 1;
    16953   3           auto_structure(i).a_element(j) = 1;
    16954   3           auto_structure.a_element(i,j)  = 1;
    16955   3           auto_structure.a_element(i)(j) = 1;     
    16956   3  
    16957   3        end;
    16958   2  
    16959   2     end;
    16960   1  
    16961   1     if I ^= MAX_SIZE + 1 then
    16962   1        do;
    16963   2        put skip (one) list ('Loop termination error 4');
    16964   2        end;
    16965   1  
    16966   1     put skip(one) list('Loop 4 ended fine.');
    16967   1  
    16968   1     /****************************************************************/
    16969   1     /* This test ensures that the above code works when executed in */
    16970   1     /* a nested procedure.                                          */
    16971   1     /****************************************************************/
    16972   1  
    16973   1     put skip (one) list ('Im about to call the internal procedure now');
    16974   1  
    16975   1     call run_inner_proc;
    16976   1  
    16977   1   one = 1;
    16978   1  
    16979   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    16980   2  
    16981   2        do J = 1 to INN_SIZE;
    16982   3  
    16983   3           /*******************************************************/
    16984   3           /* The following assignments are semantically the same */
    16985   3           /* and should produce IDENTICAL code.                  */
    16986   3           /*******************************************************/
    16987   3  
    16988   3           s_element(I,J)                   = 1;
    16989   3           s_element(I)(J)                  = 1;
    16990   3           static_structure(I).s_element(J) = 1;
    16991   3           static_structure.s_element(I,J)  = 1;
    16992   3           static_structure.s_element(I)(J) = 1;     
    16993   3  
    16994   3        end;
    16995   2  
    16996   2     end;
    16997   1  
    16998   1     if I ^= MAX_SIZE + 1 then
    16999   1        do;
    17000   2        put skip (one) list ('Loop termination error 1');
    17001   2        end;
    17002   1  
    17003   1     put skip(one) list('Loop 1 ended fine.');
    17004   1  
    17005   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17006   2  
    17007   2        do j = 1 to INN_SIZE;
    17008   3  
    17009   3           /*******************************************************/
    17010   3           /* The following assignments are semantically the same */
    17011   3           /* and should produce IDENTICAL code.                  */
    17012   3           /*******************************************************/
    17013   3  
    17014   3           s_element(i,j)                   = 1;
    17015   3           s_element(i)(j)                  = 1;
    17016   3           static_structure(i).s_element(j) = 1;
    17017   3           static_structure.s_element(i,j)  = 1;
    17018   3           static_structure.s_element(i)(j) = 1;     
    17019   3  
    17020   3        end;
    17021   2  
    17022   2     end;
    17023   1  
    17024   1     if I ^= MAX_SIZE + 1 then
    17025   1        do;
    17026   2        put skip (one) list ('Loop termination error 2');
    17027   2        end;
    17028   1  
    17029   1     put skip(one) list('Loop 2 ended fine.');
    17030   1  
    17031   1  
    17032   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17033   2  
    17034   2        do J = 1 to INN_SIZE;
    17035   3  
    17036   3           /*******************************************************/
    17037   3           /* The following assignments are semantically the same */
    17038   3           /* and should produce IDENTICAL code.                  */
    17039   3           /*******************************************************/
    17040   3  
    17041   3           a_element(I,J)                 = 1;
    17042   3           a_element(I)(J)                = 1;
    17043   3           auto_structure(I).a_element(J) = 1;
    17044   3           auto_structure.a_element(I,J)  = 1;
    17045   3           auto_structure.a_element(I)(J) = 1;     
    17046   3  
    17047   3        end;
    17048   2  
    17049   2     end;
    17050   1  
    17051   1     if I ^= MAX_SIZE + 1 then
    17052   1        do;
    17053   2        put skip (one) list ('Loop termination error 3');
    17054   2        end;
    17055   1  
    17056   1     put skip(one) list('Loop 3 ended fine.');
    17057   1  
    17058   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17059   2  
    17060   2        do j = 1 to INN_SIZE;
    17061   3  
    17062   3           /*******************************************************/
    17063   3           /* The following assignments are semantically the same */
    17064   3           /* and should produce IDENTICAL code.                  */
    17065   3           /*******************************************************/
    17066   3  
    17067   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17068   3           a_element(i)(j)                = 1;
    17069   3           auto_structure(i).a_element(j) = 1;
    17070   3           auto_structure.a_element(i,j)  = 1;
    17071   3           auto_structure.a_element(i)(j) = 1;     
    17072   3  
    17073   3        end;
    17074   2  
    17075   2     end;
    17076   1  
    17077   1     if I ^= MAX_SIZE + 1 then
    17078   1        do;
    17079   2        put skip (one) list ('Loop termination error 4');
    17080   2        end;
    17081   1  
    17082   1     put skip(one) list('Loop 4 ended fine.');
    17083   1  
    17084   1     /****************************************************************/
    17085   1     /* This test ensures that the above code works when executed in */
    17086   1     /* a nested procedure.                                          */
    17087   1     /****************************************************************/
    17088   1  
    17089   1     put skip (one) list ('Im about to call the internal procedure now');
    17090   1  
    17091   1     call run_inner_proc;
    17092   1  
    17093   1   one = 1;
    17094   1  
    17095   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17096   2  
    17097   2        do J = 1 to INN_SIZE;
    17098   3  
    17099   3           /*******************************************************/
    17100   3           /* The following assignments are semantically the same */
    17101   3           /* and should produce IDENTICAL code.                  */
    17102   3           /*******************************************************/
    17103   3  
    17104   3           s_element(I,J)                   = 1;
    17105   3           s_element(I)(J)                  = 1;
    17106   3           static_structure(I).s_element(J) = 1;
    17107   3           static_structure.s_element(I,J)  = 1;
    17108   3           static_structure.s_element(I)(J) = 1;     
    17109   3  
    17110   3        end;
    17111   2  
    17112   2     end;
    17113   1  
    17114   1     if I ^= MAX_SIZE + 1 then
    17115   1        do;
    17116   2        put skip (one) list ('Loop termination error 1');
    17117   2        end;
    17118   1  
    17119   1     put skip(one) list('Loop 1 ended fine.');
    17120   1  
    17121   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17122   2  
    17123   2        do j = 1 to INN_SIZE;
    17124   3  
    17125   3           /*******************************************************/
    17126   3           /* The following assignments are semantically the same */
    17127   3           /* and should produce IDENTICAL code.                  */
    17128   3           /*******************************************************/
    17129   3  
    17130   3           s_element(i,j)                   = 1;
    17131   3           s_element(i)(j)                  = 1;
    17132   3           static_structure(i).s_element(j) = 1;
    17133   3           static_structure.s_element(i,j)  = 1;
    17134   3           static_structure.s_element(i)(j) = 1;     
    17135   3  
    17136   3        end;
    17137   2  
    17138   2     end;
    17139   1  
    17140   1     if I ^= MAX_SIZE + 1 then
    17141   1        do;
    17142   2        put skip (one) list ('Loop termination error 2');
    17143   2        end;
    17144   1  
    17145   1     put skip(one) list('Loop 2 ended fine.');
    17146   1  
    17147   1  
    17148   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17149   2  
    17150   2        do J = 1 to INN_SIZE;
    17151   3  
    17152   3           /*******************************************************/
    17153   3           /* The following assignments are semantically the same */
    17154   3           /* and should produce IDENTICAL code.                  */
    17155   3           /*******************************************************/
    17156   3  
    17157   3           a_element(I,J)                 = 1;
    17158   3           a_element(I)(J)                = 1;
    17159   3           auto_structure(I).a_element(J) = 1;
    17160   3           auto_structure.a_element(I,J)  = 1;
    17161   3           auto_structure.a_element(I)(J) = 1;     
    17162   3  
    17163   3        end;
    17164   2  
    17165   2     end;
    17166   1  
    17167   1     if I ^= MAX_SIZE + 1 then
    17168   1        do;
    17169   2        put skip (one) list ('Loop termination error 3');
    17170   2        end;
    17171   1  
    17172   1     put skip(one) list('Loop 3 ended fine.');
    17173   1  
    17174   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17175   2  
    17176   2        do j = 1 to INN_SIZE;
    17177   3  
    17178   3           /*******************************************************/
    17179   3           /* The following assignments are semantically the same */
    17180   3           /* and should produce IDENTICAL code.                  */
    17181   3           /*******************************************************/
    17182   3  
    17183   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17184   3           a_element(i)(j)                = 1;
    17185   3           auto_structure(i).a_element(j) = 1;
    17186   3           auto_structure.a_element(i,j)  = 1;
    17187   3           auto_structure.a_element(i)(j) = 1;     
    17188   3  
    17189   3        end;
    17190   2  
    17191   2     end;
    17192   1  
    17193   1     if I ^= MAX_SIZE + 1 then
    17194   1        do;
    17195   2        put skip (one) list ('Loop termination error 4');
    17196   2        end;
    17197   1  
    17198   1     put skip(one) list('Loop 4 ended fine.');
    17199   1  
    17200   1     /****************************************************************/
    17201   1     /* This test ensures that the above code works when executed in */
    17202   1     /* a nested procedure.                                          */
    17203   1     /****************************************************************/
    17204   1  
    17205   1     put skip (one) list ('Im about to call the internal procedure now');
    17206   1  
    17207   1     call run_inner_proc;
    17208   1  
    17209   1   one = 1;
    17210   1  
    17211   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17212   2  
    17213   2        do J = 1 to INN_SIZE;
    17214   3  
    17215   3           /*******************************************************/
    17216   3           /* The following assignments are semantically the same */
    17217   3           /* and should produce IDENTICAL code.                  */
    17218   3           /*******************************************************/
    17219   3  
    17220   3           s_element(I,J)                   = 1;
    17221   3           s_element(I)(J)                  = 1;
    17222   3           static_structure(I).s_element(J) = 1;
    17223   3           static_structure.s_element(I,J)  = 1;
    17224   3           static_structure.s_element(I)(J) = 1;     
    17225   3  
    17226   3        end;
    17227   2  
    17228   2     end;
    17229   1  
    17230   1     if I ^= MAX_SIZE + 1 then
    17231   1        do;
    17232   2        put skip (one) list ('Loop termination error 1');
    17233   2        end;
    17234   1  
    17235   1     put skip(one) list('Loop 1 ended fine.');
    17236   1  
    17237   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17238   2  
    17239   2        do j = 1 to INN_SIZE;
    17240   3  
    17241   3           /*******************************************************/
    17242   3           /* The following assignments are semantically the same */
    17243   3           /* and should produce IDENTICAL code.                  */
    17244   3           /*******************************************************/
    17245   3  
    17246   3           s_element(i,j)                   = 1;
    17247   3           s_element(i)(j)                  = 1;
    17248   3           static_structure(i).s_element(j) = 1;
    17249   3           static_structure.s_element(i,j)  = 1;
    17250   3           static_structure.s_element(i)(j) = 1;     
    17251   3  
    17252   3        end;
    17253   2  
    17254   2     end;
    17255   1  
    17256   1     if I ^= MAX_SIZE + 1 then
    17257   1        do;
    17258   2        put skip (one) list ('Loop termination error 2');
    17259   2        end;
    17260   1  
    17261   1     put skip(one) list('Loop 2 ended fine.');
    17262   1  
    17263   1  
    17264   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17265   2  
    17266   2        do J = 1 to INN_SIZE;
    17267   3  
    17268   3           /*******************************************************/
    17269   3           /* The following assignments are semantically the same */
    17270   3           /* and should produce IDENTICAL code.                  */
    17271   3           /*******************************************************/
    17272   3  
    17273   3           a_element(I,J)                 = 1;
    17274   3           a_element(I)(J)                = 1;
    17275   3           auto_structure(I).a_element(J) = 1;
    17276   3           auto_structure.a_element(I,J)  = 1;
    17277   3           auto_structure.a_element(I)(J) = 1;     
    17278   3  
    17279   3        end;
    17280   2  
    17281   2     end;
    17282   1  
    17283   1     if I ^= MAX_SIZE + 1 then
    17284   1        do;
    17285   2        put skip (one) list ('Loop termination error 3');
    17286   2        end;
    17287   1  
    17288   1     put skip(one) list('Loop 3 ended fine.');
    17289   1  
    17290   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17291   2  
    17292   2        do j = 1 to INN_SIZE;
    17293   3  
    17294   3           /*******************************************************/
    17295   3           /* The following assignments are semantically the same */
    17296   3           /* and should produce IDENTICAL code.                  */
    17297   3           /*******************************************************/
    17298   3  
    17299   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17300   3           a_element(i)(j)                = 1;
    17301   3           auto_structure(i).a_element(j) = 1;
    17302   3           auto_structure.a_element(i,j)  = 1;
    17303   3           auto_structure.a_element(i)(j) = 1;     
    17304   3  
    17305   3        end;
    17306   2  
    17307   2     end;
    17308   1  
    17309   1     if I ^= MAX_SIZE + 1 then
    17310   1        do;
    17311   2        put skip (one) list ('Loop termination error 4');
    17312   2        end;
    17313   1  
    17314   1     put skip(one) list('Loop 4 ended fine.');
    17315   1  
    17316   1     /****************************************************************/
    17317   1     /* This test ensures that the above code works when executed in */
    17318   1     /* a nested procedure.                                          */
    17319   1     /****************************************************************/
    17320   1  
    17321   1     put skip (one) list ('Im about to call the internal procedure now');
    17322   1  
    17323   1     call run_inner_proc;
    17324   1  
    17325   1   one = 1;
    17326   1  
    17327   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17328   2  
    17329   2        do J = 1 to INN_SIZE;
    17330   3  
    17331   3           /*******************************************************/
    17332   3           /* The following assignments are semantically the same */
    17333   3           /* and should produce IDENTICAL code.                  */
    17334   3           /*******************************************************/
    17335   3  
    17336   3           s_element(I,J)                   = 1;
    17337   3           s_element(I)(J)                  = 1;
    17338   3           static_structure(I).s_element(J) = 1;
    17339   3           static_structure.s_element(I,J)  = 1;
    17340   3           static_structure.s_element(I)(J) = 1;     
    17341   3  
    17342   3        end;
    17343   2  
    17344   2     end;
    17345   1  
    17346   1     if I ^= MAX_SIZE + 1 then
    17347   1        do;
    17348   2        put skip (one) list ('Loop termination error 1');
    17349   2        end;
    17350   1  
    17351   1     put skip(one) list('Loop 1 ended fine.');
    17352   1  
    17353   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17354   2  
    17355   2        do j = 1 to INN_SIZE;
    17356   3  
    17357   3           /*******************************************************/
    17358   3           /* The following assignments are semantically the same */
    17359   3           /* and should produce IDENTICAL code.                  */
    17360   3           /*******************************************************/
    17361   3  
    17362   3           s_element(i,j)                   = 1;
    17363   3           s_element(i)(j)                  = 1;
    17364   3           static_structure(i).s_element(j) = 1;
    17365   3           static_structure.s_element(i,j)  = 1;
    17366   3           static_structure.s_element(i)(j) = 1;     
    17367   3  
    17368   3        end;
    17369   2  
    17370   2     end;
    17371   1  
    17372   1     if I ^= MAX_SIZE + 1 then
    17373   1        do;
    17374   2        put skip (one) list ('Loop termination error 2');
    17375   2        end;
    17376   1  
    17377   1     put skip(one) list('Loop 2 ended fine.');
    17378   1  
    17379   1  
    17380   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17381   2  
    17382   2        do J = 1 to INN_SIZE;
    17383   3  
    17384   3           /*******************************************************/
    17385   3           /* The following assignments are semantically the same */
    17386   3           /* and should produce IDENTICAL code.                  */
    17387   3           /*******************************************************/
    17388   3  
    17389   3           a_element(I,J)                 = 1;
    17390   3           a_element(I)(J)                = 1;
    17391   3           auto_structure(I).a_element(J) = 1;
    17392   3           auto_structure.a_element(I,J)  = 1;
    17393   3           auto_structure.a_element(I)(J) = 1;     
    17394   3  
    17395   3        end;
    17396   2  
    17397   2     end;
    17398   1  
    17399   1     if I ^= MAX_SIZE + 1 then
    17400   1        do;
    17401   2        put skip (one) list ('Loop termination error 3');
    17402   2        end;
    17403   1  
    17404   1     put skip(one) list('Loop 3 ended fine.');
    17405   1  
    17406   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17407   2  
    17408   2        do j = 1 to INN_SIZE;
    17409   3  
    17410   3           /*******************************************************/
    17411   3           /* The following assignments are semantically the same */
    17412   3           /* and should produce IDENTICAL code.                  */
    17413   3           /*******************************************************/
    17414   3  
    17415   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17416   3           a_element(i)(j)                = 1;
    17417   3           auto_structure(i).a_element(j) = 1;
    17418   3           auto_structure.a_element(i,j)  = 1;
    17419   3           auto_structure.a_element(i)(j) = 1;     
    17420   3  
    17421   3        end;
    17422   2  
    17423   2     end;
    17424   1  
    17425   1     if I ^= MAX_SIZE + 1 then
    17426   1        do;
    17427   2        put skip (one) list ('Loop termination error 4');
    17428   2        end;
    17429   1  
    17430   1     put skip(one) list('Loop 4 ended fine.');
    17431   1  
    17432   1     /****************************************************************/
    17433   1     /* This test ensures that the above code works when executed in */
    17434   1     /* a nested procedure.                                          */
    17435   1     /****************************************************************/
    17436   1  
    17437   1     put skip (one) list ('Im about to call the internal procedure now');
    17438   1  
    17439   1     call run_inner_proc;
    17440   1  
    17441   1   one = 1;
    17442   1  
    17443   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17444   2  
    17445   2        do J = 1 to INN_SIZE;
    17446   3  
    17447   3           /*******************************************************/
    17448   3           /* The following assignments are semantically the same */
    17449   3           /* and should produce IDENTICAL code.                  */
    17450   3           /*******************************************************/
    17451   3  
    17452   3           s_element(I,J)                   = 1;
    17453   3           s_element(I)(J)                  = 1;
    17454   3           static_structure(I).s_element(J) = 1;
    17455   3           static_structure.s_element(I,J)  = 1;
    17456   3           static_structure.s_element(I)(J) = 1;     
    17457   3  
    17458   3        end;
    17459   2  
    17460   2     end;
    17461   1  
    17462   1     if I ^= MAX_SIZE + 1 then
    17463   1        do;
    17464   2        put skip (one) list ('Loop termination error 1');
    17465   2        end;
    17466   1  
    17467   1     put skip(one) list('Loop 1 ended fine.');
    17468   1  
    17469   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17470   2  
    17471   2        do j = 1 to INN_SIZE;
    17472   3  
    17473   3           /*******************************************************/
    17474   3           /* The following assignments are semantically the same */
    17475   3           /* and should produce IDENTICAL code.                  */
    17476   3           /*******************************************************/
    17477   3  
    17478   3           s_element(i,j)                   = 1;
    17479   3           s_element(i)(j)                  = 1;
    17480   3           static_structure(i).s_element(j) = 1;
    17481   3           static_structure.s_element(i,j)  = 1;
    17482   3           static_structure.s_element(i)(j) = 1;     
    17483   3  
    17484   3        end;
    17485   2  
    17486   2     end;
    17487   1  
    17488   1     if I ^= MAX_SIZE + 1 then
    17489   1        do;
    17490   2        put skip (one) list ('Loop termination error 2');
    17491   2        end;
    17492   1  
    17493   1     put skip(one) list('Loop 2 ended fine.');
    17494   1  
    17495   1  
    17496   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17497   2  
    17498   2        do J = 1 to INN_SIZE;
    17499   3  
    17500   3           /*******************************************************/
    17501   3           /* The following assignments are semantically the same */
    17502   3           /* and should produce IDENTICAL code.                  */
    17503   3           /*******************************************************/
    17504   3  
    17505   3           a_element(I,J)                 = 1;
    17506   3           a_element(I)(J)                = 1;
    17507   3           auto_structure(I).a_element(J) = 1;
    17508   3           auto_structure.a_element(I,J)  = 1;
    17509   3           auto_structure.a_element(I)(J) = 1;     
    17510   3  
    17511   3        end;
    17512   2  
    17513   2     end;
    17514   1  
    17515   1     if I ^= MAX_SIZE + 1 then
    17516   1        do;
    17517   2        put skip (one) list ('Loop termination error 3');
    17518   2        end;
    17519   1  
    17520   1     put skip(one) list('Loop 3 ended fine.');
    17521   1  
    17522   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17523   2  
    17524   2        do j = 1 to INN_SIZE;
    17525   3  
    17526   3           /*******************************************************/
    17527   3           /* The following assignments are semantically the same */
    17528   3           /* and should produce IDENTICAL code.                  */
    17529   3           /*******************************************************/
    17530   3  
    17531   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17532   3           a_element(i)(j)                = 1;
    17533   3           auto_structure(i).a_element(j) = 1;
    17534   3           auto_structure.a_element(i,j)  = 1;
    17535   3           auto_structure.a_element(i)(j) = 1;     
    17536   3  
    17537   3        end;
    17538   2  
    17539   2     end;
    17540   1  
    17541   1     if I ^= MAX_SIZE + 1 then
    17542   1        do;
    17543   2        put skip (one) list ('Loop termination error 4');
    17544   2        end;
    17545   1  
    17546   1     put skip(one) list('Loop 4 ended fine.');
    17547   1  
    17548   1     /****************************************************************/
    17549   1     /* This test ensures that the above code works when executed in */
    17550   1     /* a nested procedure.                                          */
    17551   1     /****************************************************************/
    17552   1  
    17553   1     put skip (one) list ('Im about to call the internal procedure now');
    17554   1  
    17555   1     call run_inner_proc;
    17556   1  
    17557   1   one = 1;
    17558   1  
    17559   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17560   2  
    17561   2        do J = 1 to INN_SIZE;
    17562   3  
    17563   3           /*******************************************************/
    17564   3           /* The following assignments are semantically the same */
    17565   3           /* and should produce IDENTICAL code.                  */
    17566   3           /*******************************************************/
    17567   3  
    17568   3           s_element(I,J)                   = 1;
    17569   3           s_element(I)(J)                  = 1;
    17570   3           static_structure(I).s_element(J) = 1;
    17571   3           static_structure.s_element(I,J)  = 1;
    17572   3           static_structure.s_element(I)(J) = 1;     
    17573   3  
    17574   3        end;
    17575   2  
    17576   2     end;
    17577   1  
    17578   1     if I ^= MAX_SIZE + 1 then
    17579   1        do;
    17580   2        put skip (one) list ('Loop termination error 1');
    17581   2        end;
    17582   1  
    17583   1     put skip(one) list('Loop 1 ended fine.');
    17584   1  
    17585   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17586   2  
    17587   2        do j = 1 to INN_SIZE;
    17588   3  
    17589   3           /*******************************************************/
    17590   3           /* The following assignments are semantically the same */
    17591   3           /* and should produce IDENTICAL code.                  */
    17592   3           /*******************************************************/
    17593   3  
    17594   3           s_element(i,j)                   = 1;
    17595   3           s_element(i)(j)                  = 1;
    17596   3           static_structure(i).s_element(j) = 1;
    17597   3           static_structure.s_element(i,j)  = 1;
    17598   3           static_structure.s_element(i)(j) = 1;     
    17599   3  
    17600   3        end;
    17601   2  
    17602   2     end;
    17603   1  
    17604   1     if I ^= MAX_SIZE + 1 then
    17605   1        do;
    17606   2        put skip (one) list ('Loop termination error 2');
    17607   2        end;
    17608   1  
    17609   1     put skip(one) list('Loop 2 ended fine.');
    17610   1  
    17611   1  
    17612   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17613   2  
    17614   2        do J = 1 to INN_SIZE;
    17615   3  
    17616   3           /*******************************************************/
    17617   3           /* The following assignments are semantically the same */
    17618   3           /* and should produce IDENTICAL code.                  */
    17619   3           /*******************************************************/
    17620   3  
    17621   3           a_element(I,J)                 = 1;
    17622   3           a_element(I)(J)                = 1;
    17623   3           auto_structure(I).a_element(J) = 1;
    17624   3           auto_structure.a_element(I,J)  = 1;
    17625   3           auto_structure.a_element(I)(J) = 1;     
    17626   3  
    17627   3        end;
    17628   2  
    17629   2     end;
    17630   1  
    17631   1     if I ^= MAX_SIZE + 1 then
    17632   1        do;
    17633   2        put skip (one) list ('Loop termination error 3');
    17634   2        end;
    17635   1  
    17636   1     put skip(one) list('Loop 3 ended fine.');
    17637   1  
    17638   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17639   2  
    17640   2        do j = 1 to INN_SIZE;
    17641   3  
    17642   3           /*******************************************************/
    17643   3           /* The following assignments are semantically the same */
    17644   3           /* and should produce IDENTICAL code.                  */
    17645   3           /*******************************************************/
    17646   3  
    17647   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17648   3           a_element(i)(j)                = 1;
    17649   3           auto_structure(i).a_element(j) = 1;
    17650   3           auto_structure.a_element(i,j)  = 1;
    17651   3           auto_structure.a_element(i)(j) = 1;     
    17652   3  
    17653   3        end;
    17654   2  
    17655   2     end;
    17656   1  
    17657   1     if I ^= MAX_SIZE + 1 then
    17658   1        do;
    17659   2        put skip (one) list ('Loop termination error 4');
    17660   2        end;
    17661   1  
    17662   1     put skip(one) list('Loop 4 ended fine.');
    17663   1  
    17664   1     /****************************************************************/
    17665   1     /* This test ensures that the above code works when executed in */
    17666   1     /* a nested procedure.                                          */
    17667   1     /****************************************************************/
    17668   1  
    17669   1     put skip (one) list ('Im about to call the internal procedure now');
    17670   1  
    17671   1     call run_inner_proc;
    17672   1  
    17673   1   one = 1;
    17674   1  
    17675   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17676   2  
    17677   2        do J = 1 to INN_SIZE;
    17678   3  
    17679   3           /*******************************************************/
    17680   3           /* The following assignments are semantically the same */
    17681   3           /* and should produce IDENTICAL code.                  */
    17682   3           /*******************************************************/
    17683   3  
    17684   3           s_element(I,J)                   = 1;
    17685   3           s_element(I)(J)                  = 1;
    17686   3           static_structure(I).s_element(J) = 1;
    17687   3           static_structure.s_element(I,J)  = 1;
    17688   3           static_structure.s_element(I)(J) = 1;     
    17689   3  
    17690   3        end;
    17691   2  
    17692   2     end;
    17693   1  
    17694   1     if I ^= MAX_SIZE + 1 then
    17695   1        do;
    17696   2        put skip (one) list ('Loop termination error 1');
    17697   2        end;
    17698   1  
    17699   1     put skip(one) list('Loop 1 ended fine.');
    17700   1  
    17701   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17702   2  
    17703   2        do j = 1 to INN_SIZE;
    17704   3  
    17705   3           /*******************************************************/
    17706   3           /* The following assignments are semantically the same */
    17707   3           /* and should produce IDENTICAL code.                  */
    17708   3           /*******************************************************/
    17709   3  
    17710   3           s_element(i,j)                   = 1;
    17711   3           s_element(i)(j)                  = 1;
    17712   3           static_structure(i).s_element(j) = 1;
    17713   3           static_structure.s_element(i,j)  = 1;
    17714   3           static_structure.s_element(i)(j) = 1;     
    17715   3  
    17716   3        end;
    17717   2  
    17718   2     end;
    17719   1  
    17720   1     if I ^= MAX_SIZE + 1 then
    17721   1        do;
    17722   2        put skip (one) list ('Loop termination error 2');
    17723   2        end;
    17724   1  
    17725   1     put skip(one) list('Loop 2 ended fine.');
    17726   1  
    17727   1  
    17728   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17729   2  
    17730   2        do J = 1 to INN_SIZE;
    17731   3  
    17732   3           /*******************************************************/
    17733   3           /* The following assignments are semantically the same */
    17734   3           /* and should produce IDENTICAL code.                  */
    17735   3           /*******************************************************/
    17736   3  
    17737   3           a_element(I,J)                 = 1;
    17738   3           a_element(I)(J)                = 1;
    17739   3           auto_structure(I).a_element(J) = 1;
    17740   3           auto_structure.a_element(I,J)  = 1;
    17741   3           auto_structure.a_element(I)(J) = 1;     
    17742   3  
    17743   3        end;
    17744   2  
    17745   2     end;
    17746   1  
    17747   1     if I ^= MAX_SIZE + 1 then
    17748   1        do;
    17749   2        put skip (one) list ('Loop termination error 3');
    17750   2        end;
    17751   1  
    17752   1     put skip(one) list('Loop 3 ended fine.');
    17753   1  
    17754   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17755   2  
    17756   2        do j = 1 to INN_SIZE;
    17757   3  
    17758   3           /*******************************************************/
    17759   3           /* The following assignments are semantically the same */
    17760   3           /* and should produce IDENTICAL code.                  */
    17761   3           /*******************************************************/
    17762   3  
    17763   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17764   3           a_element(i)(j)                = 1;
    17765   3           auto_structure(i).a_element(j) = 1;
    17766   3           auto_structure.a_element(i,j)  = 1;
    17767   3           auto_structure.a_element(i)(j) = 1;     
    17768   3  
    17769   3        end;
    17770   2  
    17771   2     end;
    17772   1  
    17773   1     if I ^= MAX_SIZE + 1 then
    17774   1        do;
    17775   2        put skip (one) list ('Loop termination error 4');
    17776   2        end;
    17777   1  
    17778   1     put skip(one) list('Loop 4 ended fine.');
    17779   1  
    17780   1     /****************************************************************/
    17781   1     /* This test ensures that the above code works when executed in */
    17782   1     /* a nested procedure.                                          */
    17783   1     /****************************************************************/
    17784   1  
    17785   1     put skip (one) list ('Im about to call the internal procedure now');
    17786   1  
    17787   1     call run_inner_proc;
    17788   1  
    17789   1   one = 1;
    17790   1  
    17791   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17792   2  
    17793   2        do J = 1 to INN_SIZE;
    17794   3  
    17795   3           /*******************************************************/
    17796   3           /* The following assignments are semantically the same */
    17797   3           /* and should produce IDENTICAL code.                  */
    17798   3           /*******************************************************/
    17799   3  
    17800   3           s_element(I,J)                   = 1;
    17801   3           s_element(I)(J)                  = 1;
    17802   3           static_structure(I).s_element(J) = 1;
    17803   3           static_structure.s_element(I,J)  = 1;
    17804   3           static_structure.s_element(I)(J) = 1;     
    17805   3  
    17806   3        end;
    17807   2  
    17808   2     end;
    17809   1  
    17810   1     if I ^= MAX_SIZE + 1 then
    17811   1        do;
    17812   2        put skip (one) list ('Loop termination error 1');
    17813   2        end;
    17814   1  
    17815   1     put skip(one) list('Loop 1 ended fine.');
    17816   1  
    17817   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17818   2  
    17819   2        do j = 1 to INN_SIZE;
    17820   3  
    17821   3           /*******************************************************/
    17822   3           /* The following assignments are semantically the same */
    17823   3           /* and should produce IDENTICAL code.                  */
    17824   3           /*******************************************************/
    17825   3  
    17826   3           s_element(i,j)                   = 1;
    17827   3           s_element(i)(j)                  = 1;
    17828   3           static_structure(i).s_element(j) = 1;
    17829   3           static_structure.s_element(i,j)  = 1;
    17830   3           static_structure.s_element(i)(j) = 1;     
    17831   3  
    17832   3        end;
    17833   2  
    17834   2     end;
    17835   1  
    17836   1     if I ^= MAX_SIZE + 1 then
    17837   1        do;
    17838   2        put skip (one) list ('Loop termination error 2');
    17839   2        end;
    17840   1  
    17841   1     put skip(one) list('Loop 2 ended fine.');
    17842   1  
    17843   1  
    17844   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17845   2  
    17846   2        do J = 1 to INN_SIZE;
    17847   3  
    17848   3           /*******************************************************/
    17849   3           /* The following assignments are semantically the same */
    17850   3           /* and should produce IDENTICAL code.                  */
    17851   3           /*******************************************************/
    17852   3  
    17853   3           a_element(I,J)                 = 1;
    17854   3           a_element(I)(J)                = 1;
    17855   3           auto_structure(I).a_element(J) = 1;
    17856   3           auto_structure.a_element(I,J)  = 1;
    17857   3           auto_structure.a_element(I)(J) = 1;     
    17858   3  
    17859   3        end;
    17860   2  
    17861   2     end;
    17862   1  
    17863   1     if I ^= MAX_SIZE + 1 then
    17864   1        do;
    17865   2        put skip (one) list ('Loop termination error 3');
    17866   2        end;
    17867   1  
    17868   1     put skip(one) list('Loop 3 ended fine.');
    17869   1  
    17870   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17871   2  
    17872   2        do j = 1 to INN_SIZE;
    17873   3  
    17874   3           /*******************************************************/
    17875   3           /* The following assignments are semantically the same */
    17876   3           /* and should produce IDENTICAL code.                  */
    17877   3           /*******************************************************/
    17878   3  
    17879   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17880   3           a_element(i)(j)                = 1;
    17881   3           auto_structure(i).a_element(j) = 1;
    17882   3           auto_structure.a_element(i,j)  = 1;
    17883   3           auto_structure.a_element(i)(j) = 1;     
    17884   3  
    17885   3        end;
    17886   2  
    17887   2     end;
    17888   1  
    17889   1     if I ^= MAX_SIZE + 1 then
    17890   1        do;
    17891   2        put skip (one) list ('Loop termination error 4');
    17892   2        end;
    17893   1  
    17894   1     put skip(one) list('Loop 4 ended fine.');
    17895   1  
    17896   1     /****************************************************************/
    17897   1     /* This test ensures that the above code works when executed in */
    17898   1     /* a nested procedure.                                          */
    17899   1     /****************************************************************/
    17900   1  
    17901   1     put skip (one) list ('Im about to call the internal procedure now');
    17902   1  
    17903   1     call run_inner_proc;
    17904   1  
    17905   1   one = 1;
    17906   1  
    17907   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    17908   2  
    17909   2        do J = 1 to INN_SIZE;
    17910   3  
    17911   3           /*******************************************************/
    17912   3           /* The following assignments are semantically the same */
    17913   3           /* and should produce IDENTICAL code.                  */
    17914   3           /*******************************************************/
    17915   3  
    17916   3           s_element(I,J)                   = 1;
    17917   3           s_element(I)(J)                  = 1;
    17918   3           static_structure(I).s_element(J) = 1;
    17919   3           static_structure.s_element(I,J)  = 1;
    17920   3           static_structure.s_element(I)(J) = 1;     
    17921   3  
    17922   3        end;
    17923   2  
    17924   2     end;
    17925   1  
    17926   1     if I ^= MAX_SIZE + 1 then
    17927   1        do;
    17928   2        put skip (one) list ('Loop termination error 1');
    17929   2        end;
    17930   1  
    17931   1     put skip(one) list('Loop 1 ended fine.');
    17932   1  
    17933   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    17934   2  
    17935   2        do j = 1 to INN_SIZE;
    17936   3  
    17937   3           /*******************************************************/
    17938   3           /* The following assignments are semantically the same */
    17939   3           /* and should produce IDENTICAL code.                  */
    17940   3           /*******************************************************/
    17941   3  
    17942   3           s_element(i,j)                   = 1;
    17943   3           s_element(i)(j)                  = 1;
    17944   3           static_structure(i).s_element(j) = 1;
    17945   3           static_structure.s_element(i,j)  = 1;
    17946   3           static_structure.s_element(i)(j) = 1;     
    17947   3  
    17948   3        end;
    17949   2  
    17950   2     end;
    17951   1  
    17952   1     if I ^= MAX_SIZE + 1 then
    17953   1        do;
    17954   2        put skip (one) list ('Loop termination error 2');
    17955   2        end;
    17956   1  
    17957   1     put skip(one) list('Loop 2 ended fine.');
    17958   1  
    17959   1  
    17960   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    17961   2  
    17962   2        do J = 1 to INN_SIZE;
    17963   3  
    17964   3           /*******************************************************/
    17965   3           /* The following assignments are semantically the same */
    17966   3           /* and should produce IDENTICAL code.                  */
    17967   3           /*******************************************************/
    17968   3  
    17969   3           a_element(I,J)                 = 1;
    17970   3           a_element(I)(J)                = 1;
    17971   3           auto_structure(I).a_element(J) = 1;
    17972   3           auto_structure.a_element(I,J)  = 1;
    17973   3           auto_structure.a_element(I)(J) = 1;     
    17974   3  
    17975   3        end;
    17976   2  
    17977   2     end;
    17978   1  
    17979   1     if I ^= MAX_SIZE + 1 then
    17980   1        do;
    17981   2        put skip (one) list ('Loop termination error 3');
    17982   2        end;
    17983   1  
    17984   1     put skip(one) list('Loop 3 ended fine.');
    17985   1  
    17986   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    17987   2  
    17988   2        do j = 1 to INN_SIZE;
    17989   3  
    17990   3           /*******************************************************/
    17991   3           /* The following assignments are semantically the same */
    17992   3           /* and should produce IDENTICAL code.                  */
    17993   3           /*******************************************************/
    17994   3  
    17995   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    17996   3           a_element(i)(j)                = 1;
    17997   3           auto_structure(i).a_element(j) = 1;
    17998   3           auto_structure.a_element(i,j)  = 1;
    17999   3           auto_structure.a_element(i)(j) = 1;     
    18000   3  
    18001   3        end;
    18002   2  
    18003   2     end;
    18004   1  
    18005   1     if I ^= MAX_SIZE + 1 then
    18006   1        do;
    18007   2        put skip (one) list ('Loop termination error 4');
    18008   2        end;
    18009   1  
    18010   1     put skip(one) list('Loop 4 ended fine.');
    18011   1  
    18012   1     /****************************************************************/
    18013   1     /* This test ensures that the above code works when executed in */
    18014   1     /* a nested procedure.                                          */
    18015   1     /****************************************************************/
    18016   1  
    18017   1     put skip (one) list ('Im about to call the internal procedure now');
    18018   1  
    18019   1     call run_inner_proc;
    18020   1  
    18021   1   one = 1;
    18022   1  
    18023   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18024   2  
    18025   2        do J = 1 to INN_SIZE;
    18026   3  
    18027   3           /*******************************************************/
    18028   3           /* The following assignments are semantically the same */
    18029   3           /* and should produce IDENTICAL code.                  */
    18030   3           /*******************************************************/
    18031   3  
    18032   3           s_element(I,J)                   = 1;
    18033   3           s_element(I)(J)                  = 1;
    18034   3           static_structure(I).s_element(J) = 1;
    18035   3           static_structure.s_element(I,J)  = 1;
    18036   3           static_structure.s_element(I)(J) = 1;     
    18037   3  
    18038   3        end;
    18039   2  
    18040   2     end;
    18041   1  
    18042   1     if I ^= MAX_SIZE + 1 then
    18043   1        do;
    18044   2        put skip (one) list ('Loop termination error 1');
    18045   2        end;
    18046   1  
    18047   1     put skip(one) list('Loop 1 ended fine.');
    18048   1  
    18049   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18050   2  
    18051   2        do j = 1 to INN_SIZE;
    18052   3  
    18053   3           /*******************************************************/
    18054   3           /* The following assignments are semantically the same */
    18055   3           /* and should produce IDENTICAL code.                  */
    18056   3           /*******************************************************/
    18057   3  
    18058   3           s_element(i,j)                   = 1;
    18059   3           s_element(i)(j)                  = 1;
    18060   3           static_structure(i).s_element(j) = 1;
    18061   3           static_structure.s_element(i,j)  = 1;
    18062   3           static_structure.s_element(i)(j) = 1;     
    18063   3  
    18064   3        end;
    18065   2  
    18066   2     end;
    18067   1  
    18068   1     if I ^= MAX_SIZE + 1 then
    18069   1        do;
    18070   2        put skip (one) list ('Loop termination error 2');
    18071   2        end;
    18072   1  
    18073   1     put skip(one) list('Loop 2 ended fine.');
    18074   1  
    18075   1  
    18076   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18077   2  
    18078   2        do J = 1 to INN_SIZE;
    18079   3  
    18080   3           /*******************************************************/
    18081   3           /* The following assignments are semantically the same */
    18082   3           /* and should produce IDENTICAL code.                  */
    18083   3           /*******************************************************/
    18084   3  
    18085   3           a_element(I,J)                 = 1;
    18086   3           a_element(I)(J)                = 1;
    18087   3           auto_structure(I).a_element(J) = 1;
    18088   3           auto_structure.a_element(I,J)  = 1;
    18089   3           auto_structure.a_element(I)(J) = 1;     
    18090   3  
    18091   3        end;
    18092   2  
    18093   2     end;
    18094   1  
    18095   1     if I ^= MAX_SIZE + 1 then
    18096   1        do;
    18097   2        put skip (one) list ('Loop termination error 3');
    18098   2        end;
    18099   1  
    18100   1     put skip(one) list('Loop 3 ended fine.');
    18101   1  
    18102   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18103   2  
    18104   2        do j = 1 to INN_SIZE;
    18105   3  
    18106   3           /*******************************************************/
    18107   3           /* The following assignments are semantically the same */
    18108   3           /* and should produce IDENTICAL code.                  */
    18109   3           /*******************************************************/
    18110   3  
    18111   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18112   3           a_element(i)(j)                = 1;
    18113   3           auto_structure(i).a_element(j) = 1;
    18114   3           auto_structure.a_element(i,j)  = 1;
    18115   3           auto_structure.a_element(i)(j) = 1;     
    18116   3  
    18117   3        end;
    18118   2  
    18119   2     end;
    18120   1  
    18121   1     if I ^= MAX_SIZE + 1 then
    18122   1        do;
    18123   2        put skip (one) list ('Loop termination error 4');
    18124   2        end;
    18125   1  
    18126   1     put skip(one) list('Loop 4 ended fine.');
    18127   1  
    18128   1     /****************************************************************/
    18129   1     /* This test ensures that the above code works when executed in */
    18130   1     /* a nested procedure.                                          */
    18131   1     /****************************************************************/
    18132   1  
    18133   1     put skip (one) list ('Im about to call the internal procedure now');
    18134   1  
    18135   1     call run_inner_proc;
    18136   1  
    18137   1   one = 1;
    18138   1  
    18139   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18140   2  
    18141   2        do J = 1 to INN_SIZE;
    18142   3  
    18143   3           /*******************************************************/
    18144   3           /* The following assignments are semantically the same */
    18145   3           /* and should produce IDENTICAL code.                  */
    18146   3           /*******************************************************/
    18147   3  
    18148   3           s_element(I,J)                   = 1;
    18149   3           s_element(I)(J)                  = 1;
    18150   3           static_structure(I).s_element(J) = 1;
    18151   3           static_structure.s_element(I,J)  = 1;
    18152   3           static_structure.s_element(I)(J) = 1;     
    18153   3  
    18154   3        end;
    18155   2  
    18156   2     end;
    18157   1  
    18158   1     if I ^= MAX_SIZE + 1 then
    18159   1        do;
    18160   2        put skip (one) list ('Loop termination error 1');
    18161   2        end;
    18162   1  
    18163   1     put skip(one) list('Loop 1 ended fine.');
    18164   1  
    18165   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18166   2  
    18167   2        do j = 1 to INN_SIZE;
    18168   3  
    18169   3           /*******************************************************/
    18170   3           /* The following assignments are semantically the same */
    18171   3           /* and should produce IDENTICAL code.                  */
    18172   3           /*******************************************************/
    18173   3  
    18174   3           s_element(i,j)                   = 1;
    18175   3           s_element(i)(j)                  = 1;
    18176   3           static_structure(i).s_element(j) = 1;
    18177   3           static_structure.s_element(i,j)  = 1;
    18178   3           static_structure.s_element(i)(j) = 1;     
    18179   3  
    18180   3        end;
    18181   2  
    18182   2     end;
    18183   1  
    18184   1     if I ^= MAX_SIZE + 1 then
    18185   1        do;
    18186   2        put skip (one) list ('Loop termination error 2');
    18187   2        end;
    18188   1  
    18189   1     put skip(one) list('Loop 2 ended fine.');
    18190   1  
    18191   1  
    18192   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18193   2  
    18194   2        do J = 1 to INN_SIZE;
    18195   3  
    18196   3           /*******************************************************/
    18197   3           /* The following assignments are semantically the same */
    18198   3           /* and should produce IDENTICAL code.                  */
    18199   3           /*******************************************************/
    18200   3  
    18201   3           a_element(I,J)                 = 1;
    18202   3           a_element(I)(J)                = 1;
    18203   3           auto_structure(I).a_element(J) = 1;
    18204   3           auto_structure.a_element(I,J)  = 1;
    18205   3           auto_structure.a_element(I)(J) = 1;     
    18206   3  
    18207   3        end;
    18208   2  
    18209   2     end;
    18210   1  
    18211   1     if I ^= MAX_SIZE + 1 then
    18212   1        do;
    18213   2        put skip (one) list ('Loop termination error 3');
    18214   2        end;
    18215   1  
    18216   1     put skip(one) list('Loop 3 ended fine.');
    18217   1  
    18218   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18219   2  
    18220   2        do j = 1 to INN_SIZE;
    18221   3  
    18222   3           /*******************************************************/
    18223   3           /* The following assignments are semantically the same */
    18224   3           /* and should produce IDENTICAL code.                  */
    18225   3           /*******************************************************/
    18226   3  
    18227   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18228   3           a_element(i)(j)                = 1;
    18229   3           auto_structure(i).a_element(j) = 1;
    18230   3           auto_structure.a_element(i,j)  = 1;
    18231   3           auto_structure.a_element(i)(j) = 1;     
    18232   3  
    18233   3        end;
    18234   2  
    18235   2     end;
    18236   1  
    18237   1     if I ^= MAX_SIZE + 1 then
    18238   1        do;
    18239   2        put skip (one) list ('Loop termination error 4');
    18240   2        end;
    18241   1  
    18242   1     put skip(one) list('Loop 4 ended fine.');
    18243   1  
    18244   1     /****************************************************************/
    18245   1     /* This test ensures that the above code works when executed in */
    18246   1     /* a nested procedure.                                          */
    18247   1     /****************************************************************/
    18248   1  
    18249   1     put skip (one) list ('Im about to call the internal procedure now');
    18250   1  
    18251   1     call run_inner_proc;
    18252   1  
    18253   1   one = 1;
    18254   1  
    18255   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18256   2  
    18257   2        do J = 1 to INN_SIZE;
    18258   3  
    18259   3           /*******************************************************/
    18260   3           /* The following assignments are semantically the same */
    18261   3           /* and should produce IDENTICAL code.                  */
    18262   3           /*******************************************************/
    18263   3  
    18264   3           s_element(I,J)                   = 1;
    18265   3           s_element(I)(J)                  = 1;
    18266   3           static_structure(I).s_element(J) = 1;
    18267   3           static_structure.s_element(I,J)  = 1;
    18268   3           static_structure.s_element(I)(J) = 1;     
    18269   3  
    18270   3        end;
    18271   2  
    18272   2     end;
    18273   1  
    18274   1     if I ^= MAX_SIZE + 1 then
    18275   1        do;
    18276   2        put skip (one) list ('Loop termination error 1');
    18277   2        end;
    18278   1  
    18279   1     put skip(one) list('Loop 1 ended fine.');
    18280   1  
    18281   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18282   2  
    18283   2        do j = 1 to INN_SIZE;
    18284   3  
    18285   3           /*******************************************************/
    18286   3           /* The following assignments are semantically the same */
    18287   3           /* and should produce IDENTICAL code.                  */
    18288   3           /*******************************************************/
    18289   3  
    18290   3           s_element(i,j)                   = 1;
    18291   3           s_element(i)(j)                  = 1;
    18292   3           static_structure(i).s_element(j) = 1;
    18293   3           static_structure.s_element(i,j)  = 1;
    18294   3           static_structure.s_element(i)(j) = 1;     
    18295   3  
    18296   3        end;
    18297   2  
    18298   2     end;
    18299   1  
    18300   1     if I ^= MAX_SIZE + 1 then
    18301   1        do;
    18302   2        put skip (one) list ('Loop termination error 2');
    18303   2        end;
    18304   1  
    18305   1     put skip(one) list('Loop 2 ended fine.');
    18306   1  
    18307   1  
    18308   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18309   2  
    18310   2        do J = 1 to INN_SIZE;
    18311   3  
    18312   3           /*******************************************************/
    18313   3           /* The following assignments are semantically the same */
    18314   3           /* and should produce IDENTICAL code.                  */
    18315   3           /*******************************************************/
    18316   3  
    18317   3           a_element(I,J)                 = 1;
    18318   3           a_element(I)(J)                = 1;
    18319   3           auto_structure(I).a_element(J) = 1;
    18320   3           auto_structure.a_element(I,J)  = 1;
    18321   3           auto_structure.a_element(I)(J) = 1;     
    18322   3  
    18323   3        end;
    18324   2  
    18325   2     end;
    18326   1  
    18327   1     if I ^= MAX_SIZE + 1 then
    18328   1        do;
    18329   2        put skip (one) list ('Loop termination error 3');
    18330   2        end;
    18331   1  
    18332   1     put skip(one) list('Loop 3 ended fine.');
    18333   1  
    18334   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18335   2  
    18336   2        do j = 1 to INN_SIZE;
    18337   3  
    18338   3           /*******************************************************/
    18339   3           /* The following assignments are semantically the same */
    18340   3           /* and should produce IDENTICAL code.                  */
    18341   3           /*******************************************************/
    18342   3  
    18343   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18344   3           a_element(i)(j)                = 1;
    18345   3           auto_structure(i).a_element(j) = 1;
    18346   3           auto_structure.a_element(i,j)  = 1;
    18347   3           auto_structure.a_element(i)(j) = 1;     
    18348   3  
    18349   3        end;
    18350   2  
    18351   2     end;
    18352   1  
    18353   1     if I ^= MAX_SIZE + 1 then
    18354   1        do;
    18355   2        put skip (one) list ('Loop termination error 4');
    18356   2        end;
    18357   1  
    18358   1     put skip(one) list('Loop 4 ended fine.');
    18359   1  
    18360   1     /****************************************************************/
    18361   1     /* This test ensures that the above code works when executed in */
    18362   1     /* a nested procedure.                                          */
    18363   1     /****************************************************************/
    18364   1  
    18365   1     put skip (one) list ('Im about to call the internal procedure now');
    18366   1  
    18367   1     call run_inner_proc;
    18368   1  
    18369   1   one = 1;
    18370   1  
    18371   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18372   2  
    18373   2        do J = 1 to INN_SIZE;
    18374   3  
    18375   3           /*******************************************************/
    18376   3           /* The following assignments are semantically the same */
    18377   3           /* and should produce IDENTICAL code.                  */
    18378   3           /*******************************************************/
    18379   3  
    18380   3           s_element(I,J)                   = 1;
    18381   3           s_element(I)(J)                  = 1;
    18382   3           static_structure(I).s_element(J) = 1;
    18383   3           static_structure.s_element(I,J)  = 1;
    18384   3           static_structure.s_element(I)(J) = 1;     
    18385   3  
    18386   3        end;
    18387   2  
    18388   2     end;
    18389   1  
    18390   1     if I ^= MAX_SIZE + 1 then
    18391   1        do;
    18392   2        put skip (one) list ('Loop termination error 1');
    18393   2        end;
    18394   1  
    18395   1     put skip(one) list('Loop 1 ended fine.');
    18396   1  
    18397   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18398   2  
    18399   2        do j = 1 to INN_SIZE;
    18400   3  
    18401   3           /*******************************************************/
    18402   3           /* The following assignments are semantically the same */
    18403   3           /* and should produce IDENTICAL code.                  */
    18404   3           /*******************************************************/
    18405   3  
    18406   3           s_element(i,j)                   = 1;
    18407   3           s_element(i)(j)                  = 1;
    18408   3           static_structure(i).s_element(j) = 1;
    18409   3           static_structure.s_element(i,j)  = 1;
    18410   3           static_structure.s_element(i)(j) = 1;     
    18411   3  
    18412   3        end;
    18413   2  
    18414   2     end;
    18415   1  
    18416   1     if I ^= MAX_SIZE + 1 then
    18417   1        do;
    18418   2        put skip (one) list ('Loop termination error 2');
    18419   2        end;
    18420   1  
    18421   1     put skip(one) list('Loop 2 ended fine.');
    18422   1  
    18423   1  
    18424   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18425   2  
    18426   2        do J = 1 to INN_SIZE;
    18427   3  
    18428   3           /*******************************************************/
    18429   3           /* The following assignments are semantically the same */
    18430   3           /* and should produce IDENTICAL code.                  */
    18431   3           /*******************************************************/
    18432   3  
    18433   3           a_element(I,J)                 = 1;
    18434   3           a_element(I)(J)                = 1;
    18435   3           auto_structure(I).a_element(J) = 1;
    18436   3           auto_structure.a_element(I,J)  = 1;
    18437   3           auto_structure.a_element(I)(J) = 1;     
    18438   3  
    18439   3        end;
    18440   2  
    18441   2     end;
    18442   1  
    18443   1     if I ^= MAX_SIZE + 1 then
    18444   1        do;
    18445   2        put skip (one) list ('Loop termination error 3');
    18446   2        end;
    18447   1  
    18448   1     put skip(one) list('Loop 3 ended fine.');
    18449   1  
    18450   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18451   2  
    18452   2        do j = 1 to INN_SIZE;
    18453   3  
    18454   3           /*******************************************************/
    18455   3           /* The following assignments are semantically the same */
    18456   3           /* and should produce IDENTICAL code.                  */
    18457   3           /*******************************************************/
    18458   3  
    18459   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18460   3           a_element(i)(j)                = 1;
    18461   3           auto_structure(i).a_element(j) = 1;
    18462   3           auto_structure.a_element(i,j)  = 1;
    18463   3           auto_structure.a_element(i)(j) = 1;     
    18464   3  
    18465   3        end;
    18466   2  
    18467   2     end;
    18468   1  
    18469   1     if I ^= MAX_SIZE + 1 then
    18470   1        do;
    18471   2        put skip (one) list ('Loop termination error 4');
    18472   2        end;
    18473   1  
    18474   1     put skip(one) list('Loop 4 ended fine.');
    18475   1  
    18476   1     /****************************************************************/
    18477   1     /* This test ensures that the above code works when executed in */
    18478   1     /* a nested procedure.                                          */
    18479   1     /****************************************************************/
    18480   1  
    18481   1     put skip (one) list ('Im about to call the internal procedure now');
    18482   1  
    18483   1     call run_inner_proc;
    18484   1  
    18485   1   one = 1;
    18486   1  
    18487   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18488   2  
    18489   2        do J = 1 to INN_SIZE;
    18490   3  
    18491   3           /*******************************************************/
    18492   3           /* The following assignments are semantically the same */
    18493   3           /* and should produce IDENTICAL code.                  */
    18494   3           /*******************************************************/
    18495   3  
    18496   3           s_element(I,J)                   = 1;
    18497   3           s_element(I)(J)                  = 1;
    18498   3           static_structure(I).s_element(J) = 1;
    18499   3           static_structure.s_element(I,J)  = 1;
    18500   3           static_structure.s_element(I)(J) = 1;     
    18501   3  
    18502   3        end;
    18503   2  
    18504   2     end;
    18505   1  
    18506   1     if I ^= MAX_SIZE + 1 then
    18507   1        do;
    18508   2        put skip (one) list ('Loop termination error 1');
    18509   2        end;
    18510   1  
    18511   1     put skip(one) list('Loop 1 ended fine.');
    18512   1  
    18513   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18514   2  
    18515   2        do j = 1 to INN_SIZE;
    18516   3  
    18517   3           /*******************************************************/
    18518   3           /* The following assignments are semantically the same */
    18519   3           /* and should produce IDENTICAL code.                  */
    18520   3           /*******************************************************/
    18521   3  
    18522   3           s_element(i,j)                   = 1;
    18523   3           s_element(i)(j)                  = 1;
    18524   3           static_structure(i).s_element(j) = 1;
    18525   3           static_structure.s_element(i,j)  = 1;
    18526   3           static_structure.s_element(i)(j) = 1;     
    18527   3  
    18528   3        end;
    18529   2  
    18530   2     end;
    18531   1  
    18532   1     if I ^= MAX_SIZE + 1 then
    18533   1        do;
    18534   2        put skip (one) list ('Loop termination error 2');
    18535   2        end;
    18536   1  
    18537   1     put skip(one) list('Loop 2 ended fine.');
    18538   1  
    18539   1  
    18540   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18541   2  
    18542   2        do J = 1 to INN_SIZE;
    18543   3  
    18544   3           /*******************************************************/
    18545   3           /* The following assignments are semantically the same */
    18546   3           /* and should produce IDENTICAL code.                  */
    18547   3           /*******************************************************/
    18548   3  
    18549   3           a_element(I,J)                 = 1;
    18550   3           a_element(I)(J)                = 1;
    18551   3           auto_structure(I).a_element(J) = 1;
    18552   3           auto_structure.a_element(I,J)  = 1;
    18553   3           auto_structure.a_element(I)(J) = 1;     
    18554   3  
    18555   3        end;
    18556   2  
    18557   2     end;
    18558   1  
    18559   1     if I ^= MAX_SIZE + 1 then
    18560   1        do;
    18561   2        put skip (one) list ('Loop termination error 3');
    18562   2        end;
    18563   1  
    18564   1     put skip(one) list('Loop 3 ended fine.');
    18565   1  
    18566   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18567   2  
    18568   2        do j = 1 to INN_SIZE;
    18569   3  
    18570   3           /*******************************************************/
    18571   3           /* The following assignments are semantically the same */
    18572   3           /* and should produce IDENTICAL code.                  */
    18573   3           /*******************************************************/
    18574   3  
    18575   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18576   3           a_element(i)(j)                = 1;
    18577   3           auto_structure(i).a_element(j) = 1;
    18578   3           auto_structure.a_element(i,j)  = 1;
    18579   3           auto_structure.a_element(i)(j) = 1;     
    18580   3  
    18581   3        end;
    18582   2  
    18583   2     end;
    18584   1  
    18585   1     if I ^= MAX_SIZE + 1 then
    18586   1        do;
    18587   2        put skip (one) list ('Loop termination error 4');
    18588   2        end;
    18589   1  
    18590   1     put skip(one) list('Loop 4 ended fine.');
    18591   1  
    18592   1     /****************************************************************/
    18593   1     /* This test ensures that the above code works when executed in */
    18594   1     /* a nested procedure.                                          */
    18595   1     /****************************************************************/
    18596   1  
    18597   1     put skip (one) list ('Im about to call the internal procedure now');
    18598   1  
    18599   1     call run_inner_proc;
    18600   1  
    18601   1   one = 1;
    18602   1  
    18603   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18604   2  
    18605   2        do J = 1 to INN_SIZE;
    18606   3  
    18607   3           /*******************************************************/
    18608   3           /* The following assignments are semantically the same */
    18609   3           /* and should produce IDENTICAL code.                  */
    18610   3           /*******************************************************/
    18611   3  
    18612   3           s_element(I,J)                   = 1;
    18613   3           s_element(I)(J)                  = 1;
    18614   3           static_structure(I).s_element(J) = 1;
    18615   3           static_structure.s_element(I,J)  = 1;
    18616   3           static_structure.s_element(I)(J) = 1;     
    18617   3  
    18618   3        end;
    18619   2  
    18620   2     end;
    18621   1  
    18622   1     if I ^= MAX_SIZE + 1 then
    18623   1        do;
    18624   2        put skip (one) list ('Loop termination error 1');
    18625   2        end;
    18626   1  
    18627   1     put skip(one) list('Loop 1 ended fine.');
    18628   1  
    18629   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18630   2  
    18631   2        do j = 1 to INN_SIZE;
    18632   3  
    18633   3           /*******************************************************/
    18634   3           /* The following assignments are semantically the same */
    18635   3           /* and should produce IDENTICAL code.                  */
    18636   3           /*******************************************************/
    18637   3  
    18638   3           s_element(i,j)                   = 1;
    18639   3           s_element(i)(j)                  = 1;
    18640   3           static_structure(i).s_element(j) = 1;
    18641   3           static_structure.s_element(i,j)  = 1;
    18642   3           static_structure.s_element(i)(j) = 1;     
    18643   3  
    18644   3        end;
    18645   2  
    18646   2     end;
    18647   1  
    18648   1     if I ^= MAX_SIZE + 1 then
    18649   1        do;
    18650   2        put skip (one) list ('Loop termination error 2');
    18651   2        end;
    18652   1  
    18653   1     put skip(one) list('Loop 2 ended fine.');
    18654   1  
    18655   1  
    18656   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18657   2  
    18658   2        do J = 1 to INN_SIZE;
    18659   3  
    18660   3           /*******************************************************/
    18661   3           /* The following assignments are semantically the same */
    18662   3           /* and should produce IDENTICAL code.                  */
    18663   3           /*******************************************************/
    18664   3  
    18665   3           a_element(I,J)                 = 1;
    18666   3           a_element(I)(J)                = 1;
    18667   3           auto_structure(I).a_element(J) = 1;
    18668   3           auto_structure.a_element(I,J)  = 1;
    18669   3           auto_structure.a_element(I)(J) = 1;     
    18670   3  
    18671   3        end;
    18672   2  
    18673   2     end;
    18674   1  
    18675   1     if I ^= MAX_SIZE + 1 then
    18676   1        do;
    18677   2        put skip (one) list ('Loop termination error 3');
    18678   2        end;
    18679   1  
    18680   1     put skip(one) list('Loop 3 ended fine.');
    18681   1  
    18682   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18683   2  
    18684   2        do j = 1 to INN_SIZE;
    18685   3  
    18686   3           /*******************************************************/
    18687   3           /* The following assignments are semantically the same */
    18688   3           /* and should produce IDENTICAL code.                  */
    18689   3           /*******************************************************/
    18690   3  
    18691   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18692   3           a_element(i)(j)                = 1;
    18693   3           auto_structure(i).a_element(j) = 1;
    18694   3           auto_structure.a_element(i,j)  = 1;
    18695   3           auto_structure.a_element(i)(j) = 1;     
    18696   3  
    18697   3        end;
    18698   2  
    18699   2     end;
    18700   1  
    18701   1     if I ^= MAX_SIZE + 1 then
    18702   1        do;
    18703   2        put skip (one) list ('Loop termination error 4');
    18704   2        end;
    18705   1  
    18706   1     put skip(one) list('Loop 4 ended fine.');
    18707   1  
    18708   1     /****************************************************************/
    18709   1     /* This test ensures that the above code works when executed in */
    18710   1     /* a nested procedure.                                          */
    18711   1     /****************************************************************/
    18712   1  
    18713   1     put skip (one) list ('Im about to call the internal procedure now');
    18714   1  
    18715   1     call run_inner_proc;
    18716   1  
    18717   1   one = 1;
    18718   1  
    18719   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18720   2  
    18721   2        do J = 1 to INN_SIZE;
    18722   3  
    18723   3           /*******************************************************/
    18724   3           /* The following assignments are semantically the same */
    18725   3           /* and should produce IDENTICAL code.                  */
    18726   3           /*******************************************************/
    18727   3  
    18728   3           s_element(I,J)                   = 1;
    18729   3           s_element(I)(J)                  = 1;
    18730   3           static_structure(I).s_element(J) = 1;
    18731   3           static_structure.s_element(I,J)  = 1;
    18732   3           static_structure.s_element(I)(J) = 1;     
    18733   3  
    18734   3        end;
    18735   2  
    18736   2     end;
    18737   1  
    18738   1     if I ^= MAX_SIZE + 1 then
    18739   1        do;
    18740   2        put skip (one) list ('Loop termination error 1');
    18741   2        end;
    18742   1  
    18743   1     put skip(one) list('Loop 1 ended fine.');
    18744   1  
    18745   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18746   2  
    18747   2        do j = 1 to INN_SIZE;
    18748   3  
    18749   3           /*******************************************************/
    18750   3           /* The following assignments are semantically the same */
    18751   3           /* and should produce IDENTICAL code.                  */
    18752   3           /*******************************************************/
    18753   3  
    18754   3           s_element(i,j)                   = 1;
    18755   3           s_element(i)(j)                  = 1;
    18756   3           static_structure(i).s_element(j) = 1;
    18757   3           static_structure.s_element(i,j)  = 1;
    18758   3           static_structure.s_element(i)(j) = 1;     
    18759   3  
    18760   3        end;
    18761   2  
    18762   2     end;
    18763   1  
    18764   1     if I ^= MAX_SIZE + 1 then
    18765   1        do;
    18766   2        put skip (one) list ('Loop termination error 2');
    18767   2        end;
    18768   1  
    18769   1     put skip(one) list('Loop 2 ended fine.');
    18770   1  
    18771   1  
    18772   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18773   2  
    18774   2        do J = 1 to INN_SIZE;
    18775   3  
    18776   3           /*******************************************************/
    18777   3           /* The following assignments are semantically the same */
    18778   3           /* and should produce IDENTICAL code.                  */
    18779   3           /*******************************************************/
    18780   3  
    18781   3           a_element(I,J)                 = 1;
    18782   3           a_element(I)(J)                = 1;
    18783   3           auto_structure(I).a_element(J) = 1;
    18784   3           auto_structure.a_element(I,J)  = 1;
    18785   3           auto_structure.a_element(I)(J) = 1;     
    18786   3  
    18787   3        end;
    18788   2  
    18789   2     end;
    18790   1  
    18791   1     if I ^= MAX_SIZE + 1 then
    18792   1        do;
    18793   2        put skip (one) list ('Loop termination error 3');
    18794   2        end;
    18795   1  
    18796   1     put skip(one) list('Loop 3 ended fine.');
    18797   1  
    18798   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18799   2  
    18800   2        do j = 1 to INN_SIZE;
    18801   3  
    18802   3           /*******************************************************/
    18803   3           /* The following assignments are semantically the same */
    18804   3           /* and should produce IDENTICAL code.                  */
    18805   3           /*******************************************************/
    18806   3  
    18807   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18808   3           a_element(i)(j)                = 1;
    18809   3           auto_structure(i).a_element(j) = 1;
    18810   3           auto_structure.a_element(i,j)  = 1;
    18811   3           auto_structure.a_element(i)(j) = 1;     
    18812   3  
    18813   3        end;
    18814   2  
    18815   2     end;
    18816   1  
    18817   1     if I ^= MAX_SIZE + 1 then
    18818   1        do;
    18819   2        put skip (one) list ('Loop termination error 4');
    18820   2        end;
    18821   1  
    18822   1     put skip(one) list('Loop 4 ended fine.');
    18823   1  
    18824   1     /****************************************************************/
    18825   1     /* This test ensures that the above code works when executed in */
    18826   1     /* a nested procedure.                                          */
    18827   1     /****************************************************************/
    18828   1  
    18829   1     put skip (one) list ('Im about to call the internal procedure now');
    18830   1  
    18831   1     call run_inner_proc;
    18832   1  
    18833   1   one = 1;
    18834   1  
    18835   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18836   2  
    18837   2        do J = 1 to INN_SIZE;
    18838   3  
    18839   3           /*******************************************************/
    18840   3           /* The following assignments are semantically the same */
    18841   3           /* and should produce IDENTICAL code.                  */
    18842   3           /*******************************************************/
    18843   3  
    18844   3           s_element(I,J)                   = 1;
    18845   3           s_element(I)(J)                  = 1;
    18846   3           static_structure(I).s_element(J) = 1;
    18847   3           static_structure.s_element(I,J)  = 1;
    18848   3           static_structure.s_element(I)(J) = 1;     
    18849   3  
    18850   3        end;
    18851   2  
    18852   2     end;
    18853   1  
    18854   1     if I ^= MAX_SIZE + 1 then
    18855   1        do;
    18856   2        put skip (one) list ('Loop termination error 1');
    18857   2        end;
    18858   1  
    18859   1     put skip(one) list('Loop 1 ended fine.');
    18860   1  
    18861   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18862   2  
    18863   2        do j = 1 to INN_SIZE;
    18864   3  
    18865   3           /*******************************************************/
    18866   3           /* The following assignments are semantically the same */
    18867   3           /* and should produce IDENTICAL code.                  */
    18868   3           /*******************************************************/
    18869   3  
    18870   3           s_element(i,j)                   = 1;
    18871   3           s_element(i)(j)                  = 1;
    18872   3           static_structure(i).s_element(j) = 1;
    18873   3           static_structure.s_element(i,j)  = 1;
    18874   3           static_structure.s_element(i)(j) = 1;     
    18875   3  
    18876   3        end;
    18877   2  
    18878   2     end;
    18879   1  
    18880   1     if I ^= MAX_SIZE + 1 then
    18881   1        do;
    18882   2        put skip (one) list ('Loop termination error 2');
    18883   2        end;
    18884   1  
    18885   1     put skip(one) list('Loop 2 ended fine.');
    18886   1  
    18887   1  
    18888   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    18889   2  
    18890   2        do J = 1 to INN_SIZE;
    18891   3  
    18892   3           /*******************************************************/
    18893   3           /* The following assignments are semantically the same */
    18894   3           /* and should produce IDENTICAL code.                  */
    18895   3           /*******************************************************/
    18896   3  
    18897   3           a_element(I,J)                 = 1;
    18898   3           a_element(I)(J)                = 1;
    18899   3           auto_structure(I).a_element(J) = 1;
    18900   3           auto_structure.a_element(I,J)  = 1;
    18901   3           auto_structure.a_element(I)(J) = 1;     
    18902   3  
    18903   3        end;
    18904   2  
    18905   2     end;
    18906   1  
    18907   1     if I ^= MAX_SIZE + 1 then
    18908   1        do;
    18909   2        put skip (one) list ('Loop termination error 3');
    18910   2        end;
    18911   1  
    18912   1     put skip(one) list('Loop 3 ended fine.');
    18913   1  
    18914   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    18915   2  
    18916   2        do j = 1 to INN_SIZE;
    18917   3  
    18918   3           /*******************************************************/
    18919   3           /* The following assignments are semantically the same */
    18920   3           /* and should produce IDENTICAL code.                  */
    18921   3           /*******************************************************/
    18922   3  
    18923   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    18924   3           a_element(i)(j)                = 1;
    18925   3           auto_structure(i).a_element(j) = 1;
    18926   3           auto_structure.a_element(i,j)  = 1;
    18927   3           auto_structure.a_element(i)(j) = 1;     
    18928   3  
    18929   3        end;
    18930   2  
    18931   2     end;
    18932   1  
    18933   1     if I ^= MAX_SIZE + 1 then
    18934   1        do;
    18935   2        put skip (one) list ('Loop termination error 4');
    18936   2        end;
    18937   1  
    18938   1     put skip(one) list('Loop 4 ended fine.');
    18939   1  
    18940   1     /****************************************************************/
    18941   1     /* This test ensures that the above code works when executed in */
    18942   1     /* a nested procedure.                                          */
    18943   1     /****************************************************************/
    18944   1  
    18945   1     put skip (one) list ('Im about to call the internal procedure now');
    18946   1  
    18947   1     call run_inner_proc;
    18948   1  
    18949   1   one = 1;
    18950   1  
    18951   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    18952   2  
    18953   2        do J = 1 to INN_SIZE;
    18954   3  
    18955   3           /*******************************************************/
    18956   3           /* The following assignments are semantically the same */
    18957   3           /* and should produce IDENTICAL code.                  */
    18958   3           /*******************************************************/
    18959   3  
    18960   3           s_element(I,J)                   = 1;
    18961   3           s_element(I)(J)                  = 1;
    18962   3           static_structure(I).s_element(J) = 1;
    18963   3           static_structure.s_element(I,J)  = 1;
    18964   3           static_structure.s_element(I)(J) = 1;     
    18965   3  
    18966   3        end;
    18967   2  
    18968   2     end;
    18969   1  
    18970   1     if I ^= MAX_SIZE + 1 then
    18971   1        do;
    18972   2        put skip (one) list ('Loop termination error 1');
    18973   2        end;
    18974   1  
    18975   1     put skip(one) list('Loop 1 ended fine.');
    18976   1  
    18977   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    18978   2  
    18979   2        do j = 1 to INN_SIZE;
    18980   3  
    18981   3           /*******************************************************/
    18982   3           /* The following assignments are semantically the same */
    18983   3           /* and should produce IDENTICAL code.                  */
    18984   3           /*******************************************************/
    18985   3  
    18986   3           s_element(i,j)                   = 1;
    18987   3           s_element(i)(j)                  = 1;
    18988   3           static_structure(i).s_element(j) = 1;
    18989   3           static_structure.s_element(i,j)  = 1;
    18990   3           static_structure.s_element(i)(j) = 1;     
    18991   3  
    18992   3        end;
    18993   2  
    18994   2     end;
    18995   1  
    18996   1     if I ^= MAX_SIZE + 1 then
    18997   1        do;
    18998   2        put skip (one) list ('Loop termination error 2');
    18999   2        end;
    19000   1  
    19001   1     put skip(one) list('Loop 2 ended fine.');
    19002   1  
    19003   1  
    19004   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19005   2  
    19006   2        do J = 1 to INN_SIZE;
    19007   3  
    19008   3           /*******************************************************/
    19009   3           /* The following assignments are semantically the same */
    19010   3           /* and should produce IDENTICAL code.                  */
    19011   3           /*******************************************************/
    19012   3  
    19013   3           a_element(I,J)                 = 1;
    19014   3           a_element(I)(J)                = 1;
    19015   3           auto_structure(I).a_element(J) = 1;
    19016   3           auto_structure.a_element(I,J)  = 1;
    19017   3           auto_structure.a_element(I)(J) = 1;     
    19018   3  
    19019   3        end;
    19020   2  
    19021   2     end;
    19022   1  
    19023   1     if I ^= MAX_SIZE + 1 then
    19024   1        do;
    19025   2        put skip (one) list ('Loop termination error 3');
    19026   2        end;
    19027   1  
    19028   1     put skip(one) list('Loop 3 ended fine.');
    19029   1  
    19030   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19031   2  
    19032   2        do j = 1 to INN_SIZE;
    19033   3  
    19034   3           /*******************************************************/
    19035   3           /* The following assignments are semantically the same */
    19036   3           /* and should produce IDENTICAL code.                  */
    19037   3           /*******************************************************/
    19038   3  
    19039   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19040   3           a_element(i)(j)                = 1;
    19041   3           auto_structure(i).a_element(j) = 1;
    19042   3           auto_structure.a_element(i,j)  = 1;
    19043   3           auto_structure.a_element(i)(j) = 1;     
    19044   3  
    19045   3        end;
    19046   2  
    19047   2     end;
    19048   1  
    19049   1     if I ^= MAX_SIZE + 1 then
    19050   1        do;
    19051   2        put skip (one) list ('Loop termination error 4');
    19052   2        end;
    19053   1  
    19054   1     put skip(one) list('Loop 4 ended fine.');
    19055   1  
    19056   1     /****************************************************************/
    19057   1     /* This test ensures that the above code works when executed in */
    19058   1     /* a nested procedure.                                          */
    19059   1     /****************************************************************/
    19060   1  
    19061   1     put skip (one) list ('Im about to call the internal procedure now');
    19062   1  
    19063   1     call run_inner_proc;
    19064   1  
    19065   1   one = 1;
    19066   1  
    19067   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19068   2  
    19069   2        do J = 1 to INN_SIZE;
    19070   3  
    19071   3           /*******************************************************/
    19072   3           /* The following assignments are semantically the same */
    19073   3           /* and should produce IDENTICAL code.                  */
    19074   3           /*******************************************************/
    19075   3  
    19076   3           s_element(I,J)                   = 1;
    19077   3           s_element(I)(J)                  = 1;
    19078   3           static_structure(I).s_element(J) = 1;
    19079   3           static_structure.s_element(I,J)  = 1;
    19080   3           static_structure.s_element(I)(J) = 1;     
    19081   3  
    19082   3        end;
    19083   2  
    19084   2     end;
    19085   1  
    19086   1     if I ^= MAX_SIZE + 1 then
    19087   1        do;
    19088   2        put skip (one) list ('Loop termination error 1');
    19089   2        end;
    19090   1  
    19091   1     put skip(one) list('Loop 1 ended fine.');
    19092   1  
    19093   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19094   2  
    19095   2        do j = 1 to INN_SIZE;
    19096   3  
    19097   3           /*******************************************************/
    19098   3           /* The following assignments are semantically the same */
    19099   3           /* and should produce IDENTICAL code.                  */
    19100   3           /*******************************************************/
    19101   3  
    19102   3           s_element(i,j)                   = 1;
    19103   3           s_element(i)(j)                  = 1;
    19104   3           static_structure(i).s_element(j) = 1;
    19105   3           static_structure.s_element(i,j)  = 1;
    19106   3           static_structure.s_element(i)(j) = 1;     
    19107   3  
    19108   3        end;
    19109   2  
    19110   2     end;
    19111   1  
    19112   1     if I ^= MAX_SIZE + 1 then
    19113   1        do;
    19114   2        put skip (one) list ('Loop termination error 2');
    19115   2        end;
    19116   1  
    19117   1     put skip(one) list('Loop 2 ended fine.');
    19118   1  
    19119   1  
    19120   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19121   2  
    19122   2        do J = 1 to INN_SIZE;
    19123   3  
    19124   3           /*******************************************************/
    19125   3           /* The following assignments are semantically the same */
    19126   3           /* and should produce IDENTICAL code.                  */
    19127   3           /*******************************************************/
    19128   3  
    19129   3           a_element(I,J)                 = 1;
    19130   3           a_element(I)(J)                = 1;
    19131   3           auto_structure(I).a_element(J) = 1;
    19132   3           auto_structure.a_element(I,J)  = 1;
    19133   3           auto_structure.a_element(I)(J) = 1;     
    19134   3  
    19135   3        end;
    19136   2  
    19137   2     end;
    19138   1  
    19139   1     if I ^= MAX_SIZE + 1 then
    19140   1        do;
    19141   2        put skip (one) list ('Loop termination error 3');
    19142   2        end;
    19143   1  
    19144   1     put skip(one) list('Loop 3 ended fine.');
    19145   1  
    19146   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19147   2  
    19148   2        do j = 1 to INN_SIZE;
    19149   3  
    19150   3           /*******************************************************/
    19151   3           /* The following assignments are semantically the same */
    19152   3           /* and should produce IDENTICAL code.                  */
    19153   3           /*******************************************************/
    19154   3  
    19155   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19156   3           a_element(i)(j)                = 1;
    19157   3           auto_structure(i).a_element(j) = 1;
    19158   3           auto_structure.a_element(i,j)  = 1;
    19159   3           auto_structure.a_element(i)(j) = 1;     
    19160   3  
    19161   3        end;
    19162   2  
    19163   2     end;
    19164   1  
    19165   1     if I ^= MAX_SIZE + 1 then
    19166   1        do;
    19167   2        put skip (one) list ('Loop termination error 4');
    19168   2        end;
    19169   1  
    19170   1     put skip(one) list('Loop 4 ended fine.');
    19171   1  
    19172   1     /****************************************************************/
    19173   1     /* This test ensures that the above code works when executed in */
    19174   1     /* a nested procedure.                                          */
    19175   1     /****************************************************************/
    19176   1  
    19177   1     put skip (one) list ('Im about to call the internal procedure now');
    19178   1  
    19179   1     call run_inner_proc;
    19180   1  
    19181   1   one = 1;
    19182   1  
    19183   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19184   2  
    19185   2        do J = 1 to INN_SIZE;
    19186   3  
    19187   3           /*******************************************************/
    19188   3           /* The following assignments are semantically the same */
    19189   3           /* and should produce IDENTICAL code.                  */
    19190   3           /*******************************************************/
    19191   3  
    19192   3           s_element(I,J)                   = 1;
    19193   3           s_element(I)(J)                  = 1;
    19194   3           static_structure(I).s_element(J) = 1;
    19195   3           static_structure.s_element(I,J)  = 1;
    19196   3           static_structure.s_element(I)(J) = 1;     
    19197   3  
    19198   3        end;
    19199   2  
    19200   2     end;
    19201   1  
    19202   1     if I ^= MAX_SIZE + 1 then
    19203   1        do;
    19204   2        put skip (one) list ('Loop termination error 1');
    19205   2        end;
    19206   1  
    19207   1     put skip(one) list('Loop 1 ended fine.');
    19208   1  
    19209   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19210   2  
    19211   2        do j = 1 to INN_SIZE;
    19212   3  
    19213   3           /*******************************************************/
    19214   3           /* The following assignments are semantically the same */
    19215   3           /* and should produce IDENTICAL code.                  */
    19216   3           /*******************************************************/
    19217   3  
    19218   3           s_element(i,j)                   = 1;
    19219   3           s_element(i)(j)                  = 1;
    19220   3           static_structure(i).s_element(j) = 1;
    19221   3           static_structure.s_element(i,j)  = 1;
    19222   3           static_structure.s_element(i)(j) = 1;     
    19223   3  
    19224   3        end;
    19225   2  
    19226   2     end;
    19227   1  
    19228   1     if I ^= MAX_SIZE + 1 then
    19229   1        do;
    19230   2        put skip (one) list ('Loop termination error 2');
    19231   2        end;
    19232   1  
    19233   1     put skip(one) list('Loop 2 ended fine.');
    19234   1  
    19235   1  
    19236   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19237   2  
    19238   2        do J = 1 to INN_SIZE;
    19239   3  
    19240   3           /*******************************************************/
    19241   3           /* The following assignments are semantically the same */
    19242   3           /* and should produce IDENTICAL code.                  */
    19243   3           /*******************************************************/
    19244   3  
    19245   3           a_element(I,J)                 = 1;
    19246   3           a_element(I)(J)                = 1;
    19247   3           auto_structure(I).a_element(J) = 1;
    19248   3           auto_structure.a_element(I,J)  = 1;
    19249   3           auto_structure.a_element(I)(J) = 1;     
    19250   3  
    19251   3        end;
    19252   2  
    19253   2     end;
    19254   1  
    19255   1     if I ^= MAX_SIZE + 1 then
    19256   1        do;
    19257   2        put skip (one) list ('Loop termination error 3');
    19258   2        end;
    19259   1  
    19260   1     put skip(one) list('Loop 3 ended fine.');
    19261   1  
    19262   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19263   2  
    19264   2        do j = 1 to INN_SIZE;
    19265   3  
    19266   3           /*******************************************************/
    19267   3           /* The following assignments are semantically the same */
    19268   3           /* and should produce IDENTICAL code.                  */
    19269   3           /*******************************************************/
    19270   3  
    19271   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19272   3           a_element(i)(j)                = 1;
    19273   3           auto_structure(i).a_element(j) = 1;
    19274   3           auto_structure.a_element(i,j)  = 1;
    19275   3           auto_structure.a_element(i)(j) = 1;     
    19276   3  
    19277   3        end;
    19278   2  
    19279   2     end;
    19280   1  
    19281   1     if I ^= MAX_SIZE + 1 then
    19282   1        do;
    19283   2        put skip (one) list ('Loop termination error 4');
    19284   2        end;
    19285   1  
    19286   1     put skip(one) list('Loop 4 ended fine.');
    19287   1  
    19288   1     /****************************************************************/
    19289   1     /* This test ensures that the above code works when executed in */
    19290   1     /* a nested procedure.                                          */
    19291   1     /****************************************************************/
    19292   1  
    19293   1     put skip (one) list ('Im about to call the internal procedure now');
    19294   1  
    19295   1     call run_inner_proc;
    19296   1  
    19297   1   one = 1;
    19298   1  
    19299   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19300   2  
    19301   2        do J = 1 to INN_SIZE;
    19302   3  
    19303   3           /*******************************************************/
    19304   3           /* The following assignments are semantically the same */
    19305   3           /* and should produce IDENTICAL code.                  */
    19306   3           /*******************************************************/
    19307   3  
    19308   3           s_element(I,J)                   = 1;
    19309   3           s_element(I)(J)                  = 1;
    19310   3           static_structure(I).s_element(J) = 1;
    19311   3           static_structure.s_element(I,J)  = 1;
    19312   3           static_structure.s_element(I)(J) = 1;     
    19313   3  
    19314   3        end;
    19315   2  
    19316   2     end;
    19317   1  
    19318   1     if I ^= MAX_SIZE + 1 then
    19319   1        do;
    19320   2        put skip (one) list ('Loop termination error 1');
    19321   2        end;
    19322   1  
    19323   1     put skip(one) list('Loop 1 ended fine.');
    19324   1  
    19325   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19326   2  
    19327   2        do j = 1 to INN_SIZE;
    19328   3  
    19329   3           /*******************************************************/
    19330   3           /* The following assignments are semantically the same */
    19331   3           /* and should produce IDENTICAL code.                  */
    19332   3           /*******************************************************/
    19333   3  
    19334   3           s_element(i,j)                   = 1;
    19335   3           s_element(i)(j)                  = 1;
    19336   3           static_structure(i).s_element(j) = 1;
    19337   3           static_structure.s_element(i,j)  = 1;
    19338   3           static_structure.s_element(i)(j) = 1;     
    19339   3  
    19340   3        end;
    19341   2  
    19342   2     end;
    19343   1  
    19344   1     if I ^= MAX_SIZE + 1 then
    19345   1        do;
    19346   2        put skip (one) list ('Loop termination error 2');
    19347   2        end;
    19348   1  
    19349   1     put skip(one) list('Loop 2 ended fine.');
    19350   1  
    19351   1  
    19352   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19353   2  
    19354   2        do J = 1 to INN_SIZE;
    19355   3  
    19356   3           /*******************************************************/
    19357   3           /* The following assignments are semantically the same */
    19358   3           /* and should produce IDENTICAL code.                  */
    19359   3           /*******************************************************/
    19360   3  
    19361   3           a_element(I,J)                 = 1;
    19362   3           a_element(I)(J)                = 1;
    19363   3           auto_structure(I).a_element(J) = 1;
    19364   3           auto_structure.a_element(I,J)  = 1;
    19365   3           auto_structure.a_element(I)(J) = 1;     
    19366   3  
    19367   3        end;
    19368   2  
    19369   2     end;
    19370   1  
    19371   1     if I ^= MAX_SIZE + 1 then
    19372   1        do;
    19373   2        put skip (one) list ('Loop termination error 3');
    19374   2        end;
    19375   1  
    19376   1     put skip(one) list('Loop 3 ended fine.');
    19377   1  
    19378   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19379   2  
    19380   2        do j = 1 to INN_SIZE;
    19381   3  
    19382   3           /*******************************************************/
    19383   3           /* The following assignments are semantically the same */
    19384   3           /* and should produce IDENTICAL code.                  */
    19385   3           /*******************************************************/
    19386   3  
    19387   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19388   3           a_element(i)(j)                = 1;
    19389   3           auto_structure(i).a_element(j) = 1;
    19390   3           auto_structure.a_element(i,j)  = 1;
    19391   3           auto_structure.a_element(i)(j) = 1;     
    19392   3  
    19393   3        end;
    19394   2  
    19395   2     end;
    19396   1  
    19397   1     if I ^= MAX_SIZE + 1 then
    19398   1        do;
    19399   2        put skip (one) list ('Loop termination error 4');
    19400   2        end;
    19401   1  
    19402   1     put skip(one) list('Loop 4 ended fine.');
    19403   1  
    19404   1     /****************************************************************/
    19405   1     /* This test ensures that the above code works when executed in */
    19406   1     /* a nested procedure.                                          */
    19407   1     /****************************************************************/
    19408   1  
    19409   1     put skip (one) list ('Im about to call the internal procedure now');
    19410   1  
    19411   1     call run_inner_proc;
    19412   1  
    19413   1   one = 1;
    19414   1  
    19415   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19416   2  
    19417   2        do J = 1 to INN_SIZE;
    19418   3  
    19419   3           /*******************************************************/
    19420   3           /* The following assignments are semantically the same */
    19421   3           /* and should produce IDENTICAL code.                  */
    19422   3           /*******************************************************/
    19423   3  
    19424   3           s_element(I,J)                   = 1;
    19425   3           s_element(I)(J)                  = 1;
    19426   3           static_structure(I).s_element(J) = 1;
    19427   3           static_structure.s_element(I,J)  = 1;
    19428   3           static_structure.s_element(I)(J) = 1;     
    19429   3  
    19430   3        end;
    19431   2  
    19432   2     end;
    19433   1  
    19434   1     if I ^= MAX_SIZE + 1 then
    19435   1        do;
    19436   2        put skip (one) list ('Loop termination error 1');
    19437   2        end;
    19438   1  
    19439   1     put skip(one) list('Loop 1 ended fine.');
    19440   1  
    19441   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19442   2  
    19443   2        do j = 1 to INN_SIZE;
    19444   3  
    19445   3           /*******************************************************/
    19446   3           /* The following assignments are semantically the same */
    19447   3           /* and should produce IDENTICAL code.                  */
    19448   3           /*******************************************************/
    19449   3  
    19450   3           s_element(i,j)                   = 1;
    19451   3           s_element(i)(j)                  = 1;
    19452   3           static_structure(i).s_element(j) = 1;
    19453   3           static_structure.s_element(i,j)  = 1;
    19454   3           static_structure.s_element(i)(j) = 1;     
    19455   3  
    19456   3        end;
    19457   2  
    19458   2     end;
    19459   1  
    19460   1     if I ^= MAX_SIZE + 1 then
    19461   1        do;
    19462   2        put skip (one) list ('Loop termination error 2');
    19463   2        end;
    19464   1  
    19465   1     put skip(one) list('Loop 2 ended fine.');
    19466   1  
    19467   1  
    19468   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19469   2  
    19470   2        do J = 1 to INN_SIZE;
    19471   3  
    19472   3           /*******************************************************/
    19473   3           /* The following assignments are semantically the same */
    19474   3           /* and should produce IDENTICAL code.                  */
    19475   3           /*******************************************************/
    19476   3  
    19477   3           a_element(I,J)                 = 1;
    19478   3           a_element(I)(J)                = 1;
    19479   3           auto_structure(I).a_element(J) = 1;
    19480   3           auto_structure.a_element(I,J)  = 1;
    19481   3           auto_structure.a_element(I)(J) = 1;     
    19482   3  
    19483   3        end;
    19484   2  
    19485   2     end;
    19486   1  
    19487   1     if I ^= MAX_SIZE + 1 then
    19488   1        do;
    19489   2        put skip (one) list ('Loop termination error 3');
    19490   2        end;
    19491   1  
    19492   1     put skip(one) list('Loop 3 ended fine.');
    19493   1  
    19494   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19495   2  
    19496   2        do j = 1 to INN_SIZE;
    19497   3  
    19498   3           /*******************************************************/
    19499   3           /* The following assignments are semantically the same */
    19500   3           /* and should produce IDENTICAL code.                  */
    19501   3           /*******************************************************/
    19502   3  
    19503   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19504   3           a_element(i)(j)                = 1;
    19505   3           auto_structure(i).a_element(j) = 1;
    19506   3           auto_structure.a_element(i,j)  = 1;
    19507   3           auto_structure.a_element(i)(j) = 1;     
    19508   3  
    19509   3        end;
    19510   2  
    19511   2     end;
    19512   1  
    19513   1     if I ^= MAX_SIZE + 1 then
    19514   1        do;
    19515   2        put skip (one) list ('Loop termination error 4');
    19516   2        end;
    19517   1  
    19518   1     put skip(one) list('Loop 4 ended fine.');
    19519   1  
    19520   1     /****************************************************************/
    19521   1     /* This test ensures that the above code works when executed in */
    19522   1     /* a nested procedure.                                          */
    19523   1     /****************************************************************/
    19524   1  
    19525   1     put skip (one) list ('Im about to call the internal procedure now');
    19526   1  
    19527   1     call run_inner_proc;
    19528   1  
    19529   1   one = 1;
    19530   1  
    19531   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19532   2  
    19533   2        do J = 1 to INN_SIZE;
    19534   3  
    19535   3           /*******************************************************/
    19536   3           /* The following assignments are semantically the same */
    19537   3           /* and should produce IDENTICAL code.                  */
    19538   3           /*******************************************************/
    19539   3  
    19540   3           s_element(I,J)                   = 1;
    19541   3           s_element(I)(J)                  = 1;
    19542   3           static_structure(I).s_element(J) = 1;
    19543   3           static_structure.s_element(I,J)  = 1;
    19544   3           static_structure.s_element(I)(J) = 1;     
    19545   3  
    19546   3        end;
    19547   2  
    19548   2     end;
    19549   1  
    19550   1     if I ^= MAX_SIZE + 1 then
    19551   1        do;
    19552   2        put skip (one) list ('Loop termination error 1');
    19553   2        end;
    19554   1  
    19555   1     put skip(one) list('Loop 1 ended fine.');
    19556   1  
    19557   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19558   2  
    19559   2        do j = 1 to INN_SIZE;
    19560   3  
    19561   3           /*******************************************************/
    19562   3           /* The following assignments are semantically the same */
    19563   3           /* and should produce IDENTICAL code.                  */
    19564   3           /*******************************************************/
    19565   3  
    19566   3           s_element(i,j)                   = 1;
    19567   3           s_element(i)(j)                  = 1;
    19568   3           static_structure(i).s_element(j) = 1;
    19569   3           static_structure.s_element(i,j)  = 1;
    19570   3           static_structure.s_element(i)(j) = 1;     
    19571   3  
    19572   3        end;
    19573   2  
    19574   2     end;
    19575   1  
    19576   1     if I ^= MAX_SIZE + 1 then
    19577   1        do;
    19578   2        put skip (one) list ('Loop termination error 2');
    19579   2        end;
    19580   1  
    19581   1     put skip(one) list('Loop 2 ended fine.');
    19582   1  
    19583   1  
    19584   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19585   2  
    19586   2        do J = 1 to INN_SIZE;
    19587   3  
    19588   3           /*******************************************************/
    19589   3           /* The following assignments are semantically the same */
    19590   3           /* and should produce IDENTICAL code.                  */
    19591   3           /*******************************************************/
    19592   3  
    19593   3           a_element(I,J)                 = 1;
    19594   3           a_element(I)(J)                = 1;
    19595   3           auto_structure(I).a_element(J) = 1;
    19596   3           auto_structure.a_element(I,J)  = 1;
    19597   3           auto_structure.a_element(I)(J) = 1;     
    19598   3  
    19599   3        end;
    19600   2  
    19601   2     end;
    19602   1  
    19603   1     if I ^= MAX_SIZE + 1 then
    19604   1        do;
    19605   2        put skip (one) list ('Loop termination error 3');
    19606   2        end;
    19607   1  
    19608   1     put skip(one) list('Loop 3 ended fine.');
    19609   1  
    19610   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19611   2  
    19612   2        do j = 1 to INN_SIZE;
    19613   3  
    19614   3           /*******************************************************/
    19615   3           /* The following assignments are semantically the same */
    19616   3           /* and should produce IDENTICAL code.                  */
    19617   3           /*******************************************************/
    19618   3  
    19619   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19620   3           a_element(i)(j)                = 1;
    19621   3           auto_structure(i).a_element(j) = 1;
    19622   3           auto_structure.a_element(i,j)  = 1;
    19623   3           auto_structure.a_element(i)(j) = 1;     
    19624   3  
    19625   3        end;
    19626   2  
    19627   2     end;
    19628   1  
    19629   1     if I ^= MAX_SIZE + 1 then
    19630   1        do;
    19631   2        put skip (one) list ('Loop termination error 4');
    19632   2        end;
    19633   1  
    19634   1     put skip(one) list('Loop 4 ended fine.');
    19635   1  
    19636   1     /****************************************************************/
    19637   1     /* This test ensures that the above code works when executed in */
    19638   1     /* a nested procedure.                                          */
    19639   1     /****************************************************************/
    19640   1  
    19641   1     put skip (one) list ('Im about to call the internal procedure now');
    19642   1  
    19643   1     call run_inner_proc;
    19644   1  
    19645   1   one = 1;
    19646   1  
    19647   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19648   2  
    19649   2        do J = 1 to INN_SIZE;
    19650   3  
    19651   3           /*******************************************************/
    19652   3           /* The following assignments are semantically the same */
    19653   3           /* and should produce IDENTICAL code.                  */
    19654   3           /*******************************************************/
    19655   3  
    19656   3           s_element(I,J)                   = 1;
    19657   3           s_element(I)(J)                  = 1;
    19658   3           static_structure(I).s_element(J) = 1;
    19659   3           static_structure.s_element(I,J)  = 1;
    19660   3           static_structure.s_element(I)(J) = 1;     
    19661   3  
    19662   3        end;
    19663   2  
    19664   2     end;
    19665   1  
    19666   1     if I ^= MAX_SIZE + 1 then
    19667   1        do;
    19668   2        put skip (one) list ('Loop termination error 1');
    19669   2        end;
    19670   1  
    19671   1     put skip(one) list('Loop 1 ended fine.');
    19672   1  
    19673   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19674   2  
    19675   2        do j = 1 to INN_SIZE;
    19676   3  
    19677   3           /*******************************************************/
    19678   3           /* The following assignments are semantically the same */
    19679   3           /* and should produce IDENTICAL code.                  */
    19680   3           /*******************************************************/
    19681   3  
    19682   3           s_element(i,j)                   = 1;
    19683   3           s_element(i)(j)                  = 1;
    19684   3           static_structure(i).s_element(j) = 1;
    19685   3           static_structure.s_element(i,j)  = 1;
    19686   3           static_structure.s_element(i)(j) = 1;     
    19687   3  
    19688   3        end;
    19689   2  
    19690   2     end;
    19691   1  
    19692   1     if I ^= MAX_SIZE + 1 then
    19693   1        do;
    19694   2        put skip (one) list ('Loop termination error 2');
    19695   2        end;
    19696   1  
    19697   1     put skip(one) list('Loop 2 ended fine.');
    19698   1  
    19699   1  
    19700   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19701   2  
    19702   2        do J = 1 to INN_SIZE;
    19703   3  
    19704   3           /*******************************************************/
    19705   3           /* The following assignments are semantically the same */
    19706   3           /* and should produce IDENTICAL code.                  */
    19707   3           /*******************************************************/
    19708   3  
    19709   3           a_element(I,J)                 = 1;
    19710   3           a_element(I)(J)                = 1;
    19711   3           auto_structure(I).a_element(J) = 1;
    19712   3           auto_structure.a_element(I,J)  = 1;
    19713   3           auto_structure.a_element(I)(J) = 1;     
    19714   3  
    19715   3        end;
    19716   2  
    19717   2     end;
    19718   1  
    19719   1     if I ^= MAX_SIZE + 1 then
    19720   1        do;
    19721   2        put skip (one) list ('Loop termination error 3');
    19722   2        end;
    19723   1  
    19724   1     put skip(one) list('Loop 3 ended fine.');
    19725   1  
    19726   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19727   2  
    19728   2        do j = 1 to INN_SIZE;
    19729   3  
    19730   3           /*******************************************************/
    19731   3           /* The following assignments are semantically the same */
    19732   3           /* and should produce IDENTICAL code.                  */
    19733   3           /*******************************************************/
    19734   3  
    19735   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19736   3           a_element(i)(j)                = 1;
    19737   3           auto_structure(i).a_element(j) = 1;
    19738   3           auto_structure.a_element(i,j)  = 1;
    19739   3           auto_structure.a_element(i)(j) = 1;     
    19740   3  
    19741   3        end;
    19742   2  
    19743   2     end;
    19744   1  
    19745   1     if I ^= MAX_SIZE + 1 then
    19746   1        do;
    19747   2        put skip (one) list ('Loop termination error 4');
    19748   2        end;
    19749   1  
    19750   1     put skip(one) list('Loop 4 ended fine.');
    19751   1  
    19752   1     /****************************************************************/
    19753   1     /* This test ensures that the above code works when executed in */
    19754   1     /* a nested procedure.                                          */
    19755   1     /****************************************************************/
    19756   1  
    19757   1     put skip (one) list ('Im about to call the internal procedure now');
    19758   1  
    19759   1     call run_inner_proc;
    19760   1  
    19761   1   one = 1;
    19762   1  
    19763   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19764   2  
    19765   2        do J = 1 to INN_SIZE;
    19766   3  
    19767   3           /*******************************************************/
    19768   3           /* The following assignments are semantically the same */
    19769   3           /* and should produce IDENTICAL code.                  */
    19770   3           /*******************************************************/
    19771   3  
    19772   3           s_element(I,J)                   = 1;
    19773   3           s_element(I)(J)                  = 1;
    19774   3           static_structure(I).s_element(J) = 1;
    19775   3           static_structure.s_element(I,J)  = 1;
    19776   3           static_structure.s_element(I)(J) = 1;     
    19777   3  
    19778   3        end;
    19779   2  
    19780   2     end;
    19781   1  
    19782   1     if I ^= MAX_SIZE + 1 then
    19783   1        do;
    19784   2        put skip (one) list ('Loop termination error 1');
    19785   2        end;
    19786   1  
    19787   1     put skip(one) list('Loop 1 ended fine.');
    19788   1  
    19789   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19790   2  
    19791   2        do j = 1 to INN_SIZE;
    19792   3  
    19793   3           /*******************************************************/
    19794   3           /* The following assignments are semantically the same */
    19795   3           /* and should produce IDENTICAL code.                  */
    19796   3           /*******************************************************/
    19797   3  
    19798   3           s_element(i,j)                   = 1;
    19799   3           s_element(i)(j)                  = 1;
    19800   3           static_structure(i).s_element(j) = 1;
    19801   3           static_structure.s_element(i,j)  = 1;
    19802   3           static_structure.s_element(i)(j) = 1;     
    19803   3  
    19804   3        end;
    19805   2  
    19806   2     end;
    19807   1  
    19808   1     if I ^= MAX_SIZE + 1 then
    19809   1        do;
    19810   2        put skip (one) list ('Loop termination error 2');
    19811   2        end;
    19812   1  
    19813   1     put skip(one) list('Loop 2 ended fine.');
    19814   1  
    19815   1  
    19816   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19817   2  
    19818   2        do J = 1 to INN_SIZE;
    19819   3  
    19820   3           /*******************************************************/
    19821   3           /* The following assignments are semantically the same */
    19822   3           /* and should produce IDENTICAL code.                  */
    19823   3           /*******************************************************/
    19824   3  
    19825   3           a_element(I,J)                 = 1;
    19826   3           a_element(I)(J)                = 1;
    19827   3           auto_structure(I).a_element(J) = 1;
    19828   3           auto_structure.a_element(I,J)  = 1;
    19829   3           auto_structure.a_element(I)(J) = 1;     
    19830   3  
    19831   3        end;
    19832   2  
    19833   2     end;
    19834   1  
    19835   1     if I ^= MAX_SIZE + 1 then
    19836   1        do;
    19837   2        put skip (one) list ('Loop termination error 3');
    19838   2        end;
    19839   1  
    19840   1     put skip(one) list('Loop 3 ended fine.');
    19841   1  
    19842   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19843   2  
    19844   2        do j = 1 to INN_SIZE;
    19845   3  
    19846   3           /*******************************************************/
    19847   3           /* The following assignments are semantically the same */
    19848   3           /* and should produce IDENTICAL code.                  */
    19849   3           /*******************************************************/
    19850   3  
    19851   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19852   3           a_element(i)(j)                = 1;
    19853   3           auto_structure(i).a_element(j) = 1;
    19854   3           auto_structure.a_element(i,j)  = 1;
    19855   3           auto_structure.a_element(i)(j) = 1;     
    19856   3  
    19857   3        end;
    19858   2  
    19859   2     end;
    19860   1  
    19861   1     if I ^= MAX_SIZE + 1 then
    19862   1        do;
    19863   2        put skip (one) list ('Loop termination error 4');
    19864   2        end;
    19865   1  
    19866   1     put skip(one) list('Loop 4 ended fine.');
    19867   1  
    19868   1     /****************************************************************/
    19869   1     /* This test ensures that the above code works when executed in */
    19870   1     /* a nested procedure.                                          */
    19871   1     /****************************************************************/
    19872   1  
    19873   1     put skip (one) list ('Im about to call the internal procedure now');
    19874   1  
    19875   1     call run_inner_proc;
    19876   1  
    19877   1   one = 1;
    19878   1  
    19879   1     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    19880   2  
    19881   2        do J = 1 to INN_SIZE;
    19882   3  
    19883   3           /*******************************************************/
    19884   3           /* The following assignments are semantically the same */
    19885   3           /* and should produce IDENTICAL code.                  */
    19886   3           /*******************************************************/
    19887   3  
    19888   3           s_element(I,J)                   = 1;
    19889   3           s_element(I)(J)                  = 1;
    19890   3           static_structure(I).s_element(J) = 1;
    19891   3           static_structure.s_element(I,J)  = 1;
    19892   3           static_structure.s_element(I)(J) = 1;     
    19893   3  
    19894   3        end;
    19895   2  
    19896   2     end;
    19897   1  
    19898   1     if I ^= MAX_SIZE + 1 then
    19899   1        do;
    19900   2        put skip (one) list ('Loop termination error 1');
    19901   2        end;
    19902   1  
    19903   1     put skip(one) list('Loop 1 ended fine.');
    19904   1  
    19905   1     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    19906   2  
    19907   2        do j = 1 to INN_SIZE;
    19908   3  
    19909   3           /*******************************************************/
    19910   3           /* The following assignments are semantically the same */
    19911   3           /* and should produce IDENTICAL code.                  */
    19912   3           /*******************************************************/
    19913   3  
    19914   3           s_element(i,j)                   = 1;
    19915   3           s_element(i)(j)                  = 1;
    19916   3           static_structure(i).s_element(j) = 1;
    19917   3           static_structure.s_element(i,j)  = 1;
    19918   3           static_structure.s_element(i)(j) = 1;     
    19919   3  
    19920   3        end;
    19921   2  
    19922   2     end;
    19923   1  
    19924   1     if I ^= MAX_SIZE + 1 then
    19925   1        do;
    19926   2        put skip (one) list ('Loop termination error 2');
    19927   2        end;
    19928   1  
    19929   1     put skip(one) list('Loop 2 ended fine.');
    19930   1  
    19931   1  
    19932   1     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    19933   2  
    19934   2        do J = 1 to INN_SIZE;
    19935   3  
    19936   3           /*******************************************************/
    19937   3           /* The following assignments are semantically the same */
    19938   3           /* and should produce IDENTICAL code.                  */
    19939   3           /*******************************************************/
    19940   3  
    19941   3           a_element(I,J)                 = 1;
    19942   3           a_element(I)(J)                = 1;
    19943   3           auto_structure(I).a_element(J) = 1;
    19944   3           auto_structure.a_element(I,J)  = 1;
    19945   3           auto_structure.a_element(I)(J) = 1;     
    19946   3  
    19947   3        end;
    19948   2  
    19949   2     end;
    19950   1  
    19951   1     if I ^= MAX_SIZE + 1 then
    19952   1        do;
    19953   2        put skip (one) list ('Loop termination error 3');
    19954   2        end;
    19955   1  
    19956   1     put skip(one) list('Loop 3 ended fine.');
    19957   1  
    19958   1     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    19959   2  
    19960   2        do j = 1 to INN_SIZE;
    19961   3  
    19962   3           /*******************************************************/
    19963   3           /* The following assignments are semantically the same */
    19964   3           /* and should produce IDENTICAL code.                  */
    19965   3           /*******************************************************/
    19966   3  
    19967   3           a_element(i,j)                 = 1; /* kills 'one' when I=11 & J=6 */
    19968   3           a_element(i)(j)                = 1;
    19969   3           auto_structure(i).a_element(j) = 1;
    19970   3           auto_structure.a_element(i,j)  = 1;
    19971   3           auto_structure.a_element(i)(j) = 1;     
    19972   3  
    19973   3        end; 
    19974   2  
    19975   2     end;
    19976   1  
    19977   1     if I ^= MAX_SIZE + 1 then
    19978   1        do;
    19979   2        put skip (one) list ('Loop termination error 4');
    19980   2        end;
    19981   1  
    19982   1     put skip(one) list('Loop 4 ended fine.');
    19983   1  
    19984   1     /****************************************************************/
    19985   1     /* This test ensures that the above code works when executed in */
    19986   1     /* a nested procedure.                                          */
    19987   1     /****************************************************************/
    19988   1  
    19989   1     put skip (one) list ('Im about to call the internal procedure now');
    19990   1  
    19991   1     call run_inner_proc;
    19992   1  
    19993   1  
    19994   1     put skip (one) list ('The internal procedure has returned OK');
    19995   1  
    19996   1  
    19997   1  run_inner_proc:
    19998   1  
    19999   1     proc;
    20000   2  
    20001   2     /*******************************************************************/
    20002   2     /* This executes the array access code as above but from the point */
    20003   2     /* of view of an internal block.                                   */
    20004   2     /*******************************************************************/   
    20005   2  
    20006   2     /****************************************************************/
    20007   2     /* This test ensures that array/structure access is working OK  */
    20008   2     /****************************************************************/
    20009   2  
    20010   2     put skip (one) list ('Im the internal proc, and Ive just been called');
    20011   2  
    20012   2     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    20013   3  
    20014   3        do J = 1 to INN_SIZE;
    20015   4  
    20016   4           /*******************************************************/
    20017   4           /* The following assignments are semantically the same */
    20018   4           /* and should produce IDENTICAL code.                  */
    20019   4           /*******************************************************/
    20020   4  
    20021   4           s_element(I,J)                   = 1;
    20022   4           s_element(I)(J)                  = 1;
    20023   4           static_structure(I).s_element(J) = 1;
    20024   4           static_structure.s_element(I,J)  = 1;
    20025   4           static_structure.s_element(I)(J) = 1;     
    20026   4  
    20027   4        end;
    20028   3  
    20029   3     end;
    20030   2  
    20031   2     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    20032   3  
    20033   3        do j = 1 to INN_SIZE;
    20034   4  
    20035   4           /*******************************************************/
    20036   4           /* The following assignments are semantically the same */
    20037   4           /* and should produce IDENTICAL code.                  */
    20038   4           /*******************************************************/
    20039   4  
    20040   4           s_element(i,j)                   = 1;
    20041   4           s_element(i)(j)                  = 1;
    20042   4           static_structure(i).s_element(j) = 1;
    20043   4           static_structure.s_element(i,j)  = 1;
    20044   4           static_structure.s_element(i)(j) = 1;     
    20045   4  
    20046   4        end;
    20047   3  
    20048   3     end;
    20049   2  
    20050   2  
    20051   2     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    20052   3  
    20053   3        do J = 1 to INN_SIZE;
    20054   4  
    20055   4           /*******************************************************/
    20056   4           /* The following assignments are semantically the same */
    20057   4           /* and should produce IDENTICAL code.                  */
    20058   4           /*******************************************************/
    20059   4  
    20060   4           a_element(I,J)                 = 1;
    20061   4           a_element(I)(J)                = 1;
    20062   4           auto_structure(I).a_element(J) = 1;
    20063   4           auto_structure.a_element(I,J)  = 1;
    20064   4           auto_structure.a_element(I)(J) = 1;     
    20065   4  
    20066   4        end;
    20067   3  
    20068   3     end;
    20069   2  
    20070   2     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    20071   3  
    20072   3        do j = 1 to INN_SIZE;
    20073   4  
    20074   4           /*******************************************************/
    20075   4           /* The following assignments are semantically the same */
    20076   4           /* and should produce IDENTICAL code.                  */
    20077   4           /*******************************************************/
    20078   4  
    20079   4           a_element(i,j)                 = 1;
    20080   4           a_element(i)(j)                = 1;
    20081   4           auto_structure(i).a_element(j) = 1;
    20082   4           auto_structure.a_element(i,j)  = 1;
    20083   4           auto_structure.a_element(i)(j) = 1;     
    20084   4  
    20085   4        end;
    20086   3  
    20087   3     end;
    20088   2  
    20089   2  
    20090   2     put skip (one) list ('Im about to call the very internal procedure');
    20091   2  
    20092   2     call run_very_inner_proc;
    20093   2  
    20094   2     put skip (one) list ('The very internal procedure has returned OK');
    20095   2  
    20096   2     put skip (one) list ('Im the internal proc, and Ive just finished');
    20097   2  
    20098   2  
    20099   2  run_very_inner_proc:
    20100   2  
    20101   2     proc;
    20102   3  
    20103   3     /*******************************************************************/
    20104   3     /* This executes the array access code as above but from the point */
    20105   3     /* of view of an internal block.                                   */
    20106   3     /*******************************************************************/   
    20107   3  
    20108   3     /****************************************************************/
    20109   3     /* This test ensures that array/structure access is working OK  */
    20110   3     /****************************************************************/
    20111   3  
    20112   3     put skip (one) list ('Im the very internal proc, and Ive just been called');
    20113   3  
    20114   3     do I = 1 to MAX_SIZE;       /* static array indexed by statics */
    20115   4  
    20116   4        do J = 1 to INN_SIZE;
    20117   5  
    20118   5           /*******************************************************/
    20119   5           /* The following assignments are semantically the same */
    20120   5           /* and should produce IDENTICAL code.                  */
    20121   5           /*******************************************************/
    20122   5  
    20123   5           s_element(I,J)                   = 1;
    20124   5           s_element(I)(J)                  = 1;
    20125   5           static_structure(I).s_element(J) = 1;
    20126   5           static_structure.s_element(I,J)  = 1;
    20127   5           static_structure.s_element(I)(J) = 1;     
    20128   5  
    20129   5        end;
    20130   4  
    20131   4     end;
    20132   3  
    20133   3     do i = 1 to MAX_SIZE;      /* static array indexed by autos */
    20134   4  
    20135   4        do j = 1 to INN_SIZE;
    20136   5  
    20137   5           /*******************************************************/
    20138   5           /* The following assignments are semantically the same */
    20139   5           /* and should produce IDENTICAL code.                  */
    20140   5           /*******************************************************/
    20141   5  
    20142   5           s_element(i,j)                   = 1;
    20143   5           s_element(i)(j)                  = 1;
    20144   5           static_structure(i).s_element(j) = 1;
    20145   5           static_structure.s_element(i,j)  = 1;
    20146   5           static_structure.s_element(i)(j) = 1;     
    20147   5  
    20148   5        end;
    20149   4  
    20150   4     end;
    20151   3  
    20152   3  
    20153   3     do I = 1 to MAX_SIZE;    /* auto array indexed by statics */
    20154   4  
    20155   4        do J = 1 to INN_SIZE;
    20156   5  
    20157   5           /*******************************************************/
    20158   5           /* The following assignments are semantically the same */
    20159   5           /* and should produce IDENTICAL code.                  */
    20160   5           /*******************************************************/
    20161   5  
    20162   5           a_element(I,J)                 = 1;
    20163   5           a_element(I)(J)                = 1;
    20164   5           auto_structure(I).a_element(J) = 1;
    20165   5           auto_structure.a_element(I,J)  = 1;
    20166   5           auto_structure.a_element(I)(J) = 1;     
    20167   5  
    20168   5        end;
    20169   4  
    20170   4     end;
    20171   3  
    20172   3     do i = 1 to MAX_SIZE;    /* auto array indexed by autos */
    20173   4  
    20174   4        do j = 1 to INN_SIZE;
    20175   5  
    20176   5           /*******************************************************/
    20177   5           /* The following assignments are semantically the same */
    20178   5           /* and should produce IDENTICAL code.                  */
    20179   5           /*******************************************************/
    20180   5  
    20181   5           a_element(i,j)                 = 1;
    20182   5           a_element(i)(j)                = 1;
    20183   5           auto_structure(i).a_element(j) = 1;
    20184   5           auto_structure.a_element(i,j)  = 1;
    20185   5           auto_structure.a_element(i)(j) = 1;     
    20186   5  
    20187   5        end;
    20188   4  
    20189   4     end;
    20190   3  
    20191   3     put skip (one) list ('Im the very internal proc, and Ive just finished');
    20192   3  
    20193   3     end;
    20194   2  
    20195   2  
    20196   2     end;   
    20197   1  
    20198   1  end _massive;

ATTRIBUTES AND CROSS REFERENCE TABLE

PROCEDURE _massive ON LINE 3                                                                       

NAME            CLASS     SIZE         OFX   ATTRIBUTES

auto_structure  automatic 140,14       0004  struc internal array dcl 27                           

  a_element     member    10           0000  bin(15,0) fixed array                                 

  x_coord       member    2            000A  bin(15,0) fixed                                       

  y_coord       member    2            000C  bin(15,0) fixed                                       

I               static    2            0002  bin(15,0) internal fixed dcl 32                       

i               automatic 2            0090  bin(15,0) internal fixed dcl 33                       

J               static    2            0004  bin(15,0) internal fixed dcl 32                       

j               automatic 2            0092  bin(15,0) internal fixed dcl 33                       

one             automatic 2            0094  bin(15,0) internal fixed dcl 34                       

run_inner_proc  static    8            0092  entry internal dcl 19999                              

static_structure                                                                                   
                static    140,14       0006  struc internal array dcl 22                           

  s_element     member    10           0000  bin(15,0) fixed array                                 

  x_coord       member    2            000A  bin(15,0) fixed                                       

  y_coord       member    2            000C  bin(15,0) fixed                                       



PROCEDURE run_inner_proc ON LINE 19999                                                           

NAME            CLASS     SIZE         OFX   ATTRIBUTES

run_very_inner_proc                                                                                
                static    8            0002  entry internal dcl 20101                              



PROCEDURE run_very_inner_proc ON LINE 20101                                                      

NAME            CLASS     SIZE         OFX   ATTRIBUTES


LENGTH OF STACK FRAMES:

BLOCK NAME                        LINE No     STACK

_massive                             3          150                                                         
run_inner_proc                   19999            4                                                         
run_very_inner_proc              20101            4                                                         

ASSEMBLY LISTING OF CODE GENERATED FOR Pentium Processor.


    LINE         3              /* Prolog Sequence */

    00000000  C8 960000         ENTER    1500
    00000004  89 8D6AFFFFFF     MOV      DWORD_PTR [EBP-150],ECX

    LINE        42

    0000000A  B8 01000000       MOV      EAX,1
    0000000F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE        44

    00000012  B8 01000000       MOV      EAX,1
    00000017  8B C8             MOV      ECX,EAX
    00000019  B8 0A000000       MOV      EAX,10
    0000001E  50                PUSH     EAX
    0000001F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000022  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000025  5B                POP      EBX
    00000026  53                PUSH     EBX
    00000027  3B C3             CMP      EAX,EBX
    00000029  0F 8E03000000     JLE      3
    0000002F  EB                JMP      

    LINE        46

    00000030  B8 01000000       MOV      EAX,1
    00000035  8B C8             MOV      ECX,EAX
    00000037  B8 05000000       MOV      EAX,5
    0000003C  50                PUSH     EAX
    0000003D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00000040  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000043  5B                POP      EBX
    00000044  53                PUSH     EBX
    00000045  3B C3             CMP      EAX,EBX
    00000047  0F 8E03000000     JLE      3
    0000004D  EB                JMP      

    LINE        53

    0000004E  B8 01000000       MOV      EAX,1
    00000053  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        54

    00000056  B8 01000000       MOV      EAX,1
    0000005B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        55

    0000005E  B8 01000000       MOV      EAX,1
    00000063  8B C8             MOV      ECX,EAX
    00000065  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000068  48                DEC      EAX
    00000069  BB 0E000000       MOV      EBX,14
    0000006E  F7 E3             MUL      EBX
    00000070  50                PUSH     EAX
    00000071  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000074  48                DEC      EAX
    00000075  BB 02000000       MOV      EBX,2
    0000007A  F7 E3             MUL      EBX
    0000007C  5B                POP      EBX
    0000007D  03 C3             ADD      EAX,EBX
    0000007F  8B F8             MOV      EDI,EAX
    00000081  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE        56

    00000085  B8 01000000       MOV      EAX,1
    0000008A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        57

    0000008D  B8 01000000       MOV      EAX,1
    00000092  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        59

    00000095  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000009C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000000A1  5B                POP      EBX

    LINE        61

    000000A2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000000A9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000000AE  5B                POP      EBX

    LINE        63

    000000AF  B8 0A000000       MOV      EAX,10
    000000B4  40                INC      EAX
    000000B5  50                PUSH     EAX
    000000B6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000000B9  5B                POP      EBX
    000000BA  3B C3             CMP      EAX,EBX
    000000BC  0F 8503000000     JNE      3
    000000C2  EB                JMP      

    LINE        70

    000000C3  B8 01000000       MOV      EAX,1
    000000C8  8B C8             MOV      ECX,EAX
    000000CA  B8 0A000000       MOV      EAX,10
    000000CF  50                PUSH     EAX
    000000D0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000000D3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000000D6  5B                POP      EBX
    000000D7  53                PUSH     EBX
    000000D8  3B C3             CMP      EAX,EBX
    000000DA  0F 8E03000000     JLE      3
    000000E0  EB                JMP      

    LINE        72

    000000E1  B8 01000000       MOV      EAX,1
    000000E6  8B C8             MOV      ECX,EAX
    000000E8  B8 05000000       MOV      EAX,5
    000000ED  50                PUSH     EAX
    000000EE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000000F1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000000F4  5B                POP      EBX
    000000F5  53                PUSH     EBX
    000000F6  3B C3             CMP      EAX,EBX
    000000F8  0F 8E03000000     JLE      3
    000000FE  EB                JMP      

    LINE        79

    000000FF  B8 01000000       MOV      EAX,1
    00000104  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        80

    00000107  B8 01000000       MOV      EAX,1
    0000010C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        81

    0000010F  B8 01000000       MOV      EAX,1
    00000114  8B C8             MOV      ECX,EAX
    00000116  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000119  48                DEC      EAX
    0000011A  BB 0E000000       MOV      EBX,14
    0000011F  F7 E3             MUL      EBX
    00000121  50                PUSH     EAX
    00000122  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000125  48                DEC      EAX
    00000126  BB 02000000       MOV      EBX,2
    0000012B  F7 E3             MUL      EBX
    0000012D  5B                POP      EBX
    0000012E  03 C3             ADD      EAX,EBX
    00000130  8B F8             MOV      EDI,EAX
    00000132  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE        82

    00000136  B8 01000000       MOV      EAX,1
    0000013B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        83

    0000013E  B8 01000000       MOV      EAX,1
    00000143  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE        85

    00000146  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000014D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00000152  5B                POP      EBX

    LINE        87

    00000153  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000015A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000015F  5B                POP      EBX

    LINE        89

    00000160  B8 0A000000       MOV      EAX,10
    00000165  40                INC      EAX
    00000166  50                PUSH     EAX
    00000167  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000016A  5B                POP      EBX
    0000016B  3B C3             CMP      EAX,EBX
    0000016D  0F 8503000000     JNE      3
    00000173  EB                JMP      

    LINE        97

    00000174  B8 01000000       MOV      EAX,1
    00000179  8B C8             MOV      ECX,EAX
    0000017B  B8 0A000000       MOV      EAX,10
    00000180  50                PUSH     EAX
    00000181  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000184  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000187  5B                POP      EBX
    00000188  53                PUSH     EBX
    00000189  3B C3             CMP      EAX,EBX
    0000018B  0F 8E03000000     JLE      3
    00000191  EB                JMP      

    LINE        99

    00000192  B8 01000000       MOV      EAX,1
    00000197  8B C8             MOV      ECX,EAX
    00000199  B8 05000000       MOV      EAX,5
    0000019E  50                PUSH     EAX
    0000019F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000001A2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000001A5  5B                POP      EBX
    000001A6  53                PUSH     EBX
    000001A7  3B C3             CMP      EAX,EBX
    000001A9  0F 8E03000000     JLE      3
    000001AF  EB                JMP      

    LINE       106

    000001B0  B8 01000000       MOV      EAX,1
    000001B5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       107

    000001BB  B8 01000000       MOV      EAX,1
    000001C0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       108

    000001C6  B8 01000000       MOV      EAX,1
    000001CB  8B C8             MOV      ECX,EAX
    000001CD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000001D0  48                DEC      EAX
    000001D1  BB 0E000000       MOV      EBX,14
    000001D6  F7 E3             MUL      EBX
    000001D8  50                PUSH     EAX
    000001D9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000001DC  48                DEC      EAX
    000001DD  BB 02000000       MOV      EBX,2
    000001E2  F7 E3             MUL      EBX
    000001E4  5B                POP      EBX
    000001E5  03 C3             ADD      EAX,EBX
    000001E7  8B F8             MOV      EDI,EAX
    000001E9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       109

    000001F0  B8 01000000       MOV      EAX,1
    000001F5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       110

    000001FB  B8 01000000       MOV      EAX,1
    00000200  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       112

    00000206  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000020D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00000212  5B                POP      EBX

    LINE       114

    00000213  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000021A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000021F  5B                POP      EBX

    LINE       116

    00000220  B8 0A000000       MOV      EAX,10
    00000225  40                INC      EAX
    00000226  50                PUSH     EAX
    00000227  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000022A  5B                POP      EBX
    0000022B  3B C3             CMP      EAX,EBX
    0000022D  0F 8503000000     JNE      3
    00000233  EB                JMP      

    LINE       123

    00000234  B8 01000000       MOV      EAX,1
    00000239  8B C8             MOV      ECX,EAX
    0000023B  B8 0A000000       MOV      EAX,10
    00000240  50                PUSH     EAX
    00000241  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00000244  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000247  5B                POP      EBX
    00000248  53                PUSH     EBX
    00000249  3B C3             CMP      EAX,EBX
    0000024B  0F 8E03000000     JLE      3
    00000251  EB                JMP      

    LINE       125

    00000252  B8 01000000       MOV      EAX,1
    00000257  8B C8             MOV      ECX,EAX
    00000259  B8 05000000       MOV      EAX,5
    0000025E  50                PUSH     EAX
    0000025F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00000262  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000265  5B                POP      EBX
    00000266  53                PUSH     EBX
    00000267  3B C3             CMP      EAX,EBX
    00000269  0F 8E03000000     JLE      3
    0000026F  EB                JMP      

    LINE       132

    00000270  B8 01000000       MOV      EAX,1
    00000275  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       133

    0000027B  B8 01000000       MOV      EAX,1
    00000280  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       134

    00000286  B8 01000000       MOV      EAX,1
    0000028B  8B C8             MOV      ECX,EAX
    0000028D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000290  48                DEC      EAX
    00000291  BB 0E000000       MOV      EBX,14
    00000296  F7 E3             MUL      EBX
    00000298  50                PUSH     EAX
    00000299  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000029C  48                DEC      EAX
    0000029D  BB 02000000       MOV      EBX,2
    000002A2  F7 E3             MUL      EBX
    000002A4  5B                POP      EBX
    000002A5  03 C3             ADD      EAX,EBX
    000002A7  8B F8             MOV      EDI,EAX
    000002A9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       135

    000002B0  B8 01000000       MOV      EAX,1
    000002B5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       136

    000002BB  B8 01000000       MOV      EAX,1
    000002C0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       138

    000002C6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000002CD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000002D2  5B                POP      EBX

    LINE       140

    000002D3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000002DA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000002DF  5B                POP      EBX

    LINE       142

    000002E0  B8 0A000000       MOV      EAX,10
    000002E5  40                INC      EAX
    000002E6  50                PUSH     EAX
    000002E7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000002EA  5B                POP      EBX
    000002EB  3B C3             CMP      EAX,EBX
    000002ED  0F 8503000000     JNE      3
    000002F3  EB                JMP      

    LINE       156

    000002F4  56                PUSH     ESI
    000002F5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000002FB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00000301  FF D1             CALL     ECX                       run_inner_proc
    00000303  5E                POP      ESI                       /* restore callers static pointer */

    LINE       157

    00000304  B8 01000000       MOV      EAX,1
    00000309  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       159

    0000030C  B8 01000000       MOV      EAX,1
    00000311  8B C8             MOV      ECX,EAX
    00000313  B8 0A000000       MOV      EAX,10
    00000318  50                PUSH     EAX
    00000319  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000031C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000031F  5B                POP      EBX
    00000320  53                PUSH     EBX
    00000321  3B C3             CMP      EAX,EBX
    00000323  0F 8E03000000     JLE      3
    00000329  EB                JMP      

    LINE       161

    0000032A  B8 01000000       MOV      EAX,1
    0000032F  8B C8             MOV      ECX,EAX
    00000331  B8 05000000       MOV      EAX,5
    00000336  50                PUSH     EAX
    00000337  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000033A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000033D  5B                POP      EBX
    0000033E  53                PUSH     EBX
    0000033F  3B C3             CMP      EAX,EBX
    00000341  0F 8E03000000     JLE      3
    00000347  EB                JMP      

    LINE       168

    00000348  B8 01000000       MOV      EAX,1
    0000034D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       169

    00000350  B8 01000000       MOV      EAX,1
    00000355  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       170

    00000358  B8 01000000       MOV      EAX,1
    0000035D  8B C8             MOV      ECX,EAX
    0000035F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000362  48                DEC      EAX
    00000363  BB 0E000000       MOV      EBX,14
    00000368  F7 E3             MUL      EBX
    0000036A  50                PUSH     EAX
    0000036B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000036E  48                DEC      EAX
    0000036F  BB 02000000       MOV      EBX,2
    00000374  F7 E3             MUL      EBX
    00000376  5B                POP      EBX
    00000377  03 C3             ADD      EAX,EBX
    00000379  8B F8             MOV      EDI,EAX
    0000037B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       171

    0000037F  B8 01000000       MOV      EAX,1
    00000384  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       172

    00000387  B8 01000000       MOV      EAX,1
    0000038C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       174

    0000038F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000396  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000039B  5B                POP      EBX

    LINE       176

    0000039C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000003A3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000003A8  5B                POP      EBX

    LINE       178

    000003A9  B8 0A000000       MOV      EAX,10
    000003AE  40                INC      EAX
    000003AF  50                PUSH     EAX
    000003B0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000003B3  5B                POP      EBX
    000003B4  3B C3             CMP      EAX,EBX
    000003B6  0F 8503000000     JNE      3
    000003BC  EB                JMP      

    LINE       185

    000003BD  B8 01000000       MOV      EAX,1
    000003C2  8B C8             MOV      ECX,EAX
    000003C4  B8 0A000000       MOV      EAX,10
    000003C9  50                PUSH     EAX
    000003CA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000003CD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000003D0  5B                POP      EBX
    000003D1  53                PUSH     EBX
    000003D2  3B C3             CMP      EAX,EBX
    000003D4  0F 8E03000000     JLE      3
    000003DA  EB                JMP      

    LINE       187

    000003DB  B8 01000000       MOV      EAX,1
    000003E0  8B C8             MOV      ECX,EAX
    000003E2  B8 05000000       MOV      EAX,5
    000003E7  50                PUSH     EAX
    000003E8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000003EB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000003EE  5B                POP      EBX
    000003EF  53                PUSH     EBX
    000003F0  3B C3             CMP      EAX,EBX
    000003F2  0F 8E03000000     JLE      3
    000003F8  EB                JMP      

    LINE       194

    000003F9  B8 01000000       MOV      EAX,1
    000003FE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       195

    00000401  B8 01000000       MOV      EAX,1
    00000406  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       196

    00000409  B8 01000000       MOV      EAX,1
    0000040E  8B C8             MOV      ECX,EAX
    00000410  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000413  48                DEC      EAX
    00000414  BB 0E000000       MOV      EBX,14
    00000419  F7 E3             MUL      EBX
    0000041B  50                PUSH     EAX
    0000041C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000041F  48                DEC      EAX
    00000420  BB 02000000       MOV      EBX,2
    00000425  F7 E3             MUL      EBX
    00000427  5B                POP      EBX
    00000428  03 C3             ADD      EAX,EBX
    0000042A  8B F8             MOV      EDI,EAX
    0000042C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       197

    00000430  B8 01000000       MOV      EAX,1
    00000435  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       198

    00000438  B8 01000000       MOV      EAX,1
    0000043D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       200

    00000440  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00000447  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000044C  5B                POP      EBX

    LINE       202

    0000044D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00000454  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00000459  5B                POP      EBX

    LINE       204

    0000045A  B8 0A000000       MOV      EAX,10
    0000045F  40                INC      EAX
    00000460  50                PUSH     EAX
    00000461  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000464  5B                POP      EBX
    00000465  3B C3             CMP      EAX,EBX
    00000467  0F 8503000000     JNE      3
    0000046D  EB                JMP      

    LINE       212

    0000046E  B8 01000000       MOV      EAX,1
    00000473  8B C8             MOV      ECX,EAX
    00000475  B8 0A000000       MOV      EAX,10
    0000047A  50                PUSH     EAX
    0000047B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000047E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000481  5B                POP      EBX
    00000482  53                PUSH     EBX
    00000483  3B C3             CMP      EAX,EBX
    00000485  0F 8E03000000     JLE      3
    0000048B  EB                JMP      

    LINE       214

    0000048C  B8 01000000       MOV      EAX,1
    00000491  8B C8             MOV      ECX,EAX
    00000493  B8 05000000       MOV      EAX,5
    00000498  50                PUSH     EAX
    00000499  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000049C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000049F  5B                POP      EBX
    000004A0  53                PUSH     EBX
    000004A1  3B C3             CMP      EAX,EBX
    000004A3  0F 8E03000000     JLE      3
    000004A9  EB                JMP      

    LINE       221

    000004AA  B8 01000000       MOV      EAX,1
    000004AF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       222

    000004B5  B8 01000000       MOV      EAX,1
    000004BA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       223

    000004C0  B8 01000000       MOV      EAX,1
    000004C5  8B C8             MOV      ECX,EAX
    000004C7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000004CA  48                DEC      EAX
    000004CB  BB 0E000000       MOV      EBX,14
    000004D0  F7 E3             MUL      EBX
    000004D2  50                PUSH     EAX
    000004D3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000004D6  48                DEC      EAX
    000004D7  BB 02000000       MOV      EBX,2
    000004DC  F7 E3             MUL      EBX
    000004DE  5B                POP      EBX
    000004DF  03 C3             ADD      EAX,EBX
    000004E1  8B F8             MOV      EDI,EAX
    000004E3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       224

    000004EA  B8 01000000       MOV      EAX,1
    000004EF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       225

    000004F5  B8 01000000       MOV      EAX,1
    000004FA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       227

    00000500  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000507  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000050C  5B                POP      EBX

    LINE       229

    0000050D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00000514  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00000519  5B                POP      EBX

    LINE       231

    0000051A  B8 0A000000       MOV      EAX,10
    0000051F  40                INC      EAX
    00000520  50                PUSH     EAX
    00000521  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000524  5B                POP      EBX
    00000525  3B C3             CMP      EAX,EBX
    00000527  0F 8503000000     JNE      3
    0000052D  EB                JMP      

    LINE       238

    0000052E  B8 01000000       MOV      EAX,1
    00000533  8B C8             MOV      ECX,EAX
    00000535  B8 0A000000       MOV      EAX,10
    0000053A  50                PUSH     EAX
    0000053B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000053E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000541  5B                POP      EBX
    00000542  53                PUSH     EBX
    00000543  3B C3             CMP      EAX,EBX
    00000545  0F 8E03000000     JLE      3
    0000054B  EB                JMP      

    LINE       240

    0000054C  B8 01000000       MOV      EAX,1
    00000551  8B C8             MOV      ECX,EAX
    00000553  B8 05000000       MOV      EAX,5
    00000558  50                PUSH     EAX
    00000559  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000055C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000055F  5B                POP      EBX
    00000560  53                PUSH     EBX
    00000561  3B C3             CMP      EAX,EBX
    00000563  0F 8E03000000     JLE      3
    00000569  EB                JMP      

    LINE       247

    0000056A  B8 01000000       MOV      EAX,1
    0000056F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       248

    00000575  B8 01000000       MOV      EAX,1
    0000057A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       249

    00000580  B8 01000000       MOV      EAX,1
    00000585  8B C8             MOV      ECX,EAX
    00000587  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000058A  48                DEC      EAX
    0000058B  BB 0E000000       MOV      EBX,14
    00000590  F7 E3             MUL      EBX
    00000592  50                PUSH     EAX
    00000593  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000596  48                DEC      EAX
    00000597  BB 02000000       MOV      EBX,2
    0000059C  F7 E3             MUL      EBX
    0000059E  5B                POP      EBX
    0000059F  03 C3             ADD      EAX,EBX
    000005A1  8B F8             MOV      EDI,EAX
    000005A3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       250

    000005AA  B8 01000000       MOV      EAX,1
    000005AF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       251

    000005B5  B8 01000000       MOV      EAX,1
    000005BA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       253

    000005C0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000005C7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000005CC  5B                POP      EBX

    LINE       255

    000005CD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000005D4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000005D9  5B                POP      EBX

    LINE       257

    000005DA  B8 0A000000       MOV      EAX,10
    000005DF  40                INC      EAX
    000005E0  50                PUSH     EAX
    000005E1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000005E4  5B                POP      EBX
    000005E5  3B C3             CMP      EAX,EBX
    000005E7  0F 8503000000     JNE      3
    000005ED  EB                JMP      

    LINE       271

    000005EE  56                PUSH     ESI
    000005EF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000005F5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000005FB  FF D1             CALL     ECX                       run_inner_proc
    000005FD  5E                POP      ESI                       /* restore callers static pointer */

    LINE       273

    000005FE  B8 01000000       MOV      EAX,1
    00000603  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       275

    00000606  B8 01000000       MOV      EAX,1
    0000060B  8B C8             MOV      ECX,EAX
    0000060D  B8 0A000000       MOV      EAX,10
    00000612  50                PUSH     EAX
    00000613  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000616  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000619  5B                POP      EBX
    0000061A  53                PUSH     EBX
    0000061B  3B C3             CMP      EAX,EBX
    0000061D  0F 8E03000000     JLE      3
    00000623  EB                JMP      

    LINE       277

    00000624  B8 01000000       MOV      EAX,1
    00000629  8B C8             MOV      ECX,EAX
    0000062B  B8 05000000       MOV      EAX,5
    00000630  50                PUSH     EAX
    00000631  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00000634  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000637  5B                POP      EBX
    00000638  53                PUSH     EBX
    00000639  3B C3             CMP      EAX,EBX
    0000063B  0F 8E03000000     JLE      3
    00000641  EB                JMP      

    LINE       284

    00000642  B8 01000000       MOV      EAX,1
    00000647  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       285

    0000064A  B8 01000000       MOV      EAX,1
    0000064F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       286

    00000652  B8 01000000       MOV      EAX,1
    00000657  8B C8             MOV      ECX,EAX
    00000659  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000065C  48                DEC      EAX
    0000065D  BB 0E000000       MOV      EBX,14
    00000662  F7 E3             MUL      EBX
    00000664  50                PUSH     EAX
    00000665  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000668  48                DEC      EAX
    00000669  BB 02000000       MOV      EBX,2
    0000066E  F7 E3             MUL      EBX
    00000670  5B                POP      EBX
    00000671  03 C3             ADD      EAX,EBX
    00000673  8B F8             MOV      EDI,EAX
    00000675  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       287

    00000679  B8 01000000       MOV      EAX,1
    0000067E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       288

    00000681  B8 01000000       MOV      EAX,1
    00000686  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       290

    00000689  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000690  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00000695  5B                POP      EBX

    LINE       292

    00000696  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000069D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000006A2  5B                POP      EBX

    LINE       294

    000006A3  B8 0A000000       MOV      EAX,10
    000006A8  40                INC      EAX
    000006A9  50                PUSH     EAX
    000006AA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000006AD  5B                POP      EBX
    000006AE  3B C3             CMP      EAX,EBX
    000006B0  0F 8503000000     JNE      3
    000006B6  EB                JMP      

    LINE       301

    000006B7  B8 01000000       MOV      EAX,1
    000006BC  8B C8             MOV      ECX,EAX
    000006BE  B8 0A000000       MOV      EAX,10
    000006C3  50                PUSH     EAX
    000006C4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000006C7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000006CA  5B                POP      EBX
    000006CB  53                PUSH     EBX
    000006CC  3B C3             CMP      EAX,EBX
    000006CE  0F 8E03000000     JLE      3
    000006D4  EB                JMP      

    LINE       303

    000006D5  B8 01000000       MOV      EAX,1
    000006DA  8B C8             MOV      ECX,EAX
    000006DC  B8 05000000       MOV      EAX,5
    000006E1  50                PUSH     EAX
    000006E2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000006E5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000006E8  5B                POP      EBX
    000006E9  53                PUSH     EBX
    000006EA  3B C3             CMP      EAX,EBX
    000006EC  0F 8E03000000     JLE      3
    000006F2  EB                JMP      

    LINE       310

    000006F3  B8 01000000       MOV      EAX,1
    000006F8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       311

    000006FB  B8 01000000       MOV      EAX,1
    00000700  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       312

    00000703  B8 01000000       MOV      EAX,1
    00000708  8B C8             MOV      ECX,EAX
    0000070A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000070D  48                DEC      EAX
    0000070E  BB 0E000000       MOV      EBX,14
    00000713  F7 E3             MUL      EBX
    00000715  50                PUSH     EAX
    00000716  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000719  48                DEC      EAX
    0000071A  BB 02000000       MOV      EBX,2
    0000071F  F7 E3             MUL      EBX
    00000721  5B                POP      EBX
    00000722  03 C3             ADD      EAX,EBX
    00000724  8B F8             MOV      EDI,EAX
    00000726  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       313

    0000072A  B8 01000000       MOV      EAX,1
    0000072F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       314

    00000732  B8 01000000       MOV      EAX,1
    00000737  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       316

    0000073A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00000741  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00000746  5B                POP      EBX

    LINE       318

    00000747  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000074E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00000753  5B                POP      EBX

    LINE       320

    00000754  B8 0A000000       MOV      EAX,10
    00000759  40                INC      EAX
    0000075A  50                PUSH     EAX
    0000075B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000075E  5B                POP      EBX
    0000075F  3B C3             CMP      EAX,EBX
    00000761  0F 8503000000     JNE      3
    00000767  EB                JMP      

    LINE       328

    00000768  B8 01000000       MOV      EAX,1
    0000076D  8B C8             MOV      ECX,EAX
    0000076F  B8 0A000000       MOV      EAX,10
    00000774  50                PUSH     EAX
    00000775  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000778  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000077B  5B                POP      EBX
    0000077C  53                PUSH     EBX
    0000077D  3B C3             CMP      EAX,EBX
    0000077F  0F 8E03000000     JLE      3
    00000785  EB                JMP      

    LINE       330

    00000786  B8 01000000       MOV      EAX,1
    0000078B  8B C8             MOV      ECX,EAX
    0000078D  B8 05000000       MOV      EAX,5
    00000792  50                PUSH     EAX
    00000793  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00000796  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000799  5B                POP      EBX
    0000079A  53                PUSH     EBX
    0000079B  3B C3             CMP      EAX,EBX
    0000079D  0F 8E03000000     JLE      3
    000007A3  EB                JMP      

    LINE       337

    000007A4  B8 01000000       MOV      EAX,1
    000007A9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       338

    000007AF  B8 01000000       MOV      EAX,1
    000007B4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       339

    000007BA  B8 01000000       MOV      EAX,1
    000007BF  8B C8             MOV      ECX,EAX
    000007C1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000007C4  48                DEC      EAX
    000007C5  BB 0E000000       MOV      EBX,14
    000007CA  F7 E3             MUL      EBX
    000007CC  50                PUSH     EAX
    000007CD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000007D0  48                DEC      EAX
    000007D1  BB 02000000       MOV      EBX,2
    000007D6  F7 E3             MUL      EBX
    000007D8  5B                POP      EBX
    000007D9  03 C3             ADD      EAX,EBX
    000007DB  8B F8             MOV      EDI,EAX
    000007DD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       340

    000007E4  B8 01000000       MOV      EAX,1
    000007E9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       341

    000007EF  B8 01000000       MOV      EAX,1
    000007F4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       343

    000007FA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000801  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00000806  5B                POP      EBX

    LINE       345

    00000807  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000080E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00000813  5B                POP      EBX

    LINE       347

    00000814  B8 0A000000       MOV      EAX,10
    00000819  40                INC      EAX
    0000081A  50                PUSH     EAX
    0000081B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000081E  5B                POP      EBX
    0000081F  3B C3             CMP      EAX,EBX
    00000821  0F 8503000000     JNE      3
    00000827  EB                JMP      

    LINE       354

    00000828  B8 01000000       MOV      EAX,1
    0000082D  8B C8             MOV      ECX,EAX
    0000082F  B8 0A000000       MOV      EAX,10
    00000834  50                PUSH     EAX
    00000835  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00000838  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000083B  5B                POP      EBX
    0000083C  53                PUSH     EBX
    0000083D  3B C3             CMP      EAX,EBX
    0000083F  0F 8E03000000     JLE      3
    00000845  EB                JMP      

    LINE       356

    00000846  B8 01000000       MOV      EAX,1
    0000084B  8B C8             MOV      ECX,EAX
    0000084D  B8 05000000       MOV      EAX,5
    00000852  50                PUSH     EAX
    00000853  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00000856  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000859  5B                POP      EBX
    0000085A  53                PUSH     EBX
    0000085B  3B C3             CMP      EAX,EBX
    0000085D  0F 8E03000000     JLE      3
    00000863  EB                JMP      

    LINE       363

    00000864  B8 01000000       MOV      EAX,1
    00000869  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       364

    0000086F  B8 01000000       MOV      EAX,1
    00000874  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       365

    0000087A  B8 01000000       MOV      EAX,1
    0000087F  8B C8             MOV      ECX,EAX
    00000881  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000884  48                DEC      EAX
    00000885  BB 0E000000       MOV      EBX,14
    0000088A  F7 E3             MUL      EBX
    0000088C  50                PUSH     EAX
    0000088D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000890  48                DEC      EAX
    00000891  BB 02000000       MOV      EBX,2
    00000896  F7 E3             MUL      EBX
    00000898  5B                POP      EBX
    00000899  03 C3             ADD      EAX,EBX
    0000089B  8B F8             MOV      EDI,EAX
    0000089D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       366

    000008A4  B8 01000000       MOV      EAX,1
    000008A9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       367

    000008AF  B8 01000000       MOV      EAX,1
    000008B4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       369

    000008BA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000008C1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000008C6  5B                POP      EBX

    LINE       371

    000008C7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000008CE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000008D3  5B                POP      EBX

    LINE       373

    000008D4  B8 0A000000       MOV      EAX,10
    000008D9  40                INC      EAX
    000008DA  50                PUSH     EAX
    000008DB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000008DE  5B                POP      EBX
    000008DF  3B C3             CMP      EAX,EBX
    000008E1  0F 8503000000     JNE      3
    000008E7  EB                JMP      

    LINE       387

    000008E8  56                PUSH     ESI
    000008E9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000008EF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000008F5  FF D1             CALL     ECX                       run_inner_proc
    000008F7  5E                POP      ESI                       /* restore callers static pointer */

    LINE       389

    000008F8  B8 01000000       MOV      EAX,1
    000008FD  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       391

    00000900  B8 01000000       MOV      EAX,1
    00000905  8B C8             MOV      ECX,EAX
    00000907  B8 0A000000       MOV      EAX,10
    0000090C  50                PUSH     EAX
    0000090D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000910  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000913  5B                POP      EBX
    00000914  53                PUSH     EBX
    00000915  3B C3             CMP      EAX,EBX
    00000917  0F 8E03000000     JLE      3
    0000091D  EB                JMP      

    LINE       393

    0000091E  B8 01000000       MOV      EAX,1
    00000923  8B C8             MOV      ECX,EAX
    00000925  B8 05000000       MOV      EAX,5
    0000092A  50                PUSH     EAX
    0000092B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000092E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000931  5B                POP      EBX
    00000932  53                PUSH     EBX
    00000933  3B C3             CMP      EAX,EBX
    00000935  0F 8E03000000     JLE      3
    0000093B  EB                JMP      

    LINE       400

    0000093C  B8 01000000       MOV      EAX,1
    00000941  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       401

    00000944  B8 01000000       MOV      EAX,1
    00000949  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       402

    0000094C  B8 01000000       MOV      EAX,1
    00000951  8B C8             MOV      ECX,EAX
    00000953  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000956  48                DEC      EAX
    00000957  BB 0E000000       MOV      EBX,14
    0000095C  F7 E3             MUL      EBX
    0000095E  50                PUSH     EAX
    0000095F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000962  48                DEC      EAX
    00000963  BB 02000000       MOV      EBX,2
    00000968  F7 E3             MUL      EBX
    0000096A  5B                POP      EBX
    0000096B  03 C3             ADD      EAX,EBX
    0000096D  8B F8             MOV      EDI,EAX
    0000096F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       403

    00000973  B8 01000000       MOV      EAX,1
    00000978  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       404

    0000097B  B8 01000000       MOV      EAX,1
    00000980  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       406

    00000983  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000098A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000098F  5B                POP      EBX

    LINE       408

    00000990  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00000997  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000099C  5B                POP      EBX

    LINE       410

    0000099D  B8 0A000000       MOV      EAX,10
    000009A2  40                INC      EAX
    000009A3  50                PUSH     EAX
    000009A4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000009A7  5B                POP      EBX
    000009A8  3B C3             CMP      EAX,EBX
    000009AA  0F 8503000000     JNE      3
    000009B0  EB                JMP      

    LINE       417

    000009B1  B8 01000000       MOV      EAX,1
    000009B6  8B C8             MOV      ECX,EAX
    000009B8  B8 0A000000       MOV      EAX,10
    000009BD  50                PUSH     EAX
    000009BE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000009C1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000009C4  5B                POP      EBX
    000009C5  53                PUSH     EBX
    000009C6  3B C3             CMP      EAX,EBX
    000009C8  0F 8E03000000     JLE      3
    000009CE  EB                JMP      

    LINE       419

    000009CF  B8 01000000       MOV      EAX,1
    000009D4  8B C8             MOV      ECX,EAX
    000009D6  B8 05000000       MOV      EAX,5
    000009DB  50                PUSH     EAX
    000009DC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000009DF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000009E2  5B                POP      EBX
    000009E3  53                PUSH     EBX
    000009E4  3B C3             CMP      EAX,EBX
    000009E6  0F 8E03000000     JLE      3
    000009EC  EB                JMP      

    LINE       426

    000009ED  B8 01000000       MOV      EAX,1
    000009F2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       427

    000009F5  B8 01000000       MOV      EAX,1
    000009FA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       428

    000009FD  B8 01000000       MOV      EAX,1
    00000A02  8B C8             MOV      ECX,EAX
    00000A04  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000A07  48                DEC      EAX
    00000A08  BB 0E000000       MOV      EBX,14
    00000A0D  F7 E3             MUL      EBX
    00000A0F  50                PUSH     EAX
    00000A10  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000A13  48                DEC      EAX
    00000A14  BB 02000000       MOV      EBX,2
    00000A19  F7 E3             MUL      EBX
    00000A1B  5B                POP      EBX
    00000A1C  03 C3             ADD      EAX,EBX
    00000A1E  8B F8             MOV      EDI,EAX
    00000A20  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       429

    00000A24  B8 01000000       MOV      EAX,1
    00000A29  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       430

    00000A2C  B8 01000000       MOV      EAX,1
    00000A31  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       432

    00000A34  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00000A3B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00000A40  5B                POP      EBX

    LINE       434

    00000A41  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00000A48  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00000A4D  5B                POP      EBX

    LINE       436

    00000A4E  B8 0A000000       MOV      EAX,10
    00000A53  40                INC      EAX
    00000A54  50                PUSH     EAX
    00000A55  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000A58  5B                POP      EBX
    00000A59  3B C3             CMP      EAX,EBX
    00000A5B  0F 8503000000     JNE      3
    00000A61  EB                JMP      

    LINE       444

    00000A62  B8 01000000       MOV      EAX,1
    00000A67  8B C8             MOV      ECX,EAX
    00000A69  B8 0A000000       MOV      EAX,10
    00000A6E  50                PUSH     EAX
    00000A6F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000A72  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000A75  5B                POP      EBX
    00000A76  53                PUSH     EBX
    00000A77  3B C3             CMP      EAX,EBX
    00000A79  0F 8E03000000     JLE      3
    00000A7F  EB                JMP      

    LINE       446

    00000A80  B8 01000000       MOV      EAX,1
    00000A85  8B C8             MOV      ECX,EAX
    00000A87  B8 05000000       MOV      EAX,5
    00000A8C  50                PUSH     EAX
    00000A8D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00000A90  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000A93  5B                POP      EBX
    00000A94  53                PUSH     EBX
    00000A95  3B C3             CMP      EAX,EBX
    00000A97  0F 8E03000000     JLE      3
    00000A9D  EB                JMP      

    LINE       453

    00000A9E  B8 01000000       MOV      EAX,1
    00000AA3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       454

    00000AA9  B8 01000000       MOV      EAX,1
    00000AAE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       455

    00000AB4  B8 01000000       MOV      EAX,1
    00000AB9  8B C8             MOV      ECX,EAX
    00000ABB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000ABE  48                DEC      EAX
    00000ABF  BB 0E000000       MOV      EBX,14
    00000AC4  F7 E3             MUL      EBX
    00000AC6  50                PUSH     EAX
    00000AC7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000ACA  48                DEC      EAX
    00000ACB  BB 02000000       MOV      EBX,2
    00000AD0  F7 E3             MUL      EBX
    00000AD2  5B                POP      EBX
    00000AD3  03 C3             ADD      EAX,EBX
    00000AD5  8B F8             MOV      EDI,EAX
    00000AD7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       456

    00000ADE  B8 01000000       MOV      EAX,1
    00000AE3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       457

    00000AE9  B8 01000000       MOV      EAX,1
    00000AEE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       459

    00000AF4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000AFB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00000B00  5B                POP      EBX

    LINE       461

    00000B01  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00000B08  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00000B0D  5B                POP      EBX

    LINE       463

    00000B0E  B8 0A000000       MOV      EAX,10
    00000B13  40                INC      EAX
    00000B14  50                PUSH     EAX
    00000B15  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000B18  5B                POP      EBX
    00000B19  3B C3             CMP      EAX,EBX
    00000B1B  0F 8503000000     JNE      3
    00000B21  EB                JMP      

    LINE       470

    00000B22  B8 01000000       MOV      EAX,1
    00000B27  8B C8             MOV      ECX,EAX
    00000B29  B8 0A000000       MOV      EAX,10
    00000B2E  50                PUSH     EAX
    00000B2F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00000B32  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000B35  5B                POP      EBX
    00000B36  53                PUSH     EBX
    00000B37  3B C3             CMP      EAX,EBX
    00000B39  0F 8E03000000     JLE      3
    00000B3F  EB                JMP      

    LINE       472

    00000B40  B8 01000000       MOV      EAX,1
    00000B45  8B C8             MOV      ECX,EAX
    00000B47  B8 05000000       MOV      EAX,5
    00000B4C  50                PUSH     EAX
    00000B4D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00000B50  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000B53  5B                POP      EBX
    00000B54  53                PUSH     EBX
    00000B55  3B C3             CMP      EAX,EBX
    00000B57  0F 8E03000000     JLE      3
    00000B5D  EB                JMP      

    LINE       479

    00000B5E  B8 01000000       MOV      EAX,1
    00000B63  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       480

    00000B69  B8 01000000       MOV      EAX,1
    00000B6E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       481

    00000B74  B8 01000000       MOV      EAX,1
    00000B79  8B C8             MOV      ECX,EAX
    00000B7B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000B7E  48                DEC      EAX
    00000B7F  BB 0E000000       MOV      EBX,14
    00000B84  F7 E3             MUL      EBX
    00000B86  50                PUSH     EAX
    00000B87  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000B8A  48                DEC      EAX
    00000B8B  BB 02000000       MOV      EBX,2
    00000B90  F7 E3             MUL      EBX
    00000B92  5B                POP      EBX
    00000B93  03 C3             ADD      EAX,EBX
    00000B95  8B F8             MOV      EDI,EAX
    00000B97  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       482

    00000B9E  B8 01000000       MOV      EAX,1
    00000BA3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       483

    00000BA9  B8 01000000       MOV      EAX,1
    00000BAE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       485

    00000BB4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00000BBB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00000BC0  5B                POP      EBX

    LINE       487

    00000BC1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00000BC8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00000BCD  5B                POP      EBX

    LINE       489

    00000BCE  B8 0A000000       MOV      EAX,10
    00000BD3  40                INC      EAX
    00000BD4  50                PUSH     EAX
    00000BD5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000BD8  5B                POP      EBX
    00000BD9  3B C3             CMP      EAX,EBX
    00000BDB  0F 8503000000     JNE      3
    00000BE1  EB                JMP      

    LINE       503

    00000BE2  56                PUSH     ESI
    00000BE3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00000BE9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00000BEF  FF D1             CALL     ECX                       run_inner_proc
    00000BF1  5E                POP      ESI                       /* restore callers static pointer */

    LINE       505

    00000BF2  B8 01000000       MOV      EAX,1
    00000BF7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       507

    00000BFA  B8 01000000       MOV      EAX,1
    00000BFF  8B C8             MOV      ECX,EAX
    00000C01  B8 0A000000       MOV      EAX,10
    00000C06  50                PUSH     EAX
    00000C07  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000C0A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000C0D  5B                POP      EBX
    00000C0E  53                PUSH     EBX
    00000C0F  3B C3             CMP      EAX,EBX
    00000C11  0F 8E03000000     JLE      3
    00000C17  EB                JMP      

    LINE       509

    00000C18  B8 01000000       MOV      EAX,1
    00000C1D  8B C8             MOV      ECX,EAX
    00000C1F  B8 05000000       MOV      EAX,5
    00000C24  50                PUSH     EAX
    00000C25  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00000C28  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000C2B  5B                POP      EBX
    00000C2C  53                PUSH     EBX
    00000C2D  3B C3             CMP      EAX,EBX
    00000C2F  0F 8E03000000     JLE      3
    00000C35  EB                JMP      

    LINE       516

    00000C36  B8 01000000       MOV      EAX,1
    00000C3B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       517

    00000C3E  B8 01000000       MOV      EAX,1
    00000C43  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       518

    00000C46  B8 01000000       MOV      EAX,1
    00000C4B  8B C8             MOV      ECX,EAX
    00000C4D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000C50  48                DEC      EAX
    00000C51  BB 0E000000       MOV      EBX,14
    00000C56  F7 E3             MUL      EBX
    00000C58  50                PUSH     EAX
    00000C59  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000C5C  48                DEC      EAX
    00000C5D  BB 02000000       MOV      EBX,2
    00000C62  F7 E3             MUL      EBX
    00000C64  5B                POP      EBX
    00000C65  03 C3             ADD      EAX,EBX
    00000C67  8B F8             MOV      EDI,EAX
    00000C69  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       519

    00000C6D  B8 01000000       MOV      EAX,1
    00000C72  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       520

    00000C75  B8 01000000       MOV      EAX,1
    00000C7A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       522

    00000C7D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000C84  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00000C89  5B                POP      EBX

    LINE       524

    00000C8A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00000C91  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00000C96  5B                POP      EBX

    LINE       526

    00000C97  B8 0A000000       MOV      EAX,10
    00000C9C  40                INC      EAX
    00000C9D  50                PUSH     EAX
    00000C9E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000CA1  5B                POP      EBX
    00000CA2  3B C3             CMP      EAX,EBX
    00000CA4  0F 8503000000     JNE      3
    00000CAA  EB                JMP      

    LINE       533

    00000CAB  B8 01000000       MOV      EAX,1
    00000CB0  8B C8             MOV      ECX,EAX
    00000CB2  B8 0A000000       MOV      EAX,10
    00000CB7  50                PUSH     EAX
    00000CB8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00000CBB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000CBE  5B                POP      EBX
    00000CBF  53                PUSH     EBX
    00000CC0  3B C3             CMP      EAX,EBX
    00000CC2  0F 8E03000000     JLE      3
    00000CC8  EB                JMP      

    LINE       535

    00000CC9  B8 01000000       MOV      EAX,1
    00000CCE  8B C8             MOV      ECX,EAX
    00000CD0  B8 05000000       MOV      EAX,5
    00000CD5  50                PUSH     EAX
    00000CD6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00000CD9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000CDC  5B                POP      EBX
    00000CDD  53                PUSH     EBX
    00000CDE  3B C3             CMP      EAX,EBX
    00000CE0  0F 8E03000000     JLE      3
    00000CE6  EB                JMP      

    LINE       542

    00000CE7  B8 01000000       MOV      EAX,1
    00000CEC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       543

    00000CEF  B8 01000000       MOV      EAX,1
    00000CF4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       544

    00000CF7  B8 01000000       MOV      EAX,1
    00000CFC  8B C8             MOV      ECX,EAX
    00000CFE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000D01  48                DEC      EAX
    00000D02  BB 0E000000       MOV      EBX,14
    00000D07  F7 E3             MUL      EBX
    00000D09  50                PUSH     EAX
    00000D0A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000D0D  48                DEC      EAX
    00000D0E  BB 02000000       MOV      EBX,2
    00000D13  F7 E3             MUL      EBX
    00000D15  5B                POP      EBX
    00000D16  03 C3             ADD      EAX,EBX
    00000D18  8B F8             MOV      EDI,EAX
    00000D1A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       545

    00000D1E  B8 01000000       MOV      EAX,1
    00000D23  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       546

    00000D26  B8 01000000       MOV      EAX,1
    00000D2B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       548

    00000D2E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00000D35  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00000D3A  5B                POP      EBX

    LINE       550

    00000D3B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00000D42  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00000D47  5B                POP      EBX

    LINE       552

    00000D48  B8 0A000000       MOV      EAX,10
    00000D4D  40                INC      EAX
    00000D4E  50                PUSH     EAX
    00000D4F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000D52  5B                POP      EBX
    00000D53  3B C3             CMP      EAX,EBX
    00000D55  0F 8503000000     JNE      3
    00000D5B  EB                JMP      

    LINE       560

    00000D5C  B8 01000000       MOV      EAX,1
    00000D61  8B C8             MOV      ECX,EAX
    00000D63  B8 0A000000       MOV      EAX,10
    00000D68  50                PUSH     EAX
    00000D69  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000D6C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000D6F  5B                POP      EBX
    00000D70  53                PUSH     EBX
    00000D71  3B C3             CMP      EAX,EBX
    00000D73  0F 8E03000000     JLE      3
    00000D79  EB                JMP      

    LINE       562

    00000D7A  B8 01000000       MOV      EAX,1
    00000D7F  8B C8             MOV      ECX,EAX
    00000D81  B8 05000000       MOV      EAX,5
    00000D86  50                PUSH     EAX
    00000D87  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00000D8A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000D8D  5B                POP      EBX
    00000D8E  53                PUSH     EBX
    00000D8F  3B C3             CMP      EAX,EBX
    00000D91  0F 8E03000000     JLE      3
    00000D97  EB                JMP      

    LINE       569

    00000D98  B8 01000000       MOV      EAX,1
    00000D9D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       570

    00000DA3  B8 01000000       MOV      EAX,1
    00000DA8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       571

    00000DAE  B8 01000000       MOV      EAX,1
    00000DB3  8B C8             MOV      ECX,EAX
    00000DB5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000DB8  48                DEC      EAX
    00000DB9  BB 0E000000       MOV      EBX,14
    00000DBE  F7 E3             MUL      EBX
    00000DC0  50                PUSH     EAX
    00000DC1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000DC4  48                DEC      EAX
    00000DC5  BB 02000000       MOV      EBX,2
    00000DCA  F7 E3             MUL      EBX
    00000DCC  5B                POP      EBX
    00000DCD  03 C3             ADD      EAX,EBX
    00000DCF  8B F8             MOV      EDI,EAX
    00000DD1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       572

    00000DD8  B8 01000000       MOV      EAX,1
    00000DDD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       573

    00000DE3  B8 01000000       MOV      EAX,1
    00000DE8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       575

    00000DEE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000DF5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00000DFA  5B                POP      EBX

    LINE       577

    00000DFB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00000E02  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00000E07  5B                POP      EBX

    LINE       579

    00000E08  B8 0A000000       MOV      EAX,10
    00000E0D  40                INC      EAX
    00000E0E  50                PUSH     EAX
    00000E0F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000E12  5B                POP      EBX
    00000E13  3B C3             CMP      EAX,EBX
    00000E15  0F 8503000000     JNE      3
    00000E1B  EB                JMP      

    LINE       586

    00000E1C  B8 01000000       MOV      EAX,1
    00000E21  8B C8             MOV      ECX,EAX
    00000E23  B8 0A000000       MOV      EAX,10
    00000E28  50                PUSH     EAX
    00000E29  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00000E2C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000E2F  5B                POP      EBX
    00000E30  53                PUSH     EBX
    00000E31  3B C3             CMP      EAX,EBX
    00000E33  0F 8E03000000     JLE      3
    00000E39  EB                JMP      

    LINE       588

    00000E3A  B8 01000000       MOV      EAX,1
    00000E3F  8B C8             MOV      ECX,EAX
    00000E41  B8 05000000       MOV      EAX,5
    00000E46  50                PUSH     EAX
    00000E47  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00000E4A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000E4D  5B                POP      EBX
    00000E4E  53                PUSH     EBX
    00000E4F  3B C3             CMP      EAX,EBX
    00000E51  0F 8E03000000     JLE      3
    00000E57  EB                JMP      

    LINE       595

    00000E58  B8 01000000       MOV      EAX,1
    00000E5D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       596

    00000E63  B8 01000000       MOV      EAX,1
    00000E68  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       597

    00000E6E  B8 01000000       MOV      EAX,1
    00000E73  8B C8             MOV      ECX,EAX
    00000E75  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000E78  48                DEC      EAX
    00000E79  BB 0E000000       MOV      EBX,14
    00000E7E  F7 E3             MUL      EBX
    00000E80  50                PUSH     EAX
    00000E81  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000E84  48                DEC      EAX
    00000E85  BB 02000000       MOV      EBX,2
    00000E8A  F7 E3             MUL      EBX
    00000E8C  5B                POP      EBX
    00000E8D  03 C3             ADD      EAX,EBX
    00000E8F  8B F8             MOV      EDI,EAX
    00000E91  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       598

    00000E98  B8 01000000       MOV      EAX,1
    00000E9D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       599

    00000EA3  B8 01000000       MOV      EAX,1
    00000EA8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       601

    00000EAE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00000EB5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00000EBA  5B                POP      EBX

    LINE       603

    00000EBB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00000EC2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00000EC7  5B                POP      EBX

    LINE       605

    00000EC8  B8 0A000000       MOV      EAX,10
    00000ECD  40                INC      EAX
    00000ECE  50                PUSH     EAX
    00000ECF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000ED2  5B                POP      EBX
    00000ED3  3B C3             CMP      EAX,EBX
    00000ED5  0F 8503000000     JNE      3
    00000EDB  EB                JMP      

    LINE       619

    00000EDC  56                PUSH     ESI
    00000EDD  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00000EE3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00000EE9  FF D1             CALL     ECX                       run_inner_proc
    00000EEB  5E                POP      ESI                       /* restore callers static pointer */

    LINE       621

    00000EEC  B8 01000000       MOV      EAX,1
    00000EF1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       623

    00000EF4  B8 01000000       MOV      EAX,1
    00000EF9  8B C8             MOV      ECX,EAX
    00000EFB  B8 0A000000       MOV      EAX,10
    00000F00  50                PUSH     EAX
    00000F01  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00000F04  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000F07  5B                POP      EBX
    00000F08  53                PUSH     EBX
    00000F09  3B C3             CMP      EAX,EBX
    00000F0B  0F 8E03000000     JLE      3
    00000F11  EB                JMP      

    LINE       625

    00000F12  B8 01000000       MOV      EAX,1
    00000F17  8B C8             MOV      ECX,EAX
    00000F19  B8 05000000       MOV      EAX,5
    00000F1E  50                PUSH     EAX
    00000F1F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00000F22  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000F25  5B                POP      EBX
    00000F26  53                PUSH     EBX
    00000F27  3B C3             CMP      EAX,EBX
    00000F29  0F 8E03000000     JLE      3
    00000F2F  EB                JMP      

    LINE       632

    00000F30  B8 01000000       MOV      EAX,1
    00000F35  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       633

    00000F38  B8 01000000       MOV      EAX,1
    00000F3D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       634

    00000F40  B8 01000000       MOV      EAX,1
    00000F45  8B C8             MOV      ECX,EAX
    00000F47  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000F4A  48                DEC      EAX
    00000F4B  BB 0E000000       MOV      EBX,14
    00000F50  F7 E3             MUL      EBX
    00000F52  50                PUSH     EAX
    00000F53  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00000F56  48                DEC      EAX
    00000F57  BB 02000000       MOV      EBX,2
    00000F5C  F7 E3             MUL      EBX
    00000F5E  5B                POP      EBX
    00000F5F  03 C3             ADD      EAX,EBX
    00000F61  8B F8             MOV      EDI,EAX
    00000F63  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       635

    00000F67  B8 01000000       MOV      EAX,1
    00000F6C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       636

    00000F6F  B8 01000000       MOV      EAX,1
    00000F74  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       638

    00000F77  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00000F7E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00000F83  5B                POP      EBX

    LINE       640

    00000F84  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00000F8B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00000F90  5B                POP      EBX

    LINE       642

    00000F91  B8 0A000000       MOV      EAX,10
    00000F96  40                INC      EAX
    00000F97  50                PUSH     EAX
    00000F98  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00000F9B  5B                POP      EBX
    00000F9C  3B C3             CMP      EAX,EBX
    00000F9E  0F 8503000000     JNE      3
    00000FA4  EB                JMP      

    LINE       649

    00000FA5  B8 01000000       MOV      EAX,1
    00000FAA  8B C8             MOV      ECX,EAX
    00000FAC  B8 0A000000       MOV      EAX,10
    00000FB1  50                PUSH     EAX
    00000FB2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00000FB5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000FB8  5B                POP      EBX
    00000FB9  53                PUSH     EBX
    00000FBA  3B C3             CMP      EAX,EBX
    00000FBC  0F 8E03000000     JLE      3
    00000FC2  EB                JMP      

    LINE       651

    00000FC3  B8 01000000       MOV      EAX,1
    00000FC8  8B C8             MOV      ECX,EAX
    00000FCA  B8 05000000       MOV      EAX,5
    00000FCF  50                PUSH     EAX
    00000FD0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00000FD3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00000FD6  5B                POP      EBX
    00000FD7  53                PUSH     EBX
    00000FD8  3B C3             CMP      EAX,EBX
    00000FDA  0F 8E03000000     JLE      3
    00000FE0  EB                JMP      

    LINE       658

    00000FE1  B8 01000000       MOV      EAX,1
    00000FE6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       659

    00000FE9  B8 01000000       MOV      EAX,1
    00000FEE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       660

    00000FF1  B8 01000000       MOV      EAX,1
    00000FF6  8B C8             MOV      ECX,EAX
    00000FF8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00000FFB  48                DEC      EAX
    00000FFC  BB 0E000000       MOV      EBX,14
    00001001  F7 E3             MUL      EBX
    00001003  50                PUSH     EAX
    00001004  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001007  48                DEC      EAX
    00001008  BB 02000000       MOV      EBX,2
    0000100D  F7 E3             MUL      EBX
    0000100F  5B                POP      EBX
    00001010  03 C3             ADD      EAX,EBX
    00001012  8B F8             MOV      EDI,EAX
    00001014  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       661

    00001018  B8 01000000       MOV      EAX,1
    0000101D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       662

    00001020  B8 01000000       MOV      EAX,1
    00001025  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       664

    00001028  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000102F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001034  5B                POP      EBX

    LINE       666

    00001035  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000103C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00001041  5B                POP      EBX

    LINE       668

    00001042  B8 0A000000       MOV      EAX,10
    00001047  40                INC      EAX
    00001048  50                PUSH     EAX
    00001049  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000104C  5B                POP      EBX
    0000104D  3B C3             CMP      EAX,EBX
    0000104F  0F 8503000000     JNE      3
    00001055  EB                JMP      

    LINE       676

    00001056  B8 01000000       MOV      EAX,1
    0000105B  8B C8             MOV      ECX,EAX
    0000105D  B8 0A000000       MOV      EAX,10
    00001062  50                PUSH     EAX
    00001063  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00001066  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001069  5B                POP      EBX
    0000106A  53                PUSH     EBX
    0000106B  3B C3             CMP      EAX,EBX
    0000106D  0F 8E03000000     JLE      3
    00001073  EB                JMP      

    LINE       678

    00001074  B8 01000000       MOV      EAX,1
    00001079  8B C8             MOV      ECX,EAX
    0000107B  B8 05000000       MOV      EAX,5
    00001080  50                PUSH     EAX
    00001081  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001084  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001087  5B                POP      EBX
    00001088  53                PUSH     EBX
    00001089  3B C3             CMP      EAX,EBX
    0000108B  0F 8E03000000     JLE      3
    00001091  EB                JMP      

    LINE       685

    00001092  B8 01000000       MOV      EAX,1
    00001097  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       686

    0000109D  B8 01000000       MOV      EAX,1
    000010A2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       687

    000010A8  B8 01000000       MOV      EAX,1
    000010AD  8B C8             MOV      ECX,EAX
    000010AF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000010B2  48                DEC      EAX
    000010B3  BB 0E000000       MOV      EBX,14
    000010B8  F7 E3             MUL      EBX
    000010BA  50                PUSH     EAX
    000010BB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000010BE  48                DEC      EAX
    000010BF  BB 02000000       MOV      EBX,2
    000010C4  F7 E3             MUL      EBX
    000010C6  5B                POP      EBX
    000010C7  03 C3             ADD      EAX,EBX
    000010C9  8B F8             MOV      EDI,EAX
    000010CB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       688

    000010D2  B8 01000000       MOV      EAX,1
    000010D7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       689

    000010DD  B8 01000000       MOV      EAX,1
    000010E2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       691

    000010E8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000010EF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000010F4  5B                POP      EBX

    LINE       693

    000010F5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000010FC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00001101  5B                POP      EBX

    LINE       695

    00001102  B8 0A000000       MOV      EAX,10
    00001107  40                INC      EAX
    00001108  50                PUSH     EAX
    00001109  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000110C  5B                POP      EBX
    0000110D  3B C3             CMP      EAX,EBX
    0000110F  0F 8503000000     JNE      3
    00001115  EB                JMP      

    LINE       702

    00001116  B8 01000000       MOV      EAX,1
    0000111B  8B C8             MOV      ECX,EAX
    0000111D  B8 0A000000       MOV      EAX,10
    00001122  50                PUSH     EAX
    00001123  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00001126  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001129  5B                POP      EBX
    0000112A  53                PUSH     EBX
    0000112B  3B C3             CMP      EAX,EBX
    0000112D  0F 8E03000000     JLE      3
    00001133  EB                JMP      

    LINE       704

    00001134  B8 01000000       MOV      EAX,1
    00001139  8B C8             MOV      ECX,EAX
    0000113B  B8 05000000       MOV      EAX,5
    00001140  50                PUSH     EAX
    00001141  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00001144  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001147  5B                POP      EBX
    00001148  53                PUSH     EBX
    00001149  3B C3             CMP      EAX,EBX
    0000114B  0F 8E03000000     JLE      3
    00001151  EB                JMP      

    LINE       711

    00001152  B8 01000000       MOV      EAX,1
    00001157  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       712

    0000115D  B8 01000000       MOV      EAX,1
    00001162  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       713

    00001168  B8 01000000       MOV      EAX,1
    0000116D  8B C8             MOV      ECX,EAX
    0000116F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001172  48                DEC      EAX
    00001173  BB 0E000000       MOV      EBX,14
    00001178  F7 E3             MUL      EBX
    0000117A  50                PUSH     EAX
    0000117B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000117E  48                DEC      EAX
    0000117F  BB 02000000       MOV      EBX,2
    00001184  F7 E3             MUL      EBX
    00001186  5B                POP      EBX
    00001187  03 C3             ADD      EAX,EBX
    00001189  8B F8             MOV      EDI,EAX
    0000118B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       714

    00001192  B8 01000000       MOV      EAX,1
    00001197  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       715

    0000119D  B8 01000000       MOV      EAX,1
    000011A2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       717

    000011A8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000011AF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000011B4  5B                POP      EBX

    LINE       719

    000011B5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000011BC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000011C1  5B                POP      EBX

    LINE       721

    000011C2  B8 0A000000       MOV      EAX,10
    000011C7  40                INC      EAX
    000011C8  50                PUSH     EAX
    000011C9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000011CC  5B                POP      EBX
    000011CD  3B C3             CMP      EAX,EBX
    000011CF  0F 8503000000     JNE      3
    000011D5  EB                JMP      

    LINE       735

    000011D6  56                PUSH     ESI
    000011D7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000011DD  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000011E3  FF D1             CALL     ECX                       run_inner_proc
    000011E5  5E                POP      ESI                       /* restore callers static pointer */

    LINE       737

    000011E6  B8 01000000       MOV      EAX,1
    000011EB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       739

    000011EE  B8 01000000       MOV      EAX,1
    000011F3  8B C8             MOV      ECX,EAX
    000011F5  B8 0A000000       MOV      EAX,10
    000011FA  50                PUSH     EAX
    000011FB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000011FE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001201  5B                POP      EBX
    00001202  53                PUSH     EBX
    00001203  3B C3             CMP      EAX,EBX
    00001205  0F 8E03000000     JLE      3
    0000120B  EB                JMP      

    LINE       741

    0000120C  B8 01000000       MOV      EAX,1
    00001211  8B C8             MOV      ECX,EAX
    00001213  B8 05000000       MOV      EAX,5
    00001218  50                PUSH     EAX
    00001219  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000121C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000121F  5B                POP      EBX
    00001220  53                PUSH     EBX
    00001221  3B C3             CMP      EAX,EBX
    00001223  0F 8E03000000     JLE      3
    00001229  EB                JMP      

    LINE       748

    0000122A  B8 01000000       MOV      EAX,1
    0000122F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       749

    00001232  B8 01000000       MOV      EAX,1
    00001237  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       750

    0000123A  B8 01000000       MOV      EAX,1
    0000123F  8B C8             MOV      ECX,EAX
    00001241  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001244  48                DEC      EAX
    00001245  BB 0E000000       MOV      EBX,14
    0000124A  F7 E3             MUL      EBX
    0000124C  50                PUSH     EAX
    0000124D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001250  48                DEC      EAX
    00001251  BB 02000000       MOV      EBX,2
    00001256  F7 E3             MUL      EBX
    00001258  5B                POP      EBX
    00001259  03 C3             ADD      EAX,EBX
    0000125B  8B F8             MOV      EDI,EAX
    0000125D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       751

    00001261  B8 01000000       MOV      EAX,1
    00001266  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       752

    00001269  B8 01000000       MOV      EAX,1
    0000126E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       754

    00001271  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00001278  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000127D  5B                POP      EBX

    LINE       756

    0000127E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00001285  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000128A  5B                POP      EBX

    LINE       758

    0000128B  B8 0A000000       MOV      EAX,10
    00001290  40                INC      EAX
    00001291  50                PUSH     EAX
    00001292  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001295  5B                POP      EBX
    00001296  3B C3             CMP      EAX,EBX
    00001298  0F 8503000000     JNE      3
    0000129E  EB                JMP      

    LINE       765

    0000129F  B8 01000000       MOV      EAX,1
    000012A4  8B C8             MOV      ECX,EAX
    000012A6  B8 0A000000       MOV      EAX,10
    000012AB  50                PUSH     EAX
    000012AC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000012AF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000012B2  5B                POP      EBX
    000012B3  53                PUSH     EBX
    000012B4  3B C3             CMP      EAX,EBX
    000012B6  0F 8E03000000     JLE      3
    000012BC  EB                JMP      

    LINE       767

    000012BD  B8 01000000       MOV      EAX,1
    000012C2  8B C8             MOV      ECX,EAX
    000012C4  B8 05000000       MOV      EAX,5
    000012C9  50                PUSH     EAX
    000012CA  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000012CD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000012D0  5B                POP      EBX
    000012D1  53                PUSH     EBX
    000012D2  3B C3             CMP      EAX,EBX
    000012D4  0F 8E03000000     JLE      3
    000012DA  EB                JMP      

    LINE       774

    000012DB  B8 01000000       MOV      EAX,1
    000012E0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       775

    000012E3  B8 01000000       MOV      EAX,1
    000012E8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       776

    000012EB  B8 01000000       MOV      EAX,1
    000012F0  8B C8             MOV      ECX,EAX
    000012F2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000012F5  48                DEC      EAX
    000012F6  BB 0E000000       MOV      EBX,14
    000012FB  F7 E3             MUL      EBX
    000012FD  50                PUSH     EAX
    000012FE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001301  48                DEC      EAX
    00001302  BB 02000000       MOV      EBX,2
    00001307  F7 E3             MUL      EBX
    00001309  5B                POP      EBX
    0000130A  03 C3             ADD      EAX,EBX
    0000130C  8B F8             MOV      EDI,EAX
    0000130E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       777

    00001312  B8 01000000       MOV      EAX,1
    00001317  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       778

    0000131A  B8 01000000       MOV      EAX,1
    0000131F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       780

    00001322  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00001329  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000132E  5B                POP      EBX

    LINE       782

    0000132F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00001336  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000133B  5B                POP      EBX

    LINE       784

    0000133C  B8 0A000000       MOV      EAX,10
    00001341  40                INC      EAX
    00001342  50                PUSH     EAX
    00001343  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001346  5B                POP      EBX
    00001347  3B C3             CMP      EAX,EBX
    00001349  0F 8503000000     JNE      3
    0000134F  EB                JMP      

    LINE       792

    00001350  B8 01000000       MOV      EAX,1
    00001355  8B C8             MOV      ECX,EAX
    00001357  B8 0A000000       MOV      EAX,10
    0000135C  50                PUSH     EAX
    0000135D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00001360  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001363  5B                POP      EBX
    00001364  53                PUSH     EBX
    00001365  3B C3             CMP      EAX,EBX
    00001367  0F 8E03000000     JLE      3
    0000136D  EB                JMP      

    LINE       794

    0000136E  B8 01000000       MOV      EAX,1
    00001373  8B C8             MOV      ECX,EAX
    00001375  B8 05000000       MOV      EAX,5
    0000137A  50                PUSH     EAX
    0000137B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000137E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001381  5B                POP      EBX
    00001382  53                PUSH     EBX
    00001383  3B C3             CMP      EAX,EBX
    00001385  0F 8E03000000     JLE      3
    0000138B  EB                JMP      

    LINE       801

    0000138C  B8 01000000       MOV      EAX,1
    00001391  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       802

    00001397  B8 01000000       MOV      EAX,1
    0000139C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       803

    000013A2  B8 01000000       MOV      EAX,1
    000013A7  8B C8             MOV      ECX,EAX
    000013A9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000013AC  48                DEC      EAX
    000013AD  BB 0E000000       MOV      EBX,14
    000013B2  F7 E3             MUL      EBX
    000013B4  50                PUSH     EAX
    000013B5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000013B8  48                DEC      EAX
    000013B9  BB 02000000       MOV      EBX,2
    000013BE  F7 E3             MUL      EBX
    000013C0  5B                POP      EBX
    000013C1  03 C3             ADD      EAX,EBX
    000013C3  8B F8             MOV      EDI,EAX
    000013C5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       804

    000013CC  B8 01000000       MOV      EAX,1
    000013D1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       805

    000013D7  B8 01000000       MOV      EAX,1
    000013DC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       807

    000013E2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000013E9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000013EE  5B                POP      EBX

    LINE       809

    000013EF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000013F6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000013FB  5B                POP      EBX

    LINE       811

    000013FC  B8 0A000000       MOV      EAX,10
    00001401  40                INC      EAX
    00001402  50                PUSH     EAX
    00001403  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001406  5B                POP      EBX
    00001407  3B C3             CMP      EAX,EBX
    00001409  0F 8503000000     JNE      3
    0000140F  EB                JMP      

    LINE       818

    00001410  B8 01000000       MOV      EAX,1
    00001415  8B C8             MOV      ECX,EAX
    00001417  B8 0A000000       MOV      EAX,10
    0000141C  50                PUSH     EAX
    0000141D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00001420  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001423  5B                POP      EBX
    00001424  53                PUSH     EBX
    00001425  3B C3             CMP      EAX,EBX
    00001427  0F 8E03000000     JLE      3
    0000142D  EB                JMP      

    LINE       820

    0000142E  B8 01000000       MOV      EAX,1
    00001433  8B C8             MOV      ECX,EAX
    00001435  B8 05000000       MOV      EAX,5
    0000143A  50                PUSH     EAX
    0000143B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000143E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001441  5B                POP      EBX
    00001442  53                PUSH     EBX
    00001443  3B C3             CMP      EAX,EBX
    00001445  0F 8E03000000     JLE      3
    0000144B  EB                JMP      

    LINE       827

    0000144C  B8 01000000       MOV      EAX,1
    00001451  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       828

    00001457  B8 01000000       MOV      EAX,1
    0000145C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       829

    00001462  B8 01000000       MOV      EAX,1
    00001467  8B C8             MOV      ECX,EAX
    00001469  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000146C  48                DEC      EAX
    0000146D  BB 0E000000       MOV      EBX,14
    00001472  F7 E3             MUL      EBX
    00001474  50                PUSH     EAX
    00001475  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001478  48                DEC      EAX
    00001479  BB 02000000       MOV      EBX,2
    0000147E  F7 E3             MUL      EBX
    00001480  5B                POP      EBX
    00001481  03 C3             ADD      EAX,EBX
    00001483  8B F8             MOV      EDI,EAX
    00001485  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       830

    0000148C  B8 01000000       MOV      EAX,1
    00001491  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       831

    00001497  B8 01000000       MOV      EAX,1
    0000149C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       833

    000014A2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000014A9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000014AE  5B                POP      EBX

    LINE       835

    000014AF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000014B6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000014BB  5B                POP      EBX

    LINE       837

    000014BC  B8 0A000000       MOV      EAX,10
    000014C1  40                INC      EAX
    000014C2  50                PUSH     EAX
    000014C3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000014C6  5B                POP      EBX
    000014C7  3B C3             CMP      EAX,EBX
    000014C9  0F 8503000000     JNE      3
    000014CF  EB                JMP      

    LINE       851

    000014D0  56                PUSH     ESI
    000014D1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000014D7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000014DD  FF D1             CALL     ECX                       run_inner_proc
    000014DF  5E                POP      ESI                       /* restore callers static pointer */

    LINE       853

    000014E0  B8 01000000       MOV      EAX,1
    000014E5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       855

    000014E8  B8 01000000       MOV      EAX,1
    000014ED  8B C8             MOV      ECX,EAX
    000014EF  B8 0A000000       MOV      EAX,10
    000014F4  50                PUSH     EAX
    000014F5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000014F8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000014FB  5B                POP      EBX
    000014FC  53                PUSH     EBX
    000014FD  3B C3             CMP      EAX,EBX
    000014FF  0F 8E03000000     JLE      3
    00001505  EB                JMP      

    LINE       857

    00001506  B8 01000000       MOV      EAX,1
    0000150B  8B C8             MOV      ECX,EAX
    0000150D  B8 05000000       MOV      EAX,5
    00001512  50                PUSH     EAX
    00001513  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001516  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001519  5B                POP      EBX
    0000151A  53                PUSH     EBX
    0000151B  3B C3             CMP      EAX,EBX
    0000151D  0F 8E03000000     JLE      3
    00001523  EB                JMP      

    LINE       864

    00001524  B8 01000000       MOV      EAX,1
    00001529  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       865

    0000152C  B8 01000000       MOV      EAX,1
    00001531  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       866

    00001534  B8 01000000       MOV      EAX,1
    00001539  8B C8             MOV      ECX,EAX
    0000153B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000153E  48                DEC      EAX
    0000153F  BB 0E000000       MOV      EBX,14
    00001544  F7 E3             MUL      EBX
    00001546  50                PUSH     EAX
    00001547  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000154A  48                DEC      EAX
    0000154B  BB 02000000       MOV      EBX,2
    00001550  F7 E3             MUL      EBX
    00001552  5B                POP      EBX
    00001553  03 C3             ADD      EAX,EBX
    00001555  8B F8             MOV      EDI,EAX
    00001557  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       867

    0000155B  B8 01000000       MOV      EAX,1
    00001560  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       868

    00001563  B8 01000000       MOV      EAX,1
    00001568  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       870

    0000156B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00001572  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001577  5B                POP      EBX

    LINE       872

    00001578  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000157F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00001584  5B                POP      EBX

    LINE       874

    00001585  B8 0A000000       MOV      EAX,10
    0000158A  40                INC      EAX
    0000158B  50                PUSH     EAX
    0000158C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000158F  5B                POP      EBX
    00001590  3B C3             CMP      EAX,EBX
    00001592  0F 8503000000     JNE      3
    00001598  EB                JMP      

    LINE       881

    00001599  B8 01000000       MOV      EAX,1
    0000159E  8B C8             MOV      ECX,EAX
    000015A0  B8 0A000000       MOV      EAX,10
    000015A5  50                PUSH     EAX
    000015A6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000015A9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000015AC  5B                POP      EBX
    000015AD  53                PUSH     EBX
    000015AE  3B C3             CMP      EAX,EBX
    000015B0  0F 8E03000000     JLE      3
    000015B6  EB                JMP      

    LINE       883

    000015B7  B8 01000000       MOV      EAX,1
    000015BC  8B C8             MOV      ECX,EAX
    000015BE  B8 05000000       MOV      EAX,5
    000015C3  50                PUSH     EAX
    000015C4  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000015C7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000015CA  5B                POP      EBX
    000015CB  53                PUSH     EBX
    000015CC  3B C3             CMP      EAX,EBX
    000015CE  0F 8E03000000     JLE      3
    000015D4  EB                JMP      

    LINE       890

    000015D5  B8 01000000       MOV      EAX,1
    000015DA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       891

    000015DD  B8 01000000       MOV      EAX,1
    000015E2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       892

    000015E5  B8 01000000       MOV      EAX,1
    000015EA  8B C8             MOV      ECX,EAX
    000015EC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000015EF  48                DEC      EAX
    000015F0  BB 0E000000       MOV      EBX,14
    000015F5  F7 E3             MUL      EBX
    000015F7  50                PUSH     EAX
    000015F8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000015FB  48                DEC      EAX
    000015FC  BB 02000000       MOV      EBX,2
    00001601  F7 E3             MUL      EBX
    00001603  5B                POP      EBX
    00001604  03 C3             ADD      EAX,EBX
    00001606  8B F8             MOV      EDI,EAX
    00001608  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       893

    0000160C  B8 01000000       MOV      EAX,1
    00001611  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       894

    00001614  B8 01000000       MOV      EAX,1
    00001619  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       896

    0000161C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00001623  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001628  5B                POP      EBX

    LINE       898

    00001629  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00001630  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00001635  5B                POP      EBX

    LINE       900

    00001636  B8 0A000000       MOV      EAX,10
    0000163B  40                INC      EAX
    0000163C  50                PUSH     EAX
    0000163D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001640  5B                POP      EBX
    00001641  3B C3             CMP      EAX,EBX
    00001643  0F 8503000000     JNE      3
    00001649  EB                JMP      

    LINE       908

    0000164A  B8 01000000       MOV      EAX,1
    0000164F  8B C8             MOV      ECX,EAX
    00001651  B8 0A000000       MOV      EAX,10
    00001656  50                PUSH     EAX
    00001657  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000165A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000165D  5B                POP      EBX
    0000165E  53                PUSH     EBX
    0000165F  3B C3             CMP      EAX,EBX
    00001661  0F 8E03000000     JLE      3
    00001667  EB                JMP      

    LINE       910

    00001668  B8 01000000       MOV      EAX,1
    0000166D  8B C8             MOV      ECX,EAX
    0000166F  B8 05000000       MOV      EAX,5
    00001674  50                PUSH     EAX
    00001675  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001678  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000167B  5B                POP      EBX
    0000167C  53                PUSH     EBX
    0000167D  3B C3             CMP      EAX,EBX
    0000167F  0F 8E03000000     JLE      3
    00001685  EB                JMP      

    LINE       917

    00001686  B8 01000000       MOV      EAX,1
    0000168B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       918

    00001691  B8 01000000       MOV      EAX,1
    00001696  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       919

    0000169C  B8 01000000       MOV      EAX,1
    000016A1  8B C8             MOV      ECX,EAX
    000016A3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000016A6  48                DEC      EAX
    000016A7  BB 0E000000       MOV      EBX,14
    000016AC  F7 E3             MUL      EBX
    000016AE  50                PUSH     EAX
    000016AF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000016B2  48                DEC      EAX
    000016B3  BB 02000000       MOV      EBX,2
    000016B8  F7 E3             MUL      EBX
    000016BA  5B                POP      EBX
    000016BB  03 C3             ADD      EAX,EBX
    000016BD  8B F8             MOV      EDI,EAX
    000016BF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       920

    000016C6  B8 01000000       MOV      EAX,1
    000016CB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       921

    000016D1  B8 01000000       MOV      EAX,1
    000016D6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       923

    000016DC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000016E3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000016E8  5B                POP      EBX

    LINE       925

    000016E9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000016F0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000016F5  5B                POP      EBX

    LINE       927

    000016F6  B8 0A000000       MOV      EAX,10
    000016FB  40                INC      EAX
    000016FC  50                PUSH     EAX
    000016FD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001700  5B                POP      EBX
    00001701  3B C3             CMP      EAX,EBX
    00001703  0F 8503000000     JNE      3
    00001709  EB                JMP      

    LINE       934

    0000170A  B8 01000000       MOV      EAX,1
    0000170F  8B C8             MOV      ECX,EAX
    00001711  B8 0A000000       MOV      EAX,10
    00001716  50                PUSH     EAX
    00001717  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000171A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000171D  5B                POP      EBX
    0000171E  53                PUSH     EBX
    0000171F  3B C3             CMP      EAX,EBX
    00001721  0F 8E03000000     JLE      3
    00001727  EB                JMP      

    LINE       936

    00001728  B8 01000000       MOV      EAX,1
    0000172D  8B C8             MOV      ECX,EAX
    0000172F  B8 05000000       MOV      EAX,5
    00001734  50                PUSH     EAX
    00001735  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00001738  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000173B  5B                POP      EBX
    0000173C  53                PUSH     EBX
    0000173D  3B C3             CMP      EAX,EBX
    0000173F  0F 8E03000000     JLE      3
    00001745  EB                JMP      

    LINE       943

    00001746  B8 01000000       MOV      EAX,1
    0000174B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       944

    00001751  B8 01000000       MOV      EAX,1
    00001756  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       945

    0000175C  B8 01000000       MOV      EAX,1
    00001761  8B C8             MOV      ECX,EAX
    00001763  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001766  48                DEC      EAX
    00001767  BB 0E000000       MOV      EBX,14
    0000176C  F7 E3             MUL      EBX
    0000176E  50                PUSH     EAX
    0000176F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001772  48                DEC      EAX
    00001773  BB 02000000       MOV      EBX,2
    00001778  F7 E3             MUL      EBX
    0000177A  5B                POP      EBX
    0000177B  03 C3             ADD      EAX,EBX
    0000177D  8B F8             MOV      EDI,EAX
    0000177F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE       946

    00001786  B8 01000000       MOV      EAX,1
    0000178B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       947

    00001791  B8 01000000       MOV      EAX,1
    00001796  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE       949

    0000179C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000017A3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000017A8  5B                POP      EBX

    LINE       951

    000017A9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000017B0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000017B5  5B                POP      EBX

    LINE       953

    000017B6  B8 0A000000       MOV      EAX,10
    000017BB  40                INC      EAX
    000017BC  50                PUSH     EAX
    000017BD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000017C0  5B                POP      EBX
    000017C1  3B C3             CMP      EAX,EBX
    000017C3  0F 8503000000     JNE      3
    000017C9  EB                JMP      

    LINE       967

    000017CA  56                PUSH     ESI
    000017CB  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000017D1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000017D7  FF D1             CALL     ECX                       run_inner_proc
    000017D9  5E                POP      ESI                       /* restore callers static pointer */

    LINE       969

    000017DA  B8 01000000       MOV      EAX,1
    000017DF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE       971

    000017E2  B8 01000000       MOV      EAX,1
    000017E7  8B C8             MOV      ECX,EAX
    000017E9  B8 0A000000       MOV      EAX,10
    000017EE  50                PUSH     EAX
    000017EF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000017F2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000017F5  5B                POP      EBX
    000017F6  53                PUSH     EBX
    000017F7  3B C3             CMP      EAX,EBX
    000017F9  0F 8E03000000     JLE      3
    000017FF  EB                JMP      

    LINE       973

    00001800  B8 01000000       MOV      EAX,1
    00001805  8B C8             MOV      ECX,EAX
    00001807  B8 05000000       MOV      EAX,5
    0000180C  50                PUSH     EAX
    0000180D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001810  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001813  5B                POP      EBX
    00001814  53                PUSH     EBX
    00001815  3B C3             CMP      EAX,EBX
    00001817  0F 8E03000000     JLE      3
    0000181D  EB                JMP      

    LINE       980

    0000181E  B8 01000000       MOV      EAX,1
    00001823  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       981

    00001826  B8 01000000       MOV      EAX,1
    0000182B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       982

    0000182E  B8 01000000       MOV      EAX,1
    00001833  8B C8             MOV      ECX,EAX
    00001835  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001838  48                DEC      EAX
    00001839  BB 0E000000       MOV      EBX,14
    0000183E  F7 E3             MUL      EBX
    00001840  50                PUSH     EAX
    00001841  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001844  48                DEC      EAX
    00001845  BB 02000000       MOV      EBX,2
    0000184A  F7 E3             MUL      EBX
    0000184C  5B                POP      EBX
    0000184D  03 C3             ADD      EAX,EBX
    0000184F  8B F8             MOV      EDI,EAX
    00001851  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE       983

    00001855  B8 01000000       MOV      EAX,1
    0000185A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       984

    0000185D  B8 01000000       MOV      EAX,1
    00001862  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE       986

    00001865  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000186C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001871  5B                POP      EBX

    LINE       988

    00001872  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00001879  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000187E  5B                POP      EBX

    LINE       990

    0000187F  B8 0A000000       MOV      EAX,10
    00001884  40                INC      EAX
    00001885  50                PUSH     EAX
    00001886  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001889  5B                POP      EBX
    0000188A  3B C3             CMP      EAX,EBX
    0000188C  0F 8503000000     JNE      3
    00001892  EB                JMP      

    LINE       997

    00001893  B8 01000000       MOV      EAX,1
    00001898  8B C8             MOV      ECX,EAX
    0000189A  B8 0A000000       MOV      EAX,10
    0000189F  50                PUSH     EAX
    000018A0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000018A3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000018A6  5B                POP      EBX
    000018A7  53                PUSH     EBX
    000018A8  3B C3             CMP      EAX,EBX
    000018AA  0F 8E03000000     JLE      3
    000018B0  EB                JMP      

    LINE       999

    000018B1  B8 01000000       MOV      EAX,1
    000018B6  8B C8             MOV      ECX,EAX
    000018B8  B8 05000000       MOV      EAX,5
    000018BD  50                PUSH     EAX
    000018BE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000018C1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000018C4  5B                POP      EBX
    000018C5  53                PUSH     EBX
    000018C6  3B C3             CMP      EAX,EBX
    000018C8  0F 8E03000000     JLE      3
    000018CE  EB                JMP      

    LINE      1006

    000018CF  B8 01000000       MOV      EAX,1
    000018D4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1007

    000018D7  B8 01000000       MOV      EAX,1
    000018DC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1008

    000018DF  B8 01000000       MOV      EAX,1
    000018E4  8B C8             MOV      ECX,EAX
    000018E6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000018E9  48                DEC      EAX
    000018EA  BB 0E000000       MOV      EBX,14
    000018EF  F7 E3             MUL      EBX
    000018F1  50                PUSH     EAX
    000018F2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000018F5  48                DEC      EAX
    000018F6  BB 02000000       MOV      EBX,2
    000018FB  F7 E3             MUL      EBX
    000018FD  5B                POP      EBX
    000018FE  03 C3             ADD      EAX,EBX
    00001900  8B F8             MOV      EDI,EAX
    00001902  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1009

    00001906  B8 01000000       MOV      EAX,1
    0000190B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1010

    0000190E  B8 01000000       MOV      EAX,1
    00001913  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1012

    00001916  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000191D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001922  5B                POP      EBX

    LINE      1014

    00001923  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000192A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000192F  5B                POP      EBX

    LINE      1016

    00001930  B8 0A000000       MOV      EAX,10
    00001935  40                INC      EAX
    00001936  50                PUSH     EAX
    00001937  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000193A  5B                POP      EBX
    0000193B  3B C3             CMP      EAX,EBX
    0000193D  0F 8503000000     JNE      3
    00001943  EB                JMP      

    LINE      1024

    00001944  B8 01000000       MOV      EAX,1
    00001949  8B C8             MOV      ECX,EAX
    0000194B  B8 0A000000       MOV      EAX,10
    00001950  50                PUSH     EAX
    00001951  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00001954  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001957  5B                POP      EBX
    00001958  53                PUSH     EBX
    00001959  3B C3             CMP      EAX,EBX
    0000195B  0F 8E03000000     JLE      3
    00001961  EB                JMP      

    LINE      1026

    00001962  B8 01000000       MOV      EAX,1
    00001967  8B C8             MOV      ECX,EAX
    00001969  B8 05000000       MOV      EAX,5
    0000196E  50                PUSH     EAX
    0000196F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001972  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001975  5B                POP      EBX
    00001976  53                PUSH     EBX
    00001977  3B C3             CMP      EAX,EBX
    00001979  0F 8E03000000     JLE      3
    0000197F  EB                JMP      

    LINE      1033

    00001980  B8 01000000       MOV      EAX,1
    00001985  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1034

    0000198B  B8 01000000       MOV      EAX,1
    00001990  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1035

    00001996  B8 01000000       MOV      EAX,1
    0000199B  8B C8             MOV      ECX,EAX
    0000199D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000019A0  48                DEC      EAX
    000019A1  BB 0E000000       MOV      EBX,14
    000019A6  F7 E3             MUL      EBX
    000019A8  50                PUSH     EAX
    000019A9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000019AC  48                DEC      EAX
    000019AD  BB 02000000       MOV      EBX,2
    000019B2  F7 E3             MUL      EBX
    000019B4  5B                POP      EBX
    000019B5  03 C3             ADD      EAX,EBX
    000019B7  8B F8             MOV      EDI,EAX
    000019B9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1036

    000019C0  B8 01000000       MOV      EAX,1
    000019C5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1037

    000019CB  B8 01000000       MOV      EAX,1
    000019D0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1039

    000019D6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000019DD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000019E2  5B                POP      EBX

    LINE      1041

    000019E3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000019EA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000019EF  5B                POP      EBX

    LINE      1043

    000019F0  B8 0A000000       MOV      EAX,10
    000019F5  40                INC      EAX
    000019F6  50                PUSH     EAX
    000019F7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000019FA  5B                POP      EBX
    000019FB  3B C3             CMP      EAX,EBX
    000019FD  0F 8503000000     JNE      3
    00001A03  EB                JMP      

    LINE      1050

    00001A04  B8 01000000       MOV      EAX,1
    00001A09  8B C8             MOV      ECX,EAX
    00001A0B  B8 0A000000       MOV      EAX,10
    00001A10  50                PUSH     EAX
    00001A11  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00001A14  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001A17  5B                POP      EBX
    00001A18  53                PUSH     EBX
    00001A19  3B C3             CMP      EAX,EBX
    00001A1B  0F 8E03000000     JLE      3
    00001A21  EB                JMP      

    LINE      1052

    00001A22  B8 01000000       MOV      EAX,1
    00001A27  8B C8             MOV      ECX,EAX
    00001A29  B8 05000000       MOV      EAX,5
    00001A2E  50                PUSH     EAX
    00001A2F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00001A32  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001A35  5B                POP      EBX
    00001A36  53                PUSH     EBX
    00001A37  3B C3             CMP      EAX,EBX
    00001A39  0F 8E03000000     JLE      3
    00001A3F  EB                JMP      

    LINE      1059

    00001A40  B8 01000000       MOV      EAX,1
    00001A45  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1060

    00001A4B  B8 01000000       MOV      EAX,1
    00001A50  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1061

    00001A56  B8 01000000       MOV      EAX,1
    00001A5B  8B C8             MOV      ECX,EAX
    00001A5D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001A60  48                DEC      EAX
    00001A61  BB 0E000000       MOV      EBX,14
    00001A66  F7 E3             MUL      EBX
    00001A68  50                PUSH     EAX
    00001A69  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001A6C  48                DEC      EAX
    00001A6D  BB 02000000       MOV      EBX,2
    00001A72  F7 E3             MUL      EBX
    00001A74  5B                POP      EBX
    00001A75  03 C3             ADD      EAX,EBX
    00001A77  8B F8             MOV      EDI,EAX
    00001A79  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1062

    00001A80  B8 01000000       MOV      EAX,1
    00001A85  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1063

    00001A8B  B8 01000000       MOV      EAX,1
    00001A90  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1065

    00001A96  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00001A9D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00001AA2  5B                POP      EBX

    LINE      1067

    00001AA3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00001AAA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00001AAF  5B                POP      EBX

    LINE      1069

    00001AB0  B8 0A000000       MOV      EAX,10
    00001AB5  40                INC      EAX
    00001AB6  50                PUSH     EAX
    00001AB7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001ABA  5B                POP      EBX
    00001ABB  3B C3             CMP      EAX,EBX
    00001ABD  0F 8503000000     JNE      3
    00001AC3  EB                JMP      

    LINE      1083

    00001AC4  56                PUSH     ESI
    00001AC5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00001ACB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00001AD1  FF D1             CALL     ECX                       run_inner_proc
    00001AD3  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1085

    00001AD4  B8 01000000       MOV      EAX,1
    00001AD9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1087

    00001ADC  B8 01000000       MOV      EAX,1
    00001AE1  8B C8             MOV      ECX,EAX
    00001AE3  B8 0A000000       MOV      EAX,10
    00001AE8  50                PUSH     EAX
    00001AE9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00001AEC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001AEF  5B                POP      EBX
    00001AF0  53                PUSH     EBX
    00001AF1  3B C3             CMP      EAX,EBX
    00001AF3  0F 8E03000000     JLE      3
    00001AF9  EB                JMP      

    LINE      1089

    00001AFA  B8 01000000       MOV      EAX,1
    00001AFF  8B C8             MOV      ECX,EAX
    00001B01  B8 05000000       MOV      EAX,5
    00001B06  50                PUSH     EAX
    00001B07  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001B0A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001B0D  5B                POP      EBX
    00001B0E  53                PUSH     EBX
    00001B0F  3B C3             CMP      EAX,EBX
    00001B11  0F 8E03000000     JLE      3
    00001B17  EB                JMP      

    LINE      1096

    00001B18  B8 01000000       MOV      EAX,1
    00001B1D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1097

    00001B20  B8 01000000       MOV      EAX,1
    00001B25  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1098

    00001B28  B8 01000000       MOV      EAX,1
    00001B2D  8B C8             MOV      ECX,EAX
    00001B2F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001B32  48                DEC      EAX
    00001B33  BB 0E000000       MOV      EBX,14
    00001B38  F7 E3             MUL      EBX
    00001B3A  50                PUSH     EAX
    00001B3B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001B3E  48                DEC      EAX
    00001B3F  BB 02000000       MOV      EBX,2
    00001B44  F7 E3             MUL      EBX
    00001B46  5B                POP      EBX
    00001B47  03 C3             ADD      EAX,EBX
    00001B49  8B F8             MOV      EDI,EAX
    00001B4B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1099

    00001B4F  B8 01000000       MOV      EAX,1
    00001B54  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1100

    00001B57  B8 01000000       MOV      EAX,1
    00001B5C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1102

    00001B5F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00001B66  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001B6B  5B                POP      EBX

    LINE      1104

    00001B6C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00001B73  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00001B78  5B                POP      EBX

    LINE      1106

    00001B79  B8 0A000000       MOV      EAX,10
    00001B7E  40                INC      EAX
    00001B7F  50                PUSH     EAX
    00001B80  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001B83  5B                POP      EBX
    00001B84  3B C3             CMP      EAX,EBX
    00001B86  0F 8503000000     JNE      3
    00001B8C  EB                JMP      

    LINE      1113

    00001B8D  B8 01000000       MOV      EAX,1
    00001B92  8B C8             MOV      ECX,EAX
    00001B94  B8 0A000000       MOV      EAX,10
    00001B99  50                PUSH     EAX
    00001B9A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00001B9D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001BA0  5B                POP      EBX
    00001BA1  53                PUSH     EBX
    00001BA2  3B C3             CMP      EAX,EBX
    00001BA4  0F 8E03000000     JLE      3
    00001BAA  EB                JMP      

    LINE      1115

    00001BAB  B8 01000000       MOV      EAX,1
    00001BB0  8B C8             MOV      ECX,EAX
    00001BB2  B8 05000000       MOV      EAX,5
    00001BB7  50                PUSH     EAX
    00001BB8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00001BBB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001BBE  5B                POP      EBX
    00001BBF  53                PUSH     EBX
    00001BC0  3B C3             CMP      EAX,EBX
    00001BC2  0F 8E03000000     JLE      3
    00001BC8  EB                JMP      

    LINE      1122

    00001BC9  B8 01000000       MOV      EAX,1
    00001BCE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1123

    00001BD1  B8 01000000       MOV      EAX,1
    00001BD6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1124

    00001BD9  B8 01000000       MOV      EAX,1
    00001BDE  8B C8             MOV      ECX,EAX
    00001BE0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001BE3  48                DEC      EAX
    00001BE4  BB 0E000000       MOV      EBX,14
    00001BE9  F7 E3             MUL      EBX
    00001BEB  50                PUSH     EAX
    00001BEC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001BEF  48                DEC      EAX
    00001BF0  BB 02000000       MOV      EBX,2
    00001BF5  F7 E3             MUL      EBX
    00001BF7  5B                POP      EBX
    00001BF8  03 C3             ADD      EAX,EBX
    00001BFA  8B F8             MOV      EDI,EAX
    00001BFC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1125

    00001C00  B8 01000000       MOV      EAX,1
    00001C05  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1126

    00001C08  B8 01000000       MOV      EAX,1
    00001C0D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1128

    00001C10  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00001C17  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001C1C  5B                POP      EBX

    LINE      1130

    00001C1D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00001C24  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00001C29  5B                POP      EBX

    LINE      1132

    00001C2A  B8 0A000000       MOV      EAX,10
    00001C2F  40                INC      EAX
    00001C30  50                PUSH     EAX
    00001C31  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001C34  5B                POP      EBX
    00001C35  3B C3             CMP      EAX,EBX
    00001C37  0F 8503000000     JNE      3
    00001C3D  EB                JMP      

    LINE      1140

    00001C3E  B8 01000000       MOV      EAX,1
    00001C43  8B C8             MOV      ECX,EAX
    00001C45  B8 0A000000       MOV      EAX,10
    00001C4A  50                PUSH     EAX
    00001C4B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00001C4E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001C51  5B                POP      EBX
    00001C52  53                PUSH     EBX
    00001C53  3B C3             CMP      EAX,EBX
    00001C55  0F 8E03000000     JLE      3
    00001C5B  EB                JMP      

    LINE      1142

    00001C5C  B8 01000000       MOV      EAX,1
    00001C61  8B C8             MOV      ECX,EAX
    00001C63  B8 05000000       MOV      EAX,5
    00001C68  50                PUSH     EAX
    00001C69  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001C6C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001C6F  5B                POP      EBX
    00001C70  53                PUSH     EBX
    00001C71  3B C3             CMP      EAX,EBX
    00001C73  0F 8E03000000     JLE      3
    00001C79  EB                JMP      

    LINE      1149

    00001C7A  B8 01000000       MOV      EAX,1
    00001C7F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1150

    00001C85  B8 01000000       MOV      EAX,1
    00001C8A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1151

    00001C90  B8 01000000       MOV      EAX,1
    00001C95  8B C8             MOV      ECX,EAX
    00001C97  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001C9A  48                DEC      EAX
    00001C9B  BB 0E000000       MOV      EBX,14
    00001CA0  F7 E3             MUL      EBX
    00001CA2  50                PUSH     EAX
    00001CA3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001CA6  48                DEC      EAX
    00001CA7  BB 02000000       MOV      EBX,2
    00001CAC  F7 E3             MUL      EBX
    00001CAE  5B                POP      EBX
    00001CAF  03 C3             ADD      EAX,EBX
    00001CB1  8B F8             MOV      EDI,EAX
    00001CB3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1152

    00001CBA  B8 01000000       MOV      EAX,1
    00001CBF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1153

    00001CC5  B8 01000000       MOV      EAX,1
    00001CCA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1155

    00001CD0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00001CD7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00001CDC  5B                POP      EBX

    LINE      1157

    00001CDD  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00001CE4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00001CE9  5B                POP      EBX

    LINE      1159

    00001CEA  B8 0A000000       MOV      EAX,10
    00001CEF  40                INC      EAX
    00001CF0  50                PUSH     EAX
    00001CF1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001CF4  5B                POP      EBX
    00001CF5  3B C3             CMP      EAX,EBX
    00001CF7  0F 8503000000     JNE      3
    00001CFD  EB                JMP      

    LINE      1166

    00001CFE  B8 01000000       MOV      EAX,1
    00001D03  8B C8             MOV      ECX,EAX
    00001D05  B8 0A000000       MOV      EAX,10
    00001D0A  50                PUSH     EAX
    00001D0B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00001D0E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001D11  5B                POP      EBX
    00001D12  53                PUSH     EBX
    00001D13  3B C3             CMP      EAX,EBX
    00001D15  0F 8E03000000     JLE      3
    00001D1B  EB                JMP      

    LINE      1168

    00001D1C  B8 01000000       MOV      EAX,1
    00001D21  8B C8             MOV      ECX,EAX
    00001D23  B8 05000000       MOV      EAX,5
    00001D28  50                PUSH     EAX
    00001D29  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00001D2C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001D2F  5B                POP      EBX
    00001D30  53                PUSH     EBX
    00001D31  3B C3             CMP      EAX,EBX
    00001D33  0F 8E03000000     JLE      3
    00001D39  EB                JMP      

    LINE      1175

    00001D3A  B8 01000000       MOV      EAX,1
    00001D3F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1176

    00001D45  B8 01000000       MOV      EAX,1
    00001D4A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1177

    00001D50  B8 01000000       MOV      EAX,1
    00001D55  8B C8             MOV      ECX,EAX
    00001D57  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001D5A  48                DEC      EAX
    00001D5B  BB 0E000000       MOV      EBX,14
    00001D60  F7 E3             MUL      EBX
    00001D62  50                PUSH     EAX
    00001D63  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001D66  48                DEC      EAX
    00001D67  BB 02000000       MOV      EBX,2
    00001D6C  F7 E3             MUL      EBX
    00001D6E  5B                POP      EBX
    00001D6F  03 C3             ADD      EAX,EBX
    00001D71  8B F8             MOV      EDI,EAX
    00001D73  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1178

    00001D7A  B8 01000000       MOV      EAX,1
    00001D7F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1179

    00001D85  B8 01000000       MOV      EAX,1
    00001D8A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1181

    00001D90  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00001D97  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00001D9C  5B                POP      EBX

    LINE      1183

    00001D9D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00001DA4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00001DA9  5B                POP      EBX

    LINE      1185

    00001DAA  B8 0A000000       MOV      EAX,10
    00001DAF  40                INC      EAX
    00001DB0  50                PUSH     EAX
    00001DB1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001DB4  5B                POP      EBX
    00001DB5  3B C3             CMP      EAX,EBX
    00001DB7  0F 8503000000     JNE      3
    00001DBD  EB                JMP      

    LINE      1199

    00001DBE  56                PUSH     ESI
    00001DBF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00001DC5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00001DCB  FF D1             CALL     ECX                       run_inner_proc
    00001DCD  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1201

    00001DCE  B8 01000000       MOV      EAX,1
    00001DD3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1203

    00001DD6  B8 01000000       MOV      EAX,1
    00001DDB  8B C8             MOV      ECX,EAX
    00001DDD  B8 0A000000       MOV      EAX,10
    00001DE2  50                PUSH     EAX
    00001DE3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00001DE6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001DE9  5B                POP      EBX
    00001DEA  53                PUSH     EBX
    00001DEB  3B C3             CMP      EAX,EBX
    00001DED  0F 8E03000000     JLE      3
    00001DF3  EB                JMP      

    LINE      1205

    00001DF4  B8 01000000       MOV      EAX,1
    00001DF9  8B C8             MOV      ECX,EAX
    00001DFB  B8 05000000       MOV      EAX,5
    00001E00  50                PUSH     EAX
    00001E01  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001E04  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001E07  5B                POP      EBX
    00001E08  53                PUSH     EBX
    00001E09  3B C3             CMP      EAX,EBX
    00001E0B  0F 8E03000000     JLE      3
    00001E11  EB                JMP      

    LINE      1212

    00001E12  B8 01000000       MOV      EAX,1
    00001E17  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1213

    00001E1A  B8 01000000       MOV      EAX,1
    00001E1F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1214

    00001E22  B8 01000000       MOV      EAX,1
    00001E27  8B C8             MOV      ECX,EAX
    00001E29  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001E2C  48                DEC      EAX
    00001E2D  BB 0E000000       MOV      EBX,14
    00001E32  F7 E3             MUL      EBX
    00001E34  50                PUSH     EAX
    00001E35  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001E38  48                DEC      EAX
    00001E39  BB 02000000       MOV      EBX,2
    00001E3E  F7 E3             MUL      EBX
    00001E40  5B                POP      EBX
    00001E41  03 C3             ADD      EAX,EBX
    00001E43  8B F8             MOV      EDI,EAX
    00001E45  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1215

    00001E49  B8 01000000       MOV      EAX,1
    00001E4E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1216

    00001E51  B8 01000000       MOV      EAX,1
    00001E56  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1218

    00001E59  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00001E60  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001E65  5B                POP      EBX

    LINE      1220

    00001E66  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00001E6D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00001E72  5B                POP      EBX

    LINE      1222

    00001E73  B8 0A000000       MOV      EAX,10
    00001E78  40                INC      EAX
    00001E79  50                PUSH     EAX
    00001E7A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001E7D  5B                POP      EBX
    00001E7E  3B C3             CMP      EAX,EBX
    00001E80  0F 8503000000     JNE      3
    00001E86  EB                JMP      

    LINE      1229

    00001E87  B8 01000000       MOV      EAX,1
    00001E8C  8B C8             MOV      ECX,EAX
    00001E8E  B8 0A000000       MOV      EAX,10
    00001E93  50                PUSH     EAX
    00001E94  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00001E97  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001E9A  5B                POP      EBX
    00001E9B  53                PUSH     EBX
    00001E9C  3B C3             CMP      EAX,EBX
    00001E9E  0F 8E03000000     JLE      3
    00001EA4  EB                JMP      

    LINE      1231

    00001EA5  B8 01000000       MOV      EAX,1
    00001EAA  8B C8             MOV      ECX,EAX
    00001EAC  B8 05000000       MOV      EAX,5
    00001EB1  50                PUSH     EAX
    00001EB2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00001EB5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001EB8  5B                POP      EBX
    00001EB9  53                PUSH     EBX
    00001EBA  3B C3             CMP      EAX,EBX
    00001EBC  0F 8E03000000     JLE      3
    00001EC2  EB                JMP      

    LINE      1238

    00001EC3  B8 01000000       MOV      EAX,1
    00001EC8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1239

    00001ECB  B8 01000000       MOV      EAX,1
    00001ED0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1240

    00001ED3  B8 01000000       MOV      EAX,1
    00001ED8  8B C8             MOV      ECX,EAX
    00001EDA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00001EDD  48                DEC      EAX
    00001EDE  BB 0E000000       MOV      EBX,14
    00001EE3  F7 E3             MUL      EBX
    00001EE5  50                PUSH     EAX
    00001EE6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00001EE9  48                DEC      EAX
    00001EEA  BB 02000000       MOV      EBX,2
    00001EEF  F7 E3             MUL      EBX
    00001EF1  5B                POP      EBX
    00001EF2  03 C3             ADD      EAX,EBX
    00001EF4  8B F8             MOV      EDI,EAX
    00001EF6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1241

    00001EFA  B8 01000000       MOV      EAX,1
    00001EFF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1242

    00001F02  B8 01000000       MOV      EAX,1
    00001F07  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1244

    00001F0A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00001F11  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00001F16  5B                POP      EBX

    LINE      1246

    00001F17  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00001F1E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00001F23  5B                POP      EBX

    LINE      1248

    00001F24  B8 0A000000       MOV      EAX,10
    00001F29  40                INC      EAX
    00001F2A  50                PUSH     EAX
    00001F2B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001F2E  5B                POP      EBX
    00001F2F  3B C3             CMP      EAX,EBX
    00001F31  0F 8503000000     JNE      3
    00001F37  EB                JMP      

    LINE      1256

    00001F38  B8 01000000       MOV      EAX,1
    00001F3D  8B C8             MOV      ECX,EAX
    00001F3F  B8 0A000000       MOV      EAX,10
    00001F44  50                PUSH     EAX
    00001F45  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00001F48  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001F4B  5B                POP      EBX
    00001F4C  53                PUSH     EBX
    00001F4D  3B C3             CMP      EAX,EBX
    00001F4F  0F 8E03000000     JLE      3
    00001F55  EB                JMP      

    LINE      1258

    00001F56  B8 01000000       MOV      EAX,1
    00001F5B  8B C8             MOV      ECX,EAX
    00001F5D  B8 05000000       MOV      EAX,5
    00001F62  50                PUSH     EAX
    00001F63  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00001F66  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001F69  5B                POP      EBX
    00001F6A  53                PUSH     EBX
    00001F6B  3B C3             CMP      EAX,EBX
    00001F6D  0F 8E03000000     JLE      3
    00001F73  EB                JMP      

    LINE      1265

    00001F74  B8 01000000       MOV      EAX,1
    00001F79  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1266

    00001F7F  B8 01000000       MOV      EAX,1
    00001F84  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1267

    00001F8A  B8 01000000       MOV      EAX,1
    00001F8F  8B C8             MOV      ECX,EAX
    00001F91  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001F94  48                DEC      EAX
    00001F95  BB 0E000000       MOV      EBX,14
    00001F9A  F7 E3             MUL      EBX
    00001F9C  50                PUSH     EAX
    00001F9D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00001FA0  48                DEC      EAX
    00001FA1  BB 02000000       MOV      EBX,2
    00001FA6  F7 E3             MUL      EBX
    00001FA8  5B                POP      EBX
    00001FA9  03 C3             ADD      EAX,EBX
    00001FAB  8B F8             MOV      EDI,EAX
    00001FAD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1268

    00001FB4  B8 01000000       MOV      EAX,1
    00001FB9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1269

    00001FBF  B8 01000000       MOV      EAX,1
    00001FC4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1271

    00001FCA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00001FD1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00001FD6  5B                POP      EBX

    LINE      1273

    00001FD7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00001FDE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00001FE3  5B                POP      EBX

    LINE      1275

    00001FE4  B8 0A000000       MOV      EAX,10
    00001FE9  40                INC      EAX
    00001FEA  50                PUSH     EAX
    00001FEB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00001FEE  5B                POP      EBX
    00001FEF  3B C3             CMP      EAX,EBX
    00001FF1  0F 8503000000     JNE      3
    00001FF7  EB                JMP      

    LINE      1282

    00001FF8  B8 01000000       MOV      EAX,1
    00001FFD  8B C8             MOV      ECX,EAX
    00001FFF  B8 0A000000       MOV      EAX,10
    00002004  50                PUSH     EAX
    00002005  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002008  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000200B  5B                POP      EBX
    0000200C  53                PUSH     EBX
    0000200D  3B C3             CMP      EAX,EBX
    0000200F  0F 8E03000000     JLE      3
    00002015  EB                JMP      

    LINE      1284

    00002016  B8 01000000       MOV      EAX,1
    0000201B  8B C8             MOV      ECX,EAX
    0000201D  B8 05000000       MOV      EAX,5
    00002022  50                PUSH     EAX
    00002023  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00002026  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002029  5B                POP      EBX
    0000202A  53                PUSH     EBX
    0000202B  3B C3             CMP      EAX,EBX
    0000202D  0F 8E03000000     JLE      3
    00002033  EB                JMP      

    LINE      1291

    00002034  B8 01000000       MOV      EAX,1
    00002039  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1292

    0000203F  B8 01000000       MOV      EAX,1
    00002044  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1293

    0000204A  B8 01000000       MOV      EAX,1
    0000204F  8B C8             MOV      ECX,EAX
    00002051  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002054  48                DEC      EAX
    00002055  BB 0E000000       MOV      EBX,14
    0000205A  F7 E3             MUL      EBX
    0000205C  50                PUSH     EAX
    0000205D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002060  48                DEC      EAX
    00002061  BB 02000000       MOV      EBX,2
    00002066  F7 E3             MUL      EBX
    00002068  5B                POP      EBX
    00002069  03 C3             ADD      EAX,EBX
    0000206B  8B F8             MOV      EDI,EAX
    0000206D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1294

    00002074  B8 01000000       MOV      EAX,1
    00002079  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1295

    0000207F  B8 01000000       MOV      EAX,1
    00002084  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1297

    0000208A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00002091  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00002096  5B                POP      EBX

    LINE      1299

    00002097  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000209E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000020A3  5B                POP      EBX

    LINE      1301

    000020A4  B8 0A000000       MOV      EAX,10
    000020A9  40                INC      EAX
    000020AA  50                PUSH     EAX
    000020AB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000020AE  5B                POP      EBX
    000020AF  3B C3             CMP      EAX,EBX
    000020B1  0F 8503000000     JNE      3
    000020B7  EB                JMP      

    LINE      1315

    000020B8  56                PUSH     ESI
    000020B9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000020BF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000020C5  FF D1             CALL     ECX                       run_inner_proc
    000020C7  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1317

    000020C8  B8 01000000       MOV      EAX,1
    000020CD  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1319

    000020D0  B8 01000000       MOV      EAX,1
    000020D5  8B C8             MOV      ECX,EAX
    000020D7  B8 0A000000       MOV      EAX,10
    000020DC  50                PUSH     EAX
    000020DD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000020E0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000020E3  5B                POP      EBX
    000020E4  53                PUSH     EBX
    000020E5  3B C3             CMP      EAX,EBX
    000020E7  0F 8E03000000     JLE      3
    000020ED  EB                JMP      

    LINE      1321

    000020EE  B8 01000000       MOV      EAX,1
    000020F3  8B C8             MOV      ECX,EAX
    000020F5  B8 05000000       MOV      EAX,5
    000020FA  50                PUSH     EAX
    000020FB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000020FE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002101  5B                POP      EBX
    00002102  53                PUSH     EBX
    00002103  3B C3             CMP      EAX,EBX
    00002105  0F 8E03000000     JLE      3
    0000210B  EB                JMP      

    LINE      1328

    0000210C  B8 01000000       MOV      EAX,1
    00002111  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1329

    00002114  B8 01000000       MOV      EAX,1
    00002119  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1330

    0000211C  B8 01000000       MOV      EAX,1
    00002121  8B C8             MOV      ECX,EAX
    00002123  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002126  48                DEC      EAX
    00002127  BB 0E000000       MOV      EBX,14
    0000212C  F7 E3             MUL      EBX
    0000212E  50                PUSH     EAX
    0000212F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002132  48                DEC      EAX
    00002133  BB 02000000       MOV      EBX,2
    00002138  F7 E3             MUL      EBX
    0000213A  5B                POP      EBX
    0000213B  03 C3             ADD      EAX,EBX
    0000213D  8B F8             MOV      EDI,EAX
    0000213F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1331

    00002143  B8 01000000       MOV      EAX,1
    00002148  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1332

    0000214B  B8 01000000       MOV      EAX,1
    00002150  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1334

    00002153  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000215A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000215F  5B                POP      EBX

    LINE      1336

    00002160  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00002167  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000216C  5B                POP      EBX

    LINE      1338

    0000216D  B8 0A000000       MOV      EAX,10
    00002172  40                INC      EAX
    00002173  50                PUSH     EAX
    00002174  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002177  5B                POP      EBX
    00002178  3B C3             CMP      EAX,EBX
    0000217A  0F 8503000000     JNE      3
    00002180  EB                JMP      

    LINE      1345

    00002181  B8 01000000       MOV      EAX,1
    00002186  8B C8             MOV      ECX,EAX
    00002188  B8 0A000000       MOV      EAX,10
    0000218D  50                PUSH     EAX
    0000218E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002191  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002194  5B                POP      EBX
    00002195  53                PUSH     EBX
    00002196  3B C3             CMP      EAX,EBX
    00002198  0F 8E03000000     JLE      3
    0000219E  EB                JMP      

    LINE      1347

    0000219F  B8 01000000       MOV      EAX,1
    000021A4  8B C8             MOV      ECX,EAX
    000021A6  B8 05000000       MOV      EAX,5
    000021AB  50                PUSH     EAX
    000021AC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000021AF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000021B2  5B                POP      EBX
    000021B3  53                PUSH     EBX
    000021B4  3B C3             CMP      EAX,EBX
    000021B6  0F 8E03000000     JLE      3
    000021BC  EB                JMP      

    LINE      1354

    000021BD  B8 01000000       MOV      EAX,1
    000021C2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1355

    000021C5  B8 01000000       MOV      EAX,1
    000021CA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1356

    000021CD  B8 01000000       MOV      EAX,1
    000021D2  8B C8             MOV      ECX,EAX
    000021D4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000021D7  48                DEC      EAX
    000021D8  BB 0E000000       MOV      EBX,14
    000021DD  F7 E3             MUL      EBX
    000021DF  50                PUSH     EAX
    000021E0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000021E3  48                DEC      EAX
    000021E4  BB 02000000       MOV      EBX,2
    000021E9  F7 E3             MUL      EBX
    000021EB  5B                POP      EBX
    000021EC  03 C3             ADD      EAX,EBX
    000021EE  8B F8             MOV      EDI,EAX
    000021F0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1357

    000021F4  B8 01000000       MOV      EAX,1
    000021F9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1358

    000021FC  B8 01000000       MOV      EAX,1
    00002201  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1360

    00002204  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000220B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002210  5B                POP      EBX

    LINE      1362

    00002211  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002218  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000221D  5B                POP      EBX

    LINE      1364

    0000221E  B8 0A000000       MOV      EAX,10
    00002223  40                INC      EAX
    00002224  50                PUSH     EAX
    00002225  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002228  5B                POP      EBX
    00002229  3B C3             CMP      EAX,EBX
    0000222B  0F 8503000000     JNE      3
    00002231  EB                JMP      

    LINE      1372

    00002232  B8 01000000       MOV      EAX,1
    00002237  8B C8             MOV      ECX,EAX
    00002239  B8 0A000000       MOV      EAX,10
    0000223E  50                PUSH     EAX
    0000223F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00002242  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002245  5B                POP      EBX
    00002246  53                PUSH     EBX
    00002247  3B C3             CMP      EAX,EBX
    00002249  0F 8E03000000     JLE      3
    0000224F  EB                JMP      

    LINE      1374

    00002250  B8 01000000       MOV      EAX,1
    00002255  8B C8             MOV      ECX,EAX
    00002257  B8 05000000       MOV      EAX,5
    0000225C  50                PUSH     EAX
    0000225D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00002260  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002263  5B                POP      EBX
    00002264  53                PUSH     EBX
    00002265  3B C3             CMP      EAX,EBX
    00002267  0F 8E03000000     JLE      3
    0000226D  EB                JMP      

    LINE      1381

    0000226E  B8 01000000       MOV      EAX,1
    00002273  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1382

    00002279  B8 01000000       MOV      EAX,1
    0000227E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1383

    00002284  B8 01000000       MOV      EAX,1
    00002289  8B C8             MOV      ECX,EAX
    0000228B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000228E  48                DEC      EAX
    0000228F  BB 0E000000       MOV      EBX,14
    00002294  F7 E3             MUL      EBX
    00002296  50                PUSH     EAX
    00002297  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000229A  48                DEC      EAX
    0000229B  BB 02000000       MOV      EBX,2
    000022A0  F7 E3             MUL      EBX
    000022A2  5B                POP      EBX
    000022A3  03 C3             ADD      EAX,EBX
    000022A5  8B F8             MOV      EDI,EAX
    000022A7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1384

    000022AE  B8 01000000       MOV      EAX,1
    000022B3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1385

    000022B9  B8 01000000       MOV      EAX,1
    000022BE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1387

    000022C4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000022CB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000022D0  5B                POP      EBX

    LINE      1389

    000022D1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000022D8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000022DD  5B                POP      EBX

    LINE      1391

    000022DE  B8 0A000000       MOV      EAX,10
    000022E3  40                INC      EAX
    000022E4  50                PUSH     EAX
    000022E5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000022E8  5B                POP      EBX
    000022E9  3B C3             CMP      EAX,EBX
    000022EB  0F 8503000000     JNE      3
    000022F1  EB                JMP      

    LINE      1398

    000022F2  B8 01000000       MOV      EAX,1
    000022F7  8B C8             MOV      ECX,EAX
    000022F9  B8 0A000000       MOV      EAX,10
    000022FE  50                PUSH     EAX
    000022FF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002302  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002305  5B                POP      EBX
    00002306  53                PUSH     EBX
    00002307  3B C3             CMP      EAX,EBX
    00002309  0F 8E03000000     JLE      3
    0000230F  EB                JMP      

    LINE      1400

    00002310  B8 01000000       MOV      EAX,1
    00002315  8B C8             MOV      ECX,EAX
    00002317  B8 05000000       MOV      EAX,5
    0000231C  50                PUSH     EAX
    0000231D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00002320  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002323  5B                POP      EBX
    00002324  53                PUSH     EBX
    00002325  3B C3             CMP      EAX,EBX
    00002327  0F 8E03000000     JLE      3
    0000232D  EB                JMP      

    LINE      1407

    0000232E  B8 01000000       MOV      EAX,1
    00002333  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1408

    00002339  B8 01000000       MOV      EAX,1
    0000233E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1409

    00002344  B8 01000000       MOV      EAX,1
    00002349  8B C8             MOV      ECX,EAX
    0000234B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000234E  48                DEC      EAX
    0000234F  BB 0E000000       MOV      EBX,14
    00002354  F7 E3             MUL      EBX
    00002356  50                PUSH     EAX
    00002357  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000235A  48                DEC      EAX
    0000235B  BB 02000000       MOV      EBX,2
    00002360  F7 E3             MUL      EBX
    00002362  5B                POP      EBX
    00002363  03 C3             ADD      EAX,EBX
    00002365  8B F8             MOV      EDI,EAX
    00002367  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1410

    0000236E  B8 01000000       MOV      EAX,1
    00002373  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1411

    00002379  B8 01000000       MOV      EAX,1
    0000237E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1413

    00002384  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000238B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00002390  5B                POP      EBX

    LINE      1415

    00002391  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002398  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000239D  5B                POP      EBX

    LINE      1417

    0000239E  B8 0A000000       MOV      EAX,10
    000023A3  40                INC      EAX
    000023A4  50                PUSH     EAX
    000023A5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000023A8  5B                POP      EBX
    000023A9  3B C3             CMP      EAX,EBX
    000023AB  0F 8503000000     JNE      3
    000023B1  EB                JMP      

    LINE      1431

    000023B2  56                PUSH     ESI
    000023B3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000023B9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000023BF  FF D1             CALL     ECX                       run_inner_proc
    000023C1  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1433

    000023C2  B8 01000000       MOV      EAX,1
    000023C7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1435

    000023CA  B8 01000000       MOV      EAX,1
    000023CF  8B C8             MOV      ECX,EAX
    000023D1  B8 0A000000       MOV      EAX,10
    000023D6  50                PUSH     EAX
    000023D7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000023DA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000023DD  5B                POP      EBX
    000023DE  53                PUSH     EBX
    000023DF  3B C3             CMP      EAX,EBX
    000023E1  0F 8E03000000     JLE      3
    000023E7  EB                JMP      

    LINE      1437

    000023E8  B8 01000000       MOV      EAX,1
    000023ED  8B C8             MOV      ECX,EAX
    000023EF  B8 05000000       MOV      EAX,5
    000023F4  50                PUSH     EAX
    000023F5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000023F8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000023FB  5B                POP      EBX
    000023FC  53                PUSH     EBX
    000023FD  3B C3             CMP      EAX,EBX
    000023FF  0F 8E03000000     JLE      3
    00002405  EB                JMP      

    LINE      1444

    00002406  B8 01000000       MOV      EAX,1
    0000240B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1445

    0000240E  B8 01000000       MOV      EAX,1
    00002413  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1446

    00002416  B8 01000000       MOV      EAX,1
    0000241B  8B C8             MOV      ECX,EAX
    0000241D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002420  48                DEC      EAX
    00002421  BB 0E000000       MOV      EBX,14
    00002426  F7 E3             MUL      EBX
    00002428  50                PUSH     EAX
    00002429  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000242C  48                DEC      EAX
    0000242D  BB 02000000       MOV      EBX,2
    00002432  F7 E3             MUL      EBX
    00002434  5B                POP      EBX
    00002435  03 C3             ADD      EAX,EBX
    00002437  8B F8             MOV      EDI,EAX
    00002439  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1447

    0000243D  B8 01000000       MOV      EAX,1
    00002442  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1448

    00002445  B8 01000000       MOV      EAX,1
    0000244A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1450

    0000244D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00002454  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002459  5B                POP      EBX

    LINE      1452

    0000245A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00002461  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002466  5B                POP      EBX

    LINE      1454

    00002467  B8 0A000000       MOV      EAX,10
    0000246C  40                INC      EAX
    0000246D  50                PUSH     EAX
    0000246E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002471  5B                POP      EBX
    00002472  3B C3             CMP      EAX,EBX
    00002474  0F 8503000000     JNE      3
    0000247A  EB                JMP      

    LINE      1461

    0000247B  B8 01000000       MOV      EAX,1
    00002480  8B C8             MOV      ECX,EAX
    00002482  B8 0A000000       MOV      EAX,10
    00002487  50                PUSH     EAX
    00002488  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000248B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000248E  5B                POP      EBX
    0000248F  53                PUSH     EBX
    00002490  3B C3             CMP      EAX,EBX
    00002492  0F 8E03000000     JLE      3
    00002498  EB                JMP      

    LINE      1463

    00002499  B8 01000000       MOV      EAX,1
    0000249E  8B C8             MOV      ECX,EAX
    000024A0  B8 05000000       MOV      EAX,5
    000024A5  50                PUSH     EAX
    000024A6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000024A9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000024AC  5B                POP      EBX
    000024AD  53                PUSH     EBX
    000024AE  3B C3             CMP      EAX,EBX
    000024B0  0F 8E03000000     JLE      3
    000024B6  EB                JMP      

    LINE      1470

    000024B7  B8 01000000       MOV      EAX,1
    000024BC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1471

    000024BF  B8 01000000       MOV      EAX,1
    000024C4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1472

    000024C7  B8 01000000       MOV      EAX,1
    000024CC  8B C8             MOV      ECX,EAX
    000024CE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000024D1  48                DEC      EAX
    000024D2  BB 0E000000       MOV      EBX,14
    000024D7  F7 E3             MUL      EBX
    000024D9  50                PUSH     EAX
    000024DA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000024DD  48                DEC      EAX
    000024DE  BB 02000000       MOV      EBX,2
    000024E3  F7 E3             MUL      EBX
    000024E5  5B                POP      EBX
    000024E6  03 C3             ADD      EAX,EBX
    000024E8  8B F8             MOV      EDI,EAX
    000024EA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1473

    000024EE  B8 01000000       MOV      EAX,1
    000024F3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1474

    000024F6  B8 01000000       MOV      EAX,1
    000024FB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1476

    000024FE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00002505  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000250A  5B                POP      EBX

    LINE      1478

    0000250B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002512  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002517  5B                POP      EBX

    LINE      1480

    00002518  B8 0A000000       MOV      EAX,10
    0000251D  40                INC      EAX
    0000251E  50                PUSH     EAX
    0000251F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002522  5B                POP      EBX
    00002523  3B C3             CMP      EAX,EBX
    00002525  0F 8503000000     JNE      3
    0000252B  EB                JMP      

    LINE      1488

    0000252C  B8 01000000       MOV      EAX,1
    00002531  8B C8             MOV      ECX,EAX
    00002533  B8 0A000000       MOV      EAX,10
    00002538  50                PUSH     EAX
    00002539  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000253C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000253F  5B                POP      EBX
    00002540  53                PUSH     EBX
    00002541  3B C3             CMP      EAX,EBX
    00002543  0F 8E03000000     JLE      3
    00002549  EB                JMP      

    LINE      1490

    0000254A  B8 01000000       MOV      EAX,1
    0000254F  8B C8             MOV      ECX,EAX
    00002551  B8 05000000       MOV      EAX,5
    00002556  50                PUSH     EAX
    00002557  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000255A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000255D  5B                POP      EBX
    0000255E  53                PUSH     EBX
    0000255F  3B C3             CMP      EAX,EBX
    00002561  0F 8E03000000     JLE      3
    00002567  EB                JMP      

    LINE      1497

    00002568  B8 01000000       MOV      EAX,1
    0000256D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1498

    00002573  B8 01000000       MOV      EAX,1
    00002578  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1499

    0000257E  B8 01000000       MOV      EAX,1
    00002583  8B C8             MOV      ECX,EAX
    00002585  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002588  48                DEC      EAX
    00002589  BB 0E000000       MOV      EBX,14
    0000258E  F7 E3             MUL      EBX
    00002590  50                PUSH     EAX
    00002591  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002594  48                DEC      EAX
    00002595  BB 02000000       MOV      EBX,2
    0000259A  F7 E3             MUL      EBX
    0000259C  5B                POP      EBX
    0000259D  03 C3             ADD      EAX,EBX
    0000259F  8B F8             MOV      EDI,EAX
    000025A1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1500

    000025A8  B8 01000000       MOV      EAX,1
    000025AD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1501

    000025B3  B8 01000000       MOV      EAX,1
    000025B8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1503

    000025BE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000025C5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000025CA  5B                POP      EBX

    LINE      1505

    000025CB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000025D2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000025D7  5B                POP      EBX

    LINE      1507

    000025D8  B8 0A000000       MOV      EAX,10
    000025DD  40                INC      EAX
    000025DE  50                PUSH     EAX
    000025DF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000025E2  5B                POP      EBX
    000025E3  3B C3             CMP      EAX,EBX
    000025E5  0F 8503000000     JNE      3
    000025EB  EB                JMP      

    LINE      1514

    000025EC  B8 01000000       MOV      EAX,1
    000025F1  8B C8             MOV      ECX,EAX
    000025F3  B8 0A000000       MOV      EAX,10
    000025F8  50                PUSH     EAX
    000025F9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000025FC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000025FF  5B                POP      EBX
    00002600  53                PUSH     EBX
    00002601  3B C3             CMP      EAX,EBX
    00002603  0F 8E03000000     JLE      3
    00002609  EB                JMP      

    LINE      1516

    0000260A  B8 01000000       MOV      EAX,1
    0000260F  8B C8             MOV      ECX,EAX
    00002611  B8 05000000       MOV      EAX,5
    00002616  50                PUSH     EAX
    00002617  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000261A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000261D  5B                POP      EBX
    0000261E  53                PUSH     EBX
    0000261F  3B C3             CMP      EAX,EBX
    00002621  0F 8E03000000     JLE      3
    00002627  EB                JMP      

    LINE      1523

    00002628  B8 01000000       MOV      EAX,1
    0000262D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1524

    00002633  B8 01000000       MOV      EAX,1
    00002638  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1525

    0000263E  B8 01000000       MOV      EAX,1
    00002643  8B C8             MOV      ECX,EAX
    00002645  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002648  48                DEC      EAX
    00002649  BB 0E000000       MOV      EBX,14
    0000264E  F7 E3             MUL      EBX
    00002650  50                PUSH     EAX
    00002651  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002654  48                DEC      EAX
    00002655  BB 02000000       MOV      EBX,2
    0000265A  F7 E3             MUL      EBX
    0000265C  5B                POP      EBX
    0000265D  03 C3             ADD      EAX,EBX
    0000265F  8B F8             MOV      EDI,EAX
    00002661  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1526

    00002668  B8 01000000       MOV      EAX,1
    0000266D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1527

    00002673  B8 01000000       MOV      EAX,1
    00002678  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1529

    0000267E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00002685  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000268A  5B                POP      EBX

    LINE      1531

    0000268B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002692  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00002697  5B                POP      EBX

    LINE      1533

    00002698  B8 0A000000       MOV      EAX,10
    0000269D  40                INC      EAX
    0000269E  50                PUSH     EAX
    0000269F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000026A2  5B                POP      EBX
    000026A3  3B C3             CMP      EAX,EBX
    000026A5  0F 8503000000     JNE      3
    000026AB  EB                JMP      

    LINE      1547

    000026AC  56                PUSH     ESI
    000026AD  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000026B3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000026B9  FF D1             CALL     ECX                       run_inner_proc
    000026BB  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1549

    000026BC  B8 01000000       MOV      EAX,1
    000026C1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1551

    000026C4  B8 01000000       MOV      EAX,1
    000026C9  8B C8             MOV      ECX,EAX
    000026CB  B8 0A000000       MOV      EAX,10
    000026D0  50                PUSH     EAX
    000026D1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000026D4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000026D7  5B                POP      EBX
    000026D8  53                PUSH     EBX
    000026D9  3B C3             CMP      EAX,EBX
    000026DB  0F 8E03000000     JLE      3
    000026E1  EB                JMP      

    LINE      1553

    000026E2  B8 01000000       MOV      EAX,1
    000026E7  8B C8             MOV      ECX,EAX
    000026E9  B8 05000000       MOV      EAX,5
    000026EE  50                PUSH     EAX
    000026EF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000026F2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000026F5  5B                POP      EBX
    000026F6  53                PUSH     EBX
    000026F7  3B C3             CMP      EAX,EBX
    000026F9  0F 8E03000000     JLE      3
    000026FF  EB                JMP      

    LINE      1560

    00002700  B8 01000000       MOV      EAX,1
    00002705  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1561

    00002708  B8 01000000       MOV      EAX,1
    0000270D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1562

    00002710  B8 01000000       MOV      EAX,1
    00002715  8B C8             MOV      ECX,EAX
    00002717  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000271A  48                DEC      EAX
    0000271B  BB 0E000000       MOV      EBX,14
    00002720  F7 E3             MUL      EBX
    00002722  50                PUSH     EAX
    00002723  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002726  48                DEC      EAX
    00002727  BB 02000000       MOV      EBX,2
    0000272C  F7 E3             MUL      EBX
    0000272E  5B                POP      EBX
    0000272F  03 C3             ADD      EAX,EBX
    00002731  8B F8             MOV      EDI,EAX
    00002733  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1563

    00002737  B8 01000000       MOV      EAX,1
    0000273C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1564

    0000273F  B8 01000000       MOV      EAX,1
    00002744  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1566

    00002747  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000274E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002753  5B                POP      EBX

    LINE      1568

    00002754  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000275B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002760  5B                POP      EBX

    LINE      1570

    00002761  B8 0A000000       MOV      EAX,10
    00002766  40                INC      EAX
    00002767  50                PUSH     EAX
    00002768  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000276B  5B                POP      EBX
    0000276C  3B C3             CMP      EAX,EBX
    0000276E  0F 8503000000     JNE      3
    00002774  EB                JMP      

    LINE      1577

    00002775  B8 01000000       MOV      EAX,1
    0000277A  8B C8             MOV      ECX,EAX
    0000277C  B8 0A000000       MOV      EAX,10
    00002781  50                PUSH     EAX
    00002782  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002785  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002788  5B                POP      EBX
    00002789  53                PUSH     EBX
    0000278A  3B C3             CMP      EAX,EBX
    0000278C  0F 8E03000000     JLE      3
    00002792  EB                JMP      

    LINE      1579

    00002793  B8 01000000       MOV      EAX,1
    00002798  8B C8             MOV      ECX,EAX
    0000279A  B8 05000000       MOV      EAX,5
    0000279F  50                PUSH     EAX
    000027A0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000027A3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000027A6  5B                POP      EBX
    000027A7  53                PUSH     EBX
    000027A8  3B C3             CMP      EAX,EBX
    000027AA  0F 8E03000000     JLE      3
    000027B0  EB                JMP      

    LINE      1586

    000027B1  B8 01000000       MOV      EAX,1
    000027B6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1587

    000027B9  B8 01000000       MOV      EAX,1
    000027BE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1588

    000027C1  B8 01000000       MOV      EAX,1
    000027C6  8B C8             MOV      ECX,EAX
    000027C8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000027CB  48                DEC      EAX
    000027CC  BB 0E000000       MOV      EBX,14
    000027D1  F7 E3             MUL      EBX
    000027D3  50                PUSH     EAX
    000027D4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000027D7  48                DEC      EAX
    000027D8  BB 02000000       MOV      EBX,2
    000027DD  F7 E3             MUL      EBX
    000027DF  5B                POP      EBX
    000027E0  03 C3             ADD      EAX,EBX
    000027E2  8B F8             MOV      EDI,EAX
    000027E4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1589

    000027E8  B8 01000000       MOV      EAX,1
    000027ED  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1590

    000027F0  B8 01000000       MOV      EAX,1
    000027F5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1592

    000027F8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000027FF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002804  5B                POP      EBX

    LINE      1594

    00002805  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000280C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002811  5B                POP      EBX

    LINE      1596

    00002812  B8 0A000000       MOV      EAX,10
    00002817  40                INC      EAX
    00002818  50                PUSH     EAX
    00002819  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000281C  5B                POP      EBX
    0000281D  3B C3             CMP      EAX,EBX
    0000281F  0F 8503000000     JNE      3
    00002825  EB                JMP      

    LINE      1604

    00002826  B8 01000000       MOV      EAX,1
    0000282B  8B C8             MOV      ECX,EAX
    0000282D  B8 0A000000       MOV      EAX,10
    00002832  50                PUSH     EAX
    00002833  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00002836  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002839  5B                POP      EBX
    0000283A  53                PUSH     EBX
    0000283B  3B C3             CMP      EAX,EBX
    0000283D  0F 8E03000000     JLE      3
    00002843  EB                JMP      

    LINE      1606

    00002844  B8 01000000       MOV      EAX,1
    00002849  8B C8             MOV      ECX,EAX
    0000284B  B8 05000000       MOV      EAX,5
    00002850  50                PUSH     EAX
    00002851  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00002854  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002857  5B                POP      EBX
    00002858  53                PUSH     EBX
    00002859  3B C3             CMP      EAX,EBX
    0000285B  0F 8E03000000     JLE      3
    00002861  EB                JMP      

    LINE      1613

    00002862  B8 01000000       MOV      EAX,1
    00002867  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1614

    0000286D  B8 01000000       MOV      EAX,1
    00002872  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1615

    00002878  B8 01000000       MOV      EAX,1
    0000287D  8B C8             MOV      ECX,EAX
    0000287F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002882  48                DEC      EAX
    00002883  BB 0E000000       MOV      EBX,14
    00002888  F7 E3             MUL      EBX
    0000288A  50                PUSH     EAX
    0000288B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000288E  48                DEC      EAX
    0000288F  BB 02000000       MOV      EBX,2
    00002894  F7 E3             MUL      EBX
    00002896  5B                POP      EBX
    00002897  03 C3             ADD      EAX,EBX
    00002899  8B F8             MOV      EDI,EAX
    0000289B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1616

    000028A2  B8 01000000       MOV      EAX,1
    000028A7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1617

    000028AD  B8 01000000       MOV      EAX,1
    000028B2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1619

    000028B8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000028BF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000028C4  5B                POP      EBX

    LINE      1621

    000028C5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000028CC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000028D1  5B                POP      EBX

    LINE      1623

    000028D2  B8 0A000000       MOV      EAX,10
    000028D7  40                INC      EAX
    000028D8  50                PUSH     EAX
    000028D9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000028DC  5B                POP      EBX
    000028DD  3B C3             CMP      EAX,EBX
    000028DF  0F 8503000000     JNE      3
    000028E5  EB                JMP      

    LINE      1630

    000028E6  B8 01000000       MOV      EAX,1
    000028EB  8B C8             MOV      ECX,EAX
    000028ED  B8 0A000000       MOV      EAX,10
    000028F2  50                PUSH     EAX
    000028F3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000028F6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000028F9  5B                POP      EBX
    000028FA  53                PUSH     EBX
    000028FB  3B C3             CMP      EAX,EBX
    000028FD  0F 8E03000000     JLE      3
    00002903  EB                JMP      

    LINE      1632

    00002904  B8 01000000       MOV      EAX,1
    00002909  8B C8             MOV      ECX,EAX
    0000290B  B8 05000000       MOV      EAX,5
    00002910  50                PUSH     EAX
    00002911  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00002914  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002917  5B                POP      EBX
    00002918  53                PUSH     EBX
    00002919  3B C3             CMP      EAX,EBX
    0000291B  0F 8E03000000     JLE      3
    00002921  EB                JMP      

    LINE      1639

    00002922  B8 01000000       MOV      EAX,1
    00002927  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1640

    0000292D  B8 01000000       MOV      EAX,1
    00002932  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1641

    00002938  B8 01000000       MOV      EAX,1
    0000293D  8B C8             MOV      ECX,EAX
    0000293F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002942  48                DEC      EAX
    00002943  BB 0E000000       MOV      EBX,14
    00002948  F7 E3             MUL      EBX
    0000294A  50                PUSH     EAX
    0000294B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000294E  48                DEC      EAX
    0000294F  BB 02000000       MOV      EBX,2
    00002954  F7 E3             MUL      EBX
    00002956  5B                POP      EBX
    00002957  03 C3             ADD      EAX,EBX
    00002959  8B F8             MOV      EDI,EAX
    0000295B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1642

    00002962  B8 01000000       MOV      EAX,1
    00002967  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1643

    0000296D  B8 01000000       MOV      EAX,1
    00002972  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1645

    00002978  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000297F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00002984  5B                POP      EBX

    LINE      1647

    00002985  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000298C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00002991  5B                POP      EBX

    LINE      1649

    00002992  B8 0A000000       MOV      EAX,10
    00002997  40                INC      EAX
    00002998  50                PUSH     EAX
    00002999  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000299C  5B                POP      EBX
    0000299D  3B C3             CMP      EAX,EBX
    0000299F  0F 8503000000     JNE      3
    000029A5  EB                JMP      

    LINE      1663

    000029A6  56                PUSH     ESI
    000029A7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000029AD  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000029B3  FF D1             CALL     ECX                       run_inner_proc
    000029B5  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1665

    000029B6  B8 01000000       MOV      EAX,1
    000029BB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1667

    000029BE  B8 01000000       MOV      EAX,1
    000029C3  8B C8             MOV      ECX,EAX
    000029C5  B8 0A000000       MOV      EAX,10
    000029CA  50                PUSH     EAX
    000029CB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000029CE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000029D1  5B                POP      EBX
    000029D2  53                PUSH     EBX
    000029D3  3B C3             CMP      EAX,EBX
    000029D5  0F 8E03000000     JLE      3
    000029DB  EB                JMP      

    LINE      1669

    000029DC  B8 01000000       MOV      EAX,1
    000029E1  8B C8             MOV      ECX,EAX
    000029E3  B8 05000000       MOV      EAX,5
    000029E8  50                PUSH     EAX
    000029E9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000029EC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000029EF  5B                POP      EBX
    000029F0  53                PUSH     EBX
    000029F1  3B C3             CMP      EAX,EBX
    000029F3  0F 8E03000000     JLE      3
    000029F9  EB                JMP      

    LINE      1676

    000029FA  B8 01000000       MOV      EAX,1
    000029FF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1677

    00002A02  B8 01000000       MOV      EAX,1
    00002A07  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1678

    00002A0A  B8 01000000       MOV      EAX,1
    00002A0F  8B C8             MOV      ECX,EAX
    00002A11  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002A14  48                DEC      EAX
    00002A15  BB 0E000000       MOV      EBX,14
    00002A1A  F7 E3             MUL      EBX
    00002A1C  50                PUSH     EAX
    00002A1D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002A20  48                DEC      EAX
    00002A21  BB 02000000       MOV      EBX,2
    00002A26  F7 E3             MUL      EBX
    00002A28  5B                POP      EBX
    00002A29  03 C3             ADD      EAX,EBX
    00002A2B  8B F8             MOV      EDI,EAX
    00002A2D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1679

    00002A31  B8 01000000       MOV      EAX,1
    00002A36  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1680

    00002A39  B8 01000000       MOV      EAX,1
    00002A3E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1682

    00002A41  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00002A48  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002A4D  5B                POP      EBX

    LINE      1684

    00002A4E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00002A55  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002A5A  5B                POP      EBX

    LINE      1686

    00002A5B  B8 0A000000       MOV      EAX,10
    00002A60  40                INC      EAX
    00002A61  50                PUSH     EAX
    00002A62  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002A65  5B                POP      EBX
    00002A66  3B C3             CMP      EAX,EBX
    00002A68  0F 8503000000     JNE      3
    00002A6E  EB                JMP      

    LINE      1693

    00002A6F  B8 01000000       MOV      EAX,1
    00002A74  8B C8             MOV      ECX,EAX
    00002A76  B8 0A000000       MOV      EAX,10
    00002A7B  50                PUSH     EAX
    00002A7C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002A7F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002A82  5B                POP      EBX
    00002A83  53                PUSH     EBX
    00002A84  3B C3             CMP      EAX,EBX
    00002A86  0F 8E03000000     JLE      3
    00002A8C  EB                JMP      

    LINE      1695

    00002A8D  B8 01000000       MOV      EAX,1
    00002A92  8B C8             MOV      ECX,EAX
    00002A94  B8 05000000       MOV      EAX,5
    00002A99  50                PUSH     EAX
    00002A9A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00002A9D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002AA0  5B                POP      EBX
    00002AA1  53                PUSH     EBX
    00002AA2  3B C3             CMP      EAX,EBX
    00002AA4  0F 8E03000000     JLE      3
    00002AAA  EB                JMP      

    LINE      1702

    00002AAB  B8 01000000       MOV      EAX,1
    00002AB0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1703

    00002AB3  B8 01000000       MOV      EAX,1
    00002AB8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1704

    00002ABB  B8 01000000       MOV      EAX,1
    00002AC0  8B C8             MOV      ECX,EAX
    00002AC2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002AC5  48                DEC      EAX
    00002AC6  BB 0E000000       MOV      EBX,14
    00002ACB  F7 E3             MUL      EBX
    00002ACD  50                PUSH     EAX
    00002ACE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002AD1  48                DEC      EAX
    00002AD2  BB 02000000       MOV      EBX,2
    00002AD7  F7 E3             MUL      EBX
    00002AD9  5B                POP      EBX
    00002ADA  03 C3             ADD      EAX,EBX
    00002ADC  8B F8             MOV      EDI,EAX
    00002ADE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1705

    00002AE2  B8 01000000       MOV      EAX,1
    00002AE7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1706

    00002AEA  B8 01000000       MOV      EAX,1
    00002AEF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1708

    00002AF2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00002AF9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002AFE  5B                POP      EBX

    LINE      1710

    00002AFF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002B06  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002B0B  5B                POP      EBX

    LINE      1712

    00002B0C  B8 0A000000       MOV      EAX,10
    00002B11  40                INC      EAX
    00002B12  50                PUSH     EAX
    00002B13  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002B16  5B                POP      EBX
    00002B17  3B C3             CMP      EAX,EBX
    00002B19  0F 8503000000     JNE      3
    00002B1F  EB                JMP      

    LINE      1720

    00002B20  B8 01000000       MOV      EAX,1
    00002B25  8B C8             MOV      ECX,EAX
    00002B27  B8 0A000000       MOV      EAX,10
    00002B2C  50                PUSH     EAX
    00002B2D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00002B30  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002B33  5B                POP      EBX
    00002B34  53                PUSH     EBX
    00002B35  3B C3             CMP      EAX,EBX
    00002B37  0F 8E03000000     JLE      3
    00002B3D  EB                JMP      

    LINE      1722

    00002B3E  B8 01000000       MOV      EAX,1
    00002B43  8B C8             MOV      ECX,EAX
    00002B45  B8 05000000       MOV      EAX,5
    00002B4A  50                PUSH     EAX
    00002B4B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00002B4E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002B51  5B                POP      EBX
    00002B52  53                PUSH     EBX
    00002B53  3B C3             CMP      EAX,EBX
    00002B55  0F 8E03000000     JLE      3
    00002B5B  EB                JMP      

    LINE      1729

    00002B5C  B8 01000000       MOV      EAX,1
    00002B61  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1730

    00002B67  B8 01000000       MOV      EAX,1
    00002B6C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1731

    00002B72  B8 01000000       MOV      EAX,1
    00002B77  8B C8             MOV      ECX,EAX
    00002B79  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002B7C  48                DEC      EAX
    00002B7D  BB 0E000000       MOV      EBX,14
    00002B82  F7 E3             MUL      EBX
    00002B84  50                PUSH     EAX
    00002B85  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002B88  48                DEC      EAX
    00002B89  BB 02000000       MOV      EBX,2
    00002B8E  F7 E3             MUL      EBX
    00002B90  5B                POP      EBX
    00002B91  03 C3             ADD      EAX,EBX
    00002B93  8B F8             MOV      EDI,EAX
    00002B95  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1732

    00002B9C  B8 01000000       MOV      EAX,1
    00002BA1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1733

    00002BA7  B8 01000000       MOV      EAX,1
    00002BAC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1735

    00002BB2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00002BB9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00002BBE  5B                POP      EBX

    LINE      1737

    00002BBF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00002BC6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00002BCB  5B                POP      EBX

    LINE      1739

    00002BCC  B8 0A000000       MOV      EAX,10
    00002BD1  40                INC      EAX
    00002BD2  50                PUSH     EAX
    00002BD3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002BD6  5B                POP      EBX
    00002BD7  3B C3             CMP      EAX,EBX
    00002BD9  0F 8503000000     JNE      3
    00002BDF  EB                JMP      

    LINE      1746

    00002BE0  B8 01000000       MOV      EAX,1
    00002BE5  8B C8             MOV      ECX,EAX
    00002BE7  B8 0A000000       MOV      EAX,10
    00002BEC  50                PUSH     EAX
    00002BED  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002BF0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002BF3  5B                POP      EBX
    00002BF4  53                PUSH     EBX
    00002BF5  3B C3             CMP      EAX,EBX
    00002BF7  0F 8E03000000     JLE      3
    00002BFD  EB                JMP      

    LINE      1748

    00002BFE  B8 01000000       MOV      EAX,1
    00002C03  8B C8             MOV      ECX,EAX
    00002C05  B8 05000000       MOV      EAX,5
    00002C0A  50                PUSH     EAX
    00002C0B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00002C0E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002C11  5B                POP      EBX
    00002C12  53                PUSH     EBX
    00002C13  3B C3             CMP      EAX,EBX
    00002C15  0F 8E03000000     JLE      3
    00002C1B  EB                JMP      

    LINE      1755

    00002C1C  B8 01000000       MOV      EAX,1
    00002C21  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1756

    00002C27  B8 01000000       MOV      EAX,1
    00002C2C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1757

    00002C32  B8 01000000       MOV      EAX,1
    00002C37  8B C8             MOV      ECX,EAX
    00002C39  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002C3C  48                DEC      EAX
    00002C3D  BB 0E000000       MOV      EBX,14
    00002C42  F7 E3             MUL      EBX
    00002C44  50                PUSH     EAX
    00002C45  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002C48  48                DEC      EAX
    00002C49  BB 02000000       MOV      EBX,2
    00002C4E  F7 E3             MUL      EBX
    00002C50  5B                POP      EBX
    00002C51  03 C3             ADD      EAX,EBX
    00002C53  8B F8             MOV      EDI,EAX
    00002C55  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1758

    00002C5C  B8 01000000       MOV      EAX,1
    00002C61  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1759

    00002C67  B8 01000000       MOV      EAX,1
    00002C6C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1761

    00002C72  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00002C79  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00002C7E  5B                POP      EBX

    LINE      1763

    00002C7F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002C86  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00002C8B  5B                POP      EBX

    LINE      1765

    00002C8C  B8 0A000000       MOV      EAX,10
    00002C91  40                INC      EAX
    00002C92  50                PUSH     EAX
    00002C93  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002C96  5B                POP      EBX
    00002C97  3B C3             CMP      EAX,EBX
    00002C99  0F 8503000000     JNE      3
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   5


    00002C9F  EB                JMP      

    LINE      1779

    00002CA0  56                PUSH     ESI
    00002CA1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00002CA7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00002CAD  FF D1             CALL     ECX                       run_inner_proc
    00002CAF  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1781

    00002CB0  B8 01000000       MOV      EAX,1
    00002CB5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1783

    00002CB8  B8 01000000       MOV      EAX,1
    00002CBD  8B C8             MOV      ECX,EAX
    00002CBF  B8 0A000000       MOV      EAX,10
    00002CC4  50                PUSH     EAX
    00002CC5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00002CC8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002CCB  5B                POP      EBX
    00002CCC  53                PUSH     EBX
    00002CCD  3B C3             CMP      EAX,EBX
    00002CCF  0F 8E03000000     JLE      3
    00002CD5  EB                JMP      

    LINE      1785

    00002CD6  B8 01000000       MOV      EAX,1
    00002CDB  8B C8             MOV      ECX,EAX
    00002CDD  B8 05000000       MOV      EAX,5
    00002CE2  50                PUSH     EAX
    00002CE3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00002CE6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002CE9  5B                POP      EBX
    00002CEA  53                PUSH     EBX
    00002CEB  3B C3             CMP      EAX,EBX
    00002CED  0F 8E03000000     JLE      3
    00002CF3  EB                JMP      

    LINE      1792

    00002CF4  B8 01000000       MOV      EAX,1
    00002CF9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1793

    00002CFC  B8 01000000       MOV      EAX,1
    00002D01  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1794

    00002D04  B8 01000000       MOV      EAX,1
    00002D09  8B C8             MOV      ECX,EAX
    00002D0B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002D0E  48                DEC      EAX
    00002D0F  BB 0E000000       MOV      EBX,14
    00002D14  F7 E3             MUL      EBX
    00002D16  50                PUSH     EAX
    00002D17  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002D1A  48                DEC      EAX
    00002D1B  BB 02000000       MOV      EBX,2
    00002D20  F7 E3             MUL      EBX
    00002D22  5B                POP      EBX
    00002D23  03 C3             ADD      EAX,EBX
    00002D25  8B F8             MOV      EDI,EAX
    00002D27  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1795

    00002D2B  B8 01000000       MOV      EAX,1
    00002D30  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1796

    00002D33  B8 01000000       MOV      EAX,1
    00002D38  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1798

    00002D3B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00002D42  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002D47  5B                POP      EBX

    LINE      1800

    00002D48  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00002D4F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002D54  5B                POP      EBX

    LINE      1802

    00002D55  B8 0A000000       MOV      EAX,10
    00002D5A  40                INC      EAX
    00002D5B  50                PUSH     EAX
    00002D5C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002D5F  5B                POP      EBX
    00002D60  3B C3             CMP      EAX,EBX
    00002D62  0F 8503000000     JNE      3
    00002D68  EB                JMP      

    LINE      1809

    00002D69  B8 01000000       MOV      EAX,1
    00002D6E  8B C8             MOV      ECX,EAX
    00002D70  B8 0A000000       MOV      EAX,10
    00002D75  50                PUSH     EAX
    00002D76  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002D79  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002D7C  5B                POP      EBX
    00002D7D  53                PUSH     EBX
    00002D7E  3B C3             CMP      EAX,EBX
    00002D80  0F 8E03000000     JLE      3
    00002D86  EB                JMP      

    LINE      1811

    00002D87  B8 01000000       MOV      EAX,1
    00002D8C  8B C8             MOV      ECX,EAX
    00002D8E  B8 05000000       MOV      EAX,5
    00002D93  50                PUSH     EAX
    00002D94  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00002D97  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002D9A  5B                POP      EBX
    00002D9B  53                PUSH     EBX
    00002D9C  3B C3             CMP      EAX,EBX
    00002D9E  0F 8E03000000     JLE      3
    00002DA4  EB                JMP      

    LINE      1818

    00002DA5  B8 01000000       MOV      EAX,1
    00002DAA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1819

    00002DAD  B8 01000000       MOV      EAX,1
    00002DB2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1820

    00002DB5  B8 01000000       MOV      EAX,1
    00002DBA  8B C8             MOV      ECX,EAX
    00002DBC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002DBF  48                DEC      EAX
    00002DC0  BB 0E000000       MOV      EBX,14
    00002DC5  F7 E3             MUL      EBX
    00002DC7  50                PUSH     EAX
    00002DC8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002DCB  48                DEC      EAX
    00002DCC  BB 02000000       MOV      EBX,2
    00002DD1  F7 E3             MUL      EBX
    00002DD3  5B                POP      EBX
    00002DD4  03 C3             ADD      EAX,EBX
    00002DD6  8B F8             MOV      EDI,EAX
    00002DD8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1821

    00002DDC  B8 01000000       MOV      EAX,1
    00002DE1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1822

    00002DE4  B8 01000000       MOV      EAX,1
    00002DE9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1824

    00002DEC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00002DF3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00002DF8  5B                POP      EBX

    LINE      1826

    00002DF9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002E00  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00002E05  5B                POP      EBX

    LINE      1828

    00002E06  B8 0A000000       MOV      EAX,10
    00002E0B  40                INC      EAX
    00002E0C  50                PUSH     EAX
    00002E0D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002E10  5B                POP      EBX
    00002E11  3B C3             CMP      EAX,EBX
    00002E13  0F 8503000000     JNE      3
    00002E19  EB                JMP      

    LINE      1836

    00002E1A  B8 01000000       MOV      EAX,1
    00002E1F  8B C8             MOV      ECX,EAX
    00002E21  B8 0A000000       MOV      EAX,10
    00002E26  50                PUSH     EAX
    00002E27  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00002E2A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002E2D  5B                POP      EBX
    00002E2E  53                PUSH     EBX
    00002E2F  3B C3             CMP      EAX,EBX
    00002E31  0F 8E03000000     JLE      3
    00002E37  EB                JMP      

    LINE      1838

    00002E38  B8 01000000       MOV      EAX,1
    00002E3D  8B C8             MOV      ECX,EAX
    00002E3F  B8 05000000       MOV      EAX,5
    00002E44  50                PUSH     EAX
    00002E45  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00002E48  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002E4B  5B                POP      EBX
    00002E4C  53                PUSH     EBX
    00002E4D  3B C3             CMP      EAX,EBX
    00002E4F  0F 8E03000000     JLE      3
    00002E55  EB                JMP      

    LINE      1845

    00002E56  B8 01000000       MOV      EAX,1
    00002E5B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1846

    00002E61  B8 01000000       MOV      EAX,1
    00002E66  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1847

    00002E6C  B8 01000000       MOV      EAX,1
    00002E71  8B C8             MOV      ECX,EAX
    00002E73  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002E76  48                DEC      EAX
    00002E77  BB 0E000000       MOV      EBX,14
    00002E7C  F7 E3             MUL      EBX
    00002E7E  50                PUSH     EAX
    00002E7F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002E82  48                DEC      EAX
    00002E83  BB 02000000       MOV      EBX,2
    00002E88  F7 E3             MUL      EBX
    00002E8A  5B                POP      EBX
    00002E8B  03 C3             ADD      EAX,EBX
    00002E8D  8B F8             MOV      EDI,EAX
    00002E8F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1848

    00002E96  B8 01000000       MOV      EAX,1
    00002E9B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1849

    00002EA1  B8 01000000       MOV      EAX,1
    00002EA6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1851

    00002EAC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00002EB3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00002EB8  5B                POP      EBX

    LINE      1853

    00002EB9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00002EC0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00002EC5  5B                POP      EBX

    LINE      1855

    00002EC6  B8 0A000000       MOV      EAX,10
    00002ECB  40                INC      EAX
    00002ECC  50                PUSH     EAX
    00002ECD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002ED0  5B                POP      EBX
    00002ED1  3B C3             CMP      EAX,EBX
    00002ED3  0F 8503000000     JNE      3
    00002ED9  EB                JMP      

    LINE      1862

    00002EDA  B8 01000000       MOV      EAX,1
    00002EDF  8B C8             MOV      ECX,EAX
    00002EE1  B8 0A000000       MOV      EAX,10
    00002EE6  50                PUSH     EAX
    00002EE7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00002EEA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002EED  5B                POP      EBX
    00002EEE  53                PUSH     EBX
    00002EEF  3B C3             CMP      EAX,EBX
    00002EF1  0F 8E03000000     JLE      3
    00002EF7  EB                JMP      

    LINE      1864

    00002EF8  B8 01000000       MOV      EAX,1
    00002EFD  8B C8             MOV      ECX,EAX
    00002EFF  B8 05000000       MOV      EAX,5
    00002F04  50                PUSH     EAX
    00002F05  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00002F08  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002F0B  5B                POP      EBX
    00002F0C  53                PUSH     EBX
    00002F0D  3B C3             CMP      EAX,EBX
    00002F0F  0F 8E03000000     JLE      3
    00002F15  EB                JMP      

    LINE      1871

    00002F16  B8 01000000       MOV      EAX,1
    00002F1B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1872

    00002F21  B8 01000000       MOV      EAX,1
    00002F26  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1873

    00002F2C  B8 01000000       MOV      EAX,1
    00002F31  8B C8             MOV      ECX,EAX
    00002F33  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00002F36  48                DEC      EAX
    00002F37  BB 0E000000       MOV      EBX,14
    00002F3C  F7 E3             MUL      EBX
    00002F3E  50                PUSH     EAX
    00002F3F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00002F42  48                DEC      EAX
    00002F43  BB 02000000       MOV      EBX,2
    00002F48  F7 E3             MUL      EBX
    00002F4A  5B                POP      EBX
    00002F4B  03 C3             ADD      EAX,EBX
    00002F4D  8B F8             MOV      EDI,EAX
    00002F4F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1874

    00002F56  B8 01000000       MOV      EAX,1
    00002F5B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1875

    00002F61  B8 01000000       MOV      EAX,1
    00002F66  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1877

    00002F6C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00002F73  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00002F78  5B                POP      EBX

    LINE      1879

    00002F79  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00002F80  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00002F85  5B                POP      EBX

    LINE      1881

    00002F86  B8 0A000000       MOV      EAX,10
    00002F8B  40                INC      EAX
    00002F8C  50                PUSH     EAX
    00002F8D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002F90  5B                POP      EBX
    00002F91  3B C3             CMP      EAX,EBX
    00002F93  0F 8503000000     JNE      3
    00002F99  EB                JMP      

    LINE      1895

    00002F9A  56                PUSH     ESI
    00002F9B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00002FA1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00002FA7  FF D1             CALL     ECX                       run_inner_proc
    00002FA9  5E                POP      ESI                       /* restore callers static pointer */

    LINE      1897

    00002FAA  B8 01000000       MOV      EAX,1
    00002FAF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      1899

    00002FB2  B8 01000000       MOV      EAX,1
    00002FB7  8B C8             MOV      ECX,EAX
    00002FB9  B8 0A000000       MOV      EAX,10
    00002FBE  50                PUSH     EAX
    00002FBF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00002FC2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00002FC5  5B                POP      EBX
    00002FC6  53                PUSH     EBX
    00002FC7  3B C3             CMP      EAX,EBX
    00002FC9  0F 8E03000000     JLE      3
    00002FCF  EB                JMP      

    LINE      1901

    00002FD0  B8 01000000       MOV      EAX,1
    00002FD5  8B C8             MOV      ECX,EAX
    00002FD7  B8 05000000       MOV      EAX,5
    00002FDC  50                PUSH     EAX
    00002FDD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00002FE0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00002FE3  5B                POP      EBX
    00002FE4  53                PUSH     EBX
    00002FE5  3B C3             CMP      EAX,EBX
    00002FE7  0F 8E03000000     JLE      3
    00002FED  EB                JMP      

    LINE      1908

    00002FEE  B8 01000000       MOV      EAX,1
    00002FF3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1909

    00002FF6  B8 01000000       MOV      EAX,1
    00002FFB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1910

    00002FFE  B8 01000000       MOV      EAX,1
    00003003  8B C8             MOV      ECX,EAX
    00003005  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003008  48                DEC      EAX
    00003009  BB 0E000000       MOV      EBX,14
    0000300E  F7 E3             MUL      EBX
    00003010  50                PUSH     EAX
    00003011  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003014  48                DEC      EAX
    00003015  BB 02000000       MOV      EBX,2
    0000301A  F7 E3             MUL      EBX
    0000301C  5B                POP      EBX
    0000301D  03 C3             ADD      EAX,EBX
    0000301F  8B F8             MOV      EDI,EAX
    00003021  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1911

    00003025  B8 01000000       MOV      EAX,1
    0000302A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1912

    0000302D  B8 01000000       MOV      EAX,1
    00003032  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1914

    00003035  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000303C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00003041  5B                POP      EBX

    LINE      1916

    00003042  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00003049  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000304E  5B                POP      EBX

    LINE      1918

    0000304F  B8 0A000000       MOV      EAX,10
    00003054  40                INC      EAX
    00003055  50                PUSH     EAX
    00003056  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003059  5B                POP      EBX
    0000305A  3B C3             CMP      EAX,EBX
    0000305C  0F 8503000000     JNE      3
    00003062  EB                JMP      

    LINE      1925

    00003063  B8 01000000       MOV      EAX,1
    00003068  8B C8             MOV      ECX,EAX
    0000306A  B8 0A000000       MOV      EAX,10
    0000306F  50                PUSH     EAX
    00003070  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00003073  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003076  5B                POP      EBX
    00003077  53                PUSH     EBX
    00003078  3B C3             CMP      EAX,EBX
    0000307A  0F 8E03000000     JLE      3
    00003080  EB                JMP      

    LINE      1927

    00003081  B8 01000000       MOV      EAX,1
    00003086  8B C8             MOV      ECX,EAX
    00003088  B8 05000000       MOV      EAX,5
    0000308D  50                PUSH     EAX
    0000308E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00003091  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003094  5B                POP      EBX
    00003095  53                PUSH     EBX
    00003096  3B C3             CMP      EAX,EBX
    00003098  0F 8E03000000     JLE      3
    0000309E  EB                JMP      

    LINE      1934

    0000309F  B8 01000000       MOV      EAX,1
    000030A4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1935

    000030A7  B8 01000000       MOV      EAX,1
    000030AC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1936

    000030AF  B8 01000000       MOV      EAX,1
    000030B4  8B C8             MOV      ECX,EAX
    000030B6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000030B9  48                DEC      EAX
    000030BA  BB 0E000000       MOV      EBX,14
    000030BF  F7 E3             MUL      EBX
    000030C1  50                PUSH     EAX
    000030C2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000030C5  48                DEC      EAX
    000030C6  BB 02000000       MOV      EBX,2
    000030CB  F7 E3             MUL      EBX
    000030CD  5B                POP      EBX
    000030CE  03 C3             ADD      EAX,EBX
    000030D0  8B F8             MOV      EDI,EAX
    000030D2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      1937

    000030D6  B8 01000000       MOV      EAX,1
    000030DB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1938

    000030DE  B8 01000000       MOV      EAX,1
    000030E3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      1940

    000030E6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000030ED  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000030F2  5B                POP      EBX

    LINE      1942

    000030F3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000030FA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000030FF  5B                POP      EBX

    LINE      1944

    00003100  B8 0A000000       MOV      EAX,10
    00003105  40                INC      EAX
    00003106  50                PUSH     EAX
    00003107  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000310A  5B                POP      EBX
    0000310B  3B C3             CMP      EAX,EBX
    0000310D  0F 8503000000     JNE      3
    00003113  EB                JMP      

    LINE      1952

    00003114  B8 01000000       MOV      EAX,1
    00003119  8B C8             MOV      ECX,EAX
    0000311B  B8 0A000000       MOV      EAX,10
    00003120  50                PUSH     EAX
    00003121  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00003124  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003127  5B                POP      EBX
    00003128  53                PUSH     EBX
    00003129  3B C3             CMP      EAX,EBX
    0000312B  0F 8E03000000     JLE      3
    00003131  EB                JMP      

    LINE      1954

    00003132  B8 01000000       MOV      EAX,1
    00003137  8B C8             MOV      ECX,EAX
    00003139  B8 05000000       MOV      EAX,5
    0000313E  50                PUSH     EAX
    0000313F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00003142  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003145  5B                POP      EBX
    00003146  53                PUSH     EBX
    00003147  3B C3             CMP      EAX,EBX
    00003149  0F 8E03000000     JLE      3
    0000314F  EB                JMP      

    LINE      1961

    00003150  B8 01000000       MOV      EAX,1
    00003155  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1962

    0000315B  B8 01000000       MOV      EAX,1
    00003160  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1963

    00003166  B8 01000000       MOV      EAX,1
    0000316B  8B C8             MOV      ECX,EAX
    0000316D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003170  48                DEC      EAX
    00003171  BB 0E000000       MOV      EBX,14
    00003176  F7 E3             MUL      EBX
    00003178  50                PUSH     EAX
    00003179  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000317C  48                DEC      EAX
    0000317D  BB 02000000       MOV      EBX,2
    00003182  F7 E3             MUL      EBX
    00003184  5B                POP      EBX
    00003185  03 C3             ADD      EAX,EBX
    00003187  8B F8             MOV      EDI,EAX
    00003189  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1964

    00003190  B8 01000000       MOV      EAX,1
    00003195  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1965

    0000319B  B8 01000000       MOV      EAX,1
    000031A0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1967

    000031A6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000031AD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000031B2  5B                POP      EBX

    LINE      1969

    000031B3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000031BA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000031BF  5B                POP      EBX

    LINE      1971

    000031C0  B8 0A000000       MOV      EAX,10
    000031C5  40                INC      EAX
    000031C6  50                PUSH     EAX
    000031C7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000031CA  5B                POP      EBX
    000031CB  3B C3             CMP      EAX,EBX
    000031CD  0F 8503000000     JNE      3
    000031D3  EB                JMP      

    LINE      1978

    000031D4  B8 01000000       MOV      EAX,1
    000031D9  8B C8             MOV      ECX,EAX
    000031DB  B8 0A000000       MOV      EAX,10
    000031E0  50                PUSH     EAX
    000031E1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000031E4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000031E7  5B                POP      EBX
    000031E8  53                PUSH     EBX
    000031E9  3B C3             CMP      EAX,EBX
    000031EB  0F 8E03000000     JLE      3
    000031F1  EB                JMP      

    LINE      1980

    000031F2  B8 01000000       MOV      EAX,1
    000031F7  8B C8             MOV      ECX,EAX
    000031F9  B8 05000000       MOV      EAX,5
    000031FE  50                PUSH     EAX
    000031FF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00003202  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003205  5B                POP      EBX
    00003206  53                PUSH     EBX
    00003207  3B C3             CMP      EAX,EBX
    00003209  0F 8E03000000     JLE      3
    0000320F  EB                JMP      

    LINE      1987

    00003210  B8 01000000       MOV      EAX,1
    00003215  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1988

    0000321B  B8 01000000       MOV      EAX,1
    00003220  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1989

    00003226  B8 01000000       MOV      EAX,1
    0000322B  8B C8             MOV      ECX,EAX
    0000322D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003230  48                DEC      EAX
    00003231  BB 0E000000       MOV      EBX,14
    00003236  F7 E3             MUL      EBX
    00003238  50                PUSH     EAX
    00003239  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000323C  48                DEC      EAX
    0000323D  BB 02000000       MOV      EBX,2
    00003242  F7 E3             MUL      EBX
    00003244  5B                POP      EBX
    00003245  03 C3             ADD      EAX,EBX
    00003247  8B F8             MOV      EDI,EAX
    00003249  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      1990

    00003250  B8 01000000       MOV      EAX,1
    00003255  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1991

    0000325B  B8 01000000       MOV      EAX,1
    00003260  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      1993

    00003266  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000326D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00003272  5B                POP      EBX

    LINE      1995

    00003273  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000327A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000327F  5B                POP      EBX

    LINE      1997

    00003280  B8 0A000000       MOV      EAX,10
    00003285  40                INC      EAX
    00003286  50                PUSH     EAX
    00003287  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000328A  5B                POP      EBX
    0000328B  3B C3             CMP      EAX,EBX
    0000328D  0F 8503000000     JNE      3
    00003293  EB                JMP      

    LINE      2011

    00003294  56                PUSH     ESI
    00003295  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000329B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000032A1  FF D1             CALL     ECX                       run_inner_proc
    000032A3  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2013

    000032A4  B8 01000000       MOV      EAX,1
    000032A9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2015

    000032AC  B8 01000000       MOV      EAX,1
    000032B1  8B C8             MOV      ECX,EAX
    000032B3  B8 0A000000       MOV      EAX,10
    000032B8  50                PUSH     EAX
    000032B9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000032BC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000032BF  5B                POP      EBX
    000032C0  53                PUSH     EBX
    000032C1  3B C3             CMP      EAX,EBX
    000032C3  0F 8E03000000     JLE      3
    000032C9  EB                JMP      

    LINE      2017

    000032CA  B8 01000000       MOV      EAX,1
    000032CF  8B C8             MOV      ECX,EAX
    000032D1  B8 05000000       MOV      EAX,5
    000032D6  50                PUSH     EAX
    000032D7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000032DA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000032DD  5B                POP      EBX
    000032DE  53                PUSH     EBX
    000032DF  3B C3             CMP      EAX,EBX
    000032E1  0F 8E03000000     JLE      3
    000032E7  EB                JMP      

    LINE      2024

    000032E8  B8 01000000       MOV      EAX,1
    000032ED  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2025

    000032F0  B8 01000000       MOV      EAX,1
    000032F5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2026

    000032F8  B8 01000000       MOV      EAX,1
    000032FD  8B C8             MOV      ECX,EAX
    000032FF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003302  48                DEC      EAX
    00003303  BB 0E000000       MOV      EBX,14
    00003308  F7 E3             MUL      EBX
    0000330A  50                PUSH     EAX
    0000330B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000330E  48                DEC      EAX
    0000330F  BB 02000000       MOV      EBX,2
    00003314  F7 E3             MUL      EBX
    00003316  5B                POP      EBX
    00003317  03 C3             ADD      EAX,EBX
    00003319  8B F8             MOV      EDI,EAX
    0000331B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2027

    0000331F  B8 01000000       MOV      EAX,1
    00003324  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2028

    00003327  B8 01000000       MOV      EAX,1
    0000332C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2030

    0000332F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00003336  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000333B  5B                POP      EBX

    LINE      2032

    0000333C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00003343  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00003348  5B                POP      EBX

    LINE      2034

    00003349  B8 0A000000       MOV      EAX,10
    0000334E  40                INC      EAX
    0000334F  50                PUSH     EAX
    00003350  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003353  5B                POP      EBX
    00003354  3B C3             CMP      EAX,EBX
    00003356  0F 8503000000     JNE      3
    0000335C  EB                JMP      

    LINE      2041

    0000335D  B8 01000000       MOV      EAX,1
    00003362  8B C8             MOV      ECX,EAX
    00003364  B8 0A000000       MOV      EAX,10
    00003369  50                PUSH     EAX
    0000336A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000336D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003370  5B                POP      EBX
    00003371  53                PUSH     EBX
    00003372  3B C3             CMP      EAX,EBX
    00003374  0F 8E03000000     JLE      3
    0000337A  EB                JMP      

    LINE      2043

    0000337B  B8 01000000       MOV      EAX,1
    00003380  8B C8             MOV      ECX,EAX
    00003382  B8 05000000       MOV      EAX,5
    00003387  50                PUSH     EAX
    00003388  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000338B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000338E  5B                POP      EBX
    0000338F  53                PUSH     EBX
    00003390  3B C3             CMP      EAX,EBX
    00003392  0F 8E03000000     JLE      3
    00003398  EB                JMP      

    LINE      2050

    00003399  B8 01000000       MOV      EAX,1
    0000339E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2051

    000033A1  B8 01000000       MOV      EAX,1
    000033A6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2052

    000033A9  B8 01000000       MOV      EAX,1
    000033AE  8B C8             MOV      ECX,EAX
    000033B0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000033B3  48                DEC      EAX
    000033B4  BB 0E000000       MOV      EBX,14
    000033B9  F7 E3             MUL      EBX
    000033BB  50                PUSH     EAX
    000033BC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000033BF  48                DEC      EAX
    000033C0  BB 02000000       MOV      EBX,2
    000033C5  F7 E3             MUL      EBX
    000033C7  5B                POP      EBX
    000033C8  03 C3             ADD      EAX,EBX
    000033CA  8B F8             MOV      EDI,EAX
    000033CC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2053

    000033D0  B8 01000000       MOV      EAX,1
    000033D5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2054

    000033D8  B8 01000000       MOV      EAX,1
    000033DD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2056

    000033E0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000033E7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000033EC  5B                POP      EBX

    LINE      2058

    000033ED  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000033F4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000033F9  5B                POP      EBX

    LINE      2060

    000033FA  B8 0A000000       MOV      EAX,10
    000033FF  40                INC      EAX
    00003400  50                PUSH     EAX
    00003401  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003404  5B                POP      EBX
    00003405  3B C3             CMP      EAX,EBX
    00003407  0F 8503000000     JNE      3
    0000340D  EB                JMP      

    LINE      2068

    0000340E  B8 01000000       MOV      EAX,1
    00003413  8B C8             MOV      ECX,EAX
    00003415  B8 0A000000       MOV      EAX,10
    0000341A  50                PUSH     EAX
    0000341B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000341E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003421  5B                POP      EBX
    00003422  53                PUSH     EBX
    00003423  3B C3             CMP      EAX,EBX
    00003425  0F 8E03000000     JLE      3
    0000342B  EB                JMP      

    LINE      2070

    0000342C  B8 01000000       MOV      EAX,1
    00003431  8B C8             MOV      ECX,EAX
    00003433  B8 05000000       MOV      EAX,5
    00003438  50                PUSH     EAX
    00003439  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000343C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000343F  5B                POP      EBX
    00003440  53                PUSH     EBX
    00003441  3B C3             CMP      EAX,EBX
    00003443  0F 8E03000000     JLE      3
    00003449  EB                JMP      

    LINE      2077

    0000344A  B8 01000000       MOV      EAX,1
    0000344F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2078

    00003455  B8 01000000       MOV      EAX,1
    0000345A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2079

    00003460  B8 01000000       MOV      EAX,1
    00003465  8B C8             MOV      ECX,EAX
    00003467  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000346A  48                DEC      EAX
    0000346B  BB 0E000000       MOV      EBX,14
    00003470  F7 E3             MUL      EBX
    00003472  50                PUSH     EAX
    00003473  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003476  48                DEC      EAX
    00003477  BB 02000000       MOV      EBX,2
    0000347C  F7 E3             MUL      EBX
    0000347E  5B                POP      EBX
    0000347F  03 C3             ADD      EAX,EBX
    00003481  8B F8             MOV      EDI,EAX
    00003483  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2080

    0000348A  B8 01000000       MOV      EAX,1
    0000348F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2081

    00003495  B8 01000000       MOV      EAX,1
    0000349A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2083

    000034A0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000034A7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000034AC  5B                POP      EBX

    LINE      2085

    000034AD  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000034B4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000034B9  5B                POP      EBX

    LINE      2087

    000034BA  B8 0A000000       MOV      EAX,10
    000034BF  40                INC      EAX
    000034C0  50                PUSH     EAX
    000034C1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000034C4  5B                POP      EBX
    000034C5  3B C3             CMP      EAX,EBX
    000034C7  0F 8503000000     JNE      3
    000034CD  EB                JMP      

    LINE      2094

    000034CE  B8 01000000       MOV      EAX,1
    000034D3  8B C8             MOV      ECX,EAX
    000034D5  B8 0A000000       MOV      EAX,10
    000034DA  50                PUSH     EAX
    000034DB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000034DE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000034E1  5B                POP      EBX
    000034E2  53                PUSH     EBX
    000034E3  3B C3             CMP      EAX,EBX
    000034E5  0F 8E03000000     JLE      3
    000034EB  EB                JMP      

    LINE      2096

    000034EC  B8 01000000       MOV      EAX,1
    000034F1  8B C8             MOV      ECX,EAX
    000034F3  B8 05000000       MOV      EAX,5
    000034F8  50                PUSH     EAX
    000034F9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000034FC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000034FF  5B                POP      EBX
    00003500  53                PUSH     EBX
    00003501  3B C3             CMP      EAX,EBX
    00003503  0F 8E03000000     JLE      3
    00003509  EB                JMP      

    LINE      2103

    0000350A  B8 01000000       MOV      EAX,1
    0000350F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2104

    00003515  B8 01000000       MOV      EAX,1
    0000351A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2105

    00003520  B8 01000000       MOV      EAX,1
    00003525  8B C8             MOV      ECX,EAX
    00003527  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000352A  48                DEC      EAX
    0000352B  BB 0E000000       MOV      EBX,14
    00003530  F7 E3             MUL      EBX
    00003532  50                PUSH     EAX
    00003533  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003536  48                DEC      EAX
    00003537  BB 02000000       MOV      EBX,2
    0000353C  F7 E3             MUL      EBX
    0000353E  5B                POP      EBX
    0000353F  03 C3             ADD      EAX,EBX
    00003541  8B F8             MOV      EDI,EAX
    00003543  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2106

    0000354A  B8 01000000       MOV      EAX,1
    0000354F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2107

    00003555  B8 01000000       MOV      EAX,1
    0000355A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2109

    00003560  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00003567  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000356C  5B                POP      EBX

    LINE      2111

    0000356D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00003574  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00003579  5B                POP      EBX

    LINE      2113

    0000357A  B8 0A000000       MOV      EAX,10
    0000357F  40                INC      EAX
    00003580  50                PUSH     EAX
    00003581  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003584  5B                POP      EBX
    00003585  3B C3             CMP      EAX,EBX
    00003587  0F 8503000000     JNE      3
    0000358D  EB                JMP      

    LINE      2127

    0000358E  56                PUSH     ESI
    0000358F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00003595  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000359B  FF D1             CALL     ECX                       run_inner_proc
    0000359D  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2129

    0000359E  B8 01000000       MOV      EAX,1
    000035A3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2131

    000035A6  B8 01000000       MOV      EAX,1
    000035AB  8B C8             MOV      ECX,EAX
    000035AD  B8 0A000000       MOV      EAX,10
    000035B2  50                PUSH     EAX
    000035B3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000035B6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000035B9  5B                POP      EBX
    000035BA  53                PUSH     EBX
    000035BB  3B C3             CMP      EAX,EBX
    000035BD  0F 8E03000000     JLE      3
    000035C3  EB                JMP      

    LINE      2133

    000035C4  B8 01000000       MOV      EAX,1
    000035C9  8B C8             MOV      ECX,EAX
    000035CB  B8 05000000       MOV      EAX,5
    000035D0  50                PUSH     EAX
    000035D1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000035D4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000035D7  5B                POP      EBX
    000035D8  53                PUSH     EBX
    000035D9  3B C3             CMP      EAX,EBX
    000035DB  0F 8E03000000     JLE      3
    000035E1  EB                JMP      

    LINE      2140

    000035E2  B8 01000000       MOV      EAX,1
    000035E7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2141

    000035EA  B8 01000000       MOV      EAX,1
    000035EF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2142

    000035F2  B8 01000000       MOV      EAX,1
    000035F7  8B C8             MOV      ECX,EAX
    000035F9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000035FC  48                DEC      EAX
    000035FD  BB 0E000000       MOV      EBX,14
    00003602  F7 E3             MUL      EBX
    00003604  50                PUSH     EAX
    00003605  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003608  48                DEC      EAX
    00003609  BB 02000000       MOV      EBX,2
    0000360E  F7 E3             MUL      EBX
    00003610  5B                POP      EBX
    00003611  03 C3             ADD      EAX,EBX
    00003613  8B F8             MOV      EDI,EAX
    00003615  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2143

    00003619  B8 01000000       MOV      EAX,1
    0000361E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2144

    00003621  B8 01000000       MOV      EAX,1
    00003626  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2146

    00003629  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00003630  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00003635  5B                POP      EBX

    LINE      2148

    00003636  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000363D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00003642  5B                POP      EBX

    LINE      2150

    00003643  B8 0A000000       MOV      EAX,10
    00003648  40                INC      EAX
    00003649  50                PUSH     EAX
    0000364A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000364D  5B                POP      EBX
    0000364E  3B C3             CMP      EAX,EBX
    00003650  0F 8503000000     JNE      3
    00003656  EB                JMP      

    LINE      2157

    00003657  B8 01000000       MOV      EAX,1
    0000365C  8B C8             MOV      ECX,EAX
    0000365E  B8 0A000000       MOV      EAX,10
    00003663  50                PUSH     EAX
    00003664  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00003667  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000366A  5B                POP      EBX
    0000366B  53                PUSH     EBX
    0000366C  3B C3             CMP      EAX,EBX
    0000366E  0F 8E03000000     JLE      3
    00003674  EB                JMP      

    LINE      2159

    00003675  B8 01000000       MOV      EAX,1
    0000367A  8B C8             MOV      ECX,EAX
    0000367C  B8 05000000       MOV      EAX,5
    00003681  50                PUSH     EAX
    00003682  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00003685  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003688  5B                POP      EBX
    00003689  53                PUSH     EBX
    0000368A  3B C3             CMP      EAX,EBX
    0000368C  0F 8E03000000     JLE      3
    00003692  EB                JMP      

    LINE      2166

    00003693  B8 01000000       MOV      EAX,1
    00003698  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2167

    0000369B  B8 01000000       MOV      EAX,1
    000036A0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2168

    000036A3  B8 01000000       MOV      EAX,1
    000036A8  8B C8             MOV      ECX,EAX
    000036AA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000036AD  48                DEC      EAX
    000036AE  BB 0E000000       MOV      EBX,14
    000036B3  F7 E3             MUL      EBX
    000036B5  50                PUSH     EAX
    000036B6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000036B9  48                DEC      EAX
    000036BA  BB 02000000       MOV      EBX,2
    000036BF  F7 E3             MUL      EBX
    000036C1  5B                POP      EBX
    000036C2  03 C3             ADD      EAX,EBX
    000036C4  8B F8             MOV      EDI,EAX
    000036C6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2169

    000036CA  B8 01000000       MOV      EAX,1
    000036CF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2170

    000036D2  B8 01000000       MOV      EAX,1
    000036D7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2172

    000036DA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000036E1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000036E6  5B                POP      EBX

    LINE      2174

    000036E7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000036EE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000036F3  5B                POP      EBX

    LINE      2176

    000036F4  B8 0A000000       MOV      EAX,10
    000036F9  40                INC      EAX
    000036FA  50                PUSH     EAX
    000036FB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000036FE  5B                POP      EBX
    000036FF  3B C3             CMP      EAX,EBX
    00003701  0F 8503000000     JNE      3
    00003707  EB                JMP      

    LINE      2184

    00003708  B8 01000000       MOV      EAX,1
    0000370D  8B C8             MOV      ECX,EAX
    0000370F  B8 0A000000       MOV      EAX,10
    00003714  50                PUSH     EAX
    00003715  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00003718  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000371B  5B                POP      EBX
    0000371C  53                PUSH     EBX
    0000371D  3B C3             CMP      EAX,EBX
    0000371F  0F 8E03000000     JLE      3
    00003725  EB                JMP      

    LINE      2186

    00003726  B8 01000000       MOV      EAX,1
    0000372B  8B C8             MOV      ECX,EAX
    0000372D  B8 05000000       MOV      EAX,5
    00003732  50                PUSH     EAX
    00003733  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00003736  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003739  5B                POP      EBX
    0000373A  53                PUSH     EBX
    0000373B  3B C3             CMP      EAX,EBX
    0000373D  0F 8E03000000     JLE      3
    00003743  EB                JMP      

    LINE      2193

    00003744  B8 01000000       MOV      EAX,1
    00003749  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2194

    0000374F  B8 01000000       MOV      EAX,1
    00003754  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2195

    0000375A  B8 01000000       MOV      EAX,1
    0000375F  8B C8             MOV      ECX,EAX
    00003761  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003764  48                DEC      EAX
    00003765  BB 0E000000       MOV      EBX,14
    0000376A  F7 E3             MUL      EBX
    0000376C  50                PUSH     EAX
    0000376D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003770  48                DEC      EAX
    00003771  BB 02000000       MOV      EBX,2
    00003776  F7 E3             MUL      EBX
    00003778  5B                POP      EBX
    00003779  03 C3             ADD      EAX,EBX
    0000377B  8B F8             MOV      EDI,EAX
    0000377D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2196

    00003784  B8 01000000       MOV      EAX,1
    00003789  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2197

    0000378F  B8 01000000       MOV      EAX,1
    00003794  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2199

    0000379A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000037A1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000037A6  5B                POP      EBX

    LINE      2201

    000037A7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000037AE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000037B3  5B                POP      EBX

    LINE      2203

    000037B4  B8 0A000000       MOV      EAX,10
    000037B9  40                INC      EAX
    000037BA  50                PUSH     EAX
    000037BB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000037BE  5B                POP      EBX
    000037BF  3B C3             CMP      EAX,EBX
    000037C1  0F 8503000000     JNE      3
    000037C7  EB                JMP      

    LINE      2210

    000037C8  B8 01000000       MOV      EAX,1
    000037CD  8B C8             MOV      ECX,EAX
    000037CF  B8 0A000000       MOV      EAX,10
    000037D4  50                PUSH     EAX
    000037D5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000037D8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000037DB  5B                POP      EBX
    000037DC  53                PUSH     EBX
    000037DD  3B C3             CMP      EAX,EBX
    000037DF  0F 8E03000000     JLE      3
    000037E5  EB                JMP      

    LINE      2212

    000037E6  B8 01000000       MOV      EAX,1
    000037EB  8B C8             MOV      ECX,EAX
    000037ED  B8 05000000       MOV      EAX,5
    000037F2  50                PUSH     EAX
    000037F3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000037F6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000037F9  5B                POP      EBX
    000037FA  53                PUSH     EBX
    000037FB  3B C3             CMP      EAX,EBX
    000037FD  0F 8E03000000     JLE      3
    00003803  EB                JMP      

    LINE      2219

    00003804  B8 01000000       MOV      EAX,1
    00003809  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2220

    0000380F  B8 01000000       MOV      EAX,1
    00003814  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2221

    0000381A  B8 01000000       MOV      EAX,1
    0000381F  8B C8             MOV      ECX,EAX
    00003821  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003824  48                DEC      EAX
    00003825  BB 0E000000       MOV      EBX,14
    0000382A  F7 E3             MUL      EBX
    0000382C  50                PUSH     EAX
    0000382D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003830  48                DEC      EAX
    00003831  BB 02000000       MOV      EBX,2
    00003836  F7 E3             MUL      EBX
    00003838  5B                POP      EBX
    00003839  03 C3             ADD      EAX,EBX
    0000383B  8B F8             MOV      EDI,EAX
    0000383D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2222

    00003844  B8 01000000       MOV      EAX,1
    00003849  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2223

    0000384F  B8 01000000       MOV      EAX,1
    00003854  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2225

    0000385A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00003861  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00003866  5B                POP      EBX

    LINE      2227

    00003867  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000386E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00003873  5B                POP      EBX

    LINE      2229

    00003874  B8 0A000000       MOV      EAX,10
    00003879  40                INC      EAX
    0000387A  50                PUSH     EAX
    0000387B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000387E  5B                POP      EBX
    0000387F  3B C3             CMP      EAX,EBX
    00003881  0F 8503000000     JNE      3
    00003887  EB                JMP      

    LINE      2243

    00003888  56                PUSH     ESI
    00003889  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000388F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00003895  FF D1             CALL     ECX                       run_inner_proc
    00003897  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2245

    00003898  B8 01000000       MOV      EAX,1
    0000389D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2247

    000038A0  B8 01000000       MOV      EAX,1
    000038A5  8B C8             MOV      ECX,EAX
    000038A7  B8 0A000000       MOV      EAX,10
    000038AC  50                PUSH     EAX
    000038AD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000038B0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000038B3  5B                POP      EBX
    000038B4  53                PUSH     EBX
    000038B5  3B C3             CMP      EAX,EBX
    000038B7  0F 8E03000000     JLE      3
    000038BD  EB                JMP      

    LINE      2249

    000038BE  B8 01000000       MOV      EAX,1
    000038C3  8B C8             MOV      ECX,EAX
    000038C5  B8 05000000       MOV      EAX,5
    000038CA  50                PUSH     EAX
    000038CB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000038CE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000038D1  5B                POP      EBX
    000038D2  53                PUSH     EBX
    000038D3  3B C3             CMP      EAX,EBX
    000038D5  0F 8E03000000     JLE      3
    000038DB  EB                JMP      

    LINE      2256

    000038DC  B8 01000000       MOV      EAX,1
    000038E1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2257

    000038E4  B8 01000000       MOV      EAX,1
    000038E9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2258

    000038EC  B8 01000000       MOV      EAX,1
    000038F1  8B C8             MOV      ECX,EAX
    000038F3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000038F6  48                DEC      EAX
    000038F7  BB 0E000000       MOV      EBX,14
    000038FC  F7 E3             MUL      EBX
    000038FE  50                PUSH     EAX
    000038FF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003902  48                DEC      EAX
    00003903  BB 02000000       MOV      EBX,2
    00003908  F7 E3             MUL      EBX
    0000390A  5B                POP      EBX
    0000390B  03 C3             ADD      EAX,EBX
    0000390D  8B F8             MOV      EDI,EAX
    0000390F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2259

    00003913  B8 01000000       MOV      EAX,1
    00003918  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2260

    0000391B  B8 01000000       MOV      EAX,1
    00003920  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2262

    00003923  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000392A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000392F  5B                POP      EBX

    LINE      2264

    00003930  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00003937  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000393C  5B                POP      EBX

    LINE      2266

    0000393D  B8 0A000000       MOV      EAX,10
    00003942  40                INC      EAX
    00003943  50                PUSH     EAX
    00003944  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003947  5B                POP      EBX
    00003948  3B C3             CMP      EAX,EBX
    0000394A  0F 8503000000     JNE      3
    00003950  EB                JMP      

    LINE      2273

    00003951  B8 01000000       MOV      EAX,1
    00003956  8B C8             MOV      ECX,EAX
    00003958  B8 0A000000       MOV      EAX,10
    0000395D  50                PUSH     EAX
    0000395E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00003961  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003964  5B                POP      EBX
    00003965  53                PUSH     EBX
    00003966  3B C3             CMP      EAX,EBX
    00003968  0F 8E03000000     JLE      3
    0000396E  EB                JMP      

    LINE      2275

    0000396F  B8 01000000       MOV      EAX,1
    00003974  8B C8             MOV      ECX,EAX
    00003976  B8 05000000       MOV      EAX,5
    0000397B  50                PUSH     EAX
    0000397C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000397F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003982  5B                POP      EBX
    00003983  53                PUSH     EBX
    00003984  3B C3             CMP      EAX,EBX
    00003986  0F 8E03000000     JLE      3
    0000398C  EB                JMP      

    LINE      2282

    0000398D  B8 01000000       MOV      EAX,1
    00003992  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2283

    00003995  B8 01000000       MOV      EAX,1
    0000399A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2284

    0000399D  B8 01000000       MOV      EAX,1
    000039A2  8B C8             MOV      ECX,EAX
    000039A4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000039A7  48                DEC      EAX
    000039A8  BB 0E000000       MOV      EBX,14
    000039AD  F7 E3             MUL      EBX
    000039AF  50                PUSH     EAX
    000039B0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000039B3  48                DEC      EAX
    000039B4  BB 02000000       MOV      EBX,2
    000039B9  F7 E3             MUL      EBX
    000039BB  5B                POP      EBX
    000039BC  03 C3             ADD      EAX,EBX
    000039BE  8B F8             MOV      EDI,EAX
    000039C0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2285

    000039C4  B8 01000000       MOV      EAX,1
    000039C9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2286

    000039CC  B8 01000000       MOV      EAX,1
    000039D1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2288

    000039D4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000039DB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000039E0  5B                POP      EBX

    LINE      2290

    000039E1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000039E8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000039ED  5B                POP      EBX

    LINE      2292

    000039EE  B8 0A000000       MOV      EAX,10
    000039F3  40                INC      EAX
    000039F4  50                PUSH     EAX
    000039F5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000039F8  5B                POP      EBX
    000039F9  3B C3             CMP      EAX,EBX
    000039FB  0F 8503000000     JNE      3
    00003A01  EB                JMP      

    LINE      2300

    00003A02  B8 01000000       MOV      EAX,1
    00003A07  8B C8             MOV      ECX,EAX
    00003A09  B8 0A000000       MOV      EAX,10
    00003A0E  50                PUSH     EAX
    00003A0F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00003A12  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003A15  5B                POP      EBX
    00003A16  53                PUSH     EBX
    00003A17  3B C3             CMP      EAX,EBX
    00003A19  0F 8E03000000     JLE      3
    00003A1F  EB                JMP      

    LINE      2302

    00003A20  B8 01000000       MOV      EAX,1
    00003A25  8B C8             MOV      ECX,EAX
    00003A27  B8 05000000       MOV      EAX,5
    00003A2C  50                PUSH     EAX
    00003A2D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00003A30  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003A33  5B                POP      EBX
    00003A34  53                PUSH     EBX
    00003A35  3B C3             CMP      EAX,EBX
    00003A37  0F 8E03000000     JLE      3
    00003A3D  EB                JMP      

    LINE      2309

    00003A3E  B8 01000000       MOV      EAX,1
    00003A43  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2310

    00003A49  B8 01000000       MOV      EAX,1
    00003A4E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2311

    00003A54  B8 01000000       MOV      EAX,1
    00003A59  8B C8             MOV      ECX,EAX
    00003A5B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003A5E  48                DEC      EAX
    00003A5F  BB 0E000000       MOV      EBX,14
    00003A64  F7 E3             MUL      EBX
    00003A66  50                PUSH     EAX
    00003A67  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003A6A  48                DEC      EAX
    00003A6B  BB 02000000       MOV      EBX,2
    00003A70  F7 E3             MUL      EBX
    00003A72  5B                POP      EBX
    00003A73  03 C3             ADD      EAX,EBX
    00003A75  8B F8             MOV      EDI,EAX
    00003A77  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2312

    00003A7E  B8 01000000       MOV      EAX,1
    00003A83  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2313

    00003A89  B8 01000000       MOV      EAX,1
    00003A8E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2315

    00003A94  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00003A9B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00003AA0  5B                POP      EBX

    LINE      2317

    00003AA1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00003AA8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00003AAD  5B                POP      EBX

    LINE      2319

    00003AAE  B8 0A000000       MOV      EAX,10
    00003AB3  40                INC      EAX
    00003AB4  50                PUSH     EAX
    00003AB5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003AB8  5B                POP      EBX
    00003AB9  3B C3             CMP      EAX,EBX
    00003ABB  0F 8503000000     JNE      3
    00003AC1  EB                JMP      

    LINE      2326

    00003AC2  B8 01000000       MOV      EAX,1
    00003AC7  8B C8             MOV      ECX,EAX
    00003AC9  B8 0A000000       MOV      EAX,10
    00003ACE  50                PUSH     EAX
    00003ACF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00003AD2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003AD5  5B                POP      EBX
    00003AD6  53                PUSH     EBX
    00003AD7  3B C3             CMP      EAX,EBX
    00003AD9  0F 8E03000000     JLE      3
    00003ADF  EB                JMP      

    LINE      2328

    00003AE0  B8 01000000       MOV      EAX,1
    00003AE5  8B C8             MOV      ECX,EAX
    00003AE7  B8 05000000       MOV      EAX,5
    00003AEC  50                PUSH     EAX
    00003AED  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00003AF0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003AF3  5B                POP      EBX
    00003AF4  53                PUSH     EBX
    00003AF5  3B C3             CMP      EAX,EBX
    00003AF7  0F 8E03000000     JLE      3
    00003AFD  EB                JMP      

    LINE      2335

    00003AFE  B8 01000000       MOV      EAX,1
    00003B03  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2336

    00003B09  B8 01000000       MOV      EAX,1
    00003B0E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2337

    00003B14  B8 01000000       MOV      EAX,1
    00003B19  8B C8             MOV      ECX,EAX
    00003B1B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003B1E  48                DEC      EAX
    00003B1F  BB 0E000000       MOV      EBX,14
    00003B24  F7 E3             MUL      EBX
    00003B26  50                PUSH     EAX
    00003B27  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003B2A  48                DEC      EAX
    00003B2B  BB 02000000       MOV      EBX,2
    00003B30  F7 E3             MUL      EBX
    00003B32  5B                POP      EBX
    00003B33  03 C3             ADD      EAX,EBX
    00003B35  8B F8             MOV      EDI,EAX
    00003B37  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2338

    00003B3E  B8 01000000       MOV      EAX,1
    00003B43  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2339

    00003B49  B8 01000000       MOV      EAX,1
    00003B4E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2341

    00003B54  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00003B5B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00003B60  5B                POP      EBX

    LINE      2343

    00003B61  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00003B68  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00003B6D  5B                POP      EBX

    LINE      2345

    00003B6E  B8 0A000000       MOV      EAX,10
    00003B73  40                INC      EAX
    00003B74  50                PUSH     EAX
    00003B75  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003B78  5B                POP      EBX
    00003B79  3B C3             CMP      EAX,EBX
    00003B7B  0F 8503000000     JNE      3
    00003B81  EB                JMP      

    LINE      2359

    00003B82  56                PUSH     ESI
    00003B83  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00003B89  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00003B8F  FF D1             CALL     ECX                       run_inner_proc
    00003B91  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2361

    00003B92  B8 01000000       MOV      EAX,1
    00003B97  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2363

    00003B9A  B8 01000000       MOV      EAX,1
    00003B9F  8B C8             MOV      ECX,EAX
    00003BA1  B8 0A000000       MOV      EAX,10
    00003BA6  50                PUSH     EAX
    00003BA7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00003BAA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003BAD  5B                POP      EBX
    00003BAE  53                PUSH     EBX
    00003BAF  3B C3             CMP      EAX,EBX
    00003BB1  0F 8E03000000     JLE      3
    00003BB7  EB                JMP      

    LINE      2365

    00003BB8  B8 01000000       MOV      EAX,1
    00003BBD  8B C8             MOV      ECX,EAX
    00003BBF  B8 05000000       MOV      EAX,5
    00003BC4  50                PUSH     EAX
    00003BC5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00003BC8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003BCB  5B                POP      EBX
    00003BCC  53                PUSH     EBX
    00003BCD  3B C3             CMP      EAX,EBX
    00003BCF  0F 8E03000000     JLE      3
    00003BD5  EB                JMP      

    LINE      2372

    00003BD6  B8 01000000       MOV      EAX,1
    00003BDB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2373

    00003BDE  B8 01000000       MOV      EAX,1
    00003BE3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2374

    00003BE6  B8 01000000       MOV      EAX,1
    00003BEB  8B C8             MOV      ECX,EAX
    00003BED  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003BF0  48                DEC      EAX
    00003BF1  BB 0E000000       MOV      EBX,14
    00003BF6  F7 E3             MUL      EBX
    00003BF8  50                PUSH     EAX
    00003BF9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003BFC  48                DEC      EAX
    00003BFD  BB 02000000       MOV      EBX,2
    00003C02  F7 E3             MUL      EBX
    00003C04  5B                POP      EBX
    00003C05  03 C3             ADD      EAX,EBX
    00003C07  8B F8             MOV      EDI,EAX
    00003C09  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2375

    00003C0D  B8 01000000       MOV      EAX,1
    00003C12  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2376

    00003C15  B8 01000000       MOV      EAX,1
    00003C1A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2378

    00003C1D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00003C24  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00003C29  5B                POP      EBX

    LINE      2380

    00003C2A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00003C31  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00003C36  5B                POP      EBX

    LINE      2382

    00003C37  B8 0A000000       MOV      EAX,10
    00003C3C  40                INC      EAX
    00003C3D  50                PUSH     EAX
    00003C3E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003C41  5B                POP      EBX
    00003C42  3B C3             CMP      EAX,EBX
    00003C44  0F 8503000000     JNE      3
    00003C4A  EB                JMP      

    LINE      2389

    00003C4B  B8 01000000       MOV      EAX,1
    00003C50  8B C8             MOV      ECX,EAX
    00003C52  B8 0A000000       MOV      EAX,10
    00003C57  50                PUSH     EAX
    00003C58  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00003C5B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003C5E  5B                POP      EBX
    00003C5F  53                PUSH     EBX
    00003C60  3B C3             CMP      EAX,EBX
    00003C62  0F 8E03000000     JLE      3
    00003C68  EB                JMP      

    LINE      2391

    00003C69  B8 01000000       MOV      EAX,1
    00003C6E  8B C8             MOV      ECX,EAX
    00003C70  B8 05000000       MOV      EAX,5
    00003C75  50                PUSH     EAX
    00003C76  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00003C79  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003C7C  5B                POP      EBX
    00003C7D  53                PUSH     EBX
    00003C7E  3B C3             CMP      EAX,EBX
    00003C80  0F 8E03000000     JLE      3
    00003C86  EB                JMP      

    LINE      2398

    00003C87  B8 01000000       MOV      EAX,1
    00003C8C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2399

    00003C8F  B8 01000000       MOV      EAX,1
    00003C94  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2400

    00003C97  B8 01000000       MOV      EAX,1
    00003C9C  8B C8             MOV      ECX,EAX
    00003C9E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003CA1  48                DEC      EAX
    00003CA2  BB 0E000000       MOV      EBX,14
    00003CA7  F7 E3             MUL      EBX
    00003CA9  50                PUSH     EAX
    00003CAA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003CAD  48                DEC      EAX
    00003CAE  BB 02000000       MOV      EBX,2
    00003CB3  F7 E3             MUL      EBX
    00003CB5  5B                POP      EBX
    00003CB6  03 C3             ADD      EAX,EBX
    00003CB8  8B F8             MOV      EDI,EAX
    00003CBA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2401

    00003CBE  B8 01000000       MOV      EAX,1
    00003CC3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2402

    00003CC6  B8 01000000       MOV      EAX,1
    00003CCB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2404

    00003CCE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00003CD5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00003CDA  5B                POP      EBX

    LINE      2406

    00003CDB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00003CE2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00003CE7  5B                POP      EBX

    LINE      2408

    00003CE8  B8 0A000000       MOV      EAX,10
    00003CED  40                INC      EAX
    00003CEE  50                PUSH     EAX
    00003CEF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003CF2  5B                POP      EBX
    00003CF3  3B C3             CMP      EAX,EBX
    00003CF5  0F 8503000000     JNE      3
    00003CFB  EB                JMP      

    LINE      2416

    00003CFC  B8 01000000       MOV      EAX,1
    00003D01  8B C8             MOV      ECX,EAX
    00003D03  B8 0A000000       MOV      EAX,10
    00003D08  50                PUSH     EAX
    00003D09  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00003D0C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003D0F  5B                POP      EBX
    00003D10  53                PUSH     EBX
    00003D11  3B C3             CMP      EAX,EBX
    00003D13  0F 8E03000000     JLE      3
    00003D19  EB                JMP      

    LINE      2418

    00003D1A  B8 01000000       MOV      EAX,1
    00003D1F  8B C8             MOV      ECX,EAX
    00003D21  B8 05000000       MOV      EAX,5
    00003D26  50                PUSH     EAX
    00003D27  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00003D2A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003D2D  5B                POP      EBX
    00003D2E  53                PUSH     EBX
    00003D2F  3B C3             CMP      EAX,EBX
    00003D31  0F 8E03000000     JLE      3
    00003D37  EB                JMP      

    LINE      2425

    00003D38  B8 01000000       MOV      EAX,1
    00003D3D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2426

    00003D43  B8 01000000       MOV      EAX,1
    00003D48  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2427

    00003D4E  B8 01000000       MOV      EAX,1
    00003D53  8B C8             MOV      ECX,EAX
    00003D55  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003D58  48                DEC      EAX
    00003D59  BB 0E000000       MOV      EBX,14
    00003D5E  F7 E3             MUL      EBX
    00003D60  50                PUSH     EAX
    00003D61  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003D64  48                DEC      EAX
    00003D65  BB 02000000       MOV      EBX,2
    00003D6A  F7 E3             MUL      EBX
    00003D6C  5B                POP      EBX
    00003D6D  03 C3             ADD      EAX,EBX
    00003D6F  8B F8             MOV      EDI,EAX
    00003D71  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2428

    00003D78  B8 01000000       MOV      EAX,1
    00003D7D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2429

    00003D83  B8 01000000       MOV      EAX,1
    00003D88  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2431

    00003D8E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00003D95  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00003D9A  5B                POP      EBX

    LINE      2433

    00003D9B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00003DA2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00003DA7  5B                POP      EBX

    LINE      2435

    00003DA8  B8 0A000000       MOV      EAX,10
    00003DAD  40                INC      EAX
    00003DAE  50                PUSH     EAX
    00003DAF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003DB2  5B                POP      EBX
    00003DB3  3B C3             CMP      EAX,EBX
    00003DB5  0F 8503000000     JNE      3
    00003DBB  EB                JMP      

    LINE      2442

    00003DBC  B8 01000000       MOV      EAX,1
    00003DC1  8B C8             MOV      ECX,EAX
    00003DC3  B8 0A000000       MOV      EAX,10
    00003DC8  50                PUSH     EAX
    00003DC9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00003DCC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003DCF  5B                POP      EBX
    00003DD0  53                PUSH     EBX
    00003DD1  3B C3             CMP      EAX,EBX
    00003DD3  0F 8E03000000     JLE      3
    00003DD9  EB                JMP      

    LINE      2444

    00003DDA  B8 01000000       MOV      EAX,1
    00003DDF  8B C8             MOV      ECX,EAX
    00003DE1  B8 05000000       MOV      EAX,5
    00003DE6  50                PUSH     EAX
    00003DE7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00003DEA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003DED  5B                POP      EBX
    00003DEE  53                PUSH     EBX
    00003DEF  3B C3             CMP      EAX,EBX
    00003DF1  0F 8E03000000     JLE      3
    00003DF7  EB                JMP      

    LINE      2451

    00003DF8  B8 01000000       MOV      EAX,1
    00003DFD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2452

    00003E03  B8 01000000       MOV      EAX,1
    00003E08  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2453

    00003E0E  B8 01000000       MOV      EAX,1
    00003E13  8B C8             MOV      ECX,EAX
    00003E15  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003E18  48                DEC      EAX
    00003E19  BB 0E000000       MOV      EBX,14
    00003E1E  F7 E3             MUL      EBX
    00003E20  50                PUSH     EAX
    00003E21  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003E24  48                DEC      EAX
    00003E25  BB 02000000       MOV      EBX,2
    00003E2A  F7 E3             MUL      EBX
    00003E2C  5B                POP      EBX
    00003E2D  03 C3             ADD      EAX,EBX
    00003E2F  8B F8             MOV      EDI,EAX
    00003E31  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2454

    00003E38  B8 01000000       MOV      EAX,1
    00003E3D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2455

    00003E43  B8 01000000       MOV      EAX,1
    00003E48  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2457

    00003E4E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00003E55  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00003E5A  5B                POP      EBX

    LINE      2459

    00003E5B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00003E62  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00003E67  5B                POP      EBX

    LINE      2461

    00003E68  B8 0A000000       MOV      EAX,10
    00003E6D  40                INC      EAX
    00003E6E  50                PUSH     EAX
    00003E6F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003E72  5B                POP      EBX
    00003E73  3B C3             CMP      EAX,EBX
    00003E75  0F 8503000000     JNE      3
    00003E7B  EB                JMP      

    LINE      2475

    00003E7C  56                PUSH     ESI
    00003E7D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00003E83  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00003E89  FF D1             CALL     ECX                       run_inner_proc
    00003E8B  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2477

    00003E8C  B8 01000000       MOV      EAX,1
    00003E91  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2479

    00003E94  B8 01000000       MOV      EAX,1
    00003E99  8B C8             MOV      ECX,EAX
    00003E9B  B8 0A000000       MOV      EAX,10
    00003EA0  50                PUSH     EAX
    00003EA1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00003EA4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003EA7  5B                POP      EBX
    00003EA8  53                PUSH     EBX
    00003EA9  3B C3             CMP      EAX,EBX
    00003EAB  0F 8E03000000     JLE      3
    00003EB1  EB                JMP      

    LINE      2481

    00003EB2  B8 01000000       MOV      EAX,1
    00003EB7  8B C8             MOV      ECX,EAX
    00003EB9  B8 05000000       MOV      EAX,5
    00003EBE  50                PUSH     EAX
    00003EBF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00003EC2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003EC5  5B                POP      EBX
    00003EC6  53                PUSH     EBX
    00003EC7  3B C3             CMP      EAX,EBX
    00003EC9  0F 8E03000000     JLE      3
    00003ECF  EB                JMP      

    LINE      2488

    00003ED0  B8 01000000       MOV      EAX,1
    00003ED5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2489

    00003ED8  B8 01000000       MOV      EAX,1
    00003EDD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2490

    00003EE0  B8 01000000       MOV      EAX,1
    00003EE5  8B C8             MOV      ECX,EAX
    00003EE7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003EEA  48                DEC      EAX
    00003EEB  BB 0E000000       MOV      EBX,14
    00003EF0  F7 E3             MUL      EBX
    00003EF2  50                PUSH     EAX
    00003EF3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00003EF6  48                DEC      EAX
    00003EF7  BB 02000000       MOV      EBX,2
    00003EFC  F7 E3             MUL      EBX
    00003EFE  5B                POP      EBX
    00003EFF  03 C3             ADD      EAX,EBX
    00003F01  8B F8             MOV      EDI,EAX
    00003F03  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2491

    00003F07  B8 01000000       MOV      EAX,1
    00003F0C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2492

    00003F0F  B8 01000000       MOV      EAX,1
    00003F14  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2494

    00003F17  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00003F1E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00003F23  5B                POP      EBX

    LINE      2496

    00003F24  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00003F2B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00003F30  5B                POP      EBX

    LINE      2498

    00003F31  B8 0A000000       MOV      EAX,10
    00003F36  40                INC      EAX
    00003F37  50                PUSH     EAX
    00003F38  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003F3B  5B                POP      EBX
    00003F3C  3B C3             CMP      EAX,EBX
    00003F3E  0F 8503000000     JNE      3
    00003F44  EB                JMP      

    LINE      2505

    00003F45  B8 01000000       MOV      EAX,1
    00003F4A  8B C8             MOV      ECX,EAX
    00003F4C  B8 0A000000       MOV      EAX,10
    00003F51  50                PUSH     EAX
    00003F52  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00003F55  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003F58  5B                POP      EBX
    00003F59  53                PUSH     EBX
    00003F5A  3B C3             CMP      EAX,EBX
    00003F5C  0F 8E03000000     JLE      3
    00003F62  EB                JMP      

    LINE      2507

    00003F63  B8 01000000       MOV      EAX,1
    00003F68  8B C8             MOV      ECX,EAX
    00003F6A  B8 05000000       MOV      EAX,5
    00003F6F  50                PUSH     EAX
    00003F70  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00003F73  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003F76  5B                POP      EBX
    00003F77  53                PUSH     EBX
    00003F78  3B C3             CMP      EAX,EBX
    00003F7A  0F 8E03000000     JLE      3
    00003F80  EB                JMP      

    LINE      2514

    00003F81  B8 01000000       MOV      EAX,1
    00003F86  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2515

    00003F89  B8 01000000       MOV      EAX,1
    00003F8E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2516

    00003F91  B8 01000000       MOV      EAX,1
    00003F96  8B C8             MOV      ECX,EAX
    00003F98  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00003F9B  48                DEC      EAX
    00003F9C  BB 0E000000       MOV      EBX,14
    00003FA1  F7 E3             MUL      EBX
    00003FA3  50                PUSH     EAX
    00003FA4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00003FA7  48                DEC      EAX
    00003FA8  BB 02000000       MOV      EBX,2
    00003FAD  F7 E3             MUL      EBX
    00003FAF  5B                POP      EBX
    00003FB0  03 C3             ADD      EAX,EBX
    00003FB2  8B F8             MOV      EDI,EAX
    00003FB4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2517

    00003FB8  B8 01000000       MOV      EAX,1
    00003FBD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2518

    00003FC0  B8 01000000       MOV      EAX,1
    00003FC5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2520

    00003FC8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00003FCF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00003FD4  5B                POP      EBX

    LINE      2522

    00003FD5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00003FDC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00003FE1  5B                POP      EBX

    LINE      2524

    00003FE2  B8 0A000000       MOV      EAX,10
    00003FE7  40                INC      EAX
    00003FE8  50                PUSH     EAX
    00003FE9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00003FEC  5B                POP      EBX
    00003FED  3B C3             CMP      EAX,EBX
    00003FEF  0F 8503000000     JNE      3
    00003FF5  EB                JMP      

    LINE      2532

    00003FF6  B8 01000000       MOV      EAX,1
    00003FFB  8B C8             MOV      ECX,EAX
    00003FFD  B8 0A000000       MOV      EAX,10
    00004002  50                PUSH     EAX
    00004003  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004006  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004009  5B                POP      EBX
    0000400A  53                PUSH     EBX
    0000400B  3B C3             CMP      EAX,EBX
    0000400D  0F 8E03000000     JLE      3
    00004013  EB                JMP      

    LINE      2534

    00004014  B8 01000000       MOV      EAX,1
    00004019  8B C8             MOV      ECX,EAX
    0000401B  B8 05000000       MOV      EAX,5
    00004020  50                PUSH     EAX
    00004021  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00004024  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004027  5B                POP      EBX
    00004028  53                PUSH     EBX
    00004029  3B C3             CMP      EAX,EBX
    0000402B  0F 8E03000000     JLE      3
    00004031  EB                JMP      

    LINE      2541

    00004032  B8 01000000       MOV      EAX,1
    00004037  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2542

    0000403D  B8 01000000       MOV      EAX,1
    00004042  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2543

    00004048  B8 01000000       MOV      EAX,1
    0000404D  8B C8             MOV      ECX,EAX
    0000404F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004052  48                DEC      EAX
    00004053  BB 0E000000       MOV      EBX,14
    00004058  F7 E3             MUL      EBX
    0000405A  50                PUSH     EAX
    0000405B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000405E  48                DEC      EAX
    0000405F  BB 02000000       MOV      EBX,2
    00004064  F7 E3             MUL      EBX
    00004066  5B                POP      EBX
    00004067  03 C3             ADD      EAX,EBX
    00004069  8B F8             MOV      EDI,EAX
    0000406B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2544

    00004072  B8 01000000       MOV      EAX,1
    00004077  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2545

    0000407D  B8 01000000       MOV      EAX,1
    00004082  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2547

    00004088  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000408F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004094  5B                POP      EBX

    LINE      2549

    00004095  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000409C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000040A1  5B                POP      EBX

    LINE      2551

    000040A2  B8 0A000000       MOV      EAX,10
    000040A7  40                INC      EAX
    000040A8  50                PUSH     EAX
    000040A9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000040AC  5B                POP      EBX
    000040AD  3B C3             CMP      EAX,EBX
    000040AF  0F 8503000000     JNE      3
    000040B5  EB                JMP      

    LINE      2558

    000040B6  B8 01000000       MOV      EAX,1
    000040BB  8B C8             MOV      ECX,EAX
    000040BD  B8 0A000000       MOV      EAX,10
    000040C2  50                PUSH     EAX
    000040C3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000040C6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000040C9  5B                POP      EBX
    000040CA  53                PUSH     EBX
    000040CB  3B C3             CMP      EAX,EBX
    000040CD  0F 8E03000000     JLE      3
    000040D3  EB                JMP      

    LINE      2560

    000040D4  B8 01000000       MOV      EAX,1
    000040D9  8B C8             MOV      ECX,EAX
    000040DB  B8 05000000       MOV      EAX,5
    000040E0  50                PUSH     EAX
    000040E1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000040E4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000040E7  5B                POP      EBX
    000040E8  53                PUSH     EBX
    000040E9  3B C3             CMP      EAX,EBX
    000040EB  0F 8E03000000     JLE      3
    000040F1  EB                JMP      

    LINE      2567

    000040F2  B8 01000000       MOV      EAX,1
    000040F7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2568

    000040FD  B8 01000000       MOV      EAX,1
    00004102  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2569

    00004108  B8 01000000       MOV      EAX,1
    0000410D  8B C8             MOV      ECX,EAX
    0000410F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004112  48                DEC      EAX
    00004113  BB 0E000000       MOV      EBX,14
    00004118  F7 E3             MUL      EBX
    0000411A  50                PUSH     EAX
    0000411B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000411E  48                DEC      EAX
    0000411F  BB 02000000       MOV      EBX,2
    00004124  F7 E3             MUL      EBX
    00004126  5B                POP      EBX
    00004127  03 C3             ADD      EAX,EBX
    00004129  8B F8             MOV      EDI,EAX
    0000412B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2570

    00004132  B8 01000000       MOV      EAX,1
    00004137  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2571

    0000413D  B8 01000000       MOV      EAX,1
    00004142  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2573

    00004148  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000414F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004154  5B                POP      EBX

    LINE      2575

    00004155  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000415C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00004161  5B                POP      EBX

    LINE      2577

    00004162  B8 0A000000       MOV      EAX,10
    00004167  40                INC      EAX
    00004168  50                PUSH     EAX
    00004169  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000416C  5B                POP      EBX
    0000416D  3B C3             CMP      EAX,EBX
    0000416F  0F 8503000000     JNE      3
    00004175  EB                JMP      

    LINE      2591

    00004176  56                PUSH     ESI
    00004177  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000417D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00004183  FF D1             CALL     ECX                       run_inner_proc
    00004185  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2593

    00004186  B8 01000000       MOV      EAX,1
    0000418B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2595

    0000418E  B8 01000000       MOV      EAX,1
    00004193  8B C8             MOV      ECX,EAX
    00004195  B8 0A000000       MOV      EAX,10
    0000419A  50                PUSH     EAX
    0000419B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000419E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000041A1  5B                POP      EBX
    000041A2  53                PUSH     EBX
    000041A3  3B C3             CMP      EAX,EBX
    000041A5  0F 8E03000000     JLE      3
    000041AB  EB                JMP      

    LINE      2597

    000041AC  B8 01000000       MOV      EAX,1
    000041B1  8B C8             MOV      ECX,EAX
    000041B3  B8 05000000       MOV      EAX,5
    000041B8  50                PUSH     EAX
    000041B9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000041BC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000041BF  5B                POP      EBX
    000041C0  53                PUSH     EBX
    000041C1  3B C3             CMP      EAX,EBX
    000041C3  0F 8E03000000     JLE      3
    000041C9  EB                JMP      

    LINE      2604

    000041CA  B8 01000000       MOV      EAX,1
    000041CF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2605

    000041D2  B8 01000000       MOV      EAX,1
    000041D7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2606

    000041DA  B8 01000000       MOV      EAX,1
    000041DF  8B C8             MOV      ECX,EAX
    000041E1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000041E4  48                DEC      EAX
    000041E5  BB 0E000000       MOV      EBX,14
    000041EA  F7 E3             MUL      EBX
    000041EC  50                PUSH     EAX
    000041ED  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000041F0  48                DEC      EAX
    000041F1  BB 02000000       MOV      EBX,2
    000041F6  F7 E3             MUL      EBX
    000041F8  5B                POP      EBX
    000041F9  03 C3             ADD      EAX,EBX
    000041FB  8B F8             MOV      EDI,EAX
    000041FD  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2607

    00004201  B8 01000000       MOV      EAX,1
    00004206  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2608

    00004209  B8 01000000       MOV      EAX,1
    0000420E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2610

    00004211  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004218  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000421D  5B                POP      EBX

    LINE      2612

    0000421E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004225  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000422A  5B                POP      EBX

    LINE      2614

    0000422B  B8 0A000000       MOV      EAX,10
    00004230  40                INC      EAX
    00004231  50                PUSH     EAX
    00004232  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004235  5B                POP      EBX
    00004236  3B C3             CMP      EAX,EBX
    00004238  0F 8503000000     JNE      3
    0000423E  EB                JMP      

    LINE      2621

    0000423F  B8 01000000       MOV      EAX,1
    00004244  8B C8             MOV      ECX,EAX
    00004246  B8 0A000000       MOV      EAX,10
    0000424B  50                PUSH     EAX
    0000424C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000424F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004252  5B                POP      EBX
    00004253  53                PUSH     EBX
    00004254  3B C3             CMP      EAX,EBX
    00004256  0F 8E03000000     JLE      3
    0000425C  EB                JMP      

    LINE      2623

    0000425D  B8 01000000       MOV      EAX,1
    00004262  8B C8             MOV      ECX,EAX
    00004264  B8 05000000       MOV      EAX,5
    00004269  50                PUSH     EAX
    0000426A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000426D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004270  5B                POP      EBX
    00004271  53                PUSH     EBX
    00004272  3B C3             CMP      EAX,EBX
    00004274  0F 8E03000000     JLE      3
    0000427A  EB                JMP      

    LINE      2630

    0000427B  B8 01000000       MOV      EAX,1
    00004280  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2631

    00004283  B8 01000000       MOV      EAX,1
    00004288  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2632

    0000428B  B8 01000000       MOV      EAX,1
    00004290  8B C8             MOV      ECX,EAX
    00004292  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004295  48                DEC      EAX
    00004296  BB 0E000000       MOV      EBX,14
    0000429B  F7 E3             MUL      EBX
    0000429D  50                PUSH     EAX
    0000429E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000042A1  48                DEC      EAX
    000042A2  BB 02000000       MOV      EBX,2
    000042A7  F7 E3             MUL      EBX
    000042A9  5B                POP      EBX
    000042AA  03 C3             ADD      EAX,EBX
    000042AC  8B F8             MOV      EDI,EAX
    000042AE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2633

    000042B2  B8 01000000       MOV      EAX,1
    000042B7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2634

    000042BA  B8 01000000       MOV      EAX,1
    000042BF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2636

    000042C2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000042C9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000042CE  5B                POP      EBX

    LINE      2638

    000042CF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000042D6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000042DB  5B                POP      EBX

    LINE      2640

    000042DC  B8 0A000000       MOV      EAX,10
    000042E1  40                INC      EAX
    000042E2  50                PUSH     EAX
    000042E3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000042E6  5B                POP      EBX
    000042E7  3B C3             CMP      EAX,EBX
    000042E9  0F 8503000000     JNE      3
    000042EF  EB                JMP      

    LINE      2648

    000042F0  B8 01000000       MOV      EAX,1
    000042F5  8B C8             MOV      ECX,EAX
    000042F7  B8 0A000000       MOV      EAX,10
    000042FC  50                PUSH     EAX
    000042FD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004300  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004303  5B                POP      EBX
    00004304  53                PUSH     EBX
    00004305  3B C3             CMP      EAX,EBX
    00004307  0F 8E03000000     JLE      3
    0000430D  EB                JMP      

    LINE      2650

    0000430E  B8 01000000       MOV      EAX,1
    00004313  8B C8             MOV      ECX,EAX
    00004315  B8 05000000       MOV      EAX,5
    0000431A  50                PUSH     EAX
    0000431B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000431E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004321  5B                POP      EBX
    00004322  53                PUSH     EBX
    00004323  3B C3             CMP      EAX,EBX
    00004325  0F 8E03000000     JLE      3
    0000432B  EB                JMP      

    LINE      2657

    0000432C  B8 01000000       MOV      EAX,1
    00004331  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2658

    00004337  B8 01000000       MOV      EAX,1
    0000433C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2659

    00004342  B8 01000000       MOV      EAX,1
    00004347  8B C8             MOV      ECX,EAX
    00004349  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000434C  48                DEC      EAX
    0000434D  BB 0E000000       MOV      EBX,14
    00004352  F7 E3             MUL      EBX
    00004354  50                PUSH     EAX
    00004355  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004358  48                DEC      EAX
    00004359  BB 02000000       MOV      EBX,2
    0000435E  F7 E3             MUL      EBX
    00004360  5B                POP      EBX
    00004361  03 C3             ADD      EAX,EBX
    00004363  8B F8             MOV      EDI,EAX
    00004365  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2660

    0000436C  B8 01000000       MOV      EAX,1
    00004371  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2661

    00004377  B8 01000000       MOV      EAX,1
    0000437C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2663

    00004382  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004389  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000438E  5B                POP      EBX

    LINE      2665

    0000438F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004396  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000439B  5B                POP      EBX

    LINE      2667

    0000439C  B8 0A000000       MOV      EAX,10
    000043A1  40                INC      EAX
    000043A2  50                PUSH     EAX
    000043A3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000043A6  5B                POP      EBX
    000043A7  3B C3             CMP      EAX,EBX
    000043A9  0F 8503000000     JNE      3
    000043AF  EB                JMP      

    LINE      2674

    000043B0  B8 01000000       MOV      EAX,1
    000043B5  8B C8             MOV      ECX,EAX
    000043B7  B8 0A000000       MOV      EAX,10
    000043BC  50                PUSH     EAX
    000043BD  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000043C0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000043C3  5B                POP      EBX
    000043C4  53                PUSH     EBX
    000043C5  3B C3             CMP      EAX,EBX
    000043C7  0F 8E03000000     JLE      3
    000043CD  EB                JMP      

    LINE      2676

    000043CE  B8 01000000       MOV      EAX,1
    000043D3  8B C8             MOV      ECX,EAX
    000043D5  B8 05000000       MOV      EAX,5
    000043DA  50                PUSH     EAX
    000043DB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000043DE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000043E1  5B                POP      EBX
    000043E2  53                PUSH     EBX
    000043E3  3B C3             CMP      EAX,EBX
    000043E5  0F 8E03000000     JLE      3
    000043EB  EB                JMP      

    LINE      2683

    000043EC  B8 01000000       MOV      EAX,1
    000043F1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2684

    000043F7  B8 01000000       MOV      EAX,1
    000043FC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2685

    00004402  B8 01000000       MOV      EAX,1
    00004407  8B C8             MOV      ECX,EAX
    00004409  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000440C  48                DEC      EAX
    0000440D  BB 0E000000       MOV      EBX,14
    00004412  F7 E3             MUL      EBX
    00004414  50                PUSH     EAX
    00004415  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004418  48                DEC      EAX
    00004419  BB 02000000       MOV      EBX,2
    0000441E  F7 E3             MUL      EBX
    00004420  5B                POP      EBX
    00004421  03 C3             ADD      EAX,EBX
    00004423  8B F8             MOV      EDI,EAX
    00004425  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2686

    0000442C  B8 01000000       MOV      EAX,1
    00004431  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2687

    00004437  B8 01000000       MOV      EAX,1
    0000443C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2689

    00004442  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00004449  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000444E  5B                POP      EBX

    LINE      2691

    0000444F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00004456  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000445B  5B                POP      EBX

    LINE      2693

    0000445C  B8 0A000000       MOV      EAX,10
    00004461  40                INC      EAX
    00004462  50                PUSH     EAX
    00004463  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004466  5B                POP      EBX
    00004467  3B C3             CMP      EAX,EBX
    00004469  0F 8503000000     JNE      3
    0000446F  EB                JMP      

    LINE      2707

    00004470  56                PUSH     ESI
    00004471  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00004477  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000447D  FF D1             CALL     ECX                       run_inner_proc
    0000447F  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2709

    00004480  B8 01000000       MOV      EAX,1
    00004485  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2711

    00004488  B8 01000000       MOV      EAX,1
    0000448D  8B C8             MOV      ECX,EAX
    0000448F  B8 0A000000       MOV      EAX,10
    00004494  50                PUSH     EAX
    00004495  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004498  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000449B  5B                POP      EBX
    0000449C  53                PUSH     EBX
    0000449D  3B C3             CMP      EAX,EBX
    0000449F  0F 8E03000000     JLE      3
    000044A5  EB                JMP      

    LINE      2713

    000044A6  B8 01000000       MOV      EAX,1
    000044AB  8B C8             MOV      ECX,EAX
    000044AD  B8 05000000       MOV      EAX,5
    000044B2  50                PUSH     EAX
    000044B3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000044B6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000044B9  5B                POP      EBX
    000044BA  53                PUSH     EBX
    000044BB  3B C3             CMP      EAX,EBX
    000044BD  0F 8E03000000     JLE      3
    000044C3  EB                JMP      

    LINE      2720

    000044C4  B8 01000000       MOV      EAX,1
    000044C9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2721

    000044CC  B8 01000000       MOV      EAX,1
    000044D1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2722

    000044D4  B8 01000000       MOV      EAX,1
    000044D9  8B C8             MOV      ECX,EAX
    000044DB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000044DE  48                DEC      EAX
    000044DF  BB 0E000000       MOV      EBX,14
    000044E4  F7 E3             MUL      EBX
    000044E6  50                PUSH     EAX
    000044E7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000044EA  48                DEC      EAX
    000044EB  BB 02000000       MOV      EBX,2
    000044F0  F7 E3             MUL      EBX
    000044F2  5B                POP      EBX
    000044F3  03 C3             ADD      EAX,EBX
    000044F5  8B F8             MOV      EDI,EAX
    000044F7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2723

    000044FB  B8 01000000       MOV      EAX,1
    00004500  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2724

    00004503  B8 01000000       MOV      EAX,1
    00004508  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2726

    0000450B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004512  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00004517  5B                POP      EBX

    LINE      2728

    00004518  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000451F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00004524  5B                POP      EBX

    LINE      2730

    00004525  B8 0A000000       MOV      EAX,10
    0000452A  40                INC      EAX
    0000452B  50                PUSH     EAX
    0000452C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000452F  5B                POP      EBX
    00004530  3B C3             CMP      EAX,EBX
    00004532  0F 8503000000     JNE      3
    00004538  EB                JMP      

    LINE      2737

    00004539  B8 01000000       MOV      EAX,1
    0000453E  8B C8             MOV      ECX,EAX
    00004540  B8 0A000000       MOV      EAX,10
    00004545  50                PUSH     EAX
    00004546  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00004549  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000454C  5B                POP      EBX
    0000454D  53                PUSH     EBX
    0000454E  3B C3             CMP      EAX,EBX
    00004550  0F 8E03000000     JLE      3
    00004556  EB                JMP      

    LINE      2739

    00004557  B8 01000000       MOV      EAX,1
    0000455C  8B C8             MOV      ECX,EAX
    0000455E  B8 05000000       MOV      EAX,5
    00004563  50                PUSH     EAX
    00004564  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00004567  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000456A  5B                POP      EBX
    0000456B  53                PUSH     EBX
    0000456C  3B C3             CMP      EAX,EBX
    0000456E  0F 8E03000000     JLE      3
    00004574  EB                JMP      

    LINE      2746

    00004575  B8 01000000       MOV      EAX,1
    0000457A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2747

    0000457D  B8 01000000       MOV      EAX,1
    00004582  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2748

    00004585  B8 01000000       MOV      EAX,1
    0000458A  8B C8             MOV      ECX,EAX
    0000458C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000458F  48                DEC      EAX
    00004590  BB 0E000000       MOV      EBX,14
    00004595  F7 E3             MUL      EBX
    00004597  50                PUSH     EAX
    00004598  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000459B  48                DEC      EAX
    0000459C  BB 02000000       MOV      EBX,2
    000045A1  F7 E3             MUL      EBX
    000045A3  5B                POP      EBX
    000045A4  03 C3             ADD      EAX,EBX
    000045A6  8B F8             MOV      EDI,EAX
    000045A8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2749

    000045AC  B8 01000000       MOV      EAX,1
    000045B1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2750

    000045B4  B8 01000000       MOV      EAX,1
    000045B9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2752

    000045BC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000045C3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000045C8  5B                POP      EBX

    LINE      2754

    000045C9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000045D0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000045D5  5B                POP      EBX

    LINE      2756

    000045D6  B8 0A000000       MOV      EAX,10
    000045DB  40                INC      EAX
    000045DC  50                PUSH     EAX
    000045DD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000045E0  5B                POP      EBX
    000045E1  3B C3             CMP      EAX,EBX
    000045E3  0F 8503000000     JNE      3
    000045E9  EB                JMP      

    LINE      2764

    000045EA  B8 01000000       MOV      EAX,1
    000045EF  8B C8             MOV      ECX,EAX
    000045F1  B8 0A000000       MOV      EAX,10
    000045F6  50                PUSH     EAX
    000045F7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000045FA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000045FD  5B                POP      EBX
    000045FE  53                PUSH     EBX
    000045FF  3B C3             CMP      EAX,EBX
    00004601  0F 8E03000000     JLE      3
    00004607  EB                JMP      

    LINE      2766

    00004608  B8 01000000       MOV      EAX,1
    0000460D  8B C8             MOV      ECX,EAX
    0000460F  B8 05000000       MOV      EAX,5
    00004614  50                PUSH     EAX
    00004615  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00004618  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000461B  5B                POP      EBX
    0000461C  53                PUSH     EBX
    0000461D  3B C3             CMP      EAX,EBX
    0000461F  0F 8E03000000     JLE      3
    00004625  EB                JMP      

    LINE      2773

    00004626  B8 01000000       MOV      EAX,1
    0000462B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2774

    00004631  B8 01000000       MOV      EAX,1
    00004636  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2775

    0000463C  B8 01000000       MOV      EAX,1
    00004641  8B C8             MOV      ECX,EAX
    00004643  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004646  48                DEC      EAX
    00004647  BB 0E000000       MOV      EBX,14
    0000464C  F7 E3             MUL      EBX
    0000464E  50                PUSH     EAX
    0000464F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004652  48                DEC      EAX
    00004653  BB 02000000       MOV      EBX,2
    00004658  F7 E3             MUL      EBX
    0000465A  5B                POP      EBX
    0000465B  03 C3             ADD      EAX,EBX
    0000465D  8B F8             MOV      EDI,EAX
    0000465F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2776

    00004666  B8 01000000       MOV      EAX,1
    0000466B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2777

    00004671  B8 01000000       MOV      EAX,1
    00004676  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2779

    0000467C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004683  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004688  5B                POP      EBX

    LINE      2781

    00004689  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004690  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00004695  5B                POP      EBX

    LINE      2783

    00004696  B8 0A000000       MOV      EAX,10
    0000469B  40                INC      EAX
    0000469C  50                PUSH     EAX
    0000469D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000046A0  5B                POP      EBX
    000046A1  3B C3             CMP      EAX,EBX
    000046A3  0F 8503000000     JNE      3
    000046A9  EB                JMP      

    LINE      2790

    000046AA  B8 01000000       MOV      EAX,1
    000046AF  8B C8             MOV      ECX,EAX
    000046B1  B8 0A000000       MOV      EAX,10
    000046B6  50                PUSH     EAX
    000046B7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000046BA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000046BD  5B                POP      EBX
    000046BE  53                PUSH     EBX
    000046BF  3B C3             CMP      EAX,EBX
    000046C1  0F 8E03000000     JLE      3
    000046C7  EB                JMP      

    LINE      2792

    000046C8  B8 01000000       MOV      EAX,1
    000046CD  8B C8             MOV      ECX,EAX
    000046CF  B8 05000000       MOV      EAX,5
    000046D4  50                PUSH     EAX
    000046D5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000046D8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000046DB  5B                POP      EBX
    000046DC  53                PUSH     EBX
    000046DD  3B C3             CMP      EAX,EBX
    000046DF  0F 8E03000000     JLE      3
    000046E5  EB                JMP      

    LINE      2799

    000046E6  B8 01000000       MOV      EAX,1
    000046EB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2800

    000046F1  B8 01000000       MOV      EAX,1
    000046F6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2801

    000046FC  B8 01000000       MOV      EAX,1
    00004701  8B C8             MOV      ECX,EAX
    00004703  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004706  48                DEC      EAX
    00004707  BB 0E000000       MOV      EBX,14
    0000470C  F7 E3             MUL      EBX
    0000470E  50                PUSH     EAX
    0000470F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004712  48                DEC      EAX
    00004713  BB 02000000       MOV      EBX,2
    00004718  F7 E3             MUL      EBX
    0000471A  5B                POP      EBX
    0000471B  03 C3             ADD      EAX,EBX
    0000471D  8B F8             MOV      EDI,EAX
    0000471F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2802

    00004726  B8 01000000       MOV      EAX,1
    0000472B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2803

    00004731  B8 01000000       MOV      EAX,1
    00004736  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2805

    0000473C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00004743  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004748  5B                POP      EBX

    LINE      2807

    00004749  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00004750  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00004755  5B                POP      EBX

    LINE      2809

    00004756  B8 0A000000       MOV      EAX,10
    0000475B  40                INC      EAX
    0000475C  50                PUSH     EAX
    0000475D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004760  5B                POP      EBX
    00004761  3B C3             CMP      EAX,EBX
    00004763  0F 8503000000     JNE      3
    00004769  EB                JMP      

    LINE      2823

    0000476A  56                PUSH     ESI
    0000476B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00004771  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00004777  FF D1             CALL     ECX                       run_inner_proc
    00004779  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2825

    0000477A  B8 01000000       MOV      EAX,1
    0000477F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2827

    00004782  B8 01000000       MOV      EAX,1
    00004787  8B C8             MOV      ECX,EAX
    00004789  B8 0A000000       MOV      EAX,10
    0000478E  50                PUSH     EAX
    0000478F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004792  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004795  5B                POP      EBX
    00004796  53                PUSH     EBX
    00004797  3B C3             CMP      EAX,EBX
    00004799  0F 8E03000000     JLE      3
    0000479F  EB                JMP      

    LINE      2829

    000047A0  B8 01000000       MOV      EAX,1
    000047A5  8B C8             MOV      ECX,EAX
    000047A7  B8 05000000       MOV      EAX,5
    000047AC  50                PUSH     EAX
    000047AD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000047B0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000047B3  5B                POP      EBX
    000047B4  53                PUSH     EBX
    000047B5  3B C3             CMP      EAX,EBX
    000047B7  0F 8E03000000     JLE      3
    000047BD  EB                JMP      

    LINE      2836

    000047BE  B8 01000000       MOV      EAX,1
    000047C3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2837

    000047C6  B8 01000000       MOV      EAX,1
    000047CB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2838

    000047CE  B8 01000000       MOV      EAX,1
    000047D3  8B C8             MOV      ECX,EAX
    000047D5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000047D8  48                DEC      EAX
    000047D9  BB 0E000000       MOV      EBX,14
    000047DE  F7 E3             MUL      EBX
    000047E0  50                PUSH     EAX
    000047E1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000047E4  48                DEC      EAX
    000047E5  BB 02000000       MOV      EBX,2
    000047EA  F7 E3             MUL      EBX
    000047EC  5B                POP      EBX
    000047ED  03 C3             ADD      EAX,EBX
    000047EF  8B F8             MOV      EDI,EAX
    000047F1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2839

    000047F5  B8 01000000       MOV      EAX,1
    000047FA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2840

    000047FD  B8 01000000       MOV      EAX,1
    00004802  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2842

    00004805  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000480C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00004811  5B                POP      EBX

    LINE      2844

    00004812  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004819  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000481E  5B                POP      EBX

    LINE      2846

    0000481F  B8 0A000000       MOV      EAX,10
    00004824  40                INC      EAX
    00004825  50                PUSH     EAX
    00004826  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004829  5B                POP      EBX
    0000482A  3B C3             CMP      EAX,EBX
    0000482C  0F 8503000000     JNE      3
    00004832  EB                JMP      

    LINE      2853

    00004833  B8 01000000       MOV      EAX,1
    00004838  8B C8             MOV      ECX,EAX
    0000483A  B8 0A000000       MOV      EAX,10
    0000483F  50                PUSH     EAX
    00004840  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00004843  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004846  5B                POP      EBX
    00004847  53                PUSH     EBX
    00004848  3B C3             CMP      EAX,EBX
    0000484A  0F 8E03000000     JLE      3
    00004850  EB                JMP      

    LINE      2855

    00004851  B8 01000000       MOV      EAX,1
    00004856  8B C8             MOV      ECX,EAX
    00004858  B8 05000000       MOV      EAX,5
    0000485D  50                PUSH     EAX
    0000485E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00004861  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004864  5B                POP      EBX
    00004865  53                PUSH     EBX
    00004866  3B C3             CMP      EAX,EBX
    00004868  0F 8E03000000     JLE      3
    0000486E  EB                JMP      

    LINE      2862

    0000486F  B8 01000000       MOV      EAX,1
    00004874  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2863

    00004877  B8 01000000       MOV      EAX,1
    0000487C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2864

    0000487F  B8 01000000       MOV      EAX,1
    00004884  8B C8             MOV      ECX,EAX
    00004886  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004889  48                DEC      EAX
    0000488A  BB 0E000000       MOV      EBX,14
    0000488F  F7 E3             MUL      EBX
    00004891  50                PUSH     EAX
    00004892  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004895  48                DEC      EAX
    00004896  BB 02000000       MOV      EBX,2
    0000489B  F7 E3             MUL      EBX
    0000489D  5B                POP      EBX
    0000489E  03 C3             ADD      EAX,EBX
    000048A0  8B F8             MOV      EDI,EAX
    000048A2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2865

    000048A6  B8 01000000       MOV      EAX,1
    000048AB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2866

    000048AE  B8 01000000       MOV      EAX,1
    000048B3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2868

    000048B6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000048BD  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000048C2  5B                POP      EBX

    LINE      2870

    000048C3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000048CA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000048CF  5B                POP      EBX

    LINE      2872

    000048D0  B8 0A000000       MOV      EAX,10
    000048D5  40                INC      EAX
    000048D6  50                PUSH     EAX
    000048D7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000048DA  5B                POP      EBX
    000048DB  3B C3             CMP      EAX,EBX
    000048DD  0F 8503000000     JNE      3
    000048E3  EB                JMP      

    LINE      2880

    000048E4  B8 01000000       MOV      EAX,1
    000048E9  8B C8             MOV      ECX,EAX
    000048EB  B8 0A000000       MOV      EAX,10
    000048F0  50                PUSH     EAX
    000048F1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000048F4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000048F7  5B                POP      EBX
    000048F8  53                PUSH     EBX
    000048F9  3B C3             CMP      EAX,EBX
    000048FB  0F 8E03000000     JLE      3
    00004901  EB                JMP      

    LINE      2882

    00004902  B8 01000000       MOV      EAX,1
    00004907  8B C8             MOV      ECX,EAX
    00004909  B8 05000000       MOV      EAX,5
    0000490E  50                PUSH     EAX
    0000490F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00004912  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004915  5B                POP      EBX
    00004916  53                PUSH     EBX
    00004917  3B C3             CMP      EAX,EBX
    00004919  0F 8E03000000     JLE      3
    0000491F  EB                JMP      

    LINE      2889

    00004920  B8 01000000       MOV      EAX,1
    00004925  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2890

    0000492B  B8 01000000       MOV      EAX,1
    00004930  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2891

    00004936  B8 01000000       MOV      EAX,1
    0000493B  8B C8             MOV      ECX,EAX
    0000493D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004940  48                DEC      EAX
    00004941  BB 0E000000       MOV      EBX,14
    00004946  F7 E3             MUL      EBX
    00004948  50                PUSH     EAX
    00004949  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000494C  48                DEC      EAX
    0000494D  BB 02000000       MOV      EBX,2
    00004952  F7 E3             MUL      EBX
    00004954  5B                POP      EBX
    00004955  03 C3             ADD      EAX,EBX
    00004957  8B F8             MOV      EDI,EAX
    00004959  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2892

    00004960  B8 01000000       MOV      EAX,1
    00004965  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2893

    0000496B  B8 01000000       MOV      EAX,1
    00004970  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2895

    00004976  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000497D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004982  5B                POP      EBX

    LINE      2897

    00004983  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000498A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000498F  5B                POP      EBX

    LINE      2899

    00004990  B8 0A000000       MOV      EAX,10
    00004995  40                INC      EAX
    00004996  50                PUSH     EAX
    00004997  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000499A  5B                POP      EBX
    0000499B  3B C3             CMP      EAX,EBX
    0000499D  0F 8503000000     JNE      3
    000049A3  EB                JMP      

    LINE      2906

    000049A4  B8 01000000       MOV      EAX,1
    000049A9  8B C8             MOV      ECX,EAX
    000049AB  B8 0A000000       MOV      EAX,10
    000049B0  50                PUSH     EAX
    000049B1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000049B4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000049B7  5B                POP      EBX
    000049B8  53                PUSH     EBX
    000049B9  3B C3             CMP      EAX,EBX
    000049BB  0F 8E03000000     JLE      3
    000049C1  EB                JMP      

    LINE      2908

    000049C2  B8 01000000       MOV      EAX,1
    000049C7  8B C8             MOV      ECX,EAX
    000049C9  B8 05000000       MOV      EAX,5
    000049CE  50                PUSH     EAX
    000049CF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000049D2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000049D5  5B                POP      EBX
    000049D6  53                PUSH     EBX
    000049D7  3B C3             CMP      EAX,EBX
    000049D9  0F 8E03000000     JLE      3
    000049DF  EB                JMP      

    LINE      2915

    000049E0  B8 01000000       MOV      EAX,1
    000049E5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2916

    000049EB  B8 01000000       MOV      EAX,1
    000049F0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2917

    000049F6  B8 01000000       MOV      EAX,1
    000049FB  8B C8             MOV      ECX,EAX
    000049FD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004A00  48                DEC      EAX
    00004A01  BB 0E000000       MOV      EBX,14
    00004A06  F7 E3             MUL      EBX
    00004A08  50                PUSH     EAX
    00004A09  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004A0C  48                DEC      EAX
    00004A0D  BB 02000000       MOV      EBX,2
    00004A12  F7 E3             MUL      EBX
    00004A14  5B                POP      EBX
    00004A15  03 C3             ADD      EAX,EBX
    00004A17  8B F8             MOV      EDI,EAX
    00004A19  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      2918

    00004A20  B8 01000000       MOV      EAX,1
    00004A25  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2919

    00004A2B  B8 01000000       MOV      EAX,1
    00004A30  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      2921

    00004A36  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00004A3D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004A42  5B                POP      EBX

    LINE      2923

    00004A43  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00004A4A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00004A4F  5B                POP      EBX

    LINE      2925

    00004A50  B8 0A000000       MOV      EAX,10
    00004A55  40                INC      EAX
    00004A56  50                PUSH     EAX
    00004A57  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004A5A  5B                POP      EBX
    00004A5B  3B C3             CMP      EAX,EBX
    00004A5D  0F 8503000000     JNE      3
    00004A63  EB                JMP      

    LINE      2939

    00004A64  56                PUSH     ESI
    00004A65  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00004A6B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00004A71  FF D1             CALL     ECX                       run_inner_proc
    00004A73  5E                POP      ESI                       /* restore callers static pointer */

    LINE      2941

    00004A74  B8 01000000       MOV      EAX,1
    00004A79  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      2943

    00004A7C  B8 01000000       MOV      EAX,1
    00004A81  8B C8             MOV      ECX,EAX
    00004A83  B8 0A000000       MOV      EAX,10
    00004A88  50                PUSH     EAX
    00004A89  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004A8C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004A8F  5B                POP      EBX
    00004A90  53                PUSH     EBX
    00004A91  3B C3             CMP      EAX,EBX
    00004A93  0F 8E03000000     JLE      3
    00004A99  EB                JMP      

    LINE      2945

    00004A9A  B8 01000000       MOV      EAX,1
    00004A9F  8B C8             MOV      ECX,EAX
    00004AA1  B8 05000000       MOV      EAX,5
    00004AA6  50                PUSH     EAX
    00004AA7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00004AAA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004AAD  5B                POP      EBX
    00004AAE  53                PUSH     EBX
    00004AAF  3B C3             CMP      EAX,EBX
    00004AB1  0F 8E03000000     JLE      3
    00004AB7  EB                JMP      

    LINE      2952

    00004AB8  B8 01000000       MOV      EAX,1
    00004ABD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2953

    00004AC0  B8 01000000       MOV      EAX,1
    00004AC5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2954

    00004AC8  B8 01000000       MOV      EAX,1
    00004ACD  8B C8             MOV      ECX,EAX
    00004ACF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004AD2  48                DEC      EAX
    00004AD3  BB 0E000000       MOV      EBX,14
    00004AD8  F7 E3             MUL      EBX
    00004ADA  50                PUSH     EAX
    00004ADB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004ADE  48                DEC      EAX
    00004ADF  BB 02000000       MOV      EBX,2
    00004AE4  F7 E3             MUL      EBX
    00004AE6  5B                POP      EBX
    00004AE7  03 C3             ADD      EAX,EBX
    00004AE9  8B F8             MOV      EDI,EAX
    00004AEB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2955

    00004AEF  B8 01000000       MOV      EAX,1
    00004AF4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2956

    00004AF7  B8 01000000       MOV      EAX,1
    00004AFC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2958

    00004AFF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004B06  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00004B0B  5B                POP      EBX

    LINE      2960

    00004B0C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004B13  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00004B18  5B                POP      EBX

    LINE      2962

    00004B19  B8 0A000000       MOV      EAX,10
    00004B1E  40                INC      EAX
    00004B1F  50                PUSH     EAX
    00004B20  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004B23  5B                POP      EBX
    00004B24  3B C3             CMP      EAX,EBX
    00004B26  0F 8503000000     JNE      3
    00004B2C  EB                JMP      

    LINE      2969

    00004B2D  B8 01000000       MOV      EAX,1
    00004B32  8B C8             MOV      ECX,EAX
    00004B34  B8 0A000000       MOV      EAX,10
    00004B39  50                PUSH     EAX
    00004B3A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00004B3D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004B40  5B                POP      EBX
    00004B41  53                PUSH     EBX
    00004B42  3B C3             CMP      EAX,EBX
    00004B44  0F 8E03000000     JLE      3
    00004B4A  EB                JMP      

    LINE      2971

    00004B4B  B8 01000000       MOV      EAX,1
    00004B50  8B C8             MOV      ECX,EAX
    00004B52  B8 05000000       MOV      EAX,5
    00004B57  50                PUSH     EAX
    00004B58  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00004B5B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004B5E  5B                POP      EBX
    00004B5F  53                PUSH     EBX
    00004B60  3B C3             CMP      EAX,EBX
    00004B62  0F 8E03000000     JLE      3
    00004B68  EB                JMP      

    LINE      2978

    00004B69  B8 01000000       MOV      EAX,1
    00004B6E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2979

    00004B71  B8 01000000       MOV      EAX,1
    00004B76  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2980

    00004B79  B8 01000000       MOV      EAX,1
    00004B7E  8B C8             MOV      ECX,EAX
    00004B80  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004B83  48                DEC      EAX
    00004B84  BB 0E000000       MOV      EBX,14
    00004B89  F7 E3             MUL      EBX
    00004B8B  50                PUSH     EAX
    00004B8C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004B8F  48                DEC      EAX
    00004B90  BB 02000000       MOV      EBX,2
    00004B95  F7 E3             MUL      EBX
    00004B97  5B                POP      EBX
    00004B98  03 C3             ADD      EAX,EBX
    00004B9A  8B F8             MOV      EDI,EAX
    00004B9C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      2981

    00004BA0  B8 01000000       MOV      EAX,1
    00004BA5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2982

    00004BA8  B8 01000000       MOV      EAX,1
    00004BAD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      2984

    00004BB0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00004BB7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00004BBC  5B                POP      EBX

    LINE      2986

    00004BBD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00004BC4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00004BC9  5B                POP      EBX

    LINE      2988

    00004BCA  B8 0A000000       MOV      EAX,10
    00004BCF  40                INC      EAX
    00004BD0  50                PUSH     EAX
    00004BD1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004BD4  5B                POP      EBX
    00004BD5  3B C3             CMP      EAX,EBX
    00004BD7  0F 8503000000     JNE      3
    00004BDD  EB                JMP      

    LINE      2996

    00004BDE  B8 01000000       MOV      EAX,1
    00004BE3  8B C8             MOV      ECX,EAX
    00004BE5  B8 0A000000       MOV      EAX,10
    00004BEA  50                PUSH     EAX
    00004BEB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004BEE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004BF1  5B                POP      EBX
    00004BF2  53                PUSH     EBX
    00004BF3  3B C3             CMP      EAX,EBX
    00004BF5  0F 8E03000000     JLE      3
    00004BFB  EB                JMP      

    LINE      2998

    00004BFC  B8 01000000       MOV      EAX,1
    00004C01  8B C8             MOV      ECX,EAX
    00004C03  B8 05000000       MOV      EAX,5
    00004C08  50                PUSH     EAX
    00004C09  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00004C0C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004C0F  5B                POP      EBX
    00004C10  53                PUSH     EBX
    00004C11  3B C3             CMP      EAX,EBX
    00004C13  0F 8E03000000     JLE      3
    00004C19  EB                JMP      

    LINE      3005

    00004C1A  B8 01000000       MOV      EAX,1
    00004C1F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3006

    00004C25  B8 01000000       MOV      EAX,1
    00004C2A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3007

    00004C30  B8 01000000       MOV      EAX,1
    00004C35  8B C8             MOV      ECX,EAX
    00004C37  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004C3A  48                DEC      EAX
    00004C3B  BB 0E000000       MOV      EBX,14
    00004C40  F7 E3             MUL      EBX
    00004C42  50                PUSH     EAX
    00004C43  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004C46  48                DEC      EAX
    00004C47  BB 02000000       MOV      EBX,2
    00004C4C  F7 E3             MUL      EBX
    00004C4E  5B                POP      EBX
    00004C4F  03 C3             ADD      EAX,EBX
    00004C51  8B F8             MOV      EDI,EAX
    00004C53  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3008

    00004C5A  B8 01000000       MOV      EAX,1
    00004C5F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3009

    00004C65  B8 01000000       MOV      EAX,1
    00004C6A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3011

    00004C70  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004C77  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004C7C  5B                POP      EBX

    LINE      3013

    00004C7D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004C84  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00004C89  5B                POP      EBX

    LINE      3015

    00004C8A  B8 0A000000       MOV      EAX,10
    00004C8F  40                INC      EAX
    00004C90  50                PUSH     EAX
    00004C91  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004C94  5B                POP      EBX
    00004C95  3B C3             CMP      EAX,EBX
    00004C97  0F 8503000000     JNE      3
    00004C9D  EB                JMP      

    LINE      3022

    00004C9E  B8 01000000       MOV      EAX,1
    00004CA3  8B C8             MOV      ECX,EAX
    00004CA5  B8 0A000000       MOV      EAX,10
    00004CAA  50                PUSH     EAX
    00004CAB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00004CAE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004CB1  5B                POP      EBX
    00004CB2  53                PUSH     EBX
    00004CB3  3B C3             CMP      EAX,EBX
    00004CB5  0F 8E03000000     JLE      3
    00004CBB  EB                JMP      

    LINE      3024

    00004CBC  B8 01000000       MOV      EAX,1
    00004CC1  8B C8             MOV      ECX,EAX
    00004CC3  B8 05000000       MOV      EAX,5
    00004CC8  50                PUSH     EAX
    00004CC9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00004CCC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004CCF  5B                POP      EBX
    00004CD0  53                PUSH     EBX
    00004CD1  3B C3             CMP      EAX,EBX
    00004CD3  0F 8E03000000     JLE      3
    00004CD9  EB                JMP      

    LINE      3031

    00004CDA  B8 01000000       MOV      EAX,1
    00004CDF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3032

    00004CE5  B8 01000000       MOV      EAX,1
    00004CEA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3033

    00004CF0  B8 01000000       MOV      EAX,1
    00004CF5  8B C8             MOV      ECX,EAX
    00004CF7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004CFA  48                DEC      EAX
    00004CFB  BB 0E000000       MOV      EBX,14
    00004D00  F7 E3             MUL      EBX
    00004D02  50                PUSH     EAX
    00004D03  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004D06  48                DEC      EAX
    00004D07  BB 02000000       MOV      EBX,2
    00004D0C  F7 E3             MUL      EBX
    00004D0E  5B                POP      EBX
    00004D0F  03 C3             ADD      EAX,EBX
    00004D11  8B F8             MOV      EDI,EAX
    00004D13  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3034

    00004D1A  B8 01000000       MOV      EAX,1
    00004D1F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3035

    00004D25  B8 01000000       MOV      EAX,1
    00004D2A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3037

    00004D30  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00004D37  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004D3C  5B                POP      EBX

    LINE      3039

    00004D3D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00004D44  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00004D49  5B                POP      EBX

    LINE      3041

    00004D4A  B8 0A000000       MOV      EAX,10
    00004D4F  40                INC      EAX
    00004D50  50                PUSH     EAX
    00004D51  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004D54  5B                POP      EBX
    00004D55  3B C3             CMP      EAX,EBX
    00004D57  0F 8503000000     JNE      3
    00004D5D  EB                JMP      

    LINE      3055

    00004D5E  56                PUSH     ESI
    00004D5F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00004D65  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00004D6B  FF D1             CALL     ECX                       run_inner_proc
    00004D6D  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3057

    00004D6E  B8 01000000       MOV      EAX,1
    00004D73  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3059

    00004D76  B8 01000000       MOV      EAX,1
    00004D7B  8B C8             MOV      ECX,EAX
    00004D7D  B8 0A000000       MOV      EAX,10
    00004D82  50                PUSH     EAX
    00004D83  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004D86  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004D89  5B                POP      EBX
    00004D8A  53                PUSH     EBX
    00004D8B  3B C3             CMP      EAX,EBX
    00004D8D  0F 8E03000000     JLE      3
    00004D93  EB                JMP      

    LINE      3061

    00004D94  B8 01000000       MOV      EAX,1
    00004D99  8B C8             MOV      ECX,EAX
    00004D9B  B8 05000000       MOV      EAX,5
    00004DA0  50                PUSH     EAX
    00004DA1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00004DA4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004DA7  5B                POP      EBX
    00004DA8  53                PUSH     EBX
    00004DA9  3B C3             CMP      EAX,EBX
    00004DAB  0F 8E03000000     JLE      3
    00004DB1  EB                JMP      

    LINE      3068

    00004DB2  B8 01000000       MOV      EAX,1
    00004DB7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3069

    00004DBA  B8 01000000       MOV      EAX,1
    00004DBF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3070

    00004DC2  B8 01000000       MOV      EAX,1
    00004DC7  8B C8             MOV      ECX,EAX
    00004DC9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004DCC  48                DEC      EAX
    00004DCD  BB 0E000000       MOV      EBX,14
    00004DD2  F7 E3             MUL      EBX
    00004DD4  50                PUSH     EAX
    00004DD5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004DD8  48                DEC      EAX
    00004DD9  BB 02000000       MOV      EBX,2
    00004DDE  F7 E3             MUL      EBX
    00004DE0  5B                POP      EBX
    00004DE1  03 C3             ADD      EAX,EBX
    00004DE3  8B F8             MOV      EDI,EAX
    00004DE5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3071

    00004DE9  B8 01000000       MOV      EAX,1
    00004DEE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3072

    00004DF1  B8 01000000       MOV      EAX,1
    00004DF6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3074

    00004DF9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004E00  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00004E05  5B                POP      EBX

    LINE      3076

    00004E06  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004E0D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00004E12  5B                POP      EBX

    LINE      3078

    00004E13  B8 0A000000       MOV      EAX,10
    00004E18  40                INC      EAX
    00004E19  50                PUSH     EAX
    00004E1A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004E1D  5B                POP      EBX
    00004E1E  3B C3             CMP      EAX,EBX
    00004E20  0F 8503000000     JNE      3
    00004E26  EB                JMP      

    LINE      3085

    00004E27  B8 01000000       MOV      EAX,1
    00004E2C  8B C8             MOV      ECX,EAX
    00004E2E  B8 0A000000       MOV      EAX,10
    00004E33  50                PUSH     EAX
    00004E34  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00004E37  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004E3A  5B                POP      EBX
    00004E3B  53                PUSH     EBX
    00004E3C  3B C3             CMP      EAX,EBX
    00004E3E  0F 8E03000000     JLE      3
    00004E44  EB                JMP      

    LINE      3087

    00004E45  B8 01000000       MOV      EAX,1
    00004E4A  8B C8             MOV      ECX,EAX
    00004E4C  B8 05000000       MOV      EAX,5
    00004E51  50                PUSH     EAX
    00004E52  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00004E55  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004E58  5B                POP      EBX
    00004E59  53                PUSH     EBX
    00004E5A  3B C3             CMP      EAX,EBX
    00004E5C  0F 8E03000000     JLE      3
    00004E62  EB                JMP      

    LINE      3094

    00004E63  B8 01000000       MOV      EAX,1
    00004E68  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3095

    00004E6B  B8 01000000       MOV      EAX,1
    00004E70  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3096

    00004E73  B8 01000000       MOV      EAX,1
    00004E78  8B C8             MOV      ECX,EAX
    00004E7A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004E7D  48                DEC      EAX
    00004E7E  BB 0E000000       MOV      EBX,14
    00004E83  F7 E3             MUL      EBX
    00004E85  50                PUSH     EAX
    00004E86  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004E89  48                DEC      EAX
    00004E8A  BB 02000000       MOV      EBX,2
    00004E8F  F7 E3             MUL      EBX
    00004E91  5B                POP      EBX
    00004E92  03 C3             ADD      EAX,EBX
    00004E94  8B F8             MOV      EDI,EAX
    00004E96  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3097

    00004E9A  B8 01000000       MOV      EAX,1
    00004E9F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3098

    00004EA2  B8 01000000       MOV      EAX,1
    00004EA7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3100

    00004EAA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00004EB1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00004EB6  5B                POP      EBX

    LINE      3102

    00004EB7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00004EBE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00004EC3  5B                POP      EBX

    LINE      3104

    00004EC4  B8 0A000000       MOV      EAX,10
    00004EC9  40                INC      EAX
    00004ECA  50                PUSH     EAX
    00004ECB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004ECE  5B                POP      EBX
    00004ECF  3B C3             CMP      EAX,EBX
    00004ED1  0F 8503000000     JNE      3
    00004ED7  EB                JMP      

    LINE      3112

    00004ED8  B8 01000000       MOV      EAX,1
    00004EDD  8B C8             MOV      ECX,EAX
    00004EDF  B8 0A000000       MOV      EAX,10
    00004EE4  50                PUSH     EAX
    00004EE5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00004EE8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004EEB  5B                POP      EBX
    00004EEC  53                PUSH     EBX
    00004EED  3B C3             CMP      EAX,EBX
    00004EEF  0F 8E03000000     JLE      3
    00004EF5  EB                JMP      

    LINE      3114

    00004EF6  B8 01000000       MOV      EAX,1
    00004EFB  8B C8             MOV      ECX,EAX
    00004EFD  B8 05000000       MOV      EAX,5
    00004F02  50                PUSH     EAX
    00004F03  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00004F06  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004F09  5B                POP      EBX
    00004F0A  53                PUSH     EBX
    00004F0B  3B C3             CMP      EAX,EBX
    00004F0D  0F 8E03000000     JLE      3
    00004F13  EB                JMP      

    LINE      3121

    00004F14  B8 01000000       MOV      EAX,1
    00004F19  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3122

    00004F1F  B8 01000000       MOV      EAX,1
    00004F24  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3123

    00004F2A  B8 01000000       MOV      EAX,1
    00004F2F  8B C8             MOV      ECX,EAX
    00004F31  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004F34  48                DEC      EAX
    00004F35  BB 0E000000       MOV      EBX,14
    00004F3A  F7 E3             MUL      EBX
    00004F3C  50                PUSH     EAX
    00004F3D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00004F40  48                DEC      EAX
    00004F41  BB 02000000       MOV      EBX,2
    00004F46  F7 E3             MUL      EBX
    00004F48  5B                POP      EBX
    00004F49  03 C3             ADD      EAX,EBX
    00004F4B  8B F8             MOV      EDI,EAX
    00004F4D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3124

    00004F54  B8 01000000       MOV      EAX,1
    00004F59  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3125

    00004F5F  B8 01000000       MOV      EAX,1
    00004F64  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3127

    00004F6A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00004F71  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00004F76  5B                POP      EBX

    LINE      3129

    00004F77  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00004F7E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00004F83  5B                POP      EBX

    LINE      3131

    00004F84  B8 0A000000       MOV      EAX,10
    00004F89  40                INC      EAX
    00004F8A  50                PUSH     EAX
    00004F8B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00004F8E  5B                POP      EBX
    00004F8F  3B C3             CMP      EAX,EBX
    00004F91  0F 8503000000     JNE      3
    00004F97  EB                JMP      

    LINE      3138

    00004F98  B8 01000000       MOV      EAX,1
    00004F9D  8B C8             MOV      ECX,EAX
    00004F9F  B8 0A000000       MOV      EAX,10
    00004FA4  50                PUSH     EAX
    00004FA5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00004FA8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004FAB  5B                POP      EBX
    00004FAC  53                PUSH     EBX
    00004FAD  3B C3             CMP      EAX,EBX
    00004FAF  0F 8E03000000     JLE      3
    00004FB5  EB                JMP      

    LINE      3140

    00004FB6  B8 01000000       MOV      EAX,1
    00004FBB  8B C8             MOV      ECX,EAX
    00004FBD  B8 05000000       MOV      EAX,5
    00004FC2  50                PUSH     EAX
    00004FC3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00004FC6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00004FC9  5B                POP      EBX
    00004FCA  53                PUSH     EBX
    00004FCB  3B C3             CMP      EAX,EBX
    00004FCD  0F 8E03000000     JLE      3
    00004FD3  EB                JMP      

    LINE      3147

    00004FD4  B8 01000000       MOV      EAX,1
    00004FD9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3148

    00004FDF  B8 01000000       MOV      EAX,1
    00004FE4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3149

    00004FEA  B8 01000000       MOV      EAX,1
    00004FEF  8B C8             MOV      ECX,EAX
    00004FF1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00004FF4  48                DEC      EAX
    00004FF5  BB 0E000000       MOV      EBX,14
    00004FFA  F7 E3             MUL      EBX
    00004FFC  50                PUSH     EAX
    00004FFD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005000  48                DEC      EAX
    00005001  BB 02000000       MOV      EBX,2
    00005006  F7 E3             MUL      EBX
    00005008  5B                POP      EBX
    00005009  03 C3             ADD      EAX,EBX
    0000500B  8B F8             MOV      EDI,EAX
    0000500D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3150

    00005014  B8 01000000       MOV      EAX,1
    00005019  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3151

    0000501F  B8 01000000       MOV      EAX,1
    00005024  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3153

    0000502A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00005031  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005036  5B                POP      EBX

    LINE      3155

    00005037  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000503E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005043  5B                POP      EBX

    LINE      3157

    00005044  B8 0A000000       MOV      EAX,10
    00005049  40                INC      EAX
    0000504A  50                PUSH     EAX
    0000504B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000504E  5B                POP      EBX
    0000504F  3B C3             CMP      EAX,EBX
    00005051  0F 8503000000     JNE      3
    00005057  EB                JMP      

    LINE      3171

    00005058  56                PUSH     ESI
    00005059  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000505F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00005065  FF D1             CALL     ECX                       run_inner_proc
    00005067  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3173

    00005068  B8 01000000       MOV      EAX,1
    0000506D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3175

    00005070  B8 01000000       MOV      EAX,1
    00005075  8B C8             MOV      ECX,EAX
    00005077  B8 0A000000       MOV      EAX,10
    0000507C  50                PUSH     EAX
    0000507D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00005080  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005083  5B                POP      EBX
    00005084  53                PUSH     EBX
    00005085  3B C3             CMP      EAX,EBX
    00005087  0F 8E03000000     JLE      3
    0000508D  EB                JMP      

    LINE      3177

    0000508E  B8 01000000       MOV      EAX,1
    00005093  8B C8             MOV      ECX,EAX
    00005095  B8 05000000       MOV      EAX,5
    0000509A  50                PUSH     EAX
    0000509B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000509E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000050A1  5B                POP      EBX
    000050A2  53                PUSH     EBX
    000050A3  3B C3             CMP      EAX,EBX
    000050A5  0F 8E03000000     JLE      3
    000050AB  EB                JMP      

    LINE      3184

    000050AC  B8 01000000       MOV      EAX,1
    000050B1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3185

    000050B4  B8 01000000       MOV      EAX,1
    000050B9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3186

    000050BC  B8 01000000       MOV      EAX,1
    000050C1  8B C8             MOV      ECX,EAX
    000050C3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000050C6  48                DEC      EAX
    000050C7  BB 0E000000       MOV      EBX,14
    000050CC  F7 E3             MUL      EBX
    000050CE  50                PUSH     EAX
    000050CF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000050D2  48                DEC      EAX
    000050D3  BB 02000000       MOV      EBX,2
    000050D8  F7 E3             MUL      EBX
    000050DA  5B                POP      EBX
    000050DB  03 C3             ADD      EAX,EBX
    000050DD  8B F8             MOV      EDI,EAX
    000050DF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3187

    000050E3  B8 01000000       MOV      EAX,1
    000050E8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3188

    000050EB  B8 01000000       MOV      EAX,1
    000050F0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3190

    000050F3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000050FA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000050FF  5B                POP      EBX

    LINE      3192

    00005100  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005107  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000510C  5B                POP      EBX

    LINE      3194

    0000510D  B8 0A000000       MOV      EAX,10
    00005112  40                INC      EAX
    00005113  50                PUSH     EAX
    00005114  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005117  5B                POP      EBX
    00005118  3B C3             CMP      EAX,EBX
    0000511A  0F 8503000000     JNE      3
    00005120  EB                JMP      

    LINE      3201

    00005121  B8 01000000       MOV      EAX,1
    00005126  8B C8             MOV      ECX,EAX
    00005128  B8 0A000000       MOV      EAX,10
    0000512D  50                PUSH     EAX
    0000512E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00005131  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005134  5B                POP      EBX
    00005135  53                PUSH     EBX
    00005136  3B C3             CMP      EAX,EBX
    00005138  0F 8E03000000     JLE      3
    0000513E  EB                JMP      

    LINE      3203

    0000513F  B8 01000000       MOV      EAX,1
    00005144  8B C8             MOV      ECX,EAX
    00005146  B8 05000000       MOV      EAX,5
    0000514B  50                PUSH     EAX
    0000514C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000514F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005152  5B                POP      EBX
    00005153  53                PUSH     EBX
    00005154  3B C3             CMP      EAX,EBX
    00005156  0F 8E03000000     JLE      3
    0000515C  EB                JMP      

    LINE      3210

    0000515D  B8 01000000       MOV      EAX,1
    00005162  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3211

    00005165  B8 01000000       MOV      EAX,1
    0000516A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3212

    0000516D  B8 01000000       MOV      EAX,1
    00005172  8B C8             MOV      ECX,EAX
    00005174  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005177  48                DEC      EAX
    00005178  BB 0E000000       MOV      EBX,14
    0000517D  F7 E3             MUL      EBX
    0000517F  50                PUSH     EAX
    00005180  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005183  48                DEC      EAX
    00005184  BB 02000000       MOV      EBX,2
    00005189  F7 E3             MUL      EBX
    0000518B  5B                POP      EBX
    0000518C  03 C3             ADD      EAX,EBX
    0000518E  8B F8             MOV      EDI,EAX
    00005190  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3213

    00005194  B8 01000000       MOV      EAX,1
    00005199  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3214

    0000519C  B8 01000000       MOV      EAX,1
    000051A1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3216

    000051A4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000051AB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000051B0  5B                POP      EBX

    LINE      3218

    000051B1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000051B8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000051BD  5B                POP      EBX

    LINE      3220

    000051BE  B8 0A000000       MOV      EAX,10
    000051C3  40                INC      EAX
    000051C4  50                PUSH     EAX
    000051C5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000051C8  5B                POP      EBX
    000051C9  3B C3             CMP      EAX,EBX
    000051CB  0F 8503000000     JNE      3
    000051D1  EB                JMP      

    LINE      3228

    000051D2  B8 01000000       MOV      EAX,1
    000051D7  8B C8             MOV      ECX,EAX
    000051D9  B8 0A000000       MOV      EAX,10
    000051DE  50                PUSH     EAX
    000051DF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000051E2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000051E5  5B                POP      EBX
    000051E6  53                PUSH     EBX
    000051E7  3B C3             CMP      EAX,EBX
    000051E9  0F 8E03000000     JLE      3
    000051EF  EB                JMP      

    LINE      3230

    000051F0  B8 01000000       MOV      EAX,1
    000051F5  8B C8             MOV      ECX,EAX
    000051F7  B8 05000000       MOV      EAX,5
    000051FC  50                PUSH     EAX
    000051FD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00005200  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005203  5B                POP      EBX
    00005204  53                PUSH     EBX
    00005205  3B C3             CMP      EAX,EBX
    00005207  0F 8E03000000     JLE      3
    0000520D  EB                JMP      

    LINE      3237

    0000520E  B8 01000000       MOV      EAX,1
    00005213  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3238

    00005219  B8 01000000       MOV      EAX,1
    0000521E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3239

    00005224  B8 01000000       MOV      EAX,1
    00005229  8B C8             MOV      ECX,EAX
    0000522B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000522E  48                DEC      EAX
    0000522F  BB 0E000000       MOV      EBX,14
    00005234  F7 E3             MUL      EBX
    00005236  50                PUSH     EAX
    00005237  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000523A  48                DEC      EAX
    0000523B  BB 02000000       MOV      EBX,2
    00005240  F7 E3             MUL      EBX
    00005242  5B                POP      EBX
    00005243  03 C3             ADD      EAX,EBX
    00005245  8B F8             MOV      EDI,EAX
    00005247  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3240

    0000524E  B8 01000000       MOV      EAX,1
    00005253  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3241

    00005259  B8 01000000       MOV      EAX,1
    0000525E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3243

    00005264  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000526B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005270  5B                POP      EBX

    LINE      3245

    00005271  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005278  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000527D  5B                POP      EBX

    LINE      3247

    0000527E  B8 0A000000       MOV      EAX,10
    00005283  40                INC      EAX
    00005284  50                PUSH     EAX
    00005285  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005288  5B                POP      EBX
    00005289  3B C3             CMP      EAX,EBX
    0000528B  0F 8503000000     JNE      3
    00005291  EB                JMP      

    LINE      3254

    00005292  B8 01000000       MOV      EAX,1
    00005297  8B C8             MOV      ECX,EAX
    00005299  B8 0A000000       MOV      EAX,10
    0000529E  50                PUSH     EAX
    0000529F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000052A2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000052A5  5B                POP      EBX
    000052A6  53                PUSH     EBX
    000052A7  3B C3             CMP      EAX,EBX
    000052A9  0F 8E03000000     JLE      3
    000052AF  EB                JMP      

    LINE      3256

    000052B0  B8 01000000       MOV      EAX,1
    000052B5  8B C8             MOV      ECX,EAX
    000052B7  B8 05000000       MOV      EAX,5
    000052BC  50                PUSH     EAX
    000052BD  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000052C0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000052C3  5B                POP      EBX
    000052C4  53                PUSH     EBX
    000052C5  3B C3             CMP      EAX,EBX
    000052C7  0F 8E03000000     JLE      3
    000052CD  EB                JMP      

    LINE      3263

    000052CE  B8 01000000       MOV      EAX,1
    000052D3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3264

    000052D9  B8 01000000       MOV      EAX,1
    000052DE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3265

    000052E4  B8 01000000       MOV      EAX,1
    000052E9  8B C8             MOV      ECX,EAX
    000052EB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000052EE  48                DEC      EAX
    000052EF  BB 0E000000       MOV      EBX,14
    000052F4  F7 E3             MUL      EBX
    000052F6  50                PUSH     EAX
    000052F7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000052FA  48                DEC      EAX
    000052FB  BB 02000000       MOV      EBX,2
    00005300  F7 E3             MUL      EBX
    00005302  5B                POP      EBX
    00005303  03 C3             ADD      EAX,EBX
    00005305  8B F8             MOV      EDI,EAX
    00005307  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3266

    0000530E  B8 01000000       MOV      EAX,1
    00005313  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3267

    00005319  B8 01000000       MOV      EAX,1
    0000531E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3269

    00005324  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000532B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005330  5B                POP      EBX

    LINE      3271

    00005331  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00005338  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000533D  5B                POP      EBX

    LINE      3273

    0000533E  B8 0A000000       MOV      EAX,10
    00005343  40                INC      EAX
    00005344  50                PUSH     EAX
    00005345  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005348  5B                POP      EBX
    00005349  3B C3             CMP      EAX,EBX
    0000534B  0F 8503000000     JNE      3
    00005351  EB                JMP      

    LINE      3287

    00005352  56                PUSH     ESI
    00005353  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00005359  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000535F  FF D1             CALL     ECX                       run_inner_proc
    00005361  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3289

    00005362  B8 01000000       MOV      EAX,1
    00005367  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3291

    0000536A  B8 01000000       MOV      EAX,1
    0000536F  8B C8             MOV      ECX,EAX
    00005371  B8 0A000000       MOV      EAX,10
    00005376  50                PUSH     EAX
    00005377  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000537A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000537D  5B                POP      EBX
    0000537E  53                PUSH     EBX
    0000537F  3B C3             CMP      EAX,EBX
    00005381  0F 8E03000000     JLE      3
    00005387  EB                JMP      

    LINE      3293

    00005388  B8 01000000       MOV      EAX,1
    0000538D  8B C8             MOV      ECX,EAX
    0000538F  B8 05000000       MOV      EAX,5
    00005394  50                PUSH     EAX
    00005395  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00005398  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000539B  5B                POP      EBX
    0000539C  53                PUSH     EBX
    0000539D  3B C3             CMP      EAX,EBX
    0000539F  0F 8E03000000     JLE      3
    000053A5  EB                JMP      

    LINE      3300

    000053A6  B8 01000000       MOV      EAX,1
    000053AB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3301

    000053AE  B8 01000000       MOV      EAX,1
    000053B3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3302

    000053B6  B8 01000000       MOV      EAX,1
    000053BB  8B C8             MOV      ECX,EAX
    000053BD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000053C0  48                DEC      EAX
    000053C1  BB 0E000000       MOV      EBX,14
    000053C6  F7 E3             MUL      EBX
    000053C8  50                PUSH     EAX
    000053C9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000053CC  48                DEC      EAX
    000053CD  BB 02000000       MOV      EBX,2
    000053D2  F7 E3             MUL      EBX
    000053D4  5B                POP      EBX
    000053D5  03 C3             ADD      EAX,EBX
    000053D7  8B F8             MOV      EDI,EAX
    000053D9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3303

    000053DD  B8 01000000       MOV      EAX,1
    000053E2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3304

    000053E5  B8 01000000       MOV      EAX,1
    000053EA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3306

    000053ED  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000053F4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000053F9  5B                POP      EBX

    LINE      3308

    000053FA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005401  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00005406  5B                POP      EBX

    LINE      3310

    00005407  B8 0A000000       MOV      EAX,10
    0000540C  40                INC      EAX
    0000540D  50                PUSH     EAX
    0000540E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005411  5B                POP      EBX
    00005412  3B C3             CMP      EAX,EBX
    00005414  0F 8503000000     JNE      3
    0000541A  EB                JMP      

    LINE      3317

    0000541B  B8 01000000       MOV      EAX,1
    00005420  8B C8             MOV      ECX,EAX
    00005422  B8 0A000000       MOV      EAX,10
    00005427  50                PUSH     EAX
    00005428  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000542B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000542E  5B                POP      EBX
    0000542F  53                PUSH     EBX
    00005430  3B C3             CMP      EAX,EBX
    00005432  0F 8E03000000     JLE      3
    00005438  EB                JMP      

    LINE      3319

    00005439  B8 01000000       MOV      EAX,1
    0000543E  8B C8             MOV      ECX,EAX
    00005440  B8 05000000       MOV      EAX,5
    00005445  50                PUSH     EAX
    00005446  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00005449  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000544C  5B                POP      EBX
    0000544D  53                PUSH     EBX
    0000544E  3B C3             CMP      EAX,EBX
    00005450  0F 8E03000000     JLE      3
    00005456  EB                JMP      

    LINE      3326

    00005457  B8 01000000       MOV      EAX,1
    0000545C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3327

    0000545F  B8 01000000       MOV      EAX,1
    00005464  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3328

    00005467  B8 01000000       MOV      EAX,1
    0000546C  8B C8             MOV      ECX,EAX
    0000546E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005471  48                DEC      EAX
    00005472  BB 0E000000       MOV      EBX,14
    00005477  F7 E3             MUL      EBX
    00005479  50                PUSH     EAX
    0000547A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000547D  48                DEC      EAX
    0000547E  BB 02000000       MOV      EBX,2
    00005483  F7 E3             MUL      EBX
    00005485  5B                POP      EBX
    00005486  03 C3             ADD      EAX,EBX
    00005488  8B F8             MOV      EDI,EAX
    0000548A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3329

    0000548E  B8 01000000       MOV      EAX,1
    00005493  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3330

    00005496  B8 01000000       MOV      EAX,1
    0000549B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3332

    0000549E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000054A5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000054AA  5B                POP      EBX

    LINE      3334

    000054AB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000054B2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000054B7  5B                POP      EBX

    LINE      3336

    000054B8  B8 0A000000       MOV      EAX,10
    000054BD  40                INC      EAX
    000054BE  50                PUSH     EAX
    000054BF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000054C2  5B                POP      EBX
    000054C3  3B C3             CMP      EAX,EBX
    000054C5  0F 8503000000     JNE      3
    000054CB  EB                JMP      

    LINE      3344

    000054CC  B8 01000000       MOV      EAX,1
    000054D1  8B C8             MOV      ECX,EAX
    000054D3  B8 0A000000       MOV      EAX,10
    000054D8  50                PUSH     EAX
    000054D9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000054DC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000054DF  5B                POP      EBX
    000054E0  53                PUSH     EBX
    000054E1  3B C3             CMP      EAX,EBX
    000054E3  0F 8E03000000     JLE      3
    000054E9  EB                JMP      

    LINE      3346

    000054EA  B8 01000000       MOV      EAX,1
    000054EF  8B C8             MOV      ECX,EAX
    000054F1  B8 05000000       MOV      EAX,5
    000054F6  50                PUSH     EAX
    000054F7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000054FA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000054FD  5B                POP      EBX
    000054FE  53                PUSH     EBX
    000054FF  3B C3             CMP      EAX,EBX
    00005501  0F 8E03000000     JLE      3
    00005507  EB                JMP      

    LINE      3353

    00005508  B8 01000000       MOV      EAX,1
    0000550D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3354

    00005513  B8 01000000       MOV      EAX,1
    00005518  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3355

    0000551E  B8 01000000       MOV      EAX,1
    00005523  8B C8             MOV      ECX,EAX
    00005525  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005528  48                DEC      EAX
    00005529  BB 0E000000       MOV      EBX,14
    0000552E  F7 E3             MUL      EBX
    00005530  50                PUSH     EAX
    00005531  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005534  48                DEC      EAX
    00005535  BB 02000000       MOV      EBX,2
    0000553A  F7 E3             MUL      EBX
    0000553C  5B                POP      EBX
    0000553D  03 C3             ADD      EAX,EBX
    0000553F  8B F8             MOV      EDI,EAX
    00005541  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3356

    00005548  B8 01000000       MOV      EAX,1
    0000554D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3357

    00005553  B8 01000000       MOV      EAX,1
    00005558  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3359

    0000555E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00005565  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000556A  5B                POP      EBX

    LINE      3361

    0000556B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005572  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005577  5B                POP      EBX

    LINE      3363

    00005578  B8 0A000000       MOV      EAX,10
    0000557D  40                INC      EAX
    0000557E  50                PUSH     EAX
    0000557F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005582  5B                POP      EBX
    00005583  3B C3             CMP      EAX,EBX
    00005585  0F 8503000000     JNE      3
    0000558B  EB                JMP      

    LINE      3370

    0000558C  B8 01000000       MOV      EAX,1
    00005591  8B C8             MOV      ECX,EAX
    00005593  B8 0A000000       MOV      EAX,10
    00005598  50                PUSH     EAX
    00005599  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000559C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000559F  5B                POP      EBX
    000055A0  53                PUSH     EBX
    000055A1  3B C3             CMP      EAX,EBX
    000055A3  0F 8E03000000     JLE      3
    000055A9  EB                JMP      

    LINE      3372

    000055AA  B8 01000000       MOV      EAX,1
    000055AF  8B C8             MOV      ECX,EAX
    000055B1  B8 05000000       MOV      EAX,5
    000055B6  50                PUSH     EAX
    000055B7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000055BA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000055BD  5B                POP      EBX
    000055BE  53                PUSH     EBX
    000055BF  3B C3             CMP      EAX,EBX
    000055C1  0F 8E03000000     JLE      3
    000055C7  EB                JMP      

    LINE      3379

    000055C8  B8 01000000       MOV      EAX,1
    000055CD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3380

    000055D3  B8 01000000       MOV      EAX,1
    000055D8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3381

    000055DE  B8 01000000       MOV      EAX,1
    000055E3  8B C8             MOV      ECX,EAX
    000055E5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000055E8  48                DEC      EAX
    000055E9  BB 0E000000       MOV      EBX,14
    000055EE  F7 E3             MUL      EBX
    000055F0  50                PUSH     EAX
    000055F1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000055F4  48                DEC      EAX
    000055F5  BB 02000000       MOV      EBX,2
    000055FA  F7 E3             MUL      EBX
    000055FC  5B                POP      EBX
    000055FD  03 C3             ADD      EAX,EBX
    000055FF  8B F8             MOV      EDI,EAX
    00005601  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3382

    00005608  B8 01000000       MOV      EAX,1
    0000560D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3383

    00005613  B8 01000000       MOV      EAX,1
    00005618  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3385

    0000561E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00005625  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000562A  5B                POP      EBX

    LINE      3387

    0000562B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00005632  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005637  5B                POP      EBX

    LINE      3389

    00005638  B8 0A000000       MOV      EAX,10
    0000563D  40                INC      EAX
    0000563E  50                PUSH     EAX
    0000563F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005642  5B                POP      EBX
    00005643  3B C3             CMP      EAX,EBX
    00005645  0F 8503000000     JNE      3
    0000564B  EB                JMP      

    LINE      3403

    0000564C  56                PUSH     ESI
    0000564D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00005653  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00005659  FF D1             CALL     ECX                       run_inner_proc
    0000565B  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3405

    0000565C  B8 01000000       MOV      EAX,1
    00005661  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3407

    00005664  B8 01000000       MOV      EAX,1
    00005669  8B C8             MOV      ECX,EAX
    0000566B  B8 0A000000       MOV      EAX,10
    00005670  50                PUSH     EAX
    00005671  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00005674  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005677  5B                POP      EBX
    00005678  53                PUSH     EBX
    00005679  3B C3             CMP      EAX,EBX
    0000567B  0F 8E03000000     JLE      3
    00005681  EB                JMP      

    LINE      3409

    00005682  B8 01000000       MOV      EAX,1
    00005687  8B C8             MOV      ECX,EAX
    00005689  B8 05000000       MOV      EAX,5
    0000568E  50                PUSH     EAX
    0000568F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00005692  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005695  5B                POP      EBX
    00005696  53                PUSH     EBX
    00005697  3B C3             CMP      EAX,EBX
    00005699  0F 8E03000000     JLE      3
    0000569F  EB                JMP      

    LINE      3416

    000056A0  B8 01000000       MOV      EAX,1
    000056A5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3417

    000056A8  B8 01000000       MOV      EAX,1
    000056AD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3418

    000056B0  B8 01000000       MOV      EAX,1
    000056B5  8B C8             MOV      ECX,EAX
    000056B7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000056BA  48                DEC      EAX
    000056BB  BB 0E000000       MOV      EBX,14
    000056C0  F7 E3             MUL      EBX
    000056C2  50                PUSH     EAX
    000056C3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000056C6  48                DEC      EAX
    000056C7  BB 02000000       MOV      EBX,2
    000056CC  F7 E3             MUL      EBX
    000056CE  5B                POP      EBX
    000056CF  03 C3             ADD      EAX,EBX
    000056D1  8B F8             MOV      EDI,EAX
    000056D3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3419

    000056D7  B8 01000000       MOV      EAX,1
    000056DC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3420

    000056DF  B8 01000000       MOV      EAX,1
    000056E4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3422

    000056E7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000056EE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000056F3  5B                POP      EBX

    LINE      3424

    000056F4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000056FB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00005700  5B                POP      EBX

    LINE      3426

    00005701  B8 0A000000       MOV      EAX,10
    00005706  40                INC      EAX
    00005707  50                PUSH     EAX
    00005708  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000570B  5B                POP      EBX
    0000570C  3B C3             CMP      EAX,EBX
    0000570E  0F 8503000000     JNE      3
    00005714  EB                JMP      

    LINE      3433

    00005715  B8 01000000       MOV      EAX,1
    0000571A  8B C8             MOV      ECX,EAX
    0000571C  B8 0A000000       MOV      EAX,10
    00005721  50                PUSH     EAX
    00005722  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00005725  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005728  5B                POP      EBX
    00005729  53                PUSH     EBX
    0000572A  3B C3             CMP      EAX,EBX
    0000572C  0F 8E03000000     JLE      3
    00005732  EB                JMP      

    LINE      3435

    00005733  B8 01000000       MOV      EAX,1
    00005738  8B C8             MOV      ECX,EAX
    0000573A  B8 05000000       MOV      EAX,5
    0000573F  50                PUSH     EAX
    00005740  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00005743  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005746  5B                POP      EBX
    00005747  53                PUSH     EBX
    00005748  3B C3             CMP      EAX,EBX
    0000574A  0F 8E03000000     JLE      3
    00005750  EB                JMP      

    LINE      3442

    00005751  B8 01000000       MOV      EAX,1
    00005756  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3443

    00005759  B8 01000000       MOV      EAX,1
    0000575E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3444

    00005761  B8 01000000       MOV      EAX,1
    00005766  8B C8             MOV      ECX,EAX
    00005768  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000576B  48                DEC      EAX
    0000576C  BB 0E000000       MOV      EBX,14
    00005771  F7 E3             MUL      EBX
    00005773  50                PUSH     EAX
    00005774  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005777  48                DEC      EAX
    00005778  BB 02000000       MOV      EBX,2
    0000577D  F7 E3             MUL      EBX
    0000577F  5B                POP      EBX
    00005780  03 C3             ADD      EAX,EBX
    00005782  8B F8             MOV      EDI,EAX
    00005784  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3445

    00005788  B8 01000000       MOV      EAX,1
    0000578D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3446

    00005790  B8 01000000       MOV      EAX,1
    00005795  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3448

    00005798  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000579F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000057A4  5B                POP      EBX

    LINE      3450

    000057A5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000057AC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000057B1  5B                POP      EBX

    LINE      3452

    000057B2  B8 0A000000       MOV      EAX,10
    000057B7  40                INC      EAX
    000057B8  50                PUSH     EAX
    000057B9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000057BC  5B                POP      EBX
    000057BD  3B C3             CMP      EAX,EBX
    000057BF  0F 8503000000     JNE      3
    000057C5  EB                JMP      

    LINE      3460

    000057C6  B8 01000000       MOV      EAX,1
    000057CB  8B C8             MOV      ECX,EAX
    000057CD  B8 0A000000       MOV      EAX,10
    000057D2  50                PUSH     EAX
    000057D3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000057D6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000057D9  5B                POP      EBX
    000057DA  53                PUSH     EBX
    000057DB  3B C3             CMP      EAX,EBX
    000057DD  0F 8E03000000     JLE      3
    000057E3  EB                JMP      

    LINE      3462

    000057E4  B8 01000000       MOV      EAX,1
    000057E9  8B C8             MOV      ECX,EAX
    000057EB  B8 05000000       MOV      EAX,5
    000057F0  50                PUSH     EAX
    000057F1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000057F4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000057F7  5B                POP      EBX
    000057F8  53                PUSH     EBX
    000057F9  3B C3             CMP      EAX,EBX
    000057FB  0F 8E03000000     JLE      3
    00005801  EB                JMP      

    LINE      3469

    00005802  B8 01000000       MOV      EAX,1
    00005807  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3470

    0000580D  B8 01000000       MOV      EAX,1
    00005812  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3471

    00005818  B8 01000000       MOV      EAX,1
    0000581D  8B C8             MOV      ECX,EAX
    0000581F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005822  48                DEC      EAX
    00005823  BB 0E000000       MOV      EBX,14
    00005828  F7 E3             MUL      EBX
    0000582A  50                PUSH     EAX
    0000582B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000582E  48                DEC      EAX
    0000582F  BB 02000000       MOV      EBX,2
    00005834  F7 E3             MUL      EBX
    00005836  5B                POP      EBX
    00005837  03 C3             ADD      EAX,EBX
    00005839  8B F8             MOV      EDI,EAX
    0000583B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3472

    00005842  B8 01000000       MOV      EAX,1
    00005847  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3473

    0000584D  B8 01000000       MOV      EAX,1
    00005852  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3475

    00005858  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000585F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005864  5B                POP      EBX

    LINE      3477

    00005865  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000586C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005871  5B                POP      EBX

    LINE      3479

    00005872  B8 0A000000       MOV      EAX,10
    00005877  40                INC      EAX
    00005878  50                PUSH     EAX
    00005879  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000587C  5B                POP      EBX
    0000587D  3B C3             CMP      EAX,EBX
    0000587F  0F 8503000000     JNE      3
    00005885  EB                JMP      

    LINE      3486

    00005886  B8 01000000       MOV      EAX,1
    0000588B  8B C8             MOV      ECX,EAX
    0000588D  B8 0A000000       MOV      EAX,10
    00005892  50                PUSH     EAX
    00005893  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00005896  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005899  5B                POP      EBX
    0000589A  53                PUSH     EBX
    0000589B  3B C3             CMP      EAX,EBX
    0000589D  0F 8E03000000     JLE      3
    000058A3  EB                JMP      

    LINE      3488

    000058A4  B8 01000000       MOV      EAX,1
    000058A9  8B C8             MOV      ECX,EAX
    000058AB  B8 05000000       MOV      EAX,5
    000058B0  50                PUSH     EAX
    000058B1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000058B4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000058B7  5B                POP      EBX
    000058B8  53                PUSH     EBX
    000058B9  3B C3             CMP      EAX,EBX
    000058BB  0F 8E03000000     JLE      3
    000058C1  EB                JMP      

    LINE      3495

    000058C2  B8 01000000       MOV      EAX,1
    000058C7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3496

    000058CD  B8 01000000       MOV      EAX,1
    000058D2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3497

    000058D8  B8 01000000       MOV      EAX,1
    000058DD  8B C8             MOV      ECX,EAX
    000058DF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000058E2  48                DEC      EAX
    000058E3  BB 0E000000       MOV      EBX,14
    000058E8  F7 E3             MUL      EBX
    000058EA  50                PUSH     EAX
    000058EB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000058EE  48                DEC      EAX
    000058EF  BB 02000000       MOV      EBX,2
    000058F4  F7 E3             MUL      EBX
    000058F6  5B                POP      EBX
    000058F7  03 C3             ADD      EAX,EBX
    000058F9  8B F8             MOV      EDI,EAX
    000058FB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3498

    00005902  B8 01000000       MOV      EAX,1
    00005907  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3499

    0000590D  B8 01000000       MOV      EAX,1
    00005912  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3501

    00005918  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000591F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005924  5B                POP      EBX

    LINE      3503

    00005925  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000592C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005931  5B                POP      EBX

    LINE      3505

    00005932  B8 0A000000       MOV      EAX,10
    00005937  40                INC      EAX
    00005938  50                PUSH     EAX
    00005939  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000593C  5B                POP      EBX
    0000593D  3B C3             CMP      EAX,EBX
    0000593F  0F 8503000000     JNE      3
    00005945  EB                JMP      

    LINE      3519

    00005946  56                PUSH     ESI
    00005947  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000594D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00005953  FF D1             CALL     ECX                       run_inner_proc
    00005955  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3521

    00005956  B8 01000000       MOV      EAX,1
    0000595B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3523

    0000595E  B8 01000000       MOV      EAX,1
    00005963  8B C8             MOV      ECX,EAX
    00005965  B8 0A000000       MOV      EAX,10
    0000596A  50                PUSH     EAX
    0000596B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000596E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005971  5B                POP      EBX
    00005972  53                PUSH     EBX
    00005973  3B C3             CMP      EAX,EBX
    00005975  0F 8E03000000     JLE      3
    0000597B  EB                JMP      

    LINE      3525

    0000597C  B8 01000000       MOV      EAX,1
    00005981  8B C8             MOV      ECX,EAX
    00005983  B8 05000000       MOV      EAX,5
    00005988  50                PUSH     EAX
    00005989  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000598C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000598F  5B                POP      EBX
    00005990  53                PUSH     EBX
    00005991  3B C3             CMP      EAX,EBX
    00005993  0F 8E03000000     JLE      3
    00005999  EB                JMP      

    LINE      3532

    0000599A  B8 01000000       MOV      EAX,1
    0000599F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3533

    000059A2  B8 01000000       MOV      EAX,1
    000059A7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3534

    000059AA  B8 01000000       MOV      EAX,1
    000059AF  8B C8             MOV      ECX,EAX
    000059B1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000059B4  48                DEC      EAX
    000059B5  BB 0E000000       MOV      EBX,14
    000059BA  F7 E3             MUL      EBX
    000059BC  50                PUSH     EAX
    000059BD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000059C0  48                DEC      EAX
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   6


    000059C1  BB 02000000       MOV      EBX,2
    000059C6  F7 E3             MUL      EBX
    000059C8  5B                POP      EBX
    000059C9  03 C3             ADD      EAX,EBX
    000059CB  8B F8             MOV      EDI,EAX
    000059CD  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3535

    000059D1  B8 01000000       MOV      EAX,1
    000059D6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3536

    000059D9  B8 01000000       MOV      EAX,1
    000059DE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3538

    000059E1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000059E8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000059ED  5B                POP      EBX

    LINE      3540

    000059EE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000059F5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000059FA  5B                POP      EBX

    LINE      3542

    000059FB  B8 0A000000       MOV      EAX,10
    00005A00  40                INC      EAX
    00005A01  50                PUSH     EAX
    00005A02  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005A05  5B                POP      EBX
    00005A06  3B C3             CMP      EAX,EBX
    00005A08  0F 8503000000     JNE      3
    00005A0E  EB                JMP      

    LINE      3549

    00005A0F  B8 01000000       MOV      EAX,1
    00005A14  8B C8             MOV      ECX,EAX
    00005A16  B8 0A000000       MOV      EAX,10
    00005A1B  50                PUSH     EAX
    00005A1C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00005A1F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005A22  5B                POP      EBX
    00005A23  53                PUSH     EBX
    00005A24  3B C3             CMP      EAX,EBX
    00005A26  0F 8E03000000     JLE      3
    00005A2C  EB                JMP      

    LINE      3551

    00005A2D  B8 01000000       MOV      EAX,1
    00005A32  8B C8             MOV      ECX,EAX
    00005A34  B8 05000000       MOV      EAX,5
    00005A39  50                PUSH     EAX
    00005A3A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00005A3D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005A40  5B                POP      EBX
    00005A41  53                PUSH     EBX
    00005A42  3B C3             CMP      EAX,EBX
    00005A44  0F 8E03000000     JLE      3
    00005A4A  EB                JMP      

    LINE      3558

    00005A4B  B8 01000000       MOV      EAX,1
    00005A50  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3559

    00005A53  B8 01000000       MOV      EAX,1
    00005A58  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3560

    00005A5B  B8 01000000       MOV      EAX,1
    00005A60  8B C8             MOV      ECX,EAX
    00005A62  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005A65  48                DEC      EAX
    00005A66  BB 0E000000       MOV      EBX,14
    00005A6B  F7 E3             MUL      EBX
    00005A6D  50                PUSH     EAX
    00005A6E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005A71  48                DEC      EAX
    00005A72  BB 02000000       MOV      EBX,2
    00005A77  F7 E3             MUL      EBX
    00005A79  5B                POP      EBX
    00005A7A  03 C3             ADD      EAX,EBX
    00005A7C  8B F8             MOV      EDI,EAX
    00005A7E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3561

    00005A82  B8 01000000       MOV      EAX,1
    00005A87  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3562

    00005A8A  B8 01000000       MOV      EAX,1
    00005A8F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3564

    00005A92  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00005A99  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00005A9E  5B                POP      EBX

    LINE      3566

    00005A9F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00005AA6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00005AAB  5B                POP      EBX

    LINE      3568

    00005AAC  B8 0A000000       MOV      EAX,10
    00005AB1  40                INC      EAX
    00005AB2  50                PUSH     EAX
    00005AB3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005AB6  5B                POP      EBX
    00005AB7  3B C3             CMP      EAX,EBX
    00005AB9  0F 8503000000     JNE      3
    00005ABF  EB                JMP      

    LINE      3576

    00005AC0  B8 01000000       MOV      EAX,1
    00005AC5  8B C8             MOV      ECX,EAX
    00005AC7  B8 0A000000       MOV      EAX,10
    00005ACC  50                PUSH     EAX
    00005ACD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00005AD0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005AD3  5B                POP      EBX
    00005AD4  53                PUSH     EBX
    00005AD5  3B C3             CMP      EAX,EBX
    00005AD7  0F 8E03000000     JLE      3
    00005ADD  EB                JMP      

    LINE      3578

    00005ADE  B8 01000000       MOV      EAX,1
    00005AE3  8B C8             MOV      ECX,EAX
    00005AE5  B8 05000000       MOV      EAX,5
    00005AEA  50                PUSH     EAX
    00005AEB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00005AEE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005AF1  5B                POP      EBX
    00005AF2  53                PUSH     EBX
    00005AF3  3B C3             CMP      EAX,EBX
    00005AF5  0F 8E03000000     JLE      3
    00005AFB  EB                JMP      

    LINE      3585

    00005AFC  B8 01000000       MOV      EAX,1
    00005B01  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3586

    00005B07  B8 01000000       MOV      EAX,1
    00005B0C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3587

    00005B12  B8 01000000       MOV      EAX,1
    00005B17  8B C8             MOV      ECX,EAX
    00005B19  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005B1C  48                DEC      EAX
    00005B1D  BB 0E000000       MOV      EBX,14
    00005B22  F7 E3             MUL      EBX
    00005B24  50                PUSH     EAX
    00005B25  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005B28  48                DEC      EAX
    00005B29  BB 02000000       MOV      EBX,2
    00005B2E  F7 E3             MUL      EBX
    00005B30  5B                POP      EBX
    00005B31  03 C3             ADD      EAX,EBX
    00005B33  8B F8             MOV      EDI,EAX
    00005B35  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3588

    00005B3C  B8 01000000       MOV      EAX,1
    00005B41  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3589

    00005B47  B8 01000000       MOV      EAX,1
    00005B4C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3591

    00005B52  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00005B59  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005B5E  5B                POP      EBX

    LINE      3593

    00005B5F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005B66  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005B6B  5B                POP      EBX

    LINE      3595

    00005B6C  B8 0A000000       MOV      EAX,10
    00005B71  40                INC      EAX
    00005B72  50                PUSH     EAX
    00005B73  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005B76  5B                POP      EBX
    00005B77  3B C3             CMP      EAX,EBX
    00005B79  0F 8503000000     JNE      3
    00005B7F  EB                JMP      

    LINE      3602

    00005B80  B8 01000000       MOV      EAX,1
    00005B85  8B C8             MOV      ECX,EAX
    00005B87  B8 0A000000       MOV      EAX,10
    00005B8C  50                PUSH     EAX
    00005B8D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00005B90  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005B93  5B                POP      EBX
    00005B94  53                PUSH     EBX
    00005B95  3B C3             CMP      EAX,EBX
    00005B97  0F 8E03000000     JLE      3
    00005B9D  EB                JMP      

    LINE      3604

    00005B9E  B8 01000000       MOV      EAX,1
    00005BA3  8B C8             MOV      ECX,EAX
    00005BA5  B8 05000000       MOV      EAX,5
    00005BAA  50                PUSH     EAX
    00005BAB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00005BAE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005BB1  5B                POP      EBX
    00005BB2  53                PUSH     EBX
    00005BB3  3B C3             CMP      EAX,EBX
    00005BB5  0F 8E03000000     JLE      3
    00005BBB  EB                JMP      

    LINE      3611

    00005BBC  B8 01000000       MOV      EAX,1
    00005BC1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3612

    00005BC7  B8 01000000       MOV      EAX,1
    00005BCC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3613

    00005BD2  B8 01000000       MOV      EAX,1
    00005BD7  8B C8             MOV      ECX,EAX
    00005BD9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005BDC  48                DEC      EAX
    00005BDD  BB 0E000000       MOV      EBX,14
    00005BE2  F7 E3             MUL      EBX
    00005BE4  50                PUSH     EAX
    00005BE5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005BE8  48                DEC      EAX
    00005BE9  BB 02000000       MOV      EBX,2
    00005BEE  F7 E3             MUL      EBX
    00005BF0  5B                POP      EBX
    00005BF1  03 C3             ADD      EAX,EBX
    00005BF3  8B F8             MOV      EDI,EAX
    00005BF5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3614

    00005BFC  B8 01000000       MOV      EAX,1
    00005C01  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3615

    00005C07  B8 01000000       MOV      EAX,1
    00005C0C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3617

    00005C12  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00005C19  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005C1E  5B                POP      EBX

    LINE      3619

    00005C1F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00005C26  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005C2B  5B                POP      EBX

    LINE      3621

    00005C2C  B8 0A000000       MOV      EAX,10
    00005C31  40                INC      EAX
    00005C32  50                PUSH     EAX
    00005C33  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005C36  5B                POP      EBX
    00005C37  3B C3             CMP      EAX,EBX
    00005C39  0F 8503000000     JNE      3
    00005C3F  EB                JMP      

    LINE      3635

    00005C40  56                PUSH     ESI
    00005C41  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00005C47  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00005C4D  FF D1             CALL     ECX                       run_inner_proc
    00005C4F  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3637

    00005C50  B8 01000000       MOV      EAX,1
    00005C55  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3639

    00005C58  B8 01000000       MOV      EAX,1
    00005C5D  8B C8             MOV      ECX,EAX
    00005C5F  B8 0A000000       MOV      EAX,10
    00005C64  50                PUSH     EAX
    00005C65  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00005C68  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005C6B  5B                POP      EBX
    00005C6C  53                PUSH     EBX
    00005C6D  3B C3             CMP      EAX,EBX
    00005C6F  0F 8E03000000     JLE      3
    00005C75  EB                JMP      

    LINE      3641

    00005C76  B8 01000000       MOV      EAX,1
    00005C7B  8B C8             MOV      ECX,EAX
    00005C7D  B8 05000000       MOV      EAX,5
    00005C82  50                PUSH     EAX
    00005C83  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00005C86  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005C89  5B                POP      EBX
    00005C8A  53                PUSH     EBX
    00005C8B  3B C3             CMP      EAX,EBX
    00005C8D  0F 8E03000000     JLE      3
    00005C93  EB                JMP      

    LINE      3648

    00005C94  B8 01000000       MOV      EAX,1
    00005C99  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3649

    00005C9C  B8 01000000       MOV      EAX,1
    00005CA1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3650

    00005CA4  B8 01000000       MOV      EAX,1
    00005CA9  8B C8             MOV      ECX,EAX
    00005CAB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005CAE  48                DEC      EAX
    00005CAF  BB 0E000000       MOV      EBX,14
    00005CB4  F7 E3             MUL      EBX
    00005CB6  50                PUSH     EAX
    00005CB7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005CBA  48                DEC      EAX
    00005CBB  BB 02000000       MOV      EBX,2
    00005CC0  F7 E3             MUL      EBX
    00005CC2  5B                POP      EBX
    00005CC3  03 C3             ADD      EAX,EBX
    00005CC5  8B F8             MOV      EDI,EAX
    00005CC7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3651

    00005CCB  B8 01000000       MOV      EAX,1
    00005CD0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3652

    00005CD3  B8 01000000       MOV      EAX,1
    00005CD8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3654

    00005CDB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00005CE2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00005CE7  5B                POP      EBX

    LINE      3656

    00005CE8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005CEF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00005CF4  5B                POP      EBX

    LINE      3658

    00005CF5  B8 0A000000       MOV      EAX,10
    00005CFA  40                INC      EAX
    00005CFB  50                PUSH     EAX
    00005CFC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005CFF  5B                POP      EBX
    00005D00  3B C3             CMP      EAX,EBX
    00005D02  0F 8503000000     JNE      3
    00005D08  EB                JMP      

    LINE      3665

    00005D09  B8 01000000       MOV      EAX,1
    00005D0E  8B C8             MOV      ECX,EAX
    00005D10  B8 0A000000       MOV      EAX,10
    00005D15  50                PUSH     EAX
    00005D16  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00005D19  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005D1C  5B                POP      EBX
    00005D1D  53                PUSH     EBX
    00005D1E  3B C3             CMP      EAX,EBX
    00005D20  0F 8E03000000     JLE      3
    00005D26  EB                JMP      

    LINE      3667

    00005D27  B8 01000000       MOV      EAX,1
    00005D2C  8B C8             MOV      ECX,EAX
    00005D2E  B8 05000000       MOV      EAX,5
    00005D33  50                PUSH     EAX
    00005D34  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00005D37  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005D3A  5B                POP      EBX
    00005D3B  53                PUSH     EBX
    00005D3C  3B C3             CMP      EAX,EBX
    00005D3E  0F 8E03000000     JLE      3
    00005D44  EB                JMP      

    LINE      3674

    00005D45  B8 01000000       MOV      EAX,1
    00005D4A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3675

    00005D4D  B8 01000000       MOV      EAX,1
    00005D52  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3676

    00005D55  B8 01000000       MOV      EAX,1
    00005D5A  8B C8             MOV      ECX,EAX
    00005D5C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005D5F  48                DEC      EAX
    00005D60  BB 0E000000       MOV      EBX,14
    00005D65  F7 E3             MUL      EBX
    00005D67  50                PUSH     EAX
    00005D68  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005D6B  48                DEC      EAX
    00005D6C  BB 02000000       MOV      EBX,2
    00005D71  F7 E3             MUL      EBX
    00005D73  5B                POP      EBX
    00005D74  03 C3             ADD      EAX,EBX
    00005D76  8B F8             MOV      EDI,EAX
    00005D78  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3677

    00005D7C  B8 01000000       MOV      EAX,1
    00005D81  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3678

    00005D84  B8 01000000       MOV      EAX,1
    00005D89  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3680

    00005D8C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00005D93  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00005D98  5B                POP      EBX

    LINE      3682

    00005D99  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00005DA0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00005DA5  5B                POP      EBX

    LINE      3684

    00005DA6  B8 0A000000       MOV      EAX,10
    00005DAB  40                INC      EAX
    00005DAC  50                PUSH     EAX
    00005DAD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005DB0  5B                POP      EBX
    00005DB1  3B C3             CMP      EAX,EBX
    00005DB3  0F 8503000000     JNE      3
    00005DB9  EB                JMP      

    LINE      3692

    00005DBA  B8 01000000       MOV      EAX,1
    00005DBF  8B C8             MOV      ECX,EAX
    00005DC1  B8 0A000000       MOV      EAX,10
    00005DC6  50                PUSH     EAX
    00005DC7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00005DCA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005DCD  5B                POP      EBX
    00005DCE  53                PUSH     EBX
    00005DCF  3B C3             CMP      EAX,EBX
    00005DD1  0F 8E03000000     JLE      3
    00005DD7  EB                JMP      

    LINE      3694

    00005DD8  B8 01000000       MOV      EAX,1
    00005DDD  8B C8             MOV      ECX,EAX
    00005DDF  B8 05000000       MOV      EAX,5
    00005DE4  50                PUSH     EAX
    00005DE5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00005DE8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005DEB  5B                POP      EBX
    00005DEC  53                PUSH     EBX
    00005DED  3B C3             CMP      EAX,EBX
    00005DEF  0F 8E03000000     JLE      3
    00005DF5  EB                JMP      

    LINE      3701

    00005DF6  B8 01000000       MOV      EAX,1
    00005DFB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3702

    00005E01  B8 01000000       MOV      EAX,1
    00005E06  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3703

    00005E0C  B8 01000000       MOV      EAX,1
    00005E11  8B C8             MOV      ECX,EAX
    00005E13  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005E16  48                DEC      EAX
    00005E17  BB 0E000000       MOV      EBX,14
    00005E1C  F7 E3             MUL      EBX
    00005E1E  50                PUSH     EAX
    00005E1F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005E22  48                DEC      EAX
    00005E23  BB 02000000       MOV      EBX,2
    00005E28  F7 E3             MUL      EBX
    00005E2A  5B                POP      EBX
    00005E2B  03 C3             ADD      EAX,EBX
    00005E2D  8B F8             MOV      EDI,EAX
    00005E2F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3704

    00005E36  B8 01000000       MOV      EAX,1
    00005E3B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3705

    00005E41  B8 01000000       MOV      EAX,1
    00005E46  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3707

    00005E4C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00005E53  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005E58  5B                POP      EBX

    LINE      3709

    00005E59  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005E60  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005E65  5B                POP      EBX

    LINE      3711

    00005E66  B8 0A000000       MOV      EAX,10
    00005E6B  40                INC      EAX
    00005E6C  50                PUSH     EAX
    00005E6D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005E70  5B                POP      EBX
    00005E71  3B C3             CMP      EAX,EBX
    00005E73  0F 8503000000     JNE      3
    00005E79  EB                JMP      

    LINE      3718

    00005E7A  B8 01000000       MOV      EAX,1
    00005E7F  8B C8             MOV      ECX,EAX
    00005E81  B8 0A000000       MOV      EAX,10
    00005E86  50                PUSH     EAX
    00005E87  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00005E8A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005E8D  5B                POP      EBX
    00005E8E  53                PUSH     EBX
    00005E8F  3B C3             CMP      EAX,EBX
    00005E91  0F 8E03000000     JLE      3
    00005E97  EB                JMP      

    LINE      3720

    00005E98  B8 01000000       MOV      EAX,1
    00005E9D  8B C8             MOV      ECX,EAX
    00005E9F  B8 05000000       MOV      EAX,5
    00005EA4  50                PUSH     EAX
    00005EA5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00005EA8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005EAB  5B                POP      EBX
    00005EAC  53                PUSH     EBX
    00005EAD  3B C3             CMP      EAX,EBX
    00005EAF  0F 8E03000000     JLE      3
    00005EB5  EB                JMP      

    LINE      3727

    00005EB6  B8 01000000       MOV      EAX,1
    00005EBB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3728

    00005EC1  B8 01000000       MOV      EAX,1
    00005EC6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3729

    00005ECC  B8 01000000       MOV      EAX,1
    00005ED1  8B C8             MOV      ECX,EAX
    00005ED3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00005ED6  48                DEC      EAX
    00005ED7  BB 0E000000       MOV      EBX,14
    00005EDC  F7 E3             MUL      EBX
    00005EDE  50                PUSH     EAX
    00005EDF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00005EE2  48                DEC      EAX
    00005EE3  BB 02000000       MOV      EBX,2
    00005EE8  F7 E3             MUL      EBX
    00005EEA  5B                POP      EBX
    00005EEB  03 C3             ADD      EAX,EBX
    00005EED  8B F8             MOV      EDI,EAX
    00005EEF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3730

    00005EF6  B8 01000000       MOV      EAX,1
    00005EFB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3731

    00005F01  B8 01000000       MOV      EAX,1
    00005F06  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3733

    00005F0C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00005F13  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00005F18  5B                POP      EBX

    LINE      3735

    00005F19  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00005F20  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00005F25  5B                POP      EBX

    LINE      3737

    00005F26  B8 0A000000       MOV      EAX,10
    00005F2B  40                INC      EAX
    00005F2C  50                PUSH     EAX
    00005F2D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005F30  5B                POP      EBX
    00005F31  3B C3             CMP      EAX,EBX
    00005F33  0F 8503000000     JNE      3
    00005F39  EB                JMP      

    LINE      3751

    00005F3A  56                PUSH     ESI
    00005F3B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00005F41  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00005F47  FF D1             CALL     ECX                       run_inner_proc
    00005F49  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3753

    00005F4A  B8 01000000       MOV      EAX,1
    00005F4F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3755

    00005F52  B8 01000000       MOV      EAX,1
    00005F57  8B C8             MOV      ECX,EAX
    00005F59  B8 0A000000       MOV      EAX,10
    00005F5E  50                PUSH     EAX
    00005F5F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00005F62  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005F65  5B                POP      EBX
    00005F66  53                PUSH     EBX
    00005F67  3B C3             CMP      EAX,EBX
    00005F69  0F 8E03000000     JLE      3
    00005F6F  EB                JMP      

    LINE      3757

    00005F70  B8 01000000       MOV      EAX,1
    00005F75  8B C8             MOV      ECX,EAX
    00005F77  B8 05000000       MOV      EAX,5
    00005F7C  50                PUSH     EAX
    00005F7D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00005F80  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005F83  5B                POP      EBX
    00005F84  53                PUSH     EBX
    00005F85  3B C3             CMP      EAX,EBX
    00005F87  0F 8E03000000     JLE      3
    00005F8D  EB                JMP      

    LINE      3764

    00005F8E  B8 01000000       MOV      EAX,1
    00005F93  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3765

    00005F96  B8 01000000       MOV      EAX,1
    00005F9B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3766

    00005F9E  B8 01000000       MOV      EAX,1
    00005FA3  8B C8             MOV      ECX,EAX
    00005FA5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005FA8  48                DEC      EAX
    00005FA9  BB 0E000000       MOV      EBX,14
    00005FAE  F7 E3             MUL      EBX
    00005FB0  50                PUSH     EAX
    00005FB1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00005FB4  48                DEC      EAX
    00005FB5  BB 02000000       MOV      EBX,2
    00005FBA  F7 E3             MUL      EBX
    00005FBC  5B                POP      EBX
    00005FBD  03 C3             ADD      EAX,EBX
    00005FBF  8B F8             MOV      EDI,EAX
    00005FC1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3767

    00005FC5  B8 01000000       MOV      EAX,1
    00005FCA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3768

    00005FCD  B8 01000000       MOV      EAX,1
    00005FD2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3770

    00005FD5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00005FDC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00005FE1  5B                POP      EBX

    LINE      3772

    00005FE2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00005FE9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00005FEE  5B                POP      EBX

    LINE      3774

    00005FEF  B8 0A000000       MOV      EAX,10
    00005FF4  40                INC      EAX
    00005FF5  50                PUSH     EAX
    00005FF6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00005FF9  5B                POP      EBX
    00005FFA  3B C3             CMP      EAX,EBX
    00005FFC  0F 8503000000     JNE      3
    00006002  EB                JMP      

    LINE      3781

    00006003  B8 01000000       MOV      EAX,1
    00006008  8B C8             MOV      ECX,EAX
    0000600A  B8 0A000000       MOV      EAX,10
    0000600F  50                PUSH     EAX
    00006010  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006013  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006016  5B                POP      EBX
    00006017  53                PUSH     EBX
    00006018  3B C3             CMP      EAX,EBX
    0000601A  0F 8E03000000     JLE      3
    00006020  EB                JMP      

    LINE      3783

    00006021  B8 01000000       MOV      EAX,1
    00006026  8B C8             MOV      ECX,EAX
    00006028  B8 05000000       MOV      EAX,5
    0000602D  50                PUSH     EAX
    0000602E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00006031  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006034  5B                POP      EBX
    00006035  53                PUSH     EBX
    00006036  3B C3             CMP      EAX,EBX
    00006038  0F 8E03000000     JLE      3
    0000603E  EB                JMP      

    LINE      3790

    0000603F  B8 01000000       MOV      EAX,1
    00006044  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3791

    00006047  B8 01000000       MOV      EAX,1
    0000604C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3792

    0000604F  B8 01000000       MOV      EAX,1
    00006054  8B C8             MOV      ECX,EAX
    00006056  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006059  48                DEC      EAX
    0000605A  BB 0E000000       MOV      EBX,14
    0000605F  F7 E3             MUL      EBX
    00006061  50                PUSH     EAX
    00006062  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006065  48                DEC      EAX
    00006066  BB 02000000       MOV      EBX,2
    0000606B  F7 E3             MUL      EBX
    0000606D  5B                POP      EBX
    0000606E  03 C3             ADD      EAX,EBX
    00006070  8B F8             MOV      EDI,EAX
    00006072  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3793

    00006076  B8 01000000       MOV      EAX,1
    0000607B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3794

    0000607E  B8 01000000       MOV      EAX,1
    00006083  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3796

    00006086  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000608D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00006092  5B                POP      EBX

    LINE      3798

    00006093  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000609A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000609F  5B                POP      EBX

    LINE      3800

    000060A0  B8 0A000000       MOV      EAX,10
    000060A5  40                INC      EAX
    000060A6  50                PUSH     EAX
    000060A7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000060AA  5B                POP      EBX
    000060AB  3B C3             CMP      EAX,EBX
    000060AD  0F 8503000000     JNE      3
    000060B3  EB                JMP      

    LINE      3808

    000060B4  B8 01000000       MOV      EAX,1
    000060B9  8B C8             MOV      ECX,EAX
    000060BB  B8 0A000000       MOV      EAX,10
    000060C0  50                PUSH     EAX
    000060C1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000060C4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000060C7  5B                POP      EBX
    000060C8  53                PUSH     EBX
    000060C9  3B C3             CMP      EAX,EBX
    000060CB  0F 8E03000000     JLE      3
    000060D1  EB                JMP      

    LINE      3810

    000060D2  B8 01000000       MOV      EAX,1
    000060D7  8B C8             MOV      ECX,EAX
    000060D9  B8 05000000       MOV      EAX,5
    000060DE  50                PUSH     EAX
    000060DF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000060E2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000060E5  5B                POP      EBX
    000060E6  53                PUSH     EBX
    000060E7  3B C3             CMP      EAX,EBX
    000060E9  0F 8E03000000     JLE      3
    000060EF  EB                JMP      

    LINE      3817

    000060F0  B8 01000000       MOV      EAX,1
    000060F5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3818

    000060FB  B8 01000000       MOV      EAX,1
    00006100  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3819

    00006106  B8 01000000       MOV      EAX,1
    0000610B  8B C8             MOV      ECX,EAX
    0000610D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006110  48                DEC      EAX
    00006111  BB 0E000000       MOV      EBX,14
    00006116  F7 E3             MUL      EBX
    00006118  50                PUSH     EAX
    00006119  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000611C  48                DEC      EAX
    0000611D  BB 02000000       MOV      EBX,2
    00006122  F7 E3             MUL      EBX
    00006124  5B                POP      EBX
    00006125  03 C3             ADD      EAX,EBX
    00006127  8B F8             MOV      EDI,EAX
    00006129  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3820

    00006130  B8 01000000       MOV      EAX,1
    00006135  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3821

    0000613B  B8 01000000       MOV      EAX,1
    00006140  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3823

    00006146  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000614D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006152  5B                POP      EBX

    LINE      3825

    00006153  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000615A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000615F  5B                POP      EBX

    LINE      3827

    00006160  B8 0A000000       MOV      EAX,10
    00006165  40                INC      EAX
    00006166  50                PUSH     EAX
    00006167  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000616A  5B                POP      EBX
    0000616B  3B C3             CMP      EAX,EBX
    0000616D  0F 8503000000     JNE      3
    00006173  EB                JMP      

    LINE      3834

    00006174  B8 01000000       MOV      EAX,1
    00006179  8B C8             MOV      ECX,EAX
    0000617B  B8 0A000000       MOV      EAX,10
    00006180  50                PUSH     EAX
    00006181  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006184  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006187  5B                POP      EBX
    00006188  53                PUSH     EBX
    00006189  3B C3             CMP      EAX,EBX
    0000618B  0F 8E03000000     JLE      3
    00006191  EB                JMP      

    LINE      3836

    00006192  B8 01000000       MOV      EAX,1
    00006197  8B C8             MOV      ECX,EAX
    00006199  B8 05000000       MOV      EAX,5
    0000619E  50                PUSH     EAX
    0000619F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000061A2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000061A5  5B                POP      EBX
    000061A6  53                PUSH     EBX
    000061A7  3B C3             CMP      EAX,EBX
    000061A9  0F 8E03000000     JLE      3
    000061AF  EB                JMP      

    LINE      3843

    000061B0  B8 01000000       MOV      EAX,1
    000061B5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3844

    000061BB  B8 01000000       MOV      EAX,1
    000061C0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3845

    000061C6  B8 01000000       MOV      EAX,1
    000061CB  8B C8             MOV      ECX,EAX
    000061CD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000061D0  48                DEC      EAX
    000061D1  BB 0E000000       MOV      EBX,14
    000061D6  F7 E3             MUL      EBX
    000061D8  50                PUSH     EAX
    000061D9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000061DC  48                DEC      EAX
    000061DD  BB 02000000       MOV      EBX,2
    000061E2  F7 E3             MUL      EBX
    000061E4  5B                POP      EBX
    000061E5  03 C3             ADD      EAX,EBX
    000061E7  8B F8             MOV      EDI,EAX
    000061E9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3846

    000061F0  B8 01000000       MOV      EAX,1
    000061F5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3847

    000061FB  B8 01000000       MOV      EAX,1
    00006200  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3849

    00006206  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000620D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006212  5B                POP      EBX

    LINE      3851

    00006213  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000621A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000621F  5B                POP      EBX

    LINE      3853

    00006220  B8 0A000000       MOV      EAX,10
    00006225  40                INC      EAX
    00006226  50                PUSH     EAX
    00006227  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000622A  5B                POP      EBX
    0000622B  3B C3             CMP      EAX,EBX
    0000622D  0F 8503000000     JNE      3
    00006233  EB                JMP      

    LINE      3867

    00006234  56                PUSH     ESI
    00006235  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000623B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00006241  FF D1             CALL     ECX                       run_inner_proc
    00006243  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3869

    00006244  B8 01000000       MOV      EAX,1
    00006249  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3871

    0000624C  B8 01000000       MOV      EAX,1
    00006251  8B C8             MOV      ECX,EAX
    00006253  B8 0A000000       MOV      EAX,10
    00006258  50                PUSH     EAX
    00006259  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000625C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000625F  5B                POP      EBX
    00006260  53                PUSH     EBX
    00006261  3B C3             CMP      EAX,EBX
    00006263  0F 8E03000000     JLE      3
    00006269  EB                JMP      

    LINE      3873

    0000626A  B8 01000000       MOV      EAX,1
    0000626F  8B C8             MOV      ECX,EAX
    00006271  B8 05000000       MOV      EAX,5
    00006276  50                PUSH     EAX
    00006277  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000627A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000627D  5B                POP      EBX
    0000627E  53                PUSH     EBX
    0000627F  3B C3             CMP      EAX,EBX
    00006281  0F 8E03000000     JLE      3
    00006287  EB                JMP      

    LINE      3880

    00006288  B8 01000000       MOV      EAX,1
    0000628D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3881

    00006290  B8 01000000       MOV      EAX,1
    00006295  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3882

    00006298  B8 01000000       MOV      EAX,1
    0000629D  8B C8             MOV      ECX,EAX
    0000629F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000062A2  48                DEC      EAX
    000062A3  BB 0E000000       MOV      EBX,14
    000062A8  F7 E3             MUL      EBX
    000062AA  50                PUSH     EAX
    000062AB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000062AE  48                DEC      EAX
    000062AF  BB 02000000       MOV      EBX,2
    000062B4  F7 E3             MUL      EBX
    000062B6  5B                POP      EBX
    000062B7  03 C3             ADD      EAX,EBX
    000062B9  8B F8             MOV      EDI,EAX
    000062BB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3883

    000062BF  B8 01000000       MOV      EAX,1
    000062C4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3884

    000062C7  B8 01000000       MOV      EAX,1
    000062CC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3886

    000062CF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000062D6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000062DB  5B                POP      EBX

    LINE      3888

    000062DC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000062E3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000062E8  5B                POP      EBX

    LINE      3890

    000062E9  B8 0A000000       MOV      EAX,10
    000062EE  40                INC      EAX
    000062EF  50                PUSH     EAX
    000062F0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000062F3  5B                POP      EBX
    000062F4  3B C3             CMP      EAX,EBX
    000062F6  0F 8503000000     JNE      3
    000062FC  EB                JMP      

    LINE      3897

    000062FD  B8 01000000       MOV      EAX,1
    00006302  8B C8             MOV      ECX,EAX
    00006304  B8 0A000000       MOV      EAX,10
    00006309  50                PUSH     EAX
    0000630A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000630D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006310  5B                POP      EBX
    00006311  53                PUSH     EBX
    00006312  3B C3             CMP      EAX,EBX
    00006314  0F 8E03000000     JLE      3
    0000631A  EB                JMP      

    LINE      3899

    0000631B  B8 01000000       MOV      EAX,1
    00006320  8B C8             MOV      ECX,EAX
    00006322  B8 05000000       MOV      EAX,5
    00006327  50                PUSH     EAX
    00006328  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000632B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000632E  5B                POP      EBX
    0000632F  53                PUSH     EBX
    00006330  3B C3             CMP      EAX,EBX
    00006332  0F 8E03000000     JLE      3
    00006338  EB                JMP      

    LINE      3906

    00006339  B8 01000000       MOV      EAX,1
    0000633E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3907

    00006341  B8 01000000       MOV      EAX,1
    00006346  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3908

    00006349  B8 01000000       MOV      EAX,1
    0000634E  8B C8             MOV      ECX,EAX
    00006350  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006353  48                DEC      EAX
    00006354  BB 0E000000       MOV      EBX,14
    00006359  F7 E3             MUL      EBX
    0000635B  50                PUSH     EAX
    0000635C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000635F  48                DEC      EAX
    00006360  BB 02000000       MOV      EBX,2
    00006365  F7 E3             MUL      EBX
    00006367  5B                POP      EBX
    00006368  03 C3             ADD      EAX,EBX
    0000636A  8B F8             MOV      EDI,EAX
    0000636C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3909

    00006370  B8 01000000       MOV      EAX,1
    00006375  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3910

    00006378  B8 01000000       MOV      EAX,1
    0000637D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3912

    00006380  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006387  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000638C  5B                POP      EBX

    LINE      3914

    0000638D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00006394  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00006399  5B                POP      EBX

    LINE      3916

    0000639A  B8 0A000000       MOV      EAX,10
    0000639F  40                INC      EAX
    000063A0  50                PUSH     EAX
    000063A1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000063A4  5B                POP      EBX
    000063A5  3B C3             CMP      EAX,EBX
    000063A7  0F 8503000000     JNE      3
    000063AD  EB                JMP      

    LINE      3924

    000063AE  B8 01000000       MOV      EAX,1
    000063B3  8B C8             MOV      ECX,EAX
    000063B5  B8 0A000000       MOV      EAX,10
    000063BA  50                PUSH     EAX
    000063BB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000063BE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000063C1  5B                POP      EBX
    000063C2  53                PUSH     EBX
    000063C3  3B C3             CMP      EAX,EBX
    000063C5  0F 8E03000000     JLE      3
    000063CB  EB                JMP      

    LINE      3926

    000063CC  B8 01000000       MOV      EAX,1
    000063D1  8B C8             MOV      ECX,EAX
    000063D3  B8 05000000       MOV      EAX,5
    000063D8  50                PUSH     EAX
    000063D9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000063DC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000063DF  5B                POP      EBX
    000063E0  53                PUSH     EBX
    000063E1  3B C3             CMP      EAX,EBX
    000063E3  0F 8E03000000     JLE      3
    000063E9  EB                JMP      

    LINE      3933

    000063EA  B8 01000000       MOV      EAX,1
    000063EF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3934

    000063F5  B8 01000000       MOV      EAX,1
    000063FA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3935

    00006400  B8 01000000       MOV      EAX,1
    00006405  8B C8             MOV      ECX,EAX
    00006407  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000640A  48                DEC      EAX
    0000640B  BB 0E000000       MOV      EBX,14
    00006410  F7 E3             MUL      EBX
    00006412  50                PUSH     EAX
    00006413  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006416  48                DEC      EAX
    00006417  BB 02000000       MOV      EBX,2
    0000641C  F7 E3             MUL      EBX
    0000641E  5B                POP      EBX
    0000641F  03 C3             ADD      EAX,EBX
    00006421  8B F8             MOV      EDI,EAX
    00006423  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3936

    0000642A  B8 01000000       MOV      EAX,1
    0000642F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3937

    00006435  B8 01000000       MOV      EAX,1
    0000643A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3939

    00006440  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00006447  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000644C  5B                POP      EBX

    LINE      3941

    0000644D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00006454  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006459  5B                POP      EBX

    LINE      3943

    0000645A  B8 0A000000       MOV      EAX,10
    0000645F  40                INC      EAX
    00006460  50                PUSH     EAX
    00006461  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006464  5B                POP      EBX
    00006465  3B C3             CMP      EAX,EBX
    00006467  0F 8503000000     JNE      3
    0000646D  EB                JMP      

    LINE      3950

    0000646E  B8 01000000       MOV      EAX,1
    00006473  8B C8             MOV      ECX,EAX
    00006475  B8 0A000000       MOV      EAX,10
    0000647A  50                PUSH     EAX
    0000647B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000647E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006481  5B                POP      EBX
    00006482  53                PUSH     EBX
    00006483  3B C3             CMP      EAX,EBX
    00006485  0F 8E03000000     JLE      3
    0000648B  EB                JMP      

    LINE      3952

    0000648C  B8 01000000       MOV      EAX,1
    00006491  8B C8             MOV      ECX,EAX
    00006493  B8 05000000       MOV      EAX,5
    00006498  50                PUSH     EAX
    00006499  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000649C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000649F  5B                POP      EBX
    000064A0  53                PUSH     EBX
    000064A1  3B C3             CMP      EAX,EBX
    000064A3  0F 8E03000000     JLE      3
    000064A9  EB                JMP      

    LINE      3959

    000064AA  B8 01000000       MOV      EAX,1
    000064AF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3960

    000064B5  B8 01000000       MOV      EAX,1
    000064BA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3961

    000064C0  B8 01000000       MOV      EAX,1
    000064C5  8B C8             MOV      ECX,EAX
    000064C7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000064CA  48                DEC      EAX
    000064CB  BB 0E000000       MOV      EBX,14
    000064D0  F7 E3             MUL      EBX
    000064D2  50                PUSH     EAX
    000064D3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000064D6  48                DEC      EAX
    000064D7  BB 02000000       MOV      EBX,2
    000064DC  F7 E3             MUL      EBX
    000064DE  5B                POP      EBX
    000064DF  03 C3             ADD      EAX,EBX
    000064E1  8B F8             MOV      EDI,EAX
    000064E3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      3962

    000064EA  B8 01000000       MOV      EAX,1
    000064EF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3963

    000064F5  B8 01000000       MOV      EAX,1
    000064FA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      3965

    00006500  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006507  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000650C  5B                POP      EBX

    LINE      3967

    0000650D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00006514  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006519  5B                POP      EBX

    LINE      3969

    0000651A  B8 0A000000       MOV      EAX,10
    0000651F  40                INC      EAX
    00006520  50                PUSH     EAX
    00006521  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006524  5B                POP      EBX
    00006525  3B C3             CMP      EAX,EBX
    00006527  0F 8503000000     JNE      3
    0000652D  EB                JMP      

    LINE      3983

    0000652E  56                PUSH     ESI
    0000652F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00006535  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000653B  FF D1             CALL     ECX                       run_inner_proc
    0000653D  5E                POP      ESI                       /* restore callers static pointer */

    LINE      3985

    0000653E  B8 01000000       MOV      EAX,1
    00006543  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      3987

    00006546  B8 01000000       MOV      EAX,1
    0000654B  8B C8             MOV      ECX,EAX
    0000654D  B8 0A000000       MOV      EAX,10
    00006552  50                PUSH     EAX
    00006553  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00006556  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006559  5B                POP      EBX
    0000655A  53                PUSH     EBX
    0000655B  3B C3             CMP      EAX,EBX
    0000655D  0F 8E03000000     JLE      3
    00006563  EB                JMP      

    LINE      3989

    00006564  B8 01000000       MOV      EAX,1
    00006569  8B C8             MOV      ECX,EAX
    0000656B  B8 05000000       MOV      EAX,5
    00006570  50                PUSH     EAX
    00006571  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00006574  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006577  5B                POP      EBX
    00006578  53                PUSH     EBX
    00006579  3B C3             CMP      EAX,EBX
    0000657B  0F 8E03000000     JLE      3
    00006581  EB                JMP      

    LINE      3996

    00006582  B8 01000000       MOV      EAX,1
    00006587  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3997

    0000658A  B8 01000000       MOV      EAX,1
    0000658F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      3998

    00006592  B8 01000000       MOV      EAX,1
    00006597  8B C8             MOV      ECX,EAX
    00006599  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000659C  48                DEC      EAX
    0000659D  BB 0E000000       MOV      EBX,14
    000065A2  F7 E3             MUL      EBX
    000065A4  50                PUSH     EAX
    000065A5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000065A8  48                DEC      EAX
    000065A9  BB 02000000       MOV      EBX,2
    000065AE  F7 E3             MUL      EBX
    000065B0  5B                POP      EBX
    000065B1  03 C3             ADD      EAX,EBX
    000065B3  8B F8             MOV      EDI,EAX
    000065B5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      3999

    000065B9  B8 01000000       MOV      EAX,1
    000065BE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4000

    000065C1  B8 01000000       MOV      EAX,1
    000065C6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4002

    000065C9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000065D0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000065D5  5B                POP      EBX

    LINE      4004

    000065D6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000065DD  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000065E2  5B                POP      EBX

    LINE      4006

    000065E3  B8 0A000000       MOV      EAX,10
    000065E8  40                INC      EAX
    000065E9  50                PUSH     EAX
    000065EA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000065ED  5B                POP      EBX
    000065EE  3B C3             CMP      EAX,EBX
    000065F0  0F 8503000000     JNE      3
    000065F6  EB                JMP      

    LINE      4013

    000065F7  B8 01000000       MOV      EAX,1
    000065FC  8B C8             MOV      ECX,EAX
    000065FE  B8 0A000000       MOV      EAX,10
    00006603  50                PUSH     EAX
    00006604  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006607  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000660A  5B                POP      EBX
    0000660B  53                PUSH     EBX
    0000660C  3B C3             CMP      EAX,EBX
    0000660E  0F 8E03000000     JLE      3
    00006614  EB                JMP      

    LINE      4015

    00006615  B8 01000000       MOV      EAX,1
    0000661A  8B C8             MOV      ECX,EAX
    0000661C  B8 05000000       MOV      EAX,5
    00006621  50                PUSH     EAX
    00006622  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00006625  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006628  5B                POP      EBX
    00006629  53                PUSH     EBX
    0000662A  3B C3             CMP      EAX,EBX
    0000662C  0F 8E03000000     JLE      3
    00006632  EB                JMP      

    LINE      4022

    00006633  B8 01000000       MOV      EAX,1
    00006638  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4023

    0000663B  B8 01000000       MOV      EAX,1
    00006640  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4024

    00006643  B8 01000000       MOV      EAX,1
    00006648  8B C8             MOV      ECX,EAX
    0000664A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000664D  48                DEC      EAX
    0000664E  BB 0E000000       MOV      EBX,14
    00006653  F7 E3             MUL      EBX
    00006655  50                PUSH     EAX
    00006656  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006659  48                DEC      EAX
    0000665A  BB 02000000       MOV      EBX,2
    0000665F  F7 E3             MUL      EBX
    00006661  5B                POP      EBX
    00006662  03 C3             ADD      EAX,EBX
    00006664  8B F8             MOV      EDI,EAX
    00006666  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4025

    0000666A  B8 01000000       MOV      EAX,1
    0000666F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4026

    00006672  B8 01000000       MOV      EAX,1
    00006677  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4028

    0000667A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006681  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00006686  5B                POP      EBX

    LINE      4030

    00006687  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000668E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00006693  5B                POP      EBX

    LINE      4032

    00006694  B8 0A000000       MOV      EAX,10
    00006699  40                INC      EAX
    0000669A  50                PUSH     EAX
    0000669B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000669E  5B                POP      EBX
    0000669F  3B C3             CMP      EAX,EBX
    000066A1  0F 8503000000     JNE      3
    000066A7  EB                JMP      

    LINE      4040

    000066A8  B8 01000000       MOV      EAX,1
    000066AD  8B C8             MOV      ECX,EAX
    000066AF  B8 0A000000       MOV      EAX,10
    000066B4  50                PUSH     EAX
    000066B5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000066B8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000066BB  5B                POP      EBX
    000066BC  53                PUSH     EBX
    000066BD  3B C3             CMP      EAX,EBX
    000066BF  0F 8E03000000     JLE      3
    000066C5  EB                JMP      

    LINE      4042

    000066C6  B8 01000000       MOV      EAX,1
    000066CB  8B C8             MOV      ECX,EAX
    000066CD  B8 05000000       MOV      EAX,5
    000066D2  50                PUSH     EAX
    000066D3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000066D6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000066D9  5B                POP      EBX
    000066DA  53                PUSH     EBX
    000066DB  3B C3             CMP      EAX,EBX
    000066DD  0F 8E03000000     JLE      3
    000066E3  EB                JMP      

    LINE      4049

    000066E4  B8 01000000       MOV      EAX,1
    000066E9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4050

    000066EF  B8 01000000       MOV      EAX,1
    000066F4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4051

    000066FA  B8 01000000       MOV      EAX,1
    000066FF  8B C8             MOV      ECX,EAX
    00006701  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006704  48                DEC      EAX
    00006705  BB 0E000000       MOV      EBX,14
    0000670A  F7 E3             MUL      EBX
    0000670C  50                PUSH     EAX
    0000670D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006710  48                DEC      EAX
    00006711  BB 02000000       MOV      EBX,2
    00006716  F7 E3             MUL      EBX
    00006718  5B                POP      EBX
    00006719  03 C3             ADD      EAX,EBX
    0000671B  8B F8             MOV      EDI,EAX
    0000671D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4052

    00006724  B8 01000000       MOV      EAX,1
    00006729  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4053

    0000672F  B8 01000000       MOV      EAX,1
    00006734  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4055

    0000673A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00006741  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006746  5B                POP      EBX

    LINE      4057

    00006747  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000674E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006753  5B                POP      EBX

    LINE      4059

    00006754  B8 0A000000       MOV      EAX,10
    00006759  40                INC      EAX
    0000675A  50                PUSH     EAX
    0000675B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000675E  5B                POP      EBX
    0000675F  3B C3             CMP      EAX,EBX
    00006761  0F 8503000000     JNE      3
    00006767  EB                JMP      

    LINE      4066

    00006768  B8 01000000       MOV      EAX,1
    0000676D  8B C8             MOV      ECX,EAX
    0000676F  B8 0A000000       MOV      EAX,10
    00006774  50                PUSH     EAX
    00006775  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006778  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000677B  5B                POP      EBX
    0000677C  53                PUSH     EBX
    0000677D  3B C3             CMP      EAX,EBX
    0000677F  0F 8E03000000     JLE      3
    00006785  EB                JMP      

    LINE      4068

    00006786  B8 01000000       MOV      EAX,1
    0000678B  8B C8             MOV      ECX,EAX
    0000678D  B8 05000000       MOV      EAX,5
    00006792  50                PUSH     EAX
    00006793  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00006796  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006799  5B                POP      EBX
    0000679A  53                PUSH     EBX
    0000679B  3B C3             CMP      EAX,EBX
    0000679D  0F 8E03000000     JLE      3
    000067A3  EB                JMP      

    LINE      4075

    000067A4  B8 01000000       MOV      EAX,1
    000067A9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4076

    000067AF  B8 01000000       MOV      EAX,1
    000067B4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4077

    000067BA  B8 01000000       MOV      EAX,1
    000067BF  8B C8             MOV      ECX,EAX
    000067C1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000067C4  48                DEC      EAX
    000067C5  BB 0E000000       MOV      EBX,14
    000067CA  F7 E3             MUL      EBX
    000067CC  50                PUSH     EAX
    000067CD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000067D0  48                DEC      EAX
    000067D1  BB 02000000       MOV      EBX,2
    000067D6  F7 E3             MUL      EBX
    000067D8  5B                POP      EBX
    000067D9  03 C3             ADD      EAX,EBX
    000067DB  8B F8             MOV      EDI,EAX
    000067DD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4078

    000067E4  B8 01000000       MOV      EAX,1
    000067E9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4079

    000067EF  B8 01000000       MOV      EAX,1
    000067F4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4081

    000067FA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006801  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006806  5B                POP      EBX

    LINE      4083

    00006807  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000680E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006813  5B                POP      EBX

    LINE      4085

    00006814  B8 0A000000       MOV      EAX,10
    00006819  40                INC      EAX
    0000681A  50                PUSH     EAX
    0000681B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000681E  5B                POP      EBX
    0000681F  3B C3             CMP      EAX,EBX
    00006821  0F 8503000000     JNE      3
    00006827  EB                JMP      

    LINE      4099

    00006828  56                PUSH     ESI
    00006829  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000682F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00006835  FF D1             CALL     ECX                       run_inner_proc
    00006837  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4101

    00006838  B8 01000000       MOV      EAX,1
    0000683D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4103

    00006840  B8 01000000       MOV      EAX,1
    00006845  8B C8             MOV      ECX,EAX
    00006847  B8 0A000000       MOV      EAX,10
    0000684C  50                PUSH     EAX
    0000684D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00006850  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006853  5B                POP      EBX
    00006854  53                PUSH     EBX
    00006855  3B C3             CMP      EAX,EBX
    00006857  0F 8E03000000     JLE      3
    0000685D  EB                JMP      

    LINE      4105

    0000685E  B8 01000000       MOV      EAX,1
    00006863  8B C8             MOV      ECX,EAX
    00006865  B8 05000000       MOV      EAX,5
    0000686A  50                PUSH     EAX
    0000686B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000686E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006871  5B                POP      EBX
    00006872  53                PUSH     EBX
    00006873  3B C3             CMP      EAX,EBX
    00006875  0F 8E03000000     JLE      3
    0000687B  EB                JMP      

    LINE      4112

    0000687C  B8 01000000       MOV      EAX,1
    00006881  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4113

    00006884  B8 01000000       MOV      EAX,1
    00006889  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4114

    0000688C  B8 01000000       MOV      EAX,1
    00006891  8B C8             MOV      ECX,EAX
    00006893  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006896  48                DEC      EAX
    00006897  BB 0E000000       MOV      EBX,14
    0000689C  F7 E3             MUL      EBX
    0000689E  50                PUSH     EAX
    0000689F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000068A2  48                DEC      EAX
    000068A3  BB 02000000       MOV      EBX,2
    000068A8  F7 E3             MUL      EBX
    000068AA  5B                POP      EBX
    000068AB  03 C3             ADD      EAX,EBX
    000068AD  8B F8             MOV      EDI,EAX
    000068AF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4115

    000068B3  B8 01000000       MOV      EAX,1
    000068B8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4116

    000068BB  B8 01000000       MOV      EAX,1
    000068C0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4118

    000068C3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000068CA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000068CF  5B                POP      EBX

    LINE      4120

    000068D0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000068D7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000068DC  5B                POP      EBX

    LINE      4122

    000068DD  B8 0A000000       MOV      EAX,10
    000068E2  40                INC      EAX
    000068E3  50                PUSH     EAX
    000068E4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000068E7  5B                POP      EBX
    000068E8  3B C3             CMP      EAX,EBX
    000068EA  0F 8503000000     JNE      3
    000068F0  EB                JMP      

    LINE      4129

    000068F1  B8 01000000       MOV      EAX,1
    000068F6  8B C8             MOV      ECX,EAX
    000068F8  B8 0A000000       MOV      EAX,10
    000068FD  50                PUSH     EAX
    000068FE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006901  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006904  5B                POP      EBX
    00006905  53                PUSH     EBX
    00006906  3B C3             CMP      EAX,EBX
    00006908  0F 8E03000000     JLE      3
    0000690E  EB                JMP      

    LINE      4131

    0000690F  B8 01000000       MOV      EAX,1
    00006914  8B C8             MOV      ECX,EAX
    00006916  B8 05000000       MOV      EAX,5
    0000691B  50                PUSH     EAX
    0000691C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000691F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006922  5B                POP      EBX
    00006923  53                PUSH     EBX
    00006924  3B C3             CMP      EAX,EBX
    00006926  0F 8E03000000     JLE      3
    0000692C  EB                JMP      

    LINE      4138

    0000692D  B8 01000000       MOV      EAX,1
    00006932  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4139

    00006935  B8 01000000       MOV      EAX,1
    0000693A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4140

    0000693D  B8 01000000       MOV      EAX,1
    00006942  8B C8             MOV      ECX,EAX
    00006944  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006947  48                DEC      EAX
    00006948  BB 0E000000       MOV      EBX,14
    0000694D  F7 E3             MUL      EBX
    0000694F  50                PUSH     EAX
    00006950  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006953  48                DEC      EAX
    00006954  BB 02000000       MOV      EBX,2
    00006959  F7 E3             MUL      EBX
    0000695B  5B                POP      EBX
    0000695C  03 C3             ADD      EAX,EBX
    0000695E  8B F8             MOV      EDI,EAX
    00006960  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4141

    00006964  B8 01000000       MOV      EAX,1
    00006969  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4142

    0000696C  B8 01000000       MOV      EAX,1
    00006971  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4144

    00006974  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000697B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00006980  5B                POP      EBX

    LINE      4146

    00006981  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00006988  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000698D  5B                POP      EBX

    LINE      4148

    0000698E  B8 0A000000       MOV      EAX,10
    00006993  40                INC      EAX
    00006994  50                PUSH     EAX
    00006995  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006998  5B                POP      EBX
    00006999  3B C3             CMP      EAX,EBX
    0000699B  0F 8503000000     JNE      3
    000069A1  EB                JMP      

    LINE      4156

    000069A2  B8 01000000       MOV      EAX,1
    000069A7  8B C8             MOV      ECX,EAX
    000069A9  B8 0A000000       MOV      EAX,10
    000069AE  50                PUSH     EAX
    000069AF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000069B2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000069B5  5B                POP      EBX
    000069B6  53                PUSH     EBX
    000069B7  3B C3             CMP      EAX,EBX
    000069B9  0F 8E03000000     JLE      3
    000069BF  EB                JMP      

    LINE      4158

    000069C0  B8 01000000       MOV      EAX,1
    000069C5  8B C8             MOV      ECX,EAX
    000069C7  B8 05000000       MOV      EAX,5
    000069CC  50                PUSH     EAX
    000069CD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000069D0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000069D3  5B                POP      EBX
    000069D4  53                PUSH     EBX
    000069D5  3B C3             CMP      EAX,EBX
    000069D7  0F 8E03000000     JLE      3
    000069DD  EB                JMP      

    LINE      4165

    000069DE  B8 01000000       MOV      EAX,1
    000069E3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4166

    000069E9  B8 01000000       MOV      EAX,1
    000069EE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4167

    000069F4  B8 01000000       MOV      EAX,1
    000069F9  8B C8             MOV      ECX,EAX
    000069FB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000069FE  48                DEC      EAX
    000069FF  BB 0E000000       MOV      EBX,14
    00006A04  F7 E3             MUL      EBX
    00006A06  50                PUSH     EAX
    00006A07  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006A0A  48                DEC      EAX
    00006A0B  BB 02000000       MOV      EBX,2
    00006A10  F7 E3             MUL      EBX
    00006A12  5B                POP      EBX
    00006A13  03 C3             ADD      EAX,EBX
    00006A15  8B F8             MOV      EDI,EAX
    00006A17  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4168

    00006A1E  B8 01000000       MOV      EAX,1
    00006A23  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4169

    00006A29  B8 01000000       MOV      EAX,1
    00006A2E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4171

    00006A34  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00006A3B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006A40  5B                POP      EBX

    LINE      4173

    00006A41  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00006A48  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006A4D  5B                POP      EBX

    LINE      4175

    00006A4E  B8 0A000000       MOV      EAX,10
    00006A53  40                INC      EAX
    00006A54  50                PUSH     EAX
    00006A55  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006A58  5B                POP      EBX
    00006A59  3B C3             CMP      EAX,EBX
    00006A5B  0F 8503000000     JNE      3
    00006A61  EB                JMP      

    LINE      4182

    00006A62  B8 01000000       MOV      EAX,1
    00006A67  8B C8             MOV      ECX,EAX
    00006A69  B8 0A000000       MOV      EAX,10
    00006A6E  50                PUSH     EAX
    00006A6F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006A72  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006A75  5B                POP      EBX
    00006A76  53                PUSH     EBX
    00006A77  3B C3             CMP      EAX,EBX
    00006A79  0F 8E03000000     JLE      3
    00006A7F  EB                JMP      

    LINE      4184

    00006A80  B8 01000000       MOV      EAX,1
    00006A85  8B C8             MOV      ECX,EAX
    00006A87  B8 05000000       MOV      EAX,5
    00006A8C  50                PUSH     EAX
    00006A8D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00006A90  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006A93  5B                POP      EBX
    00006A94  53                PUSH     EBX
    00006A95  3B C3             CMP      EAX,EBX
    00006A97  0F 8E03000000     JLE      3
    00006A9D  EB                JMP      

    LINE      4191

    00006A9E  B8 01000000       MOV      EAX,1
    00006AA3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4192

    00006AA9  B8 01000000       MOV      EAX,1
    00006AAE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4193

    00006AB4  B8 01000000       MOV      EAX,1
    00006AB9  8B C8             MOV      ECX,EAX
    00006ABB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006ABE  48                DEC      EAX
    00006ABF  BB 0E000000       MOV      EBX,14
    00006AC4  F7 E3             MUL      EBX
    00006AC6  50                PUSH     EAX
    00006AC7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006ACA  48                DEC      EAX
    00006ACB  BB 02000000       MOV      EBX,2
    00006AD0  F7 E3             MUL      EBX
    00006AD2  5B                POP      EBX
    00006AD3  03 C3             ADD      EAX,EBX
    00006AD5  8B F8             MOV      EDI,EAX
    00006AD7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4194

    00006ADE  B8 01000000       MOV      EAX,1
    00006AE3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4195

    00006AE9  B8 01000000       MOV      EAX,1
    00006AEE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4197

    00006AF4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006AFB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006B00  5B                POP      EBX

    LINE      4199

    00006B01  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00006B08  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006B0D  5B                POP      EBX

    LINE      4201

    00006B0E  B8 0A000000       MOV      EAX,10
    00006B13  40                INC      EAX
    00006B14  50                PUSH     EAX
    00006B15  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006B18  5B                POP      EBX
    00006B19  3B C3             CMP      EAX,EBX
    00006B1B  0F 8503000000     JNE      3
    00006B21  EB                JMP      

    LINE      4215

    00006B22  56                PUSH     ESI
    00006B23  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00006B29  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00006B2F  FF D1             CALL     ECX                       run_inner_proc
    00006B31  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4217

    00006B32  B8 01000000       MOV      EAX,1
    00006B37  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4219

    00006B3A  B8 01000000       MOV      EAX,1
    00006B3F  8B C8             MOV      ECX,EAX
    00006B41  B8 0A000000       MOV      EAX,10
    00006B46  50                PUSH     EAX
    00006B47  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00006B4A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006B4D  5B                POP      EBX
    00006B4E  53                PUSH     EBX
    00006B4F  3B C3             CMP      EAX,EBX
    00006B51  0F 8E03000000     JLE      3
    00006B57  EB                JMP      

    LINE      4221

    00006B58  B8 01000000       MOV      EAX,1
    00006B5D  8B C8             MOV      ECX,EAX
    00006B5F  B8 05000000       MOV      EAX,5
    00006B64  50                PUSH     EAX
    00006B65  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00006B68  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006B6B  5B                POP      EBX
    00006B6C  53                PUSH     EBX
    00006B6D  3B C3             CMP      EAX,EBX
    00006B6F  0F 8E03000000     JLE      3
    00006B75  EB                JMP      

    LINE      4228

    00006B76  B8 01000000       MOV      EAX,1
    00006B7B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4229

    00006B7E  B8 01000000       MOV      EAX,1
    00006B83  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4230

    00006B86  B8 01000000       MOV      EAX,1
    00006B8B  8B C8             MOV      ECX,EAX
    00006B8D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006B90  48                DEC      EAX
    00006B91  BB 0E000000       MOV      EBX,14
    00006B96  F7 E3             MUL      EBX
    00006B98  50                PUSH     EAX
    00006B99  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006B9C  48                DEC      EAX
    00006B9D  BB 02000000       MOV      EBX,2
    00006BA2  F7 E3             MUL      EBX
    00006BA4  5B                POP      EBX
    00006BA5  03 C3             ADD      EAX,EBX
    00006BA7  8B F8             MOV      EDI,EAX
    00006BA9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4231

    00006BAD  B8 01000000       MOV      EAX,1
    00006BB2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4232

    00006BB5  B8 01000000       MOV      EAX,1
    00006BBA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4234

    00006BBD  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00006BC4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00006BC9  5B                POP      EBX

    LINE      4236

    00006BCA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00006BD1  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00006BD6  5B                POP      EBX

    LINE      4238

    00006BD7  B8 0A000000       MOV      EAX,10
    00006BDC  40                INC      EAX
    00006BDD  50                PUSH     EAX
    00006BDE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006BE1  5B                POP      EBX
    00006BE2  3B C3             CMP      EAX,EBX
    00006BE4  0F 8503000000     JNE      3
    00006BEA  EB                JMP      

    LINE      4245

    00006BEB  B8 01000000       MOV      EAX,1
    00006BF0  8B C8             MOV      ECX,EAX
    00006BF2  B8 0A000000       MOV      EAX,10
    00006BF7  50                PUSH     EAX
    00006BF8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006BFB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006BFE  5B                POP      EBX
    00006BFF  53                PUSH     EBX
    00006C00  3B C3             CMP      EAX,EBX
    00006C02  0F 8E03000000     JLE      3
    00006C08  EB                JMP      

    LINE      4247

    00006C09  B8 01000000       MOV      EAX,1
    00006C0E  8B C8             MOV      ECX,EAX
    00006C10  B8 05000000       MOV      EAX,5
    00006C15  50                PUSH     EAX
    00006C16  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00006C19  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006C1C  5B                POP      EBX
    00006C1D  53                PUSH     EBX
    00006C1E  3B C3             CMP      EAX,EBX
    00006C20  0F 8E03000000     JLE      3
    00006C26  EB                JMP      

    LINE      4254

    00006C27  B8 01000000       MOV      EAX,1
    00006C2C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4255

    00006C2F  B8 01000000       MOV      EAX,1
    00006C34  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4256

    00006C37  B8 01000000       MOV      EAX,1
    00006C3C  8B C8             MOV      ECX,EAX
    00006C3E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006C41  48                DEC      EAX
    00006C42  BB 0E000000       MOV      EBX,14
    00006C47  F7 E3             MUL      EBX
    00006C49  50                PUSH     EAX
    00006C4A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006C4D  48                DEC      EAX
    00006C4E  BB 02000000       MOV      EBX,2
    00006C53  F7 E3             MUL      EBX
    00006C55  5B                POP      EBX
    00006C56  03 C3             ADD      EAX,EBX
    00006C58  8B F8             MOV      EDI,EAX
    00006C5A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4257

    00006C5E  B8 01000000       MOV      EAX,1
    00006C63  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4258

    00006C66  B8 01000000       MOV      EAX,1
    00006C6B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4260

    00006C6E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006C75  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00006C7A  5B                POP      EBX

    LINE      4262

    00006C7B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00006C82  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00006C87  5B                POP      EBX

    LINE      4264

    00006C88  B8 0A000000       MOV      EAX,10
    00006C8D  40                INC      EAX
    00006C8E  50                PUSH     EAX
    00006C8F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006C92  5B                POP      EBX
    00006C93  3B C3             CMP      EAX,EBX
    00006C95  0F 8503000000     JNE      3
    00006C9B  EB                JMP      

    LINE      4272

    00006C9C  B8 01000000       MOV      EAX,1
    00006CA1  8B C8             MOV      ECX,EAX
    00006CA3  B8 0A000000       MOV      EAX,10
    00006CA8  50                PUSH     EAX
    00006CA9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00006CAC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006CAF  5B                POP      EBX
    00006CB0  53                PUSH     EBX
    00006CB1  3B C3             CMP      EAX,EBX
    00006CB3  0F 8E03000000     JLE      3
    00006CB9  EB                JMP      

    LINE      4274

    00006CBA  B8 01000000       MOV      EAX,1
    00006CBF  8B C8             MOV      ECX,EAX
    00006CC1  B8 05000000       MOV      EAX,5
    00006CC6  50                PUSH     EAX
    00006CC7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00006CCA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006CCD  5B                POP      EBX
    00006CCE  53                PUSH     EBX
    00006CCF  3B C3             CMP      EAX,EBX
    00006CD1  0F 8E03000000     JLE      3
    00006CD7  EB                JMP      

    LINE      4281

    00006CD8  B8 01000000       MOV      EAX,1
    00006CDD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4282

    00006CE3  B8 01000000       MOV      EAX,1
    00006CE8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4283

    00006CEE  B8 01000000       MOV      EAX,1
    00006CF3  8B C8             MOV      ECX,EAX
    00006CF5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006CF8  48                DEC      EAX
    00006CF9  BB 0E000000       MOV      EBX,14
    00006CFE  F7 E3             MUL      EBX
    00006D00  50                PUSH     EAX
    00006D01  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006D04  48                DEC      EAX
    00006D05  BB 02000000       MOV      EBX,2
    00006D0A  F7 E3             MUL      EBX
    00006D0C  5B                POP      EBX
    00006D0D  03 C3             ADD      EAX,EBX
    00006D0F  8B F8             MOV      EDI,EAX
    00006D11  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4284

    00006D18  B8 01000000       MOV      EAX,1
    00006D1D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4285

    00006D23  B8 01000000       MOV      EAX,1
    00006D28  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4287

    00006D2E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00006D35  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006D3A  5B                POP      EBX

    LINE      4289

    00006D3B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00006D42  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006D47  5B                POP      EBX

    LINE      4291

    00006D48  B8 0A000000       MOV      EAX,10
    00006D4D  40                INC      EAX
    00006D4E  50                PUSH     EAX
    00006D4F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006D52  5B                POP      EBX
    00006D53  3B C3             CMP      EAX,EBX
    00006D55  0F 8503000000     JNE      3
    00006D5B  EB                JMP      

    LINE      4298

    00006D5C  B8 01000000       MOV      EAX,1
    00006D61  8B C8             MOV      ECX,EAX
    00006D63  B8 0A000000       MOV      EAX,10
    00006D68  50                PUSH     EAX
    00006D69  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006D6C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006D6F  5B                POP      EBX
    00006D70  53                PUSH     EBX
    00006D71  3B C3             CMP      EAX,EBX
    00006D73  0F 8E03000000     JLE      3
    00006D79  EB                JMP      

    LINE      4300

    00006D7A  B8 01000000       MOV      EAX,1
    00006D7F  8B C8             MOV      ECX,EAX
    00006D81  B8 05000000       MOV      EAX,5
    00006D86  50                PUSH     EAX
    00006D87  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00006D8A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006D8D  5B                POP      EBX
    00006D8E  53                PUSH     EBX
    00006D8F  3B C3             CMP      EAX,EBX
    00006D91  0F 8E03000000     JLE      3
    00006D97  EB                JMP      

    LINE      4307

    00006D98  B8 01000000       MOV      EAX,1
    00006D9D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4308

    00006DA3  B8 01000000       MOV      EAX,1
    00006DA8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4309

    00006DAE  B8 01000000       MOV      EAX,1
    00006DB3  8B C8             MOV      ECX,EAX
    00006DB5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006DB8  48                DEC      EAX
    00006DB9  BB 0E000000       MOV      EBX,14
    00006DBE  F7 E3             MUL      EBX
    00006DC0  50                PUSH     EAX
    00006DC1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006DC4  48                DEC      EAX
    00006DC5  BB 02000000       MOV      EBX,2
    00006DCA  F7 E3             MUL      EBX
    00006DCC  5B                POP      EBX
    00006DCD  03 C3             ADD      EAX,EBX
    00006DCF  8B F8             MOV      EDI,EAX
    00006DD1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4310

    00006DD8  B8 01000000       MOV      EAX,1
    00006DDD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4311

    00006DE3  B8 01000000       MOV      EAX,1
    00006DE8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4313

    00006DEE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006DF5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00006DFA  5B                POP      EBX

    LINE      4315

    00006DFB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00006E02  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00006E07  5B                POP      EBX

    LINE      4317

    00006E08  B8 0A000000       MOV      EAX,10
    00006E0D  40                INC      EAX
    00006E0E  50                PUSH     EAX
    00006E0F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006E12  5B                POP      EBX
    00006E13  3B C3             CMP      EAX,EBX
    00006E15  0F 8503000000     JNE      3
    00006E1B  EB                JMP      

    LINE      4331

    00006E1C  56                PUSH     ESI
    00006E1D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00006E23  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00006E29  FF D1             CALL     ECX                       run_inner_proc
    00006E2B  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4333

    00006E2C  B8 01000000       MOV      EAX,1
    00006E31  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4335

    00006E34  B8 01000000       MOV      EAX,1
    00006E39  8B C8             MOV      ECX,EAX
    00006E3B  B8 0A000000       MOV      EAX,10
    00006E40  50                PUSH     EAX
    00006E41  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00006E44  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006E47  5B                POP      EBX
    00006E48  53                PUSH     EBX
    00006E49  3B C3             CMP      EAX,EBX
    00006E4B  0F 8E03000000     JLE      3
    00006E51  EB                JMP      

    LINE      4337

    00006E52  B8 01000000       MOV      EAX,1
    00006E57  8B C8             MOV      ECX,EAX
    00006E59  B8 05000000       MOV      EAX,5
    00006E5E  50                PUSH     EAX
    00006E5F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00006E62  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006E65  5B                POP      EBX
    00006E66  53                PUSH     EBX
    00006E67  3B C3             CMP      EAX,EBX
    00006E69  0F 8E03000000     JLE      3
    00006E6F  EB                JMP      

    LINE      4344

    00006E70  B8 01000000       MOV      EAX,1
    00006E75  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4345

    00006E78  B8 01000000       MOV      EAX,1
    00006E7D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4346

    00006E80  B8 01000000       MOV      EAX,1
    00006E85  8B C8             MOV      ECX,EAX
    00006E87  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006E8A  48                DEC      EAX
    00006E8B  BB 0E000000       MOV      EBX,14
    00006E90  F7 E3             MUL      EBX
    00006E92  50                PUSH     EAX
    00006E93  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006E96  48                DEC      EAX
    00006E97  BB 02000000       MOV      EBX,2
    00006E9C  F7 E3             MUL      EBX
    00006E9E  5B                POP      EBX
    00006E9F  03 C3             ADD      EAX,EBX
    00006EA1  8B F8             MOV      EDI,EAX
    00006EA3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4347

    00006EA7  B8 01000000       MOV      EAX,1
    00006EAC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4348

    00006EAF  B8 01000000       MOV      EAX,1
    00006EB4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4350

    00006EB7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00006EBE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00006EC3  5B                POP      EBX

    LINE      4352

    00006EC4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00006ECB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00006ED0  5B                POP      EBX

    LINE      4354

    00006ED1  B8 0A000000       MOV      EAX,10
    00006ED6  40                INC      EAX
    00006ED7  50                PUSH     EAX
    00006ED8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006EDB  5B                POP      EBX
    00006EDC  3B C3             CMP      EAX,EBX
    00006EDE  0F 8503000000     JNE      3
    00006EE4  EB                JMP      

    LINE      4361

    00006EE5  B8 01000000       MOV      EAX,1
    00006EEA  8B C8             MOV      ECX,EAX
    00006EEC  B8 0A000000       MOV      EAX,10
    00006EF1  50                PUSH     EAX
    00006EF2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00006EF5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006EF8  5B                POP      EBX
    00006EF9  53                PUSH     EBX
    00006EFA  3B C3             CMP      EAX,EBX
    00006EFC  0F 8E03000000     JLE      3
    00006F02  EB                JMP      

    LINE      4363

    00006F03  B8 01000000       MOV      EAX,1
    00006F08  8B C8             MOV      ECX,EAX
    00006F0A  B8 05000000       MOV      EAX,5
    00006F0F  50                PUSH     EAX
    00006F10  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00006F13  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006F16  5B                POP      EBX
    00006F17  53                PUSH     EBX
    00006F18  3B C3             CMP      EAX,EBX
    00006F1A  0F 8E03000000     JLE      3
    00006F20  EB                JMP      

    LINE      4370

    00006F21  B8 01000000       MOV      EAX,1
    00006F26  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4371

    00006F29  B8 01000000       MOV      EAX,1
    00006F2E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4372

    00006F31  B8 01000000       MOV      EAX,1
    00006F36  8B C8             MOV      ECX,EAX
    00006F38  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00006F3B  48                DEC      EAX
    00006F3C  BB 0E000000       MOV      EBX,14
    00006F41  F7 E3             MUL      EBX
    00006F43  50                PUSH     EAX
    00006F44  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00006F47  48                DEC      EAX
    00006F48  BB 02000000       MOV      EBX,2
    00006F4D  F7 E3             MUL      EBX
    00006F4F  5B                POP      EBX
    00006F50  03 C3             ADD      EAX,EBX
    00006F52  8B F8             MOV      EDI,EAX
    00006F54  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4373

    00006F58  B8 01000000       MOV      EAX,1
    00006F5D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4374

    00006F60  B8 01000000       MOV      EAX,1
    00006F65  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4376

    00006F68  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00006F6F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00006F74  5B                POP      EBX

    LINE      4378

    00006F75  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00006F7C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00006F81  5B                POP      EBX

    LINE      4380

    00006F82  B8 0A000000       MOV      EAX,10
    00006F87  40                INC      EAX
    00006F88  50                PUSH     EAX
    00006F89  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006F8C  5B                POP      EBX
    00006F8D  3B C3             CMP      EAX,EBX
    00006F8F  0F 8503000000     JNE      3
    00006F95  EB                JMP      

    LINE      4388

    00006F96  B8 01000000       MOV      EAX,1
    00006F9B  8B C8             MOV      ECX,EAX
    00006F9D  B8 0A000000       MOV      EAX,10
    00006FA2  50                PUSH     EAX
    00006FA3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00006FA6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006FA9  5B                POP      EBX
    00006FAA  53                PUSH     EBX
    00006FAB  3B C3             CMP      EAX,EBX
    00006FAD  0F 8E03000000     JLE      3
    00006FB3  EB                JMP      

    LINE      4390

    00006FB4  B8 01000000       MOV      EAX,1
    00006FB9  8B C8             MOV      ECX,EAX
    00006FBB  B8 05000000       MOV      EAX,5
    00006FC0  50                PUSH     EAX
    00006FC1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00006FC4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006FC7  5B                POP      EBX
    00006FC8  53                PUSH     EBX
    00006FC9  3B C3             CMP      EAX,EBX
    00006FCB  0F 8E03000000     JLE      3
    00006FD1  EB                JMP      

    LINE      4397

    00006FD2  B8 01000000       MOV      EAX,1
    00006FD7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4398

    00006FDD  B8 01000000       MOV      EAX,1
    00006FE2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4399

    00006FE8  B8 01000000       MOV      EAX,1
    00006FED  8B C8             MOV      ECX,EAX
    00006FEF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00006FF2  48                DEC      EAX
    00006FF3  BB 0E000000       MOV      EBX,14
    00006FF8  F7 E3             MUL      EBX
    00006FFA  50                PUSH     EAX
    00006FFB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00006FFE  48                DEC      EAX
    00006FFF  BB 02000000       MOV      EBX,2
    00007004  F7 E3             MUL      EBX
    00007006  5B                POP      EBX
    00007007  03 C3             ADD      EAX,EBX
    00007009  8B F8             MOV      EDI,EAX
    0000700B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4400

    00007012  B8 01000000       MOV      EAX,1
    00007017  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4401

    0000701D  B8 01000000       MOV      EAX,1
    00007022  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4403

    00007028  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000702F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00007034  5B                POP      EBX

    LINE      4405

    00007035  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000703C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00007041  5B                POP      EBX

    LINE      4407

    00007042  B8 0A000000       MOV      EAX,10
    00007047  40                INC      EAX
    00007048  50                PUSH     EAX
    00007049  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000704C  5B                POP      EBX
    0000704D  3B C3             CMP      EAX,EBX
    0000704F  0F 8503000000     JNE      3
    00007055  EB                JMP      

    LINE      4414

    00007056  B8 01000000       MOV      EAX,1
    0000705B  8B C8             MOV      ECX,EAX
    0000705D  B8 0A000000       MOV      EAX,10
    00007062  50                PUSH     EAX
    00007063  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00007066  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007069  5B                POP      EBX
    0000706A  53                PUSH     EBX
    0000706B  3B C3             CMP      EAX,EBX
    0000706D  0F 8E03000000     JLE      3
    00007073  EB                JMP      

    LINE      4416

    00007074  B8 01000000       MOV      EAX,1
    00007079  8B C8             MOV      ECX,EAX
    0000707B  B8 05000000       MOV      EAX,5
    00007080  50                PUSH     EAX
    00007081  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007084  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007087  5B                POP      EBX
    00007088  53                PUSH     EBX
    00007089  3B C3             CMP      EAX,EBX
    0000708B  0F 8E03000000     JLE      3
    00007091  EB                JMP      

    LINE      4423

    00007092  B8 01000000       MOV      EAX,1
    00007097  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4424

    0000709D  B8 01000000       MOV      EAX,1
    000070A2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4425

    000070A8  B8 01000000       MOV      EAX,1
    000070AD  8B C8             MOV      ECX,EAX
    000070AF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000070B2  48                DEC      EAX
    000070B3  BB 0E000000       MOV      EBX,14
    000070B8  F7 E3             MUL      EBX
    000070BA  50                PUSH     EAX
    000070BB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000070BE  48                DEC      EAX
    000070BF  BB 02000000       MOV      EBX,2
    000070C4  F7 E3             MUL      EBX
    000070C6  5B                POP      EBX
    000070C7  03 C3             ADD      EAX,EBX
    000070C9  8B F8             MOV      EDI,EAX
    000070CB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4426

    000070D2  B8 01000000       MOV      EAX,1
    000070D7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4427

    000070DD  B8 01000000       MOV      EAX,1
    000070E2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4429

    000070E8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000070EF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000070F4  5B                POP      EBX

    LINE      4431

    000070F5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000070FC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00007101  5B                POP      EBX

    LINE      4433

    00007102  B8 0A000000       MOV      EAX,10
    00007107  40                INC      EAX
    00007108  50                PUSH     EAX
    00007109  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000710C  5B                POP      EBX
    0000710D  3B C3             CMP      EAX,EBX
    0000710F  0F 8503000000     JNE      3
    00007115  EB                JMP      

    LINE      4447

    00007116  56                PUSH     ESI
    00007117  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000711D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00007123  FF D1             CALL     ECX                       run_inner_proc
    00007125  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4449

    00007126  B8 01000000       MOV      EAX,1
    0000712B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4451

    0000712E  B8 01000000       MOV      EAX,1
    00007133  8B C8             MOV      ECX,EAX
    00007135  B8 0A000000       MOV      EAX,10
    0000713A  50                PUSH     EAX
    0000713B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000713E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007141  5B                POP      EBX
    00007142  53                PUSH     EBX
    00007143  3B C3             CMP      EAX,EBX
    00007145  0F 8E03000000     JLE      3
    0000714B  EB                JMP      

    LINE      4453

    0000714C  B8 01000000       MOV      EAX,1
    00007151  8B C8             MOV      ECX,EAX
    00007153  B8 05000000       MOV      EAX,5
    00007158  50                PUSH     EAX
    00007159  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000715C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000715F  5B                POP      EBX
    00007160  53                PUSH     EBX
    00007161  3B C3             CMP      EAX,EBX
    00007163  0F 8E03000000     JLE      3
    00007169  EB                JMP      

    LINE      4460

    0000716A  B8 01000000       MOV      EAX,1
    0000716F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4461

    00007172  B8 01000000       MOV      EAX,1
    00007177  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4462

    0000717A  B8 01000000       MOV      EAX,1
    0000717F  8B C8             MOV      ECX,EAX
    00007181  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007184  48                DEC      EAX
    00007185  BB 0E000000       MOV      EBX,14
    0000718A  F7 E3             MUL      EBX
    0000718C  50                PUSH     EAX
    0000718D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007190  48                DEC      EAX
    00007191  BB 02000000       MOV      EBX,2
    00007196  F7 E3             MUL      EBX
    00007198  5B                POP      EBX
    00007199  03 C3             ADD      EAX,EBX
    0000719B  8B F8             MOV      EDI,EAX
    0000719D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4463

    000071A1  B8 01000000       MOV      EAX,1
    000071A6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4464

    000071A9  B8 01000000       MOV      EAX,1
    000071AE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4466

    000071B1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000071B8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000071BD  5B                POP      EBX

    LINE      4468

    000071BE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000071C5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000071CA  5B                POP      EBX

    LINE      4470

    000071CB  B8 0A000000       MOV      EAX,10
    000071D0  40                INC      EAX
    000071D1  50                PUSH     EAX
    000071D2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000071D5  5B                POP      EBX
    000071D6  3B C3             CMP      EAX,EBX
    000071D8  0F 8503000000     JNE      3
    000071DE  EB                JMP      

    LINE      4477

    000071DF  B8 01000000       MOV      EAX,1
    000071E4  8B C8             MOV      ECX,EAX
    000071E6  B8 0A000000       MOV      EAX,10
    000071EB  50                PUSH     EAX
    000071EC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000071EF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000071F2  5B                POP      EBX
    000071F3  53                PUSH     EBX
    000071F4  3B C3             CMP      EAX,EBX
    000071F6  0F 8E03000000     JLE      3
    000071FC  EB                JMP      

    LINE      4479

    000071FD  B8 01000000       MOV      EAX,1
    00007202  8B C8             MOV      ECX,EAX
    00007204  B8 05000000       MOV      EAX,5
    00007209  50                PUSH     EAX
    0000720A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000720D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007210  5B                POP      EBX
    00007211  53                PUSH     EBX
    00007212  3B C3             CMP      EAX,EBX
    00007214  0F 8E03000000     JLE      3
    0000721A  EB                JMP      

    LINE      4486

    0000721B  B8 01000000       MOV      EAX,1
    00007220  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4487

    00007223  B8 01000000       MOV      EAX,1
    00007228  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4488

    0000722B  B8 01000000       MOV      EAX,1
    00007230  8B C8             MOV      ECX,EAX
    00007232  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007235  48                DEC      EAX
    00007236  BB 0E000000       MOV      EBX,14
    0000723B  F7 E3             MUL      EBX
    0000723D  50                PUSH     EAX
    0000723E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007241  48                DEC      EAX
    00007242  BB 02000000       MOV      EBX,2
    00007247  F7 E3             MUL      EBX
    00007249  5B                POP      EBX
    0000724A  03 C3             ADD      EAX,EBX
    0000724C  8B F8             MOV      EDI,EAX
    0000724E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4489

    00007252  B8 01000000       MOV      EAX,1
    00007257  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4490

    0000725A  B8 01000000       MOV      EAX,1
    0000725F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4492

    00007262  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00007269  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000726E  5B                POP      EBX

    LINE      4494

    0000726F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00007276  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000727B  5B                POP      EBX

    LINE      4496

    0000727C  B8 0A000000       MOV      EAX,10
    00007281  40                INC      EAX
    00007282  50                PUSH     EAX
    00007283  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007286  5B                POP      EBX
    00007287  3B C3             CMP      EAX,EBX
    00007289  0F 8503000000     JNE      3
    0000728F  EB                JMP      

    LINE      4504

    00007290  B8 01000000       MOV      EAX,1
    00007295  8B C8             MOV      ECX,EAX
    00007297  B8 0A000000       MOV      EAX,10
    0000729C  50                PUSH     EAX
    0000729D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000072A0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000072A3  5B                POP      EBX
    000072A4  53                PUSH     EBX
    000072A5  3B C3             CMP      EAX,EBX
    000072A7  0F 8E03000000     JLE      3
    000072AD  EB                JMP      

    LINE      4506

    000072AE  B8 01000000       MOV      EAX,1
    000072B3  8B C8             MOV      ECX,EAX
    000072B5  B8 05000000       MOV      EAX,5
    000072BA  50                PUSH     EAX
    000072BB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000072BE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000072C1  5B                POP      EBX
    000072C2  53                PUSH     EBX
    000072C3  3B C3             CMP      EAX,EBX
    000072C5  0F 8E03000000     JLE      3
    000072CB  EB                JMP      

    LINE      4513

    000072CC  B8 01000000       MOV      EAX,1
    000072D1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4514

    000072D7  B8 01000000       MOV      EAX,1
    000072DC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4515

    000072E2  B8 01000000       MOV      EAX,1
    000072E7  8B C8             MOV      ECX,EAX
    000072E9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000072EC  48                DEC      EAX
    000072ED  BB 0E000000       MOV      EBX,14
    000072F2  F7 E3             MUL      EBX
    000072F4  50                PUSH     EAX
    000072F5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000072F8  48                DEC      EAX
    000072F9  BB 02000000       MOV      EBX,2
    000072FE  F7 E3             MUL      EBX
    00007300  5B                POP      EBX
    00007301  03 C3             ADD      EAX,EBX
    00007303  8B F8             MOV      EDI,EAX
    00007305  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4516

    0000730C  B8 01000000       MOV      EAX,1
    00007311  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4517

    00007317  B8 01000000       MOV      EAX,1
    0000731C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4519

    00007322  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00007329  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000732E  5B                POP      EBX

    LINE      4521

    0000732F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00007336  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000733B  5B                POP      EBX

    LINE      4523

    0000733C  B8 0A000000       MOV      EAX,10
    00007341  40                INC      EAX
    00007342  50                PUSH     EAX
    00007343  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007346  5B                POP      EBX
    00007347  3B C3             CMP      EAX,EBX
    00007349  0F 8503000000     JNE      3
    0000734F  EB                JMP      

    LINE      4530

    00007350  B8 01000000       MOV      EAX,1
    00007355  8B C8             MOV      ECX,EAX
    00007357  B8 0A000000       MOV      EAX,10
    0000735C  50                PUSH     EAX
    0000735D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00007360  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007363  5B                POP      EBX
    00007364  53                PUSH     EBX
    00007365  3B C3             CMP      EAX,EBX
    00007367  0F 8E03000000     JLE      3
    0000736D  EB                JMP      

    LINE      4532

    0000736E  B8 01000000       MOV      EAX,1
    00007373  8B C8             MOV      ECX,EAX
    00007375  B8 05000000       MOV      EAX,5
    0000737A  50                PUSH     EAX
    0000737B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000737E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007381  5B                POP      EBX
    00007382  53                PUSH     EBX
    00007383  3B C3             CMP      EAX,EBX
    00007385  0F 8E03000000     JLE      3
    0000738B  EB                JMP      

    LINE      4539

    0000738C  B8 01000000       MOV      EAX,1
    00007391  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4540

    00007397  B8 01000000       MOV      EAX,1
    0000739C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4541

    000073A2  B8 01000000       MOV      EAX,1
    000073A7  8B C8             MOV      ECX,EAX
    000073A9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000073AC  48                DEC      EAX
    000073AD  BB 0E000000       MOV      EBX,14
    000073B2  F7 E3             MUL      EBX
    000073B4  50                PUSH     EAX
    000073B5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000073B8  48                DEC      EAX
    000073B9  BB 02000000       MOV      EBX,2
    000073BE  F7 E3             MUL      EBX
    000073C0  5B                POP      EBX
    000073C1  03 C3             ADD      EAX,EBX
    000073C3  8B F8             MOV      EDI,EAX
    000073C5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4542

    000073CC  B8 01000000       MOV      EAX,1
    000073D1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4543

    000073D7  B8 01000000       MOV      EAX,1
    000073DC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4545

    000073E2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000073E9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000073EE  5B                POP      EBX

    LINE      4547

    000073EF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000073F6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000073FB  5B                POP      EBX

    LINE      4549

    000073FC  B8 0A000000       MOV      EAX,10
    00007401  40                INC      EAX
    00007402  50                PUSH     EAX
    00007403  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007406  5B                POP      EBX
    00007407  3B C3             CMP      EAX,EBX
    00007409  0F 8503000000     JNE      3
    0000740F  EB                JMP      

    LINE      4563

    00007410  56                PUSH     ESI
    00007411  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00007417  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000741D  FF D1             CALL     ECX                       run_inner_proc
    0000741F  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4565

    00007420  B8 01000000       MOV      EAX,1
    00007425  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4567

    00007428  B8 01000000       MOV      EAX,1
    0000742D  8B C8             MOV      ECX,EAX
    0000742F  B8 0A000000       MOV      EAX,10
    00007434  50                PUSH     EAX
    00007435  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00007438  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000743B  5B                POP      EBX
    0000743C  53                PUSH     EBX
    0000743D  3B C3             CMP      EAX,EBX
    0000743F  0F 8E03000000     JLE      3
    00007445  EB                JMP      

    LINE      4569

    00007446  B8 01000000       MOV      EAX,1
    0000744B  8B C8             MOV      ECX,EAX
    0000744D  B8 05000000       MOV      EAX,5
    00007452  50                PUSH     EAX
    00007453  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00007456  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007459  5B                POP      EBX
    0000745A  53                PUSH     EBX
    0000745B  3B C3             CMP      EAX,EBX
    0000745D  0F 8E03000000     JLE      3
    00007463  EB                JMP      

    LINE      4576

    00007464  B8 01000000       MOV      EAX,1
    00007469  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4577

    0000746C  B8 01000000       MOV      EAX,1
    00007471  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4578

    00007474  B8 01000000       MOV      EAX,1
    00007479  8B C8             MOV      ECX,EAX
    0000747B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000747E  48                DEC      EAX
    0000747F  BB 0E000000       MOV      EBX,14
    00007484  F7 E3             MUL      EBX
    00007486  50                PUSH     EAX
    00007487  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000748A  48                DEC      EAX
    0000748B  BB 02000000       MOV      EBX,2
    00007490  F7 E3             MUL      EBX
    00007492  5B                POP      EBX
    00007493  03 C3             ADD      EAX,EBX
    00007495  8B F8             MOV      EDI,EAX
    00007497  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4579

    0000749B  B8 01000000       MOV      EAX,1
    000074A0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4580

    000074A3  B8 01000000       MOV      EAX,1
    000074A8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4582

    000074AB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000074B2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000074B7  5B                POP      EBX

    LINE      4584

    000074B8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000074BF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000074C4  5B                POP      EBX

    LINE      4586

    000074C5  B8 0A000000       MOV      EAX,10
    000074CA  40                INC      EAX
    000074CB  50                PUSH     EAX
    000074CC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000074CF  5B                POP      EBX
    000074D0  3B C3             CMP      EAX,EBX
    000074D2  0F 8503000000     JNE      3
    000074D8  EB                JMP      

    LINE      4593

    000074D9  B8 01000000       MOV      EAX,1
    000074DE  8B C8             MOV      ECX,EAX
    000074E0  B8 0A000000       MOV      EAX,10
    000074E5  50                PUSH     EAX
    000074E6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000074E9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000074EC  5B                POP      EBX
    000074ED  53                PUSH     EBX
    000074EE  3B C3             CMP      EAX,EBX
    000074F0  0F 8E03000000     JLE      3
    000074F6  EB                JMP      

    LINE      4595

    000074F7  B8 01000000       MOV      EAX,1
    000074FC  8B C8             MOV      ECX,EAX
    000074FE  B8 05000000       MOV      EAX,5
    00007503  50                PUSH     EAX
    00007504  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007507  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000750A  5B                POP      EBX
    0000750B  53                PUSH     EBX
    0000750C  3B C3             CMP      EAX,EBX
    0000750E  0F 8E03000000     JLE      3
    00007514  EB                JMP      

    LINE      4602

    00007515  B8 01000000       MOV      EAX,1
    0000751A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4603

    0000751D  B8 01000000       MOV      EAX,1
    00007522  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4604

    00007525  B8 01000000       MOV      EAX,1
    0000752A  8B C8             MOV      ECX,EAX
    0000752C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000752F  48                DEC      EAX
    00007530  BB 0E000000       MOV      EBX,14
    00007535  F7 E3             MUL      EBX
    00007537  50                PUSH     EAX
    00007538  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000753B  48                DEC      EAX
    0000753C  BB 02000000       MOV      EBX,2
    00007541  F7 E3             MUL      EBX
    00007543  5B                POP      EBX
    00007544  03 C3             ADD      EAX,EBX
    00007546  8B F8             MOV      EDI,EAX
    00007548  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4605

    0000754C  B8 01000000       MOV      EAX,1
    00007551  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4606

    00007554  B8 01000000       MOV      EAX,1
    00007559  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4608

    0000755C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00007563  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00007568  5B                POP      EBX

    LINE      4610

    00007569  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00007570  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00007575  5B                POP      EBX

    LINE      4612

    00007576  B8 0A000000       MOV      EAX,10
    0000757B  40                INC      EAX
    0000757C  50                PUSH     EAX
    0000757D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007580  5B                POP      EBX
    00007581  3B C3             CMP      EAX,EBX
    00007583  0F 8503000000     JNE      3
    00007589  EB                JMP      

    LINE      4620

    0000758A  B8 01000000       MOV      EAX,1
    0000758F  8B C8             MOV      ECX,EAX
    00007591  B8 0A000000       MOV      EAX,10
    00007596  50                PUSH     EAX
    00007597  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000759A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000759D  5B                POP      EBX
    0000759E  53                PUSH     EBX
    0000759F  3B C3             CMP      EAX,EBX
    000075A1  0F 8E03000000     JLE      3
    000075A7  EB                JMP      

    LINE      4622

    000075A8  B8 01000000       MOV      EAX,1
    000075AD  8B C8             MOV      ECX,EAX
    000075AF  B8 05000000       MOV      EAX,5
    000075B4  50                PUSH     EAX
    000075B5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000075B8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000075BB  5B                POP      EBX
    000075BC  53                PUSH     EBX
    000075BD  3B C3             CMP      EAX,EBX
    000075BF  0F 8E03000000     JLE      3
    000075C5  EB                JMP      

    LINE      4629

    000075C6  B8 01000000       MOV      EAX,1
    000075CB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4630

    000075D1  B8 01000000       MOV      EAX,1
    000075D6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4631

    000075DC  B8 01000000       MOV      EAX,1
    000075E1  8B C8             MOV      ECX,EAX
    000075E3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000075E6  48                DEC      EAX
    000075E7  BB 0E000000       MOV      EBX,14
    000075EC  F7 E3             MUL      EBX
    000075EE  50                PUSH     EAX
    000075EF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000075F2  48                DEC      EAX
    000075F3  BB 02000000       MOV      EBX,2
    000075F8  F7 E3             MUL      EBX
    000075FA  5B                POP      EBX
    000075FB  03 C3             ADD      EAX,EBX
    000075FD  8B F8             MOV      EDI,EAX
    000075FF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4632

    00007606  B8 01000000       MOV      EAX,1
    0000760B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4633

    00007611  B8 01000000       MOV      EAX,1
    00007616  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4635

    0000761C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00007623  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00007628  5B                POP      EBX

    LINE      4637

    00007629  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00007630  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00007635  5B                POP      EBX

    LINE      4639

    00007636  B8 0A000000       MOV      EAX,10
    0000763B  40                INC      EAX
    0000763C  50                PUSH     EAX
    0000763D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007640  5B                POP      EBX
    00007641  3B C3             CMP      EAX,EBX
    00007643  0F 8503000000     JNE      3
    00007649  EB                JMP      

    LINE      4646

    0000764A  B8 01000000       MOV      EAX,1
    0000764F  8B C8             MOV      ECX,EAX
    00007651  B8 0A000000       MOV      EAX,10
    00007656  50                PUSH     EAX
    00007657  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000765A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000765D  5B                POP      EBX
    0000765E  53                PUSH     EBX
    0000765F  3B C3             CMP      EAX,EBX
    00007661  0F 8E03000000     JLE      3
    00007667  EB                JMP      

    LINE      4648

    00007668  B8 01000000       MOV      EAX,1
    0000766D  8B C8             MOV      ECX,EAX
    0000766F  B8 05000000       MOV      EAX,5
    00007674  50                PUSH     EAX
    00007675  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007678  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000767B  5B                POP      EBX
    0000767C  53                PUSH     EBX
    0000767D  3B C3             CMP      EAX,EBX
    0000767F  0F 8E03000000     JLE      3
    00007685  EB                JMP      

    LINE      4655

    00007686  B8 01000000       MOV      EAX,1
    0000768B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4656

    00007691  B8 01000000       MOV      EAX,1
    00007696  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4657

    0000769C  B8 01000000       MOV      EAX,1
    000076A1  8B C8             MOV      ECX,EAX
    000076A3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000076A6  48                DEC      EAX
    000076A7  BB 0E000000       MOV      EBX,14
    000076AC  F7 E3             MUL      EBX
    000076AE  50                PUSH     EAX
    000076AF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000076B2  48                DEC      EAX
    000076B3  BB 02000000       MOV      EBX,2
    000076B8  F7 E3             MUL      EBX
    000076BA  5B                POP      EBX
    000076BB  03 C3             ADD      EAX,EBX
    000076BD  8B F8             MOV      EDI,EAX
    000076BF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4658

    000076C6  B8 01000000       MOV      EAX,1
    000076CB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4659

    000076D1  B8 01000000       MOV      EAX,1
    000076D6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4661

    000076DC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000076E3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000076E8  5B                POP      EBX

    LINE      4663

    000076E9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000076F0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000076F5  5B                POP      EBX

    LINE      4665

    000076F6  B8 0A000000       MOV      EAX,10
    000076FB  40                INC      EAX
    000076FC  50                PUSH     EAX
    000076FD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007700  5B                POP      EBX
    00007701  3B C3             CMP      EAX,EBX
    00007703  0F 8503000000     JNE      3
    00007709  EB                JMP      

    LINE      4679

    0000770A  56                PUSH     ESI
    0000770B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00007711  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00007717  FF D1             CALL     ECX                       run_inner_proc
    00007719  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4681

    0000771A  B8 01000000       MOV      EAX,1
    0000771F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4683

    00007722  B8 01000000       MOV      EAX,1
    00007727  8B C8             MOV      ECX,EAX
    00007729  B8 0A000000       MOV      EAX,10
    0000772E  50                PUSH     EAX
    0000772F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00007732  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007735  5B                POP      EBX
    00007736  53                PUSH     EBX
    00007737  3B C3             CMP      EAX,EBX
    00007739  0F 8E03000000     JLE      3
    0000773F  EB                JMP      

    LINE      4685

    00007740  B8 01000000       MOV      EAX,1
    00007745  8B C8             MOV      ECX,EAX
    00007747  B8 05000000       MOV      EAX,5
    0000774C  50                PUSH     EAX
    0000774D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00007750  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007753  5B                POP      EBX
    00007754  53                PUSH     EBX
    00007755  3B C3             CMP      EAX,EBX
    00007757  0F 8E03000000     JLE      3
    0000775D  EB                JMP      

    LINE      4692

    0000775E  B8 01000000       MOV      EAX,1
    00007763  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4693

    00007766  B8 01000000       MOV      EAX,1
    0000776B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4694

    0000776E  B8 01000000       MOV      EAX,1
    00007773  8B C8             MOV      ECX,EAX
    00007775  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007778  48                DEC      EAX
    00007779  BB 0E000000       MOV      EBX,14
    0000777E  F7 E3             MUL      EBX
    00007780  50                PUSH     EAX
    00007781  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007784  48                DEC      EAX
    00007785  BB 02000000       MOV      EBX,2
    0000778A  F7 E3             MUL      EBX
    0000778C  5B                POP      EBX
    0000778D  03 C3             ADD      EAX,EBX
    0000778F  8B F8             MOV      EDI,EAX
    00007791  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4695

    00007795  B8 01000000       MOV      EAX,1
    0000779A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4696

    0000779D  B8 01000000       MOV      EAX,1
    000077A2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4698

    000077A5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000077AC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000077B1  5B                POP      EBX

    LINE      4700

    000077B2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000077B9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000077BE  5B                POP      EBX

    LINE      4702

    000077BF  B8 0A000000       MOV      EAX,10
    000077C4  40                INC      EAX
    000077C5  50                PUSH     EAX
    000077C6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000077C9  5B                POP      EBX
    000077CA  3B C3             CMP      EAX,EBX
    000077CC  0F 8503000000     JNE      3
    000077D2  EB                JMP      

    LINE      4709

    000077D3  B8 01000000       MOV      EAX,1
    000077D8  8B C8             MOV      ECX,EAX
    000077DA  B8 0A000000       MOV      EAX,10
    000077DF  50                PUSH     EAX
    000077E0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000077E3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000077E6  5B                POP      EBX
    000077E7  53                PUSH     EBX
    000077E8  3B C3             CMP      EAX,EBX
    000077EA  0F 8E03000000     JLE      3
    000077F0  EB                JMP      

    LINE      4711

    000077F1  B8 01000000       MOV      EAX,1
    000077F6  8B C8             MOV      ECX,EAX
    000077F8  B8 05000000       MOV      EAX,5
    000077FD  50                PUSH     EAX
    000077FE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007801  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007804  5B                POP      EBX
    00007805  53                PUSH     EBX
    00007806  3B C3             CMP      EAX,EBX
    00007808  0F 8E03000000     JLE      3
    0000780E  EB                JMP      

    LINE      4718

    0000780F  B8 01000000       MOV      EAX,1
    00007814  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4719

    00007817  B8 01000000       MOV      EAX,1
    0000781C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4720

    0000781F  B8 01000000       MOV      EAX,1
    00007824  8B C8             MOV      ECX,EAX
    00007826  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007829  48                DEC      EAX
    0000782A  BB 0E000000       MOV      EBX,14
    0000782F  F7 E3             MUL      EBX
    00007831  50                PUSH     EAX
    00007832  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007835  48                DEC      EAX
    00007836  BB 02000000       MOV      EBX,2
    0000783B  F7 E3             MUL      EBX
    0000783D  5B                POP      EBX
    0000783E  03 C3             ADD      EAX,EBX
    00007840  8B F8             MOV      EDI,EAX
    00007842  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4721

    00007846  B8 01000000       MOV      EAX,1
    0000784B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4722

    0000784E  B8 01000000       MOV      EAX,1
    00007853  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4724

    00007856  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000785D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00007862  5B                POP      EBX

    LINE      4726

    00007863  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000786A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000786F  5B                POP      EBX

    LINE      4728

    00007870  B8 0A000000       MOV      EAX,10
    00007875  40                INC      EAX
    00007876  50                PUSH     EAX
    00007877  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000787A  5B                POP      EBX
    0000787B  3B C3             CMP      EAX,EBX
    0000787D  0F 8503000000     JNE      3
    00007883  EB                JMP      

    LINE      4736

    00007884  B8 01000000       MOV      EAX,1
    00007889  8B C8             MOV      ECX,EAX
    0000788B  B8 0A000000       MOV      EAX,10
    00007890  50                PUSH     EAX
    00007891  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00007894  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007897  5B                POP      EBX
    00007898  53                PUSH     EBX
    00007899  3B C3             CMP      EAX,EBX
    0000789B  0F 8E03000000     JLE      3
    000078A1  EB                JMP      

    LINE      4738

    000078A2  B8 01000000       MOV      EAX,1
    000078A7  8B C8             MOV      ECX,EAX
    000078A9  B8 05000000       MOV      EAX,5
    000078AE  50                PUSH     EAX
    000078AF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000078B2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000078B5  5B                POP      EBX
    000078B6  53                PUSH     EBX
    000078B7  3B C3             CMP      EAX,EBX
    000078B9  0F 8E03000000     JLE      3
    000078BF  EB                JMP      

    LINE      4745

    000078C0  B8 01000000       MOV      EAX,1
    000078C5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4746

    000078CB  B8 01000000       MOV      EAX,1
    000078D0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4747

    000078D6  B8 01000000       MOV      EAX,1
    000078DB  8B C8             MOV      ECX,EAX
    000078DD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000078E0  48                DEC      EAX
    000078E1  BB 0E000000       MOV      EBX,14
    000078E6  F7 E3             MUL      EBX
    000078E8  50                PUSH     EAX
    000078E9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000078EC  48                DEC      EAX
    000078ED  BB 02000000       MOV      EBX,2
    000078F2  F7 E3             MUL      EBX
    000078F4  5B                POP      EBX
    000078F5  03 C3             ADD      EAX,EBX
    000078F7  8B F8             MOV      EDI,EAX
    000078F9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4748

    00007900  B8 01000000       MOV      EAX,1
    00007905  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4749

    0000790B  B8 01000000       MOV      EAX,1
    00007910  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4751

    00007916  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000791D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00007922  5B                POP      EBX

    LINE      4753

    00007923  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000792A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000792F  5B                POP      EBX

    LINE      4755

    00007930  B8 0A000000       MOV      EAX,10
    00007935  40                INC      EAX
    00007936  50                PUSH     EAX
    00007937  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000793A  5B                POP      EBX
    0000793B  3B C3             CMP      EAX,EBX
    0000793D  0F 8503000000     JNE      3
    00007943  EB                JMP      

    LINE      4762

    00007944  B8 01000000       MOV      EAX,1
    00007949  8B C8             MOV      ECX,EAX
    0000794B  B8 0A000000       MOV      EAX,10
    00007950  50                PUSH     EAX
    00007951  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00007954  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007957  5B                POP      EBX
    00007958  53                PUSH     EBX
    00007959  3B C3             CMP      EAX,EBX
    0000795B  0F 8E03000000     JLE      3
    00007961  EB                JMP      

    LINE      4764

    00007962  B8 01000000       MOV      EAX,1
    00007967  8B C8             MOV      ECX,EAX
    00007969  B8 05000000       MOV      EAX,5
    0000796E  50                PUSH     EAX
    0000796F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007972  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007975  5B                POP      EBX
    00007976  53                PUSH     EBX
    00007977  3B C3             CMP      EAX,EBX
    00007979  0F 8E03000000     JLE      3
    0000797F  EB                JMP      

    LINE      4771

    00007980  B8 01000000       MOV      EAX,1
    00007985  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4772

    0000798B  B8 01000000       MOV      EAX,1
    00007990  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4773

    00007996  B8 01000000       MOV      EAX,1
    0000799B  8B C8             MOV      ECX,EAX
    0000799D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000079A0  48                DEC      EAX
    000079A1  BB 0E000000       MOV      EBX,14
    000079A6  F7 E3             MUL      EBX
    000079A8  50                PUSH     EAX
    000079A9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000079AC  48                DEC      EAX
    000079AD  BB 02000000       MOV      EBX,2
    000079B2  F7 E3             MUL      EBX
    000079B4  5B                POP      EBX
    000079B5  03 C3             ADD      EAX,EBX
    000079B7  8B F8             MOV      EDI,EAX
    000079B9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4774

    000079C0  B8 01000000       MOV      EAX,1
    000079C5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4775

    000079CB  B8 01000000       MOV      EAX,1
    000079D0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4777

    000079D6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000079DD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000079E2  5B                POP      EBX

    LINE      4779

    000079E3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000079EA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000079EF  5B                POP      EBX

    LINE      4781

    000079F0  B8 0A000000       MOV      EAX,10
    000079F5  40                INC      EAX
    000079F6  50                PUSH     EAX
    000079F7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000079FA  5B                POP      EBX
    000079FB  3B C3             CMP      EAX,EBX
    000079FD  0F 8503000000     JNE      3
    00007A03  EB                JMP      

    LINE      4795

    00007A04  56                PUSH     ESI
    00007A05  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00007A0B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00007A11  FF D1             CALL     ECX                       run_inner_proc
    00007A13  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4797

    00007A14  B8 01000000       MOV      EAX,1
    00007A19  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4799

    00007A1C  B8 01000000       MOV      EAX,1
    00007A21  8B C8             MOV      ECX,EAX
    00007A23  B8 0A000000       MOV      EAX,10
    00007A28  50                PUSH     EAX
    00007A29  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00007A2C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007A2F  5B                POP      EBX
    00007A30  53                PUSH     EBX
    00007A31  3B C3             CMP      EAX,EBX
    00007A33  0F 8E03000000     JLE      3
    00007A39  EB                JMP      

    LINE      4801

    00007A3A  B8 01000000       MOV      EAX,1
    00007A3F  8B C8             MOV      ECX,EAX
    00007A41  B8 05000000       MOV      EAX,5
    00007A46  50                PUSH     EAX
    00007A47  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00007A4A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007A4D  5B                POP      EBX
    00007A4E  53                PUSH     EBX
    00007A4F  3B C3             CMP      EAX,EBX
    00007A51  0F 8E03000000     JLE      3
    00007A57  EB                JMP      

    LINE      4808

    00007A58  B8 01000000       MOV      EAX,1
    00007A5D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4809

    00007A60  B8 01000000       MOV      EAX,1
    00007A65  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4810

    00007A68  B8 01000000       MOV      EAX,1
    00007A6D  8B C8             MOV      ECX,EAX
    00007A6F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007A72  48                DEC      EAX
    00007A73  BB 0E000000       MOV      EBX,14
    00007A78  F7 E3             MUL      EBX
    00007A7A  50                PUSH     EAX
    00007A7B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007A7E  48                DEC      EAX
    00007A7F  BB 02000000       MOV      EBX,2
    00007A84  F7 E3             MUL      EBX
    00007A86  5B                POP      EBX
    00007A87  03 C3             ADD      EAX,EBX
    00007A89  8B F8             MOV      EDI,EAX
    00007A8B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4811

    00007A8F  B8 01000000       MOV      EAX,1
    00007A94  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4812

    00007A97  B8 01000000       MOV      EAX,1
    00007A9C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4814

    00007A9F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00007AA6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00007AAB  5B                POP      EBX

    LINE      4816

    00007AAC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00007AB3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00007AB8  5B                POP      EBX

    LINE      4818

    00007AB9  B8 0A000000       MOV      EAX,10
    00007ABE  40                INC      EAX
    00007ABF  50                PUSH     EAX
    00007AC0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007AC3  5B                POP      EBX
    00007AC4  3B C3             CMP      EAX,EBX
    00007AC6  0F 8503000000     JNE      3
    00007ACC  EB                JMP      

    LINE      4825

    00007ACD  B8 01000000       MOV      EAX,1
    00007AD2  8B C8             MOV      ECX,EAX
    00007AD4  B8 0A000000       MOV      EAX,10
    00007AD9  50                PUSH     EAX
    00007ADA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00007ADD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007AE0  5B                POP      EBX
    00007AE1  53                PUSH     EBX
    00007AE2  3B C3             CMP      EAX,EBX
    00007AE4  0F 8E03000000     JLE      3
    00007AEA  EB                JMP      

    LINE      4827

    00007AEB  B8 01000000       MOV      EAX,1
    00007AF0  8B C8             MOV      ECX,EAX
    00007AF2  B8 05000000       MOV      EAX,5
    00007AF7  50                PUSH     EAX
    00007AF8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007AFB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007AFE  5B                POP      EBX
    00007AFF  53                PUSH     EBX
    00007B00  3B C3             CMP      EAX,EBX
    00007B02  0F 8E03000000     JLE      3
    00007B08  EB                JMP      

    LINE      4834

    00007B09  B8 01000000       MOV      EAX,1
    00007B0E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4835

    00007B11  B8 01000000       MOV      EAX,1
    00007B16  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4836

    00007B19  B8 01000000       MOV      EAX,1
    00007B1E  8B C8             MOV      ECX,EAX
    00007B20  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007B23  48                DEC      EAX
    00007B24  BB 0E000000       MOV      EBX,14
    00007B29  F7 E3             MUL      EBX
    00007B2B  50                PUSH     EAX
    00007B2C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007B2F  48                DEC      EAX
    00007B30  BB 02000000       MOV      EBX,2
    00007B35  F7 E3             MUL      EBX
    00007B37  5B                POP      EBX
    00007B38  03 C3             ADD      EAX,EBX
    00007B3A  8B F8             MOV      EDI,EAX
    00007B3C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4837

    00007B40  B8 01000000       MOV      EAX,1
    00007B45  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4838

    00007B48  B8 01000000       MOV      EAX,1
    00007B4D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4840

    00007B50  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00007B57  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00007B5C  5B                POP      EBX

    LINE      4842

    00007B5D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00007B64  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00007B69  5B                POP      EBX

    LINE      4844

    00007B6A  B8 0A000000       MOV      EAX,10
    00007B6F  40                INC      EAX
    00007B70  50                PUSH     EAX
    00007B71  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007B74  5B                POP      EBX
    00007B75  3B C3             CMP      EAX,EBX
    00007B77  0F 8503000000     JNE      3
    00007B7D  EB                JMP      

    LINE      4852

    00007B7E  B8 01000000       MOV      EAX,1
    00007B83  8B C8             MOV      ECX,EAX
    00007B85  B8 0A000000       MOV      EAX,10
    00007B8A  50                PUSH     EAX
    00007B8B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00007B8E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007B91  5B                POP      EBX
    00007B92  53                PUSH     EBX
    00007B93  3B C3             CMP      EAX,EBX
    00007B95  0F 8E03000000     JLE      3
    00007B9B  EB                JMP      

    LINE      4854

    00007B9C  B8 01000000       MOV      EAX,1
    00007BA1  8B C8             MOV      ECX,EAX
    00007BA3  B8 05000000       MOV      EAX,5
    00007BA8  50                PUSH     EAX
    00007BA9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00007BAC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007BAF  5B                POP      EBX
    00007BB0  53                PUSH     EBX
    00007BB1  3B C3             CMP      EAX,EBX
    00007BB3  0F 8E03000000     JLE      3
    00007BB9  EB                JMP      

    LINE      4861

    00007BBA  B8 01000000       MOV      EAX,1
    00007BBF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4862

    00007BC5  B8 01000000       MOV      EAX,1
    00007BCA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4863

    00007BD0  B8 01000000       MOV      EAX,1
    00007BD5  8B C8             MOV      ECX,EAX
    00007BD7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007BDA  48                DEC      EAX
    00007BDB  BB 0E000000       MOV      EBX,14
    00007BE0  F7 E3             MUL      EBX
    00007BE2  50                PUSH     EAX
    00007BE3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007BE6  48                DEC      EAX
    00007BE7  BB 02000000       MOV      EBX,2
    00007BEC  F7 E3             MUL      EBX
    00007BEE  5B                POP      EBX
    00007BEF  03 C3             ADD      EAX,EBX
    00007BF1  8B F8             MOV      EDI,EAX
    00007BF3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4864

    00007BFA  B8 01000000       MOV      EAX,1
    00007BFF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4865

    00007C05  B8 01000000       MOV      EAX,1
    00007C0A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4867

    00007C10  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00007C17  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00007C1C  5B                POP      EBX

    LINE      4869

    00007C1D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00007C24  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00007C29  5B                POP      EBX

    LINE      4871

    00007C2A  B8 0A000000       MOV      EAX,10
    00007C2F  40                INC      EAX
    00007C30  50                PUSH     EAX
    00007C31  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007C34  5B                POP      EBX
    00007C35  3B C3             CMP      EAX,EBX
    00007C37  0F 8503000000     JNE      3
    00007C3D  EB                JMP      

    LINE      4878

    00007C3E  B8 01000000       MOV      EAX,1
    00007C43  8B C8             MOV      ECX,EAX
    00007C45  B8 0A000000       MOV      EAX,10
    00007C4A  50                PUSH     EAX
    00007C4B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00007C4E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007C51  5B                POP      EBX
    00007C52  53                PUSH     EBX
    00007C53  3B C3             CMP      EAX,EBX
    00007C55  0F 8E03000000     JLE      3
    00007C5B  EB                JMP      

    LINE      4880

    00007C5C  B8 01000000       MOV      EAX,1
    00007C61  8B C8             MOV      ECX,EAX
    00007C63  B8 05000000       MOV      EAX,5
    00007C68  50                PUSH     EAX
    00007C69  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007C6C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007C6F  5B                POP      EBX
    00007C70  53                PUSH     EBX
    00007C71  3B C3             CMP      EAX,EBX
    00007C73  0F 8E03000000     JLE      3
    00007C79  EB                JMP      

    LINE      4887

    00007C7A  B8 01000000       MOV      EAX,1
    00007C7F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4888

    00007C85  B8 01000000       MOV      EAX,1
    00007C8A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4889

    00007C90  B8 01000000       MOV      EAX,1
    00007C95  8B C8             MOV      ECX,EAX
    00007C97  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007C9A  48                DEC      EAX
    00007C9B  BB 0E000000       MOV      EBX,14
    00007CA0  F7 E3             MUL      EBX
    00007CA2  50                PUSH     EAX
    00007CA3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007CA6  48                DEC      EAX
    00007CA7  BB 02000000       MOV      EBX,2
    00007CAC  F7 E3             MUL      EBX
    00007CAE  5B                POP      EBX
    00007CAF  03 C3             ADD      EAX,EBX
    00007CB1  8B F8             MOV      EDI,EAX
    00007CB3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4890

    00007CBA  B8 01000000       MOV      EAX,1
    00007CBF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4891

    00007CC5  B8 01000000       MOV      EAX,1
    00007CCA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4893

    00007CD0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00007CD7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00007CDC  5B                POP      EBX

    LINE      4895

    00007CDD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00007CE4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00007CE9  5B                POP      EBX

    LINE      4897

    00007CEA  B8 0A000000       MOV      EAX,10
    00007CEF  40                INC      EAX
    00007CF0  50                PUSH     EAX
    00007CF1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007CF4  5B                POP      EBX
    00007CF5  3B C3             CMP      EAX,EBX
    00007CF7  0F 8503000000     JNE      3
    00007CFD  EB                JMP      

    LINE      4911

    00007CFE  56                PUSH     ESI
    00007CFF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00007D05  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00007D0B  FF D1             CALL     ECX                       run_inner_proc
    00007D0D  5E                POP      ESI                       /* restore callers static pointer */

    LINE      4913

    00007D0E  B8 01000000       MOV      EAX,1
    00007D13  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      4915

    00007D16  B8 01000000       MOV      EAX,1
    00007D1B  8B C8             MOV      ECX,EAX
    00007D1D  B8 0A000000       MOV      EAX,10
    00007D22  50                PUSH     EAX
    00007D23  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00007D26  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007D29  5B                POP      EBX
    00007D2A  53                PUSH     EBX
    00007D2B  3B C3             CMP      EAX,EBX
    00007D2D  0F 8E03000000     JLE      3
    00007D33  EB                JMP      

    LINE      4917

    00007D34  B8 01000000       MOV      EAX,1
    00007D39  8B C8             MOV      ECX,EAX
    00007D3B  B8 05000000       MOV      EAX,5
    00007D40  50                PUSH     EAX
    00007D41  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00007D44  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007D47  5B                POP      EBX
    00007D48  53                PUSH     EBX
    00007D49  3B C3             CMP      EAX,EBX
    00007D4B  0F 8E03000000     JLE      3
    00007D51  EB                JMP      

    LINE      4924

    00007D52  B8 01000000       MOV      EAX,1
    00007D57  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4925

    00007D5A  B8 01000000       MOV      EAX,1
    00007D5F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4926

    00007D62  B8 01000000       MOV      EAX,1
    00007D67  8B C8             MOV      ECX,EAX
    00007D69  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007D6C  48                DEC      EAX
    00007D6D  BB 0E000000       MOV      EBX,14
    00007D72  F7 E3             MUL      EBX
    00007D74  50                PUSH     EAX
    00007D75  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007D78  48                DEC      EAX
    00007D79  BB 02000000       MOV      EBX,2
    00007D7E  F7 E3             MUL      EBX
    00007D80  5B                POP      EBX
    00007D81  03 C3             ADD      EAX,EBX
    00007D83  8B F8             MOV      EDI,EAX
    00007D85  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4927

    00007D89  B8 01000000       MOV      EAX,1
    00007D8E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4928

    00007D91  B8 01000000       MOV      EAX,1
    00007D96  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4930

    00007D99  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00007DA0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00007DA5  5B                POP      EBX

    LINE      4932

    00007DA6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00007DAD  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00007DB2  5B                POP      EBX

    LINE      4934

    00007DB3  B8 0A000000       MOV      EAX,10
    00007DB8  40                INC      EAX
    00007DB9  50                PUSH     EAX
    00007DBA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007DBD  5B                POP      EBX
    00007DBE  3B C3             CMP      EAX,EBX
    00007DC0  0F 8503000000     JNE      3
    00007DC6  EB                JMP      

    LINE      4941

    00007DC7  B8 01000000       MOV      EAX,1
    00007DCC  8B C8             MOV      ECX,EAX
    00007DCE  B8 0A000000       MOV      EAX,10
    00007DD3  50                PUSH     EAX
    00007DD4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00007DD7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007DDA  5B                POP      EBX
    00007DDB  53                PUSH     EBX
    00007DDC  3B C3             CMP      EAX,EBX
    00007DDE  0F 8E03000000     JLE      3
    00007DE4  EB                JMP      

    LINE      4943

    00007DE5  B8 01000000       MOV      EAX,1
    00007DEA  8B C8             MOV      ECX,EAX
    00007DEC  B8 05000000       MOV      EAX,5
    00007DF1  50                PUSH     EAX
    00007DF2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007DF5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007DF8  5B                POP      EBX
    00007DF9  53                PUSH     EBX
    00007DFA  3B C3             CMP      EAX,EBX
    00007DFC  0F 8E03000000     JLE      3
    00007E02  EB                JMP      

    LINE      4950

    00007E03  B8 01000000       MOV      EAX,1
    00007E08  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4951

    00007E0B  B8 01000000       MOV      EAX,1
    00007E10  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4952

    00007E13  B8 01000000       MOV      EAX,1
    00007E18  8B C8             MOV      ECX,EAX
    00007E1A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007E1D  48                DEC      EAX
    00007E1E  BB 0E000000       MOV      EBX,14
    00007E23  F7 E3             MUL      EBX
    00007E25  50                PUSH     EAX
    00007E26  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007E29  48                DEC      EAX
    00007E2A  BB 02000000       MOV      EBX,2
    00007E2F  F7 E3             MUL      EBX
    00007E31  5B                POP      EBX
    00007E32  03 C3             ADD      EAX,EBX
    00007E34  8B F8             MOV      EDI,EAX
    00007E36  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      4953

    00007E3A  B8 01000000       MOV      EAX,1
    00007E3F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4954

    00007E42  B8 01000000       MOV      EAX,1
    00007E47  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      4956

    00007E4A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00007E51  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00007E56  5B                POP      EBX

    LINE      4958

    00007E57  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00007E5E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00007E63  5B                POP      EBX

    LINE      4960

    00007E64  B8 0A000000       MOV      EAX,10
    00007E69  40                INC      EAX
    00007E6A  50                PUSH     EAX
    00007E6B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007E6E  5B                POP      EBX
    00007E6F  3B C3             CMP      EAX,EBX
    00007E71  0F 8503000000     JNE      3
    00007E77  EB                JMP      

    LINE      4968

    00007E78  B8 01000000       MOV      EAX,1
    00007E7D  8B C8             MOV      ECX,EAX
    00007E7F  B8 0A000000       MOV      EAX,10
    00007E84  50                PUSH     EAX
    00007E85  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00007E88  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007E8B  5B                POP      EBX
    00007E8C  53                PUSH     EBX
    00007E8D  3B C3             CMP      EAX,EBX
    00007E8F  0F 8E03000000     JLE      3
    00007E95  EB                JMP      

    LINE      4970

    00007E96  B8 01000000       MOV      EAX,1
    00007E9B  8B C8             MOV      ECX,EAX
    00007E9D  B8 05000000       MOV      EAX,5
    00007EA2  50                PUSH     EAX
    00007EA3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00007EA6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007EA9  5B                POP      EBX
    00007EAA  53                PUSH     EBX
    00007EAB  3B C3             CMP      EAX,EBX
    00007EAD  0F 8E03000000     JLE      3
    00007EB3  EB                JMP      

    LINE      4977

    00007EB4  B8 01000000       MOV      EAX,1
    00007EB9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4978

    00007EBF  B8 01000000       MOV      EAX,1
    00007EC4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4979

    00007ECA  B8 01000000       MOV      EAX,1
    00007ECF  8B C8             MOV      ECX,EAX
    00007ED1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007ED4  48                DEC      EAX
    00007ED5  BB 0E000000       MOV      EBX,14
    00007EDA  F7 E3             MUL      EBX
    00007EDC  50                PUSH     EAX
    00007EDD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00007EE0  48                DEC      EAX
    00007EE1  BB 02000000       MOV      EBX,2
    00007EE6  F7 E3             MUL      EBX
    00007EE8  5B                POP      EBX
    00007EE9  03 C3             ADD      EAX,EBX
    00007EEB  8B F8             MOV      EDI,EAX
    00007EED  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      4980

    00007EF4  B8 01000000       MOV      EAX,1
    00007EF9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4981

    00007EFF  B8 01000000       MOV      EAX,1
    00007F04  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      4983

    00007F0A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00007F11  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00007F16  5B                POP      EBX

    LINE      4985

    00007F17  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00007F1E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00007F23  5B                POP      EBX

    LINE      4987

    00007F24  B8 0A000000       MOV      EAX,10
    00007F29  40                INC      EAX
    00007F2A  50                PUSH     EAX
    00007F2B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007F2E  5B                POP      EBX
    00007F2F  3B C3             CMP      EAX,EBX
    00007F31  0F 8503000000     JNE      3
    00007F37  EB                JMP      

    LINE      4994

    00007F38  B8 01000000       MOV      EAX,1
    00007F3D  8B C8             MOV      ECX,EAX
    00007F3F  B8 0A000000       MOV      EAX,10
    00007F44  50                PUSH     EAX
    00007F45  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00007F48  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007F4B  5B                POP      EBX
    00007F4C  53                PUSH     EBX
    00007F4D  3B C3             CMP      EAX,EBX
    00007F4F  0F 8E03000000     JLE      3
    00007F55  EB                JMP      

    LINE      4996

    00007F56  B8 01000000       MOV      EAX,1
    00007F5B  8B C8             MOV      ECX,EAX
    00007F5D  B8 05000000       MOV      EAX,5
    00007F62  50                PUSH     EAX
    00007F63  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00007F66  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007F69  5B                POP      EBX
    00007F6A  53                PUSH     EBX
    00007F6B  3B C3             CMP      EAX,EBX
    00007F6D  0F 8E03000000     JLE      3
    00007F73  EB                JMP      

    LINE      5003

    00007F74  B8 01000000       MOV      EAX,1
    00007F79  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5004

    00007F7F  B8 01000000       MOV      EAX,1
    00007F84  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5005

    00007F8A  B8 01000000       MOV      EAX,1
    00007F8F  8B C8             MOV      ECX,EAX
    00007F91  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00007F94  48                DEC      EAX
    00007F95  BB 0E000000       MOV      EBX,14
    00007F9A  F7 E3             MUL      EBX
    00007F9C  50                PUSH     EAX
    00007F9D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00007FA0  48                DEC      EAX
    00007FA1  BB 02000000       MOV      EBX,2
    00007FA6  F7 E3             MUL      EBX
    00007FA8  5B                POP      EBX
    00007FA9  03 C3             ADD      EAX,EBX
    00007FAB  8B F8             MOV      EDI,EAX
    00007FAD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5006

    00007FB4  B8 01000000       MOV      EAX,1
    00007FB9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5007

    00007FBF  B8 01000000       MOV      EAX,1
    00007FC4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5009

    00007FCA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00007FD1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00007FD6  5B                POP      EBX

    LINE      5011

    00007FD7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00007FDE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00007FE3  5B                POP      EBX

    LINE      5013

    00007FE4  B8 0A000000       MOV      EAX,10
    00007FE9  40                INC      EAX
    00007FEA  50                PUSH     EAX
    00007FEB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00007FEE  5B                POP      EBX
    00007FEF  3B C3             CMP      EAX,EBX
    00007FF1  0F 8503000000     JNE      3
    00007FF7  EB                JMP      

    LINE      5027

    00007FF8  56                PUSH     ESI
    00007FF9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00007FFF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00008005  FF D1             CALL     ECX                       run_inner_proc
    00008007  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5029

    00008008  B8 01000000       MOV      EAX,1
    0000800D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5031

    00008010  B8 01000000       MOV      EAX,1
    00008015  8B C8             MOV      ECX,EAX
    00008017  B8 0A000000       MOV      EAX,10
    0000801C  50                PUSH     EAX
    0000801D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008020  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008023  5B                POP      EBX
    00008024  53                PUSH     EBX
    00008025  3B C3             CMP      EAX,EBX
    00008027  0F 8E03000000     JLE      3
    0000802D  EB                JMP      

    LINE      5033

    0000802E  B8 01000000       MOV      EAX,1
    00008033  8B C8             MOV      ECX,EAX
    00008035  B8 05000000       MOV      EAX,5
    0000803A  50                PUSH     EAX
    0000803B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000803E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008041  5B                POP      EBX
    00008042  53                PUSH     EBX
    00008043  3B C3             CMP      EAX,EBX
    00008045  0F 8E03000000     JLE      3
    0000804B  EB                JMP      

    LINE      5040

    0000804C  B8 01000000       MOV      EAX,1
    00008051  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5041

    00008054  B8 01000000       MOV      EAX,1
    00008059  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5042

    0000805C  B8 01000000       MOV      EAX,1
    00008061  8B C8             MOV      ECX,EAX
    00008063  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008066  48                DEC      EAX
    00008067  BB 0E000000       MOV      EBX,14
    0000806C  F7 E3             MUL      EBX
    0000806E  50                PUSH     EAX
    0000806F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008072  48                DEC      EAX
    00008073  BB 02000000       MOV      EBX,2
    00008078  F7 E3             MUL      EBX
    0000807A  5B                POP      EBX
    0000807B  03 C3             ADD      EAX,EBX
    0000807D  8B F8             MOV      EDI,EAX
    0000807F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5043

    00008083  B8 01000000       MOV      EAX,1
    00008088  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5044

    0000808B  B8 01000000       MOV      EAX,1
    00008090  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5046

    00008093  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000809A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000809F  5B                POP      EBX

    LINE      5048

    000080A0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000080A7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000080AC  5B                POP      EBX

    LINE      5050

    000080AD  B8 0A000000       MOV      EAX,10
    000080B2  40                INC      EAX
    000080B3  50                PUSH     EAX
    000080B4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000080B7  5B                POP      EBX
    000080B8  3B C3             CMP      EAX,EBX
    000080BA  0F 8503000000     JNE      3
    000080C0  EB                JMP      

    LINE      5057

    000080C1  B8 01000000       MOV      EAX,1
    000080C6  8B C8             MOV      ECX,EAX
    000080C8  B8 0A000000       MOV      EAX,10
    000080CD  50                PUSH     EAX
    000080CE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000080D1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000080D4  5B                POP      EBX
    000080D5  53                PUSH     EBX
    000080D6  3B C3             CMP      EAX,EBX
    000080D8  0F 8E03000000     JLE      3
    000080DE  EB                JMP      

    LINE      5059

    000080DF  B8 01000000       MOV      EAX,1
    000080E4  8B C8             MOV      ECX,EAX
    000080E6  B8 05000000       MOV      EAX,5
    000080EB  50                PUSH     EAX
    000080EC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000080EF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000080F2  5B                POP      EBX
    000080F3  53                PUSH     EBX
    000080F4  3B C3             CMP      EAX,EBX
    000080F6  0F 8E03000000     JLE      3
    000080FC  EB                JMP      

    LINE      5066

    000080FD  B8 01000000       MOV      EAX,1
    00008102  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5067

    00008105  B8 01000000       MOV      EAX,1
    0000810A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5068

    0000810D  B8 01000000       MOV      EAX,1
    00008112  8B C8             MOV      ECX,EAX
    00008114  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008117  48                DEC      EAX
    00008118  BB 0E000000       MOV      EBX,14
    0000811D  F7 E3             MUL      EBX
    0000811F  50                PUSH     EAX
    00008120  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008123  48                DEC      EAX
    00008124  BB 02000000       MOV      EBX,2
    00008129  F7 E3             MUL      EBX
    0000812B  5B                POP      EBX
    0000812C  03 C3             ADD      EAX,EBX
    0000812E  8B F8             MOV      EDI,EAX
    00008130  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5069

    00008134  B8 01000000       MOV      EAX,1
    00008139  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5070

    0000813C  B8 01000000       MOV      EAX,1
    00008141  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5072

    00008144  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000814B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008150  5B                POP      EBX

    LINE      5074

    00008151  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00008158  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000815D  5B                POP      EBX

    LINE      5076

    0000815E  B8 0A000000       MOV      EAX,10
    00008163  40                INC      EAX
    00008164  50                PUSH     EAX
    00008165  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008168  5B                POP      EBX
    00008169  3B C3             CMP      EAX,EBX
    0000816B  0F 8503000000     JNE      3
    00008171  EB                JMP      

    LINE      5084

    00008172  B8 01000000       MOV      EAX,1
    00008177  8B C8             MOV      ECX,EAX
    00008179  B8 0A000000       MOV      EAX,10
    0000817E  50                PUSH     EAX
    0000817F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008182  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008185  5B                POP      EBX
    00008186  53                PUSH     EBX
    00008187  3B C3             CMP      EAX,EBX
    00008189  0F 8E03000000     JLE      3
    0000818F  EB                JMP      

    LINE      5086

    00008190  B8 01000000       MOV      EAX,1
    00008195  8B C8             MOV      ECX,EAX
    00008197  B8 05000000       MOV      EAX,5
    0000819C  50                PUSH     EAX
    0000819D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000081A0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000081A3  5B                POP      EBX
    000081A4  53                PUSH     EBX
    000081A5  3B C3             CMP      EAX,EBX
    000081A7  0F 8E03000000     JLE      3
    000081AD  EB                JMP      

    LINE      5093

    000081AE  B8 01000000       MOV      EAX,1
    000081B3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5094

    000081B9  B8 01000000       MOV      EAX,1
    000081BE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5095

    000081C4  B8 01000000       MOV      EAX,1
    000081C9  8B C8             MOV      ECX,EAX
    000081CB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000081CE  48                DEC      EAX
    000081CF  BB 0E000000       MOV      EBX,14
    000081D4  F7 E3             MUL      EBX
    000081D6  50                PUSH     EAX
    000081D7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000081DA  48                DEC      EAX
    000081DB  BB 02000000       MOV      EBX,2
    000081E0  F7 E3             MUL      EBX
    000081E2  5B                POP      EBX
    000081E3  03 C3             ADD      EAX,EBX
    000081E5  8B F8             MOV      EDI,EAX
    000081E7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5096

    000081EE  B8 01000000       MOV      EAX,1
    000081F3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5097

    000081F9  B8 01000000       MOV      EAX,1
    000081FE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5099

    00008204  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000820B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00008210  5B                POP      EBX

    LINE      5101

    00008211  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00008218  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000821D  5B                POP      EBX

    LINE      5103

    0000821E  B8 0A000000       MOV      EAX,10
    00008223  40                INC      EAX
    00008224  50                PUSH     EAX
    00008225  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008228  5B                POP      EBX
    00008229  3B C3             CMP      EAX,EBX
    0000822B  0F 8503000000     JNE      3
    00008231  EB                JMP      

    LINE      5110

    00008232  B8 01000000       MOV      EAX,1
    00008237  8B C8             MOV      ECX,EAX
    00008239  B8 0A000000       MOV      EAX,10
    0000823E  50                PUSH     EAX
    0000823F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00008242  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008245  5B                POP      EBX
    00008246  53                PUSH     EBX
    00008247  3B C3             CMP      EAX,EBX
    00008249  0F 8E03000000     JLE      3
    0000824F  EB                JMP      

    LINE      5112

    00008250  B8 01000000       MOV      EAX,1
    00008255  8B C8             MOV      ECX,EAX
    00008257  B8 05000000       MOV      EAX,5
    0000825C  50                PUSH     EAX
    0000825D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00008260  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008263  5B                POP      EBX
    00008264  53                PUSH     EBX
    00008265  3B C3             CMP      EAX,EBX
    00008267  0F 8E03000000     JLE      3
    0000826D  EB                JMP      

    LINE      5119

    0000826E  B8 01000000       MOV      EAX,1
    00008273  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5120

    00008279  B8 01000000       MOV      EAX,1
    0000827E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5121

    00008284  B8 01000000       MOV      EAX,1
    00008289  8B C8             MOV      ECX,EAX
    0000828B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000828E  48                DEC      EAX
    0000828F  BB 0E000000       MOV      EBX,14
    00008294  F7 E3             MUL      EBX
    00008296  50                PUSH     EAX
    00008297  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000829A  48                DEC      EAX
    0000829B  BB 02000000       MOV      EBX,2
    000082A0  F7 E3             MUL      EBX
    000082A2  5B                POP      EBX
    000082A3  03 C3             ADD      EAX,EBX
    000082A5  8B F8             MOV      EDI,EAX
    000082A7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5122

    000082AE  B8 01000000       MOV      EAX,1
    000082B3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5123

    000082B9  B8 01000000       MOV      EAX,1
    000082BE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5125

    000082C4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000082CB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000082D0  5B                POP      EBX

    LINE      5127

    000082D1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000082D8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000082DD  5B                POP      EBX

    LINE      5129

    000082DE  B8 0A000000       MOV      EAX,10
    000082E3  40                INC      EAX
    000082E4  50                PUSH     EAX
    000082E5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000082E8  5B                POP      EBX
    000082E9  3B C3             CMP      EAX,EBX
    000082EB  0F 8503000000     JNE      3
    000082F1  EB                JMP      

    LINE      5143

    000082F2  56                PUSH     ESI
    000082F3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000082F9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000082FF  FF D1             CALL     ECX                       run_inner_proc
    00008301  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5145

    00008302  B8 01000000       MOV      EAX,1
    00008307  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5147

    0000830A  B8 01000000       MOV      EAX,1
    0000830F  8B C8             MOV      ECX,EAX
    00008311  B8 0A000000       MOV      EAX,10
    00008316  50                PUSH     EAX
    00008317  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000831A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000831D  5B                POP      EBX
    0000831E  53                PUSH     EBX
    0000831F  3B C3             CMP      EAX,EBX
    00008321  0F 8E03000000     JLE      3
    00008327  EB                JMP      

    LINE      5149

    00008328  B8 01000000       MOV      EAX,1
    0000832D  8B C8             MOV      ECX,EAX
    0000832F  B8 05000000       MOV      EAX,5
    00008334  50                PUSH     EAX
    00008335  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00008338  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000833B  5B                POP      EBX
    0000833C  53                PUSH     EBX
    0000833D  3B C3             CMP      EAX,EBX
    0000833F  0F 8E03000000     JLE      3
    00008345  EB                JMP      

    LINE      5156

    00008346  B8 01000000       MOV      EAX,1
    0000834B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5157

    0000834E  B8 01000000       MOV      EAX,1
    00008353  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5158

    00008356  B8 01000000       MOV      EAX,1
    0000835B  8B C8             MOV      ECX,EAX
    0000835D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008360  48                DEC      EAX
    00008361  BB 0E000000       MOV      EBX,14
    00008366  F7 E3             MUL      EBX
    00008368  50                PUSH     EAX
    00008369  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000836C  48                DEC      EAX
    0000836D  BB 02000000       MOV      EBX,2
    00008372  F7 E3             MUL      EBX
    00008374  5B                POP      EBX
    00008375  03 C3             ADD      EAX,EBX
    00008377  8B F8             MOV      EDI,EAX
    00008379  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5159

    0000837D  B8 01000000       MOV      EAX,1
    00008382  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5160

    00008385  B8 01000000       MOV      EAX,1
    0000838A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5162

    0000838D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00008394  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008399  5B                POP      EBX

    LINE      5164

    0000839A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000083A1  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000083A6  5B                POP      EBX

    LINE      5166

    000083A7  B8 0A000000       MOV      EAX,10
    000083AC  40                INC      EAX
    000083AD  50                PUSH     EAX
    000083AE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000083B1  5B                POP      EBX
    000083B2  3B C3             CMP      EAX,EBX
    000083B4  0F 8503000000     JNE      3
    000083BA  EB                JMP      

    LINE      5173

    000083BB  B8 01000000       MOV      EAX,1
    000083C0  8B C8             MOV      ECX,EAX
    000083C2  B8 0A000000       MOV      EAX,10
    000083C7  50                PUSH     EAX
    000083C8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000083CB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000083CE  5B                POP      EBX
    000083CF  53                PUSH     EBX
    000083D0  3B C3             CMP      EAX,EBX
    000083D2  0F 8E03000000     JLE      3
    000083D8  EB                JMP      

    LINE      5175

    000083D9  B8 01000000       MOV      EAX,1
    000083DE  8B C8             MOV      ECX,EAX
    000083E0  B8 05000000       MOV      EAX,5
    000083E5  50                PUSH     EAX
    000083E6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000083E9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000083EC  5B                POP      EBX
    000083ED  53                PUSH     EBX
    000083EE  3B C3             CMP      EAX,EBX
    000083F0  0F 8E03000000     JLE      3
    000083F6  EB                JMP      

    LINE      5182

    000083F7  B8 01000000       MOV      EAX,1
    000083FC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5183

    000083FF  B8 01000000       MOV      EAX,1
    00008404  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5184

    00008407  B8 01000000       MOV      EAX,1
    0000840C  8B C8             MOV      ECX,EAX
    0000840E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008411  48                DEC      EAX
    00008412  BB 0E000000       MOV      EBX,14
    00008417  F7 E3             MUL      EBX
    00008419  50                PUSH     EAX
    0000841A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000841D  48                DEC      EAX
    0000841E  BB 02000000       MOV      EBX,2
    00008423  F7 E3             MUL      EBX
    00008425  5B                POP      EBX
    00008426  03 C3             ADD      EAX,EBX
    00008428  8B F8             MOV      EDI,EAX
    0000842A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5185

    0000842E  B8 01000000       MOV      EAX,1
    00008433  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5186

    00008436  B8 01000000       MOV      EAX,1
    0000843B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5188

    0000843E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00008445  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000844A  5B                POP      EBX

    LINE      5190

    0000844B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00008452  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00008457  5B                POP      EBX

    LINE      5192

    00008458  B8 0A000000       MOV      EAX,10
    0000845D  40                INC      EAX
    0000845E  50                PUSH     EAX
    0000845F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008462  5B                POP      EBX
    00008463  3B C3             CMP      EAX,EBX
    00008465  0F 8503000000     JNE      3
    0000846B  EB                JMP      

    LINE      5200

    0000846C  B8 01000000       MOV      EAX,1
    00008471  8B C8             MOV      ECX,EAX
    00008473  B8 0A000000       MOV      EAX,10
    00008478  50                PUSH     EAX
    00008479  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000847C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000847F  5B                POP      EBX
    00008480  53                PUSH     EBX
    00008481  3B C3             CMP      EAX,EBX
    00008483  0F 8E03000000     JLE      3
    00008489  EB                JMP      

    LINE      5202

    0000848A  B8 01000000       MOV      EAX,1
    0000848F  8B C8             MOV      ECX,EAX
    00008491  B8 05000000       MOV      EAX,5
    00008496  50                PUSH     EAX
    00008497  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000849A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000849D  5B                POP      EBX
    0000849E  53                PUSH     EBX
    0000849F  3B C3             CMP      EAX,EBX
    000084A1  0F 8E03000000     JLE      3
    000084A7  EB                JMP      

    LINE      5209

    000084A8  B8 01000000       MOV      EAX,1
    000084AD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5210

    000084B3  B8 01000000       MOV      EAX,1
    000084B8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5211

    000084BE  B8 01000000       MOV      EAX,1
    000084C3  8B C8             MOV      ECX,EAX
    000084C5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000084C8  48                DEC      EAX
    000084C9  BB 0E000000       MOV      EBX,14
    000084CE  F7 E3             MUL      EBX
    000084D0  50                PUSH     EAX
    000084D1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000084D4  48                DEC      EAX
    000084D5  BB 02000000       MOV      EBX,2
    000084DA  F7 E3             MUL      EBX
    000084DC  5B                POP      EBX
    000084DD  03 C3             ADD      EAX,EBX
    000084DF  8B F8             MOV      EDI,EAX
    000084E1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5212

    000084E8  B8 01000000       MOV      EAX,1
    000084ED  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5213

    000084F3  B8 01000000       MOV      EAX,1
    000084F8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5215

    000084FE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00008505  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000850A  5B                POP      EBX

    LINE      5217

    0000850B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00008512  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00008517  5B                POP      EBX

    LINE      5219

    00008518  B8 0A000000       MOV      EAX,10
    0000851D  40                INC      EAX
    0000851E  50                PUSH     EAX
    0000851F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008522  5B                POP      EBX
    00008523  3B C3             CMP      EAX,EBX
    00008525  0F 8503000000     JNE      3
    0000852B  EB                JMP      

    LINE      5226

    0000852C  B8 01000000       MOV      EAX,1
    00008531  8B C8             MOV      ECX,EAX
    00008533  B8 0A000000       MOV      EAX,10
    00008538  50                PUSH     EAX
    00008539  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000853C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000853F  5B                POP      EBX
    00008540  53                PUSH     EBX
    00008541  3B C3             CMP      EAX,EBX
    00008543  0F 8E03000000     JLE      3
    00008549  EB                JMP      

    LINE      5228

    0000854A  B8 01000000       MOV      EAX,1
    0000854F  8B C8             MOV      ECX,EAX
    00008551  B8 05000000       MOV      EAX,5
    00008556  50                PUSH     EAX
    00008557  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000855A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000855D  5B                POP      EBX
    0000855E  53                PUSH     EBX
    0000855F  3B C3             CMP      EAX,EBX
    00008561  0F 8E03000000     JLE      3
    00008567  EB                JMP      

    LINE      5235

    00008568  B8 01000000       MOV      EAX,1
    0000856D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5236

    00008573  B8 01000000       MOV      EAX,1
    00008578  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5237

    0000857E  B8 01000000       MOV      EAX,1
    00008583  8B C8             MOV      ECX,EAX
    00008585  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008588  48                DEC      EAX
    00008589  BB 0E000000       MOV      EBX,14
    0000858E  F7 E3             MUL      EBX
    00008590  50                PUSH     EAX
    00008591  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008594  48                DEC      EAX
    00008595  BB 02000000       MOV      EBX,2
    0000859A  F7 E3             MUL      EBX
    0000859C  5B                POP      EBX
    0000859D  03 C3             ADD      EAX,EBX
    0000859F  8B F8             MOV      EDI,EAX
    000085A1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5238

    000085A8  B8 01000000       MOV      EAX,1
    000085AD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5239

    000085B3  B8 01000000       MOV      EAX,1
    000085B8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5241

    000085BE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000085C5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000085CA  5B                POP      EBX

    LINE      5243

    000085CB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000085D2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000085D7  5B                POP      EBX

    LINE      5245

    000085D8  B8 0A000000       MOV      EAX,10
    000085DD  40                INC      EAX
    000085DE  50                PUSH     EAX
    000085DF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000085E2  5B                POP      EBX
    000085E3  3B C3             CMP      EAX,EBX
    000085E5  0F 8503000000     JNE      3
    000085EB  EB                JMP      

    LINE      5259

    000085EC  56                PUSH     ESI
    000085ED  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000085F3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000085F9  FF D1             CALL     ECX                       run_inner_proc
    000085FB  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5261

    000085FC  B8 01000000       MOV      EAX,1
    00008601  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5263

    00008604  B8 01000000       MOV      EAX,1
    00008609  8B C8             MOV      ECX,EAX
    0000860B  B8 0A000000       MOV      EAX,10
    00008610  50                PUSH     EAX
    00008611  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008614  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008617  5B                POP      EBX
    00008618  53                PUSH     EBX
    00008619  3B C3             CMP      EAX,EBX
    0000861B  0F 8E03000000     JLE      3
    00008621  EB                JMP      

    LINE      5265

    00008622  B8 01000000       MOV      EAX,1
    00008627  8B C8             MOV      ECX,EAX
    00008629  B8 05000000       MOV      EAX,5
    0000862E  50                PUSH     EAX
    0000862F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00008632  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008635  5B                POP      EBX
    00008636  53                PUSH     EBX
    00008637  3B C3             CMP      EAX,EBX
    00008639  0F 8E03000000     JLE      3
    0000863F  EB                JMP      

    LINE      5272

    00008640  B8 01000000       MOV      EAX,1
    00008645  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5273

    00008648  B8 01000000       MOV      EAX,1
    0000864D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5274

    00008650  B8 01000000       MOV      EAX,1
    00008655  8B C8             MOV      ECX,EAX
    00008657  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000865A  48                DEC      EAX
    0000865B  BB 0E000000       MOV      EBX,14
    00008660  F7 E3             MUL      EBX
    00008662  50                PUSH     EAX
    00008663  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008666  48                DEC      EAX
    00008667  BB 02000000       MOV      EBX,2
    0000866C  F7 E3             MUL      EBX
    0000866E  5B                POP      EBX
    0000866F  03 C3             ADD      EAX,EBX
    00008671  8B F8             MOV      EDI,EAX
    00008673  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5275

    00008677  B8 01000000       MOV      EAX,1
    0000867C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5276

    0000867F  B8 01000000       MOV      EAX,1
    00008684  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5278

    00008687  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000868E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008693  5B                POP      EBX

    LINE      5280

    00008694  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000869B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000086A0  5B                POP      EBX

    LINE      5282

    000086A1  B8 0A000000       MOV      EAX,10
    000086A6  40                INC      EAX
    000086A7  50                PUSH     EAX
    000086A8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000086AB  5B                POP      EBX
    000086AC  3B C3             CMP      EAX,EBX
    000086AE  0F 8503000000     JNE      3
    000086B4  EB                JMP      

    LINE      5289

    000086B5  B8 01000000       MOV      EAX,1
    000086BA  8B C8             MOV      ECX,EAX
    000086BC  B8 0A000000       MOV      EAX,10
    000086C1  50                PUSH     EAX
    000086C2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000086C5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000086C8  5B                POP      EBX
    000086C9  53                PUSH     EBX
    000086CA  3B C3             CMP      EAX,EBX
    000086CC  0F 8E03000000     JLE      3
    000086D2  EB                JMP      

    LINE      5291

    000086D3  B8 01000000       MOV      EAX,1
    000086D8  8B C8             MOV      ECX,EAX
    000086DA  B8 05000000       MOV      EAX,5
    000086DF  50                PUSH     EAX
    000086E0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000086E3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000086E6  5B                POP      EBX
    000086E7  53                PUSH     EBX
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   7


    000086E8  3B C3             CMP      EAX,EBX
    000086EA  0F 8E03000000     JLE      3
    000086F0  EB                JMP      

    LINE      5298

    000086F1  B8 01000000       MOV      EAX,1
    000086F6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5299

    000086F9  B8 01000000       MOV      EAX,1
    000086FE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5300

    00008701  B8 01000000       MOV      EAX,1
    00008706  8B C8             MOV      ECX,EAX
    00008708  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000870B  48                DEC      EAX
    0000870C  BB 0E000000       MOV      EBX,14
    00008711  F7 E3             MUL      EBX
    00008713  50                PUSH     EAX
    00008714  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008717  48                DEC      EAX
    00008718  BB 02000000       MOV      EBX,2
    0000871D  F7 E3             MUL      EBX
    0000871F  5B                POP      EBX
    00008720  03 C3             ADD      EAX,EBX
    00008722  8B F8             MOV      EDI,EAX
    00008724  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5301

    00008728  B8 01000000       MOV      EAX,1
    0000872D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5302

    00008730  B8 01000000       MOV      EAX,1
    00008735  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5304

    00008738  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000873F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008744  5B                POP      EBX

    LINE      5306

    00008745  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000874C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00008751  5B                POP      EBX

    LINE      5308

    00008752  B8 0A000000       MOV      EAX,10
    00008757  40                INC      EAX
    00008758  50                PUSH     EAX
    00008759  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000875C  5B                POP      EBX
    0000875D  3B C3             CMP      EAX,EBX
    0000875F  0F 8503000000     JNE      3
    00008765  EB                JMP      

    LINE      5316

    00008766  B8 01000000       MOV      EAX,1
    0000876B  8B C8             MOV      ECX,EAX
    0000876D  B8 0A000000       MOV      EAX,10
    00008772  50                PUSH     EAX
    00008773  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008776  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008779  5B                POP      EBX
    0000877A  53                PUSH     EBX
    0000877B  3B C3             CMP      EAX,EBX
    0000877D  0F 8E03000000     JLE      3
    00008783  EB                JMP      

    LINE      5318

    00008784  B8 01000000       MOV      EAX,1
    00008789  8B C8             MOV      ECX,EAX
    0000878B  B8 05000000       MOV      EAX,5
    00008790  50                PUSH     EAX
    00008791  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00008794  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008797  5B                POP      EBX
    00008798  53                PUSH     EBX
    00008799  3B C3             CMP      EAX,EBX
    0000879B  0F 8E03000000     JLE      3
    000087A1  EB                JMP      

    LINE      5325

    000087A2  B8 01000000       MOV      EAX,1
    000087A7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5326

    000087AD  B8 01000000       MOV      EAX,1
    000087B2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5327

    000087B8  B8 01000000       MOV      EAX,1
    000087BD  8B C8             MOV      ECX,EAX
    000087BF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000087C2  48                DEC      EAX
    000087C3  BB 0E000000       MOV      EBX,14
    000087C8  F7 E3             MUL      EBX
    000087CA  50                PUSH     EAX
    000087CB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000087CE  48                DEC      EAX
    000087CF  BB 02000000       MOV      EBX,2
    000087D4  F7 E3             MUL      EBX
    000087D6  5B                POP      EBX
    000087D7  03 C3             ADD      EAX,EBX
    000087D9  8B F8             MOV      EDI,EAX
    000087DB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5328

    000087E2  B8 01000000       MOV      EAX,1
    000087E7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5329

    000087ED  B8 01000000       MOV      EAX,1
    000087F2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5331

    000087F8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000087FF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00008804  5B                POP      EBX

    LINE      5333

    00008805  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000880C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00008811  5B                POP      EBX

    LINE      5335

    00008812  B8 0A000000       MOV      EAX,10
    00008817  40                INC      EAX
    00008818  50                PUSH     EAX
    00008819  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000881C  5B                POP      EBX
    0000881D  3B C3             CMP      EAX,EBX
    0000881F  0F 8503000000     JNE      3
    00008825  EB                JMP      

    LINE      5342

    00008826  B8 01000000       MOV      EAX,1
    0000882B  8B C8             MOV      ECX,EAX
    0000882D  B8 0A000000       MOV      EAX,10
    00008832  50                PUSH     EAX
    00008833  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00008836  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008839  5B                POP      EBX
    0000883A  53                PUSH     EBX
    0000883B  3B C3             CMP      EAX,EBX
    0000883D  0F 8E03000000     JLE      3
    00008843  EB                JMP      

    LINE      5344

    00008844  B8 01000000       MOV      EAX,1
    00008849  8B C8             MOV      ECX,EAX
    0000884B  B8 05000000       MOV      EAX,5
    00008850  50                PUSH     EAX
    00008851  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00008854  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008857  5B                POP      EBX
    00008858  53                PUSH     EBX
    00008859  3B C3             CMP      EAX,EBX
    0000885B  0F 8E03000000     JLE      3
    00008861  EB                JMP      

    LINE      5351

    00008862  B8 01000000       MOV      EAX,1
    00008867  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5352

    0000886D  B8 01000000       MOV      EAX,1
    00008872  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5353

    00008878  B8 01000000       MOV      EAX,1
    0000887D  8B C8             MOV      ECX,EAX
    0000887F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008882  48                DEC      EAX
    00008883  BB 0E000000       MOV      EBX,14
    00008888  F7 E3             MUL      EBX
    0000888A  50                PUSH     EAX
    0000888B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000888E  48                DEC      EAX
    0000888F  BB 02000000       MOV      EBX,2
    00008894  F7 E3             MUL      EBX
    00008896  5B                POP      EBX
    00008897  03 C3             ADD      EAX,EBX
    00008899  8B F8             MOV      EDI,EAX
    0000889B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5354

    000088A2  B8 01000000       MOV      EAX,1
    000088A7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5355

    000088AD  B8 01000000       MOV      EAX,1
    000088B2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5357

    000088B8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000088BF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000088C4  5B                POP      EBX

    LINE      5359

    000088C5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000088CC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000088D1  5B                POP      EBX

    LINE      5361

    000088D2  B8 0A000000       MOV      EAX,10
    000088D7  40                INC      EAX
    000088D8  50                PUSH     EAX
    000088D9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000088DC  5B                POP      EBX
    000088DD  3B C3             CMP      EAX,EBX
    000088DF  0F 8503000000     JNE      3
    000088E5  EB                JMP      

    LINE      5375

    000088E6  56                PUSH     ESI
    000088E7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000088ED  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000088F3  FF D1             CALL     ECX                       run_inner_proc
    000088F5  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5377

    000088F6  B8 01000000       MOV      EAX,1
    000088FB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5379

    000088FE  B8 01000000       MOV      EAX,1
    00008903  8B C8             MOV      ECX,EAX
    00008905  B8 0A000000       MOV      EAX,10
    0000890A  50                PUSH     EAX
    0000890B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000890E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008911  5B                POP      EBX
    00008912  53                PUSH     EBX
    00008913  3B C3             CMP      EAX,EBX
    00008915  0F 8E03000000     JLE      3
    0000891B  EB                JMP      

    LINE      5381

    0000891C  B8 01000000       MOV      EAX,1
    00008921  8B C8             MOV      ECX,EAX
    00008923  B8 05000000       MOV      EAX,5
    00008928  50                PUSH     EAX
    00008929  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000892C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000892F  5B                POP      EBX
    00008930  53                PUSH     EBX
    00008931  3B C3             CMP      EAX,EBX
    00008933  0F 8E03000000     JLE      3
    00008939  EB                JMP      

    LINE      5388

    0000893A  B8 01000000       MOV      EAX,1
    0000893F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5389

    00008942  B8 01000000       MOV      EAX,1
    00008947  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5390

    0000894A  B8 01000000       MOV      EAX,1
    0000894F  8B C8             MOV      ECX,EAX
    00008951  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008954  48                DEC      EAX
    00008955  BB 0E000000       MOV      EBX,14
    0000895A  F7 E3             MUL      EBX
    0000895C  50                PUSH     EAX
    0000895D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008960  48                DEC      EAX
    00008961  BB 02000000       MOV      EBX,2
    00008966  F7 E3             MUL      EBX
    00008968  5B                POP      EBX
    00008969  03 C3             ADD      EAX,EBX
    0000896B  8B F8             MOV      EDI,EAX
    0000896D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5391

    00008971  B8 01000000       MOV      EAX,1
    00008976  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5392

    00008979  B8 01000000       MOV      EAX,1
    0000897E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5394

    00008981  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00008988  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000898D  5B                POP      EBX

    LINE      5396

    0000898E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00008995  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000899A  5B                POP      EBX

    LINE      5398

    0000899B  B8 0A000000       MOV      EAX,10
    000089A0  40                INC      EAX
    000089A1  50                PUSH     EAX
    000089A2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000089A5  5B                POP      EBX
    000089A6  3B C3             CMP      EAX,EBX
    000089A8  0F 8503000000     JNE      3
    000089AE  EB                JMP      

    LINE      5405

    000089AF  B8 01000000       MOV      EAX,1
    000089B4  8B C8             MOV      ECX,EAX
    000089B6  B8 0A000000       MOV      EAX,10
    000089BB  50                PUSH     EAX
    000089BC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000089BF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000089C2  5B                POP      EBX
    000089C3  53                PUSH     EBX
    000089C4  3B C3             CMP      EAX,EBX
    000089C6  0F 8E03000000     JLE      3
    000089CC  EB                JMP      

    LINE      5407

    000089CD  B8 01000000       MOV      EAX,1
    000089D2  8B C8             MOV      ECX,EAX
    000089D4  B8 05000000       MOV      EAX,5
    000089D9  50                PUSH     EAX
    000089DA  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000089DD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000089E0  5B                POP      EBX
    000089E1  53                PUSH     EBX
    000089E2  3B C3             CMP      EAX,EBX
    000089E4  0F 8E03000000     JLE      3
    000089EA  EB                JMP      

    LINE      5414

    000089EB  B8 01000000       MOV      EAX,1
    000089F0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5415

    000089F3  B8 01000000       MOV      EAX,1
    000089F8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5416

    000089FB  B8 01000000       MOV      EAX,1
    00008A00  8B C8             MOV      ECX,EAX
    00008A02  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008A05  48                DEC      EAX
    00008A06  BB 0E000000       MOV      EBX,14
    00008A0B  F7 E3             MUL      EBX
    00008A0D  50                PUSH     EAX
    00008A0E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008A11  48                DEC      EAX
    00008A12  BB 02000000       MOV      EBX,2
    00008A17  F7 E3             MUL      EBX
    00008A19  5B                POP      EBX
    00008A1A  03 C3             ADD      EAX,EBX
    00008A1C  8B F8             MOV      EDI,EAX
    00008A1E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5417

    00008A22  B8 01000000       MOV      EAX,1
    00008A27  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5418

    00008A2A  B8 01000000       MOV      EAX,1
    00008A2F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5420

    00008A32  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00008A39  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008A3E  5B                POP      EBX

    LINE      5422

    00008A3F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00008A46  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00008A4B  5B                POP      EBX

    LINE      5424

    00008A4C  B8 0A000000       MOV      EAX,10
    00008A51  40                INC      EAX
    00008A52  50                PUSH     EAX
    00008A53  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008A56  5B                POP      EBX
    00008A57  3B C3             CMP      EAX,EBX
    00008A59  0F 8503000000     JNE      3
    00008A5F  EB                JMP      

    LINE      5432

    00008A60  B8 01000000       MOV      EAX,1
    00008A65  8B C8             MOV      ECX,EAX
    00008A67  B8 0A000000       MOV      EAX,10
    00008A6C  50                PUSH     EAX
    00008A6D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008A70  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008A73  5B                POP      EBX
    00008A74  53                PUSH     EBX
    00008A75  3B C3             CMP      EAX,EBX
    00008A77  0F 8E03000000     JLE      3
    00008A7D  EB                JMP      

    LINE      5434

    00008A7E  B8 01000000       MOV      EAX,1
    00008A83  8B C8             MOV      ECX,EAX
    00008A85  B8 05000000       MOV      EAX,5
    00008A8A  50                PUSH     EAX
    00008A8B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00008A8E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008A91  5B                POP      EBX
    00008A92  53                PUSH     EBX
    00008A93  3B C3             CMP      EAX,EBX
    00008A95  0F 8E03000000     JLE      3
    00008A9B  EB                JMP      

    LINE      5441

    00008A9C  B8 01000000       MOV      EAX,1
    00008AA1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5442

    00008AA7  B8 01000000       MOV      EAX,1
    00008AAC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5443

    00008AB2  B8 01000000       MOV      EAX,1
    00008AB7  8B C8             MOV      ECX,EAX
    00008AB9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008ABC  48                DEC      EAX
    00008ABD  BB 0E000000       MOV      EBX,14
    00008AC2  F7 E3             MUL      EBX
    00008AC4  50                PUSH     EAX
    00008AC5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008AC8  48                DEC      EAX
    00008AC9  BB 02000000       MOV      EBX,2
    00008ACE  F7 E3             MUL      EBX
    00008AD0  5B                POP      EBX
    00008AD1  03 C3             ADD      EAX,EBX
    00008AD3  8B F8             MOV      EDI,EAX
    00008AD5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5444

    00008ADC  B8 01000000       MOV      EAX,1
    00008AE1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5445

    00008AE7  B8 01000000       MOV      EAX,1
    00008AEC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5447

    00008AF2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00008AF9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00008AFE  5B                POP      EBX

    LINE      5449

    00008AFF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00008B06  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00008B0B  5B                POP      EBX

    LINE      5451

    00008B0C  B8 0A000000       MOV      EAX,10
    00008B11  40                INC      EAX
    00008B12  50                PUSH     EAX
    00008B13  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008B16  5B                POP      EBX
    00008B17  3B C3             CMP      EAX,EBX
    00008B19  0F 8503000000     JNE      3
    00008B1F  EB                JMP      

    LINE      5458

    00008B20  B8 01000000       MOV      EAX,1
    00008B25  8B C8             MOV      ECX,EAX
    00008B27  B8 0A000000       MOV      EAX,10
    00008B2C  50                PUSH     EAX
    00008B2D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00008B30  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008B33  5B                POP      EBX
    00008B34  53                PUSH     EBX
    00008B35  3B C3             CMP      EAX,EBX
    00008B37  0F 8E03000000     JLE      3
    00008B3D  EB                JMP      

    LINE      5460

    00008B3E  B8 01000000       MOV      EAX,1
    00008B43  8B C8             MOV      ECX,EAX
    00008B45  B8 05000000       MOV      EAX,5
    00008B4A  50                PUSH     EAX
    00008B4B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00008B4E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008B51  5B                POP      EBX
    00008B52  53                PUSH     EBX
    00008B53  3B C3             CMP      EAX,EBX
    00008B55  0F 8E03000000     JLE      3
    00008B5B  EB                JMP      

    LINE      5467

    00008B5C  B8 01000000       MOV      EAX,1
    00008B61  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5468

    00008B67  B8 01000000       MOV      EAX,1
    00008B6C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5469

    00008B72  B8 01000000       MOV      EAX,1
    00008B77  8B C8             MOV      ECX,EAX
    00008B79  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008B7C  48                DEC      EAX
    00008B7D  BB 0E000000       MOV      EBX,14
    00008B82  F7 E3             MUL      EBX
    00008B84  50                PUSH     EAX
    00008B85  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008B88  48                DEC      EAX
    00008B89  BB 02000000       MOV      EBX,2
    00008B8E  F7 E3             MUL      EBX
    00008B90  5B                POP      EBX
    00008B91  03 C3             ADD      EAX,EBX
    00008B93  8B F8             MOV      EDI,EAX
    00008B95  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5470

    00008B9C  B8 01000000       MOV      EAX,1
    00008BA1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5471

    00008BA7  B8 01000000       MOV      EAX,1
    00008BAC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5473

    00008BB2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00008BB9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00008BBE  5B                POP      EBX

    LINE      5475

    00008BBF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00008BC6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00008BCB  5B                POP      EBX

    LINE      5477

    00008BCC  B8 0A000000       MOV      EAX,10
    00008BD1  40                INC      EAX
    00008BD2  50                PUSH     EAX
    00008BD3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008BD6  5B                POP      EBX
    00008BD7  3B C3             CMP      EAX,EBX
    00008BD9  0F 8503000000     JNE      3
    00008BDF  EB                JMP      

    LINE      5491

    00008BE0  56                PUSH     ESI
    00008BE1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00008BE7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00008BED  FF D1             CALL     ECX                       run_inner_proc
    00008BEF  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5493

    00008BF0  B8 01000000       MOV      EAX,1
    00008BF5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5495

    00008BF8  B8 01000000       MOV      EAX,1
    00008BFD  8B C8             MOV      ECX,EAX
    00008BFF  B8 0A000000       MOV      EAX,10
    00008C04  50                PUSH     EAX
    00008C05  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008C08  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008C0B  5B                POP      EBX
    00008C0C  53                PUSH     EBX
    00008C0D  3B C3             CMP      EAX,EBX
    00008C0F  0F 8E03000000     JLE      3
    00008C15  EB                JMP      

    LINE      5497

    00008C16  B8 01000000       MOV      EAX,1
    00008C1B  8B C8             MOV      ECX,EAX
    00008C1D  B8 05000000       MOV      EAX,5
    00008C22  50                PUSH     EAX
    00008C23  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00008C26  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008C29  5B                POP      EBX
    00008C2A  53                PUSH     EBX
    00008C2B  3B C3             CMP      EAX,EBX
    00008C2D  0F 8E03000000     JLE      3
    00008C33  EB                JMP      

    LINE      5504

    00008C34  B8 01000000       MOV      EAX,1
    00008C39  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5505

    00008C3C  B8 01000000       MOV      EAX,1
    00008C41  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5506

    00008C44  B8 01000000       MOV      EAX,1
    00008C49  8B C8             MOV      ECX,EAX
    00008C4B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008C4E  48                DEC      EAX
    00008C4F  BB 0E000000       MOV      EBX,14
    00008C54  F7 E3             MUL      EBX
    00008C56  50                PUSH     EAX
    00008C57  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008C5A  48                DEC      EAX
    00008C5B  BB 02000000       MOV      EBX,2
    00008C60  F7 E3             MUL      EBX
    00008C62  5B                POP      EBX
    00008C63  03 C3             ADD      EAX,EBX
    00008C65  8B F8             MOV      EDI,EAX
    00008C67  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5507

    00008C6B  B8 01000000       MOV      EAX,1
    00008C70  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5508

    00008C73  B8 01000000       MOV      EAX,1
    00008C78  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5510

    00008C7B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00008C82  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008C87  5B                POP      EBX

    LINE      5512

    00008C88  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00008C8F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00008C94  5B                POP      EBX

    LINE      5514

    00008C95  B8 0A000000       MOV      EAX,10
    00008C9A  40                INC      EAX
    00008C9B  50                PUSH     EAX
    00008C9C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008C9F  5B                POP      EBX
    00008CA0  3B C3             CMP      EAX,EBX
    00008CA2  0F 8503000000     JNE      3
    00008CA8  EB                JMP      

    LINE      5521

    00008CA9  B8 01000000       MOV      EAX,1
    00008CAE  8B C8             MOV      ECX,EAX
    00008CB0  B8 0A000000       MOV      EAX,10
    00008CB5  50                PUSH     EAX
    00008CB6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00008CB9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008CBC  5B                POP      EBX
    00008CBD  53                PUSH     EBX
    00008CBE  3B C3             CMP      EAX,EBX
    00008CC0  0F 8E03000000     JLE      3
    00008CC6  EB                JMP      

    LINE      5523

    00008CC7  B8 01000000       MOV      EAX,1
    00008CCC  8B C8             MOV      ECX,EAX
    00008CCE  B8 05000000       MOV      EAX,5
    00008CD3  50                PUSH     EAX
    00008CD4  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00008CD7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008CDA  5B                POP      EBX
    00008CDB  53                PUSH     EBX
    00008CDC  3B C3             CMP      EAX,EBX
    00008CDE  0F 8E03000000     JLE      3
    00008CE4  EB                JMP      

    LINE      5530

    00008CE5  B8 01000000       MOV      EAX,1
    00008CEA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5531

    00008CED  B8 01000000       MOV      EAX,1
    00008CF2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5532

    00008CF5  B8 01000000       MOV      EAX,1
    00008CFA  8B C8             MOV      ECX,EAX
    00008CFC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008CFF  48                DEC      EAX
    00008D00  BB 0E000000       MOV      EBX,14
    00008D05  F7 E3             MUL      EBX
    00008D07  50                PUSH     EAX
    00008D08  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008D0B  48                DEC      EAX
    00008D0C  BB 02000000       MOV      EBX,2
    00008D11  F7 E3             MUL      EBX
    00008D13  5B                POP      EBX
    00008D14  03 C3             ADD      EAX,EBX
    00008D16  8B F8             MOV      EDI,EAX
    00008D18  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5533

    00008D1C  B8 01000000       MOV      EAX,1
    00008D21  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5534

    00008D24  B8 01000000       MOV      EAX,1
    00008D29  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5536

    00008D2C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00008D33  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008D38  5B                POP      EBX

    LINE      5538

    00008D39  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00008D40  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00008D45  5B                POP      EBX

    LINE      5540

    00008D46  B8 0A000000       MOV      EAX,10
    00008D4B  40                INC      EAX
    00008D4C  50                PUSH     EAX
    00008D4D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008D50  5B                POP      EBX
    00008D51  3B C3             CMP      EAX,EBX
    00008D53  0F 8503000000     JNE      3
    00008D59  EB                JMP      

    LINE      5548

    00008D5A  B8 01000000       MOV      EAX,1
    00008D5F  8B C8             MOV      ECX,EAX
    00008D61  B8 0A000000       MOV      EAX,10
    00008D66  50                PUSH     EAX
    00008D67  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008D6A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008D6D  5B                POP      EBX
    00008D6E  53                PUSH     EBX
    00008D6F  3B C3             CMP      EAX,EBX
    00008D71  0F 8E03000000     JLE      3
    00008D77  EB                JMP      

    LINE      5550

    00008D78  B8 01000000       MOV      EAX,1
    00008D7D  8B C8             MOV      ECX,EAX
    00008D7F  B8 05000000       MOV      EAX,5
    00008D84  50                PUSH     EAX
    00008D85  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00008D88  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008D8B  5B                POP      EBX
    00008D8C  53                PUSH     EBX
    00008D8D  3B C3             CMP      EAX,EBX
    00008D8F  0F 8E03000000     JLE      3
    00008D95  EB                JMP      

    LINE      5557

    00008D96  B8 01000000       MOV      EAX,1
    00008D9B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5558

    00008DA1  B8 01000000       MOV      EAX,1
    00008DA6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5559

    00008DAC  B8 01000000       MOV      EAX,1
    00008DB1  8B C8             MOV      ECX,EAX
    00008DB3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008DB6  48                DEC      EAX
    00008DB7  BB 0E000000       MOV      EBX,14
    00008DBC  F7 E3             MUL      EBX
    00008DBE  50                PUSH     EAX
    00008DBF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008DC2  48                DEC      EAX
    00008DC3  BB 02000000       MOV      EBX,2
    00008DC8  F7 E3             MUL      EBX
    00008DCA  5B                POP      EBX
    00008DCB  03 C3             ADD      EAX,EBX
    00008DCD  8B F8             MOV      EDI,EAX
    00008DCF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5560

    00008DD6  B8 01000000       MOV      EAX,1
    00008DDB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5561

    00008DE1  B8 01000000       MOV      EAX,1
    00008DE6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5563

    00008DEC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00008DF3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00008DF8  5B                POP      EBX

    LINE      5565

    00008DF9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00008E00  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00008E05  5B                POP      EBX

    LINE      5567

    00008E06  B8 0A000000       MOV      EAX,10
    00008E0B  40                INC      EAX
    00008E0C  50                PUSH     EAX
    00008E0D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008E10  5B                POP      EBX
    00008E11  3B C3             CMP      EAX,EBX
    00008E13  0F 8503000000     JNE      3
    00008E19  EB                JMP      

    LINE      5574

    00008E1A  B8 01000000       MOV      EAX,1
    00008E1F  8B C8             MOV      ECX,EAX
    00008E21  B8 0A000000       MOV      EAX,10
    00008E26  50                PUSH     EAX
    00008E27  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00008E2A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008E2D  5B                POP      EBX
    00008E2E  53                PUSH     EBX
    00008E2F  3B C3             CMP      EAX,EBX
    00008E31  0F 8E03000000     JLE      3
    00008E37  EB                JMP      

    LINE      5576

    00008E38  B8 01000000       MOV      EAX,1
    00008E3D  8B C8             MOV      ECX,EAX
    00008E3F  B8 05000000       MOV      EAX,5
    00008E44  50                PUSH     EAX
    00008E45  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00008E48  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008E4B  5B                POP      EBX
    00008E4C  53                PUSH     EBX
    00008E4D  3B C3             CMP      EAX,EBX
    00008E4F  0F 8E03000000     JLE      3
    00008E55  EB                JMP      

    LINE      5583

    00008E56  B8 01000000       MOV      EAX,1
    00008E5B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5584

    00008E61  B8 01000000       MOV      EAX,1
    00008E66  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5585

    00008E6C  B8 01000000       MOV      EAX,1
    00008E71  8B C8             MOV      ECX,EAX
    00008E73  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008E76  48                DEC      EAX
    00008E77  BB 0E000000       MOV      EBX,14
    00008E7C  F7 E3             MUL      EBX
    00008E7E  50                PUSH     EAX
    00008E7F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008E82  48                DEC      EAX
    00008E83  BB 02000000       MOV      EBX,2
    00008E88  F7 E3             MUL      EBX
    00008E8A  5B                POP      EBX
    00008E8B  03 C3             ADD      EAX,EBX
    00008E8D  8B F8             MOV      EDI,EAX
    00008E8F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5586

    00008E96  B8 01000000       MOV      EAX,1
    00008E9B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5587

    00008EA1  B8 01000000       MOV      EAX,1
    00008EA6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5589

    00008EAC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00008EB3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00008EB8  5B                POP      EBX

    LINE      5591

    00008EB9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00008EC0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00008EC5  5B                POP      EBX

    LINE      5593

    00008EC6  B8 0A000000       MOV      EAX,10
    00008ECB  40                INC      EAX
    00008ECC  50                PUSH     EAX
    00008ECD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008ED0  5B                POP      EBX
    00008ED1  3B C3             CMP      EAX,EBX
    00008ED3  0F 8503000000     JNE      3
    00008ED9  EB                JMP      

    LINE      5607

    00008EDA  56                PUSH     ESI
    00008EDB  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00008EE1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00008EE7  FF D1             CALL     ECX                       run_inner_proc
    00008EE9  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5609

    00008EEA  B8 01000000       MOV      EAX,1
    00008EEF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5611

    00008EF2  B8 01000000       MOV      EAX,1
    00008EF7  8B C8             MOV      ECX,EAX
    00008EF9  B8 0A000000       MOV      EAX,10
    00008EFE  50                PUSH     EAX
    00008EFF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00008F02  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008F05  5B                POP      EBX
    00008F06  53                PUSH     EBX
    00008F07  3B C3             CMP      EAX,EBX
    00008F09  0F 8E03000000     JLE      3
    00008F0F  EB                JMP      

    LINE      5613

    00008F10  B8 01000000       MOV      EAX,1
    00008F15  8B C8             MOV      ECX,EAX
    00008F17  B8 05000000       MOV      EAX,5
    00008F1C  50                PUSH     EAX
    00008F1D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00008F20  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008F23  5B                POP      EBX
    00008F24  53                PUSH     EBX
    00008F25  3B C3             CMP      EAX,EBX
    00008F27  0F 8E03000000     JLE      3
    00008F2D  EB                JMP      

    LINE      5620

    00008F2E  B8 01000000       MOV      EAX,1
    00008F33  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5621

    00008F36  B8 01000000       MOV      EAX,1
    00008F3B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5622

    00008F3E  B8 01000000       MOV      EAX,1
    00008F43  8B C8             MOV      ECX,EAX
    00008F45  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008F48  48                DEC      EAX
    00008F49  BB 0E000000       MOV      EBX,14
    00008F4E  F7 E3             MUL      EBX
    00008F50  50                PUSH     EAX
    00008F51  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00008F54  48                DEC      EAX
    00008F55  BB 02000000       MOV      EBX,2
    00008F5A  F7 E3             MUL      EBX
    00008F5C  5B                POP      EBX
    00008F5D  03 C3             ADD      EAX,EBX
    00008F5F  8B F8             MOV      EDI,EAX
    00008F61  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5623

    00008F65  B8 01000000       MOV      EAX,1
    00008F6A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5624

    00008F6D  B8 01000000       MOV      EAX,1
    00008F72  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5626

    00008F75  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00008F7C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00008F81  5B                POP      EBX

    LINE      5628

    00008F82  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00008F89  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00008F8E  5B                POP      EBX

    LINE      5630

    00008F8F  B8 0A000000       MOV      EAX,10
    00008F94  40                INC      EAX
    00008F95  50                PUSH     EAX
    00008F96  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00008F99  5B                POP      EBX
    00008F9A  3B C3             CMP      EAX,EBX
    00008F9C  0F 8503000000     JNE      3
    00008FA2  EB                JMP      

    LINE      5637

    00008FA3  B8 01000000       MOV      EAX,1
    00008FA8  8B C8             MOV      ECX,EAX
    00008FAA  B8 0A000000       MOV      EAX,10
    00008FAF  50                PUSH     EAX
    00008FB0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00008FB3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008FB6  5B                POP      EBX
    00008FB7  53                PUSH     EBX
    00008FB8  3B C3             CMP      EAX,EBX
    00008FBA  0F 8E03000000     JLE      3
    00008FC0  EB                JMP      

    LINE      5639

    00008FC1  B8 01000000       MOV      EAX,1
    00008FC6  8B C8             MOV      ECX,EAX
    00008FC8  B8 05000000       MOV      EAX,5
    00008FCD  50                PUSH     EAX
    00008FCE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00008FD1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00008FD4  5B                POP      EBX
    00008FD5  53                PUSH     EBX
    00008FD6  3B C3             CMP      EAX,EBX
    00008FD8  0F 8E03000000     JLE      3
    00008FDE  EB                JMP      

    LINE      5646

    00008FDF  B8 01000000       MOV      EAX,1
    00008FE4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5647

    00008FE7  B8 01000000       MOV      EAX,1
    00008FEC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5648

    00008FEF  B8 01000000       MOV      EAX,1
    00008FF4  8B C8             MOV      ECX,EAX
    00008FF6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00008FF9  48                DEC      EAX
    00008FFA  BB 0E000000       MOV      EBX,14
    00008FFF  F7 E3             MUL      EBX
    00009001  50                PUSH     EAX
    00009002  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009005  48                DEC      EAX
    00009006  BB 02000000       MOV      EBX,2
    0000900B  F7 E3             MUL      EBX
    0000900D  5B                POP      EBX
    0000900E  03 C3             ADD      EAX,EBX
    00009010  8B F8             MOV      EDI,EAX
    00009012  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5649

    00009016  B8 01000000       MOV      EAX,1
    0000901B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5650

    0000901E  B8 01000000       MOV      EAX,1
    00009023  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5652

    00009026  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000902D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009032  5B                POP      EBX

    LINE      5654

    00009033  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000903A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000903F  5B                POP      EBX

    LINE      5656

    00009040  B8 0A000000       MOV      EAX,10
    00009045  40                INC      EAX
    00009046  50                PUSH     EAX
    00009047  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000904A  5B                POP      EBX
    0000904B  3B C3             CMP      EAX,EBX
    0000904D  0F 8503000000     JNE      3
    00009053  EB                JMP      

    LINE      5664

    00009054  B8 01000000       MOV      EAX,1
    00009059  8B C8             MOV      ECX,EAX
    0000905B  B8 0A000000       MOV      EAX,10
    00009060  50                PUSH     EAX
    00009061  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00009064  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009067  5B                POP      EBX
    00009068  53                PUSH     EBX
    00009069  3B C3             CMP      EAX,EBX
    0000906B  0F 8E03000000     JLE      3
    00009071  EB                JMP      

    LINE      5666

    00009072  B8 01000000       MOV      EAX,1
    00009077  8B C8             MOV      ECX,EAX
    00009079  B8 05000000       MOV      EAX,5
    0000907E  50                PUSH     EAX
    0000907F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009082  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009085  5B                POP      EBX
    00009086  53                PUSH     EBX
    00009087  3B C3             CMP      EAX,EBX
    00009089  0F 8E03000000     JLE      3
    0000908F  EB                JMP      

    LINE      5673

    00009090  B8 01000000       MOV      EAX,1
    00009095  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5674

    0000909B  B8 01000000       MOV      EAX,1
    000090A0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5675

    000090A6  B8 01000000       MOV      EAX,1
    000090AB  8B C8             MOV      ECX,EAX
    000090AD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000090B0  48                DEC      EAX
    000090B1  BB 0E000000       MOV      EBX,14
    000090B6  F7 E3             MUL      EBX
    000090B8  50                PUSH     EAX
    000090B9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000090BC  48                DEC      EAX
    000090BD  BB 02000000       MOV      EBX,2
    000090C2  F7 E3             MUL      EBX
    000090C4  5B                POP      EBX
    000090C5  03 C3             ADD      EAX,EBX
    000090C7  8B F8             MOV      EDI,EAX
    000090C9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5676

    000090D0  B8 01000000       MOV      EAX,1
    000090D5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5677

    000090DB  B8 01000000       MOV      EAX,1
    000090E0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5679

    000090E6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000090ED  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000090F2  5B                POP      EBX

    LINE      5681

    000090F3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000090FA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000090FF  5B                POP      EBX

    LINE      5683

    00009100  B8 0A000000       MOV      EAX,10
    00009105  40                INC      EAX
    00009106  50                PUSH     EAX
    00009107  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000910A  5B                POP      EBX
    0000910B  3B C3             CMP      EAX,EBX
    0000910D  0F 8503000000     JNE      3
    00009113  EB                JMP      

    LINE      5690

    00009114  B8 01000000       MOV      EAX,1
    00009119  8B C8             MOV      ECX,EAX
    0000911B  B8 0A000000       MOV      EAX,10
    00009120  50                PUSH     EAX
    00009121  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00009124  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009127  5B                POP      EBX
    00009128  53                PUSH     EBX
    00009129  3B C3             CMP      EAX,EBX
    0000912B  0F 8E03000000     JLE      3
    00009131  EB                JMP      

    LINE      5692

    00009132  B8 01000000       MOV      EAX,1
    00009137  8B C8             MOV      ECX,EAX
    00009139  B8 05000000       MOV      EAX,5
    0000913E  50                PUSH     EAX
    0000913F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00009142  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009145  5B                POP      EBX
    00009146  53                PUSH     EBX
    00009147  3B C3             CMP      EAX,EBX
    00009149  0F 8E03000000     JLE      3
    0000914F  EB                JMP      

    LINE      5699

    00009150  B8 01000000       MOV      EAX,1
    00009155  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5700

    0000915B  B8 01000000       MOV      EAX,1
    00009160  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5701

    00009166  B8 01000000       MOV      EAX,1
    0000916B  8B C8             MOV      ECX,EAX
    0000916D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009170  48                DEC      EAX
    00009171  BB 0E000000       MOV      EBX,14
    00009176  F7 E3             MUL      EBX
    00009178  50                PUSH     EAX
    00009179  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000917C  48                DEC      EAX
    0000917D  BB 02000000       MOV      EBX,2
    00009182  F7 E3             MUL      EBX
    00009184  5B                POP      EBX
    00009185  03 C3             ADD      EAX,EBX
    00009187  8B F8             MOV      EDI,EAX
    00009189  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5702

    00009190  B8 01000000       MOV      EAX,1
    00009195  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5703

    0000919B  B8 01000000       MOV      EAX,1
    000091A0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5705

    000091A6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000091AD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000091B2  5B                POP      EBX

    LINE      5707

    000091B3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000091BA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000091BF  5B                POP      EBX

    LINE      5709

    000091C0  B8 0A000000       MOV      EAX,10
    000091C5  40                INC      EAX
    000091C6  50                PUSH     EAX
    000091C7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000091CA  5B                POP      EBX
    000091CB  3B C3             CMP      EAX,EBX
    000091CD  0F 8503000000     JNE      3
    000091D3  EB                JMP      

    LINE      5723

    000091D4  56                PUSH     ESI
    000091D5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000091DB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000091E1  FF D1             CALL     ECX                       run_inner_proc
    000091E3  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5725

    000091E4  B8 01000000       MOV      EAX,1
    000091E9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5727

    000091EC  B8 01000000       MOV      EAX,1
    000091F1  8B C8             MOV      ECX,EAX
    000091F3  B8 0A000000       MOV      EAX,10
    000091F8  50                PUSH     EAX
    000091F9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000091FC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000091FF  5B                POP      EBX
    00009200  53                PUSH     EBX
    00009201  3B C3             CMP      EAX,EBX
    00009203  0F 8E03000000     JLE      3
    00009209  EB                JMP      

    LINE      5729

    0000920A  B8 01000000       MOV      EAX,1
    0000920F  8B C8             MOV      ECX,EAX
    00009211  B8 05000000       MOV      EAX,5
    00009216  50                PUSH     EAX
    00009217  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000921A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000921D  5B                POP      EBX
    0000921E  53                PUSH     EBX
    0000921F  3B C3             CMP      EAX,EBX
    00009221  0F 8E03000000     JLE      3
    00009227  EB                JMP      

    LINE      5736

    00009228  B8 01000000       MOV      EAX,1
    0000922D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5737

    00009230  B8 01000000       MOV      EAX,1
    00009235  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5738

    00009238  B8 01000000       MOV      EAX,1
    0000923D  8B C8             MOV      ECX,EAX
    0000923F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009242  48                DEC      EAX
    00009243  BB 0E000000       MOV      EBX,14
    00009248  F7 E3             MUL      EBX
    0000924A  50                PUSH     EAX
    0000924B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000924E  48                DEC      EAX
    0000924F  BB 02000000       MOV      EBX,2
    00009254  F7 E3             MUL      EBX
    00009256  5B                POP      EBX
    00009257  03 C3             ADD      EAX,EBX
    00009259  8B F8             MOV      EDI,EAX
    0000925B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5739

    0000925F  B8 01000000       MOV      EAX,1
    00009264  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5740

    00009267  B8 01000000       MOV      EAX,1
    0000926C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5742

    0000926F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00009276  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000927B  5B                POP      EBX

    LINE      5744

    0000927C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00009283  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009288  5B                POP      EBX

    LINE      5746

    00009289  B8 0A000000       MOV      EAX,10
    0000928E  40                INC      EAX
    0000928F  50                PUSH     EAX
    00009290  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009293  5B                POP      EBX
    00009294  3B C3             CMP      EAX,EBX
    00009296  0F 8503000000     JNE      3
    0000929C  EB                JMP      

    LINE      5753

    0000929D  B8 01000000       MOV      EAX,1
    000092A2  8B C8             MOV      ECX,EAX
    000092A4  B8 0A000000       MOV      EAX,10
    000092A9  50                PUSH     EAX
    000092AA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000092AD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000092B0  5B                POP      EBX
    000092B1  53                PUSH     EBX
    000092B2  3B C3             CMP      EAX,EBX
    000092B4  0F 8E03000000     JLE      3
    000092BA  EB                JMP      

    LINE      5755

    000092BB  B8 01000000       MOV      EAX,1
    000092C0  8B C8             MOV      ECX,EAX
    000092C2  B8 05000000       MOV      EAX,5
    000092C7  50                PUSH     EAX
    000092C8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000092CB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000092CE  5B                POP      EBX
    000092CF  53                PUSH     EBX
    000092D0  3B C3             CMP      EAX,EBX
    000092D2  0F 8E03000000     JLE      3
    000092D8  EB                JMP      

    LINE      5762

    000092D9  B8 01000000       MOV      EAX,1
    000092DE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5763

    000092E1  B8 01000000       MOV      EAX,1
    000092E6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5764

    000092E9  B8 01000000       MOV      EAX,1
    000092EE  8B C8             MOV      ECX,EAX
    000092F0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000092F3  48                DEC      EAX
    000092F4  BB 0E000000       MOV      EBX,14
    000092F9  F7 E3             MUL      EBX
    000092FB  50                PUSH     EAX
    000092FC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000092FF  48                DEC      EAX
    00009300  BB 02000000       MOV      EBX,2
    00009305  F7 E3             MUL      EBX
    00009307  5B                POP      EBX
    00009308  03 C3             ADD      EAX,EBX
    0000930A  8B F8             MOV      EDI,EAX
    0000930C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5765

    00009310  B8 01000000       MOV      EAX,1
    00009315  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5766

    00009318  B8 01000000       MOV      EAX,1
    0000931D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5768

    00009320  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00009327  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000932C  5B                POP      EBX

    LINE      5770

    0000932D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00009334  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009339  5B                POP      EBX

    LINE      5772

    0000933A  B8 0A000000       MOV      EAX,10
    0000933F  40                INC      EAX
    00009340  50                PUSH     EAX
    00009341  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009344  5B                POP      EBX
    00009345  3B C3             CMP      EAX,EBX
    00009347  0F 8503000000     JNE      3
    0000934D  EB                JMP      

    LINE      5780

    0000934E  B8 01000000       MOV      EAX,1
    00009353  8B C8             MOV      ECX,EAX
    00009355  B8 0A000000       MOV      EAX,10
    0000935A  50                PUSH     EAX
    0000935B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000935E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009361  5B                POP      EBX
    00009362  53                PUSH     EBX
    00009363  3B C3             CMP      EAX,EBX
    00009365  0F 8E03000000     JLE      3
    0000936B  EB                JMP      

    LINE      5782

    0000936C  B8 01000000       MOV      EAX,1
    00009371  8B C8             MOV      ECX,EAX
    00009373  B8 05000000       MOV      EAX,5
    00009378  50                PUSH     EAX
    00009379  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000937C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000937F  5B                POP      EBX
    00009380  53                PUSH     EBX
    00009381  3B C3             CMP      EAX,EBX
    00009383  0F 8E03000000     JLE      3
    00009389  EB                JMP      

    LINE      5789

    0000938A  B8 01000000       MOV      EAX,1
    0000938F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5790

    00009395  B8 01000000       MOV      EAX,1
    0000939A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5791

    000093A0  B8 01000000       MOV      EAX,1
    000093A5  8B C8             MOV      ECX,EAX
    000093A7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000093AA  48                DEC      EAX
    000093AB  BB 0E000000       MOV      EBX,14
    000093B0  F7 E3             MUL      EBX
    000093B2  50                PUSH     EAX
    000093B3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000093B6  48                DEC      EAX
    000093B7  BB 02000000       MOV      EBX,2
    000093BC  F7 E3             MUL      EBX
    000093BE  5B                POP      EBX
    000093BF  03 C3             ADD      EAX,EBX
    000093C1  8B F8             MOV      EDI,EAX
    000093C3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5792

    000093CA  B8 01000000       MOV      EAX,1
    000093CF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5793

    000093D5  B8 01000000       MOV      EAX,1
    000093DA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5795

    000093E0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000093E7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000093EC  5B                POP      EBX

    LINE      5797

    000093ED  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000093F4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000093F9  5B                POP      EBX

    LINE      5799

    000093FA  B8 0A000000       MOV      EAX,10
    000093FF  40                INC      EAX
    00009400  50                PUSH     EAX
    00009401  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009404  5B                POP      EBX
    00009405  3B C3             CMP      EAX,EBX
    00009407  0F 8503000000     JNE      3
    0000940D  EB                JMP      

    LINE      5806

    0000940E  B8 01000000       MOV      EAX,1
    00009413  8B C8             MOV      ECX,EAX
    00009415  B8 0A000000       MOV      EAX,10
    0000941A  50                PUSH     EAX
    0000941B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000941E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009421  5B                POP      EBX
    00009422  53                PUSH     EBX
    00009423  3B C3             CMP      EAX,EBX
    00009425  0F 8E03000000     JLE      3
    0000942B  EB                JMP      

    LINE      5808

    0000942C  B8 01000000       MOV      EAX,1
    00009431  8B C8             MOV      ECX,EAX
    00009433  B8 05000000       MOV      EAX,5
    00009438  50                PUSH     EAX
    00009439  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000943C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000943F  5B                POP      EBX
    00009440  53                PUSH     EBX
    00009441  3B C3             CMP      EAX,EBX
    00009443  0F 8E03000000     JLE      3
    00009449  EB                JMP      

    LINE      5815

    0000944A  B8 01000000       MOV      EAX,1
    0000944F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5816

    00009455  B8 01000000       MOV      EAX,1
    0000945A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5817

    00009460  B8 01000000       MOV      EAX,1
    00009465  8B C8             MOV      ECX,EAX
    00009467  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000946A  48                DEC      EAX
    0000946B  BB 0E000000       MOV      EBX,14
    00009470  F7 E3             MUL      EBX
    00009472  50                PUSH     EAX
    00009473  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009476  48                DEC      EAX
    00009477  BB 02000000       MOV      EBX,2
    0000947C  F7 E3             MUL      EBX
    0000947E  5B                POP      EBX
    0000947F  03 C3             ADD      EAX,EBX
    00009481  8B F8             MOV      EDI,EAX
    00009483  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5818

    0000948A  B8 01000000       MOV      EAX,1
    0000948F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5819

    00009495  B8 01000000       MOV      EAX,1
    0000949A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5821

    000094A0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000094A7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000094AC  5B                POP      EBX

    LINE      5823

    000094AD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000094B4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000094B9  5B                POP      EBX

    LINE      5825

    000094BA  B8 0A000000       MOV      EAX,10
    000094BF  40                INC      EAX
    000094C0  50                PUSH     EAX
    000094C1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000094C4  5B                POP      EBX
    000094C5  3B C3             CMP      EAX,EBX
    000094C7  0F 8503000000     JNE      3
    000094CD  EB                JMP      

    LINE      5839

    000094CE  56                PUSH     ESI
    000094CF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000094D5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000094DB  FF D1             CALL     ECX                       run_inner_proc
    000094DD  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5841

    000094DE  B8 01000000       MOV      EAX,1
    000094E3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5843

    000094E6  B8 01000000       MOV      EAX,1
    000094EB  8B C8             MOV      ECX,EAX
    000094ED  B8 0A000000       MOV      EAX,10
    000094F2  50                PUSH     EAX
    000094F3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000094F6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000094F9  5B                POP      EBX
    000094FA  53                PUSH     EBX
    000094FB  3B C3             CMP      EAX,EBX
    000094FD  0F 8E03000000     JLE      3
    00009503  EB                JMP      

    LINE      5845

    00009504  B8 01000000       MOV      EAX,1
    00009509  8B C8             MOV      ECX,EAX
    0000950B  B8 05000000       MOV      EAX,5
    00009510  50                PUSH     EAX
    00009511  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009514  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009517  5B                POP      EBX
    00009518  53                PUSH     EBX
    00009519  3B C3             CMP      EAX,EBX
    0000951B  0F 8E03000000     JLE      3
    00009521  EB                JMP      

    LINE      5852

    00009522  B8 01000000       MOV      EAX,1
    00009527  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5853

    0000952A  B8 01000000       MOV      EAX,1
    0000952F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5854

    00009532  B8 01000000       MOV      EAX,1
    00009537  8B C8             MOV      ECX,EAX
    00009539  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000953C  48                DEC      EAX
    0000953D  BB 0E000000       MOV      EBX,14
    00009542  F7 E3             MUL      EBX
    00009544  50                PUSH     EAX
    00009545  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009548  48                DEC      EAX
    00009549  BB 02000000       MOV      EBX,2
    0000954E  F7 E3             MUL      EBX
    00009550  5B                POP      EBX
    00009551  03 C3             ADD      EAX,EBX
    00009553  8B F8             MOV      EDI,EAX
    00009555  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5855

    00009559  B8 01000000       MOV      EAX,1
    0000955E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5856

    00009561  B8 01000000       MOV      EAX,1
    00009566  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5858

    00009569  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00009570  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009575  5B                POP      EBX

    LINE      5860

    00009576  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000957D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009582  5B                POP      EBX

    LINE      5862

    00009583  B8 0A000000       MOV      EAX,10
    00009588  40                INC      EAX
    00009589  50                PUSH     EAX
    0000958A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000958D  5B                POP      EBX
    0000958E  3B C3             CMP      EAX,EBX
    00009590  0F 8503000000     JNE      3
    00009596  EB                JMP      

    LINE      5869

    00009597  B8 01000000       MOV      EAX,1
    0000959C  8B C8             MOV      ECX,EAX
    0000959E  B8 0A000000       MOV      EAX,10
    000095A3  50                PUSH     EAX
    000095A4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000095A7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000095AA  5B                POP      EBX
    000095AB  53                PUSH     EBX
    000095AC  3B C3             CMP      EAX,EBX
    000095AE  0F 8E03000000     JLE      3
    000095B4  EB                JMP      

    LINE      5871

    000095B5  B8 01000000       MOV      EAX,1
    000095BA  8B C8             MOV      ECX,EAX
    000095BC  B8 05000000       MOV      EAX,5
    000095C1  50                PUSH     EAX
    000095C2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000095C5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000095C8  5B                POP      EBX
    000095C9  53                PUSH     EBX
    000095CA  3B C3             CMP      EAX,EBX
    000095CC  0F 8E03000000     JLE      3
    000095D2  EB                JMP      

    LINE      5878

    000095D3  B8 01000000       MOV      EAX,1
    000095D8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5879

    000095DB  B8 01000000       MOV      EAX,1
    000095E0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5880

    000095E3  B8 01000000       MOV      EAX,1
    000095E8  8B C8             MOV      ECX,EAX
    000095EA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000095ED  48                DEC      EAX
    000095EE  BB 0E000000       MOV      EBX,14
    000095F3  F7 E3             MUL      EBX
    000095F5  50                PUSH     EAX
    000095F6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000095F9  48                DEC      EAX
    000095FA  BB 02000000       MOV      EBX,2
    000095FF  F7 E3             MUL      EBX
    00009601  5B                POP      EBX
    00009602  03 C3             ADD      EAX,EBX
    00009604  8B F8             MOV      EDI,EAX
    00009606  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5881

    0000960A  B8 01000000       MOV      EAX,1
    0000960F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5882

    00009612  B8 01000000       MOV      EAX,1
    00009617  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5884

    0000961A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00009621  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009626  5B                POP      EBX

    LINE      5886

    00009627  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000962E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009633  5B                POP      EBX

    LINE      5888

    00009634  B8 0A000000       MOV      EAX,10
    00009639  40                INC      EAX
    0000963A  50                PUSH     EAX
    0000963B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000963E  5B                POP      EBX
    0000963F  3B C3             CMP      EAX,EBX
    00009641  0F 8503000000     JNE      3
    00009647  EB                JMP      

    LINE      5896

    00009648  B8 01000000       MOV      EAX,1
    0000964D  8B C8             MOV      ECX,EAX
    0000964F  B8 0A000000       MOV      EAX,10
    00009654  50                PUSH     EAX
    00009655  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00009658  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000965B  5B                POP      EBX
    0000965C  53                PUSH     EBX
    0000965D  3B C3             CMP      EAX,EBX
    0000965F  0F 8E03000000     JLE      3
    00009665  EB                JMP      

    LINE      5898

    00009666  B8 01000000       MOV      EAX,1
    0000966B  8B C8             MOV      ECX,EAX
    0000966D  B8 05000000       MOV      EAX,5
    00009672  50                PUSH     EAX
    00009673  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009676  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009679  5B                POP      EBX
    0000967A  53                PUSH     EBX
    0000967B  3B C3             CMP      EAX,EBX
    0000967D  0F 8E03000000     JLE      3
    00009683  EB                JMP      

    LINE      5905

    00009684  B8 01000000       MOV      EAX,1
    00009689  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5906

    0000968F  B8 01000000       MOV      EAX,1
    00009694  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5907

    0000969A  B8 01000000       MOV      EAX,1
    0000969F  8B C8             MOV      ECX,EAX
    000096A1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000096A4  48                DEC      EAX
    000096A5  BB 0E000000       MOV      EBX,14
    000096AA  F7 E3             MUL      EBX
    000096AC  50                PUSH     EAX
    000096AD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000096B0  48                DEC      EAX
    000096B1  BB 02000000       MOV      EBX,2
    000096B6  F7 E3             MUL      EBX
    000096B8  5B                POP      EBX
    000096B9  03 C3             ADD      EAX,EBX
    000096BB  8B F8             MOV      EDI,EAX
    000096BD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5908

    000096C4  B8 01000000       MOV      EAX,1
    000096C9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5909

    000096CF  B8 01000000       MOV      EAX,1
    000096D4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5911

    000096DA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000096E1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000096E6  5B                POP      EBX

    LINE      5913

    000096E7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000096EE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000096F3  5B                POP      EBX

    LINE      5915

    000096F4  B8 0A000000       MOV      EAX,10
    000096F9  40                INC      EAX
    000096FA  50                PUSH     EAX
    000096FB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000096FE  5B                POP      EBX
    000096FF  3B C3             CMP      EAX,EBX
    00009701  0F 8503000000     JNE      3
    00009707  EB                JMP      

    LINE      5922

    00009708  B8 01000000       MOV      EAX,1
    0000970D  8B C8             MOV      ECX,EAX
    0000970F  B8 0A000000       MOV      EAX,10
    00009714  50                PUSH     EAX
    00009715  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00009718  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000971B  5B                POP      EBX
    0000971C  53                PUSH     EBX
    0000971D  3B C3             CMP      EAX,EBX
    0000971F  0F 8E03000000     JLE      3
    00009725  EB                JMP      

    LINE      5924

    00009726  B8 01000000       MOV      EAX,1
    0000972B  8B C8             MOV      ECX,EAX
    0000972D  B8 05000000       MOV      EAX,5
    00009732  50                PUSH     EAX
    00009733  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00009736  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009739  5B                POP      EBX
    0000973A  53                PUSH     EBX
    0000973B  3B C3             CMP      EAX,EBX
    0000973D  0F 8E03000000     JLE      3
    00009743  EB                JMP      

    LINE      5931

    00009744  B8 01000000       MOV      EAX,1
    00009749  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5932

    0000974F  B8 01000000       MOV      EAX,1
    00009754  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5933

    0000975A  B8 01000000       MOV      EAX,1
    0000975F  8B C8             MOV      ECX,EAX
    00009761  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009764  48                DEC      EAX
    00009765  BB 0E000000       MOV      EBX,14
    0000976A  F7 E3             MUL      EBX
    0000976C  50                PUSH     EAX
    0000976D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009770  48                DEC      EAX
    00009771  BB 02000000       MOV      EBX,2
    00009776  F7 E3             MUL      EBX
    00009778  5B                POP      EBX
    00009779  03 C3             ADD      EAX,EBX
    0000977B  8B F8             MOV      EDI,EAX
    0000977D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      5934

    00009784  B8 01000000       MOV      EAX,1
    00009789  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5935

    0000978F  B8 01000000       MOV      EAX,1
    00009794  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      5937

    0000979A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000097A1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000097A6  5B                POP      EBX

    LINE      5939

    000097A7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000097AE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000097B3  5B                POP      EBX

    LINE      5941

    000097B4  B8 0A000000       MOV      EAX,10
    000097B9  40                INC      EAX
    000097BA  50                PUSH     EAX
    000097BB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000097BE  5B                POP      EBX
    000097BF  3B C3             CMP      EAX,EBX
    000097C1  0F 8503000000     JNE      3
    000097C7  EB                JMP      

    LINE      5955

    000097C8  56                PUSH     ESI
    000097C9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000097CF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000097D5  FF D1             CALL     ECX                       run_inner_proc
    000097D7  5E                POP      ESI                       /* restore callers static pointer */

    LINE      5957

    000097D8  B8 01000000       MOV      EAX,1
    000097DD  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      5959

    000097E0  B8 01000000       MOV      EAX,1
    000097E5  8B C8             MOV      ECX,EAX
    000097E7  B8 0A000000       MOV      EAX,10
    000097EC  50                PUSH     EAX
    000097ED  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000097F0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000097F3  5B                POP      EBX
    000097F4  53                PUSH     EBX
    000097F5  3B C3             CMP      EAX,EBX
    000097F7  0F 8E03000000     JLE      3
    000097FD  EB                JMP      

    LINE      5961

    000097FE  B8 01000000       MOV      EAX,1
    00009803  8B C8             MOV      ECX,EAX
    00009805  B8 05000000       MOV      EAX,5
    0000980A  50                PUSH     EAX
    0000980B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000980E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009811  5B                POP      EBX
    00009812  53                PUSH     EBX
    00009813  3B C3             CMP      EAX,EBX
    00009815  0F 8E03000000     JLE      3
    0000981B  EB                JMP      

    LINE      5968

    0000981C  B8 01000000       MOV      EAX,1
    00009821  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5969

    00009824  B8 01000000       MOV      EAX,1
    00009829  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5970

    0000982C  B8 01000000       MOV      EAX,1
    00009831  8B C8             MOV      ECX,EAX
    00009833  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009836  48                DEC      EAX
    00009837  BB 0E000000       MOV      EBX,14
    0000983C  F7 E3             MUL      EBX
    0000983E  50                PUSH     EAX
    0000983F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009842  48                DEC      EAX
    00009843  BB 02000000       MOV      EBX,2
    00009848  F7 E3             MUL      EBX
    0000984A  5B                POP      EBX
    0000984B  03 C3             ADD      EAX,EBX
    0000984D  8B F8             MOV      EDI,EAX
    0000984F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5971

    00009853  B8 01000000       MOV      EAX,1
    00009858  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5972

    0000985B  B8 01000000       MOV      EAX,1
    00009860  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5974

    00009863  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000986A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000986F  5B                POP      EBX

    LINE      5976

    00009870  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00009877  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000987C  5B                POP      EBX

    LINE      5978

    0000987D  B8 0A000000       MOV      EAX,10
    00009882  40                INC      EAX
    00009883  50                PUSH     EAX
    00009884  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009887  5B                POP      EBX
    00009888  3B C3             CMP      EAX,EBX
    0000988A  0F 8503000000     JNE      3
    00009890  EB                JMP      

    LINE      5985

    00009891  B8 01000000       MOV      EAX,1
    00009896  8B C8             MOV      ECX,EAX
    00009898  B8 0A000000       MOV      EAX,10
    0000989D  50                PUSH     EAX
    0000989E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000098A1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000098A4  5B                POP      EBX
    000098A5  53                PUSH     EBX
    000098A6  3B C3             CMP      EAX,EBX
    000098A8  0F 8E03000000     JLE      3
    000098AE  EB                JMP      

    LINE      5987

    000098AF  B8 01000000       MOV      EAX,1
    000098B4  8B C8             MOV      ECX,EAX
    000098B6  B8 05000000       MOV      EAX,5
    000098BB  50                PUSH     EAX
    000098BC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000098BF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000098C2  5B                POP      EBX
    000098C3  53                PUSH     EBX
    000098C4  3B C3             CMP      EAX,EBX
    000098C6  0F 8E03000000     JLE      3
    000098CC  EB                JMP      

    LINE      5994

    000098CD  B8 01000000       MOV      EAX,1
    000098D2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5995

    000098D5  B8 01000000       MOV      EAX,1
    000098DA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5996

    000098DD  B8 01000000       MOV      EAX,1
    000098E2  8B C8             MOV      ECX,EAX
    000098E4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000098E7  48                DEC      EAX
    000098E8  BB 0E000000       MOV      EBX,14
    000098ED  F7 E3             MUL      EBX
    000098EF  50                PUSH     EAX
    000098F0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000098F3  48                DEC      EAX
    000098F4  BB 02000000       MOV      EBX,2
    000098F9  F7 E3             MUL      EBX
    000098FB  5B                POP      EBX
    000098FC  03 C3             ADD      EAX,EBX
    000098FE  8B F8             MOV      EDI,EAX
    00009900  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      5997

    00009904  B8 01000000       MOV      EAX,1
    00009909  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      5998

    0000990C  B8 01000000       MOV      EAX,1
    00009911  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6000

    00009914  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000991B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009920  5B                POP      EBX

    LINE      6002

    00009921  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00009928  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000992D  5B                POP      EBX

    LINE      6004

    0000992E  B8 0A000000       MOV      EAX,10
    00009933  40                INC      EAX
    00009934  50                PUSH     EAX
    00009935  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009938  5B                POP      EBX
    00009939  3B C3             CMP      EAX,EBX
    0000993B  0F 8503000000     JNE      3
    00009941  EB                JMP      

    LINE      6012

    00009942  B8 01000000       MOV      EAX,1
    00009947  8B C8             MOV      ECX,EAX
    00009949  B8 0A000000       MOV      EAX,10
    0000994E  50                PUSH     EAX
    0000994F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00009952  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009955  5B                POP      EBX
    00009956  53                PUSH     EBX
    00009957  3B C3             CMP      EAX,EBX
    00009959  0F 8E03000000     JLE      3
    0000995F  EB                JMP      

    LINE      6014

    00009960  B8 01000000       MOV      EAX,1
    00009965  8B C8             MOV      ECX,EAX
    00009967  B8 05000000       MOV      EAX,5
    0000996C  50                PUSH     EAX
    0000996D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009970  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009973  5B                POP      EBX
    00009974  53                PUSH     EBX
    00009975  3B C3             CMP      EAX,EBX
    00009977  0F 8E03000000     JLE      3
    0000997D  EB                JMP      

    LINE      6021

    0000997E  B8 01000000       MOV      EAX,1
    00009983  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6022

    00009989  B8 01000000       MOV      EAX,1
    0000998E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6023

    00009994  B8 01000000       MOV      EAX,1
    00009999  8B C8             MOV      ECX,EAX
    0000999B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000999E  48                DEC      EAX
    0000999F  BB 0E000000       MOV      EBX,14
    000099A4  F7 E3             MUL      EBX
    000099A6  50                PUSH     EAX
    000099A7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000099AA  48                DEC      EAX
    000099AB  BB 02000000       MOV      EBX,2
    000099B0  F7 E3             MUL      EBX
    000099B2  5B                POP      EBX
    000099B3  03 C3             ADD      EAX,EBX
    000099B5  8B F8             MOV      EDI,EAX
    000099B7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6024

    000099BE  B8 01000000       MOV      EAX,1
    000099C3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6025

    000099C9  B8 01000000       MOV      EAX,1
    000099CE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6027

    000099D4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000099DB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000099E0  5B                POP      EBX

    LINE      6029

    000099E1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000099E8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000099ED  5B                POP      EBX

    LINE      6031

    000099EE  B8 0A000000       MOV      EAX,10
    000099F3  40                INC      EAX
    000099F4  50                PUSH     EAX
    000099F5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000099F8  5B                POP      EBX
    000099F9  3B C3             CMP      EAX,EBX
    000099FB  0F 8503000000     JNE      3
    00009A01  EB                JMP      

    LINE      6038

    00009A02  B8 01000000       MOV      EAX,1
    00009A07  8B C8             MOV      ECX,EAX
    00009A09  B8 0A000000       MOV      EAX,10
    00009A0E  50                PUSH     EAX
    00009A0F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00009A12  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009A15  5B                POP      EBX
    00009A16  53                PUSH     EBX
    00009A17  3B C3             CMP      EAX,EBX
    00009A19  0F 8E03000000     JLE      3
    00009A1F  EB                JMP      

    LINE      6040

    00009A20  B8 01000000       MOV      EAX,1
    00009A25  8B C8             MOV      ECX,EAX
    00009A27  B8 05000000       MOV      EAX,5
    00009A2C  50                PUSH     EAX
    00009A2D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00009A30  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009A33  5B                POP      EBX
    00009A34  53                PUSH     EBX
    00009A35  3B C3             CMP      EAX,EBX
    00009A37  0F 8E03000000     JLE      3
    00009A3D  EB                JMP      

    LINE      6047

    00009A3E  B8 01000000       MOV      EAX,1
    00009A43  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6048

    00009A49  B8 01000000       MOV      EAX,1
    00009A4E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6049

    00009A54  B8 01000000       MOV      EAX,1
    00009A59  8B C8             MOV      ECX,EAX
    00009A5B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009A5E  48                DEC      EAX
    00009A5F  BB 0E000000       MOV      EBX,14
    00009A64  F7 E3             MUL      EBX
    00009A66  50                PUSH     EAX
    00009A67  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009A6A  48                DEC      EAX
    00009A6B  BB 02000000       MOV      EBX,2
    00009A70  F7 E3             MUL      EBX
    00009A72  5B                POP      EBX
    00009A73  03 C3             ADD      EAX,EBX
    00009A75  8B F8             MOV      EDI,EAX
    00009A77  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6050

    00009A7E  B8 01000000       MOV      EAX,1
    00009A83  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6051

    00009A89  B8 01000000       MOV      EAX,1
    00009A8E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6053

    00009A94  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00009A9B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00009AA0  5B                POP      EBX

    LINE      6055

    00009AA1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00009AA8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00009AAD  5B                POP      EBX

    LINE      6057

    00009AAE  B8 0A000000       MOV      EAX,10
    00009AB3  40                INC      EAX
    00009AB4  50                PUSH     EAX
    00009AB5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009AB8  5B                POP      EBX
    00009AB9  3B C3             CMP      EAX,EBX
    00009ABB  0F 8503000000     JNE      3
    00009AC1  EB                JMP      

    LINE      6071

    00009AC2  56                PUSH     ESI
    00009AC3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00009AC9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00009ACF  FF D1             CALL     ECX                       run_inner_proc
    00009AD1  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6073

    00009AD2  B8 01000000       MOV      EAX,1
    00009AD7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6075

    00009ADA  B8 01000000       MOV      EAX,1
    00009ADF  8B C8             MOV      ECX,EAX
    00009AE1  B8 0A000000       MOV      EAX,10
    00009AE6  50                PUSH     EAX
    00009AE7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00009AEA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009AED  5B                POP      EBX
    00009AEE  53                PUSH     EBX
    00009AEF  3B C3             CMP      EAX,EBX
    00009AF1  0F 8E03000000     JLE      3
    00009AF7  EB                JMP      

    LINE      6077

    00009AF8  B8 01000000       MOV      EAX,1
    00009AFD  8B C8             MOV      ECX,EAX
    00009AFF  B8 05000000       MOV      EAX,5
    00009B04  50                PUSH     EAX
    00009B05  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009B08  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009B0B  5B                POP      EBX
    00009B0C  53                PUSH     EBX
    00009B0D  3B C3             CMP      EAX,EBX
    00009B0F  0F 8E03000000     JLE      3
    00009B15  EB                JMP      

    LINE      6084

    00009B16  B8 01000000       MOV      EAX,1
    00009B1B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6085

    00009B1E  B8 01000000       MOV      EAX,1
    00009B23  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6086

    00009B26  B8 01000000       MOV      EAX,1
    00009B2B  8B C8             MOV      ECX,EAX
    00009B2D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009B30  48                DEC      EAX
    00009B31  BB 0E000000       MOV      EBX,14
    00009B36  F7 E3             MUL      EBX
    00009B38  50                PUSH     EAX
    00009B39  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009B3C  48                DEC      EAX
    00009B3D  BB 02000000       MOV      EBX,2
    00009B42  F7 E3             MUL      EBX
    00009B44  5B                POP      EBX
    00009B45  03 C3             ADD      EAX,EBX
    00009B47  8B F8             MOV      EDI,EAX
    00009B49  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6087

    00009B4D  B8 01000000       MOV      EAX,1
    00009B52  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6088

    00009B55  B8 01000000       MOV      EAX,1
    00009B5A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6090

    00009B5D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00009B64  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009B69  5B                POP      EBX

    LINE      6092

    00009B6A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00009B71  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009B76  5B                POP      EBX

    LINE      6094

    00009B77  B8 0A000000       MOV      EAX,10
    00009B7C  40                INC      EAX
    00009B7D  50                PUSH     EAX
    00009B7E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009B81  5B                POP      EBX
    00009B82  3B C3             CMP      EAX,EBX
    00009B84  0F 8503000000     JNE      3
    00009B8A  EB                JMP      

    LINE      6101

    00009B8B  B8 01000000       MOV      EAX,1
    00009B90  8B C8             MOV      ECX,EAX
    00009B92  B8 0A000000       MOV      EAX,10
    00009B97  50                PUSH     EAX
    00009B98  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00009B9B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009B9E  5B                POP      EBX
    00009B9F  53                PUSH     EBX
    00009BA0  3B C3             CMP      EAX,EBX
    00009BA2  0F 8E03000000     JLE      3
    00009BA8  EB                JMP      

    LINE      6103

    00009BA9  B8 01000000       MOV      EAX,1
    00009BAE  8B C8             MOV      ECX,EAX
    00009BB0  B8 05000000       MOV      EAX,5
    00009BB5  50                PUSH     EAX
    00009BB6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00009BB9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009BBC  5B                POP      EBX
    00009BBD  53                PUSH     EBX
    00009BBE  3B C3             CMP      EAX,EBX
    00009BC0  0F 8E03000000     JLE      3
    00009BC6  EB                JMP      

    LINE      6110

    00009BC7  B8 01000000       MOV      EAX,1
    00009BCC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6111

    00009BCF  B8 01000000       MOV      EAX,1
    00009BD4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6112

    00009BD7  B8 01000000       MOV      EAX,1
    00009BDC  8B C8             MOV      ECX,EAX
    00009BDE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009BE1  48                DEC      EAX
    00009BE2  BB 0E000000       MOV      EBX,14
    00009BE7  F7 E3             MUL      EBX
    00009BE9  50                PUSH     EAX
    00009BEA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009BED  48                DEC      EAX
    00009BEE  BB 02000000       MOV      EBX,2
    00009BF3  F7 E3             MUL      EBX
    00009BF5  5B                POP      EBX
    00009BF6  03 C3             ADD      EAX,EBX
    00009BF8  8B F8             MOV      EDI,EAX
    00009BFA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6113

    00009BFE  B8 01000000       MOV      EAX,1
    00009C03  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6114

    00009C06  B8 01000000       MOV      EAX,1
    00009C0B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6116

    00009C0E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00009C15  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009C1A  5B                POP      EBX

    LINE      6118

    00009C1B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00009C22  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009C27  5B                POP      EBX

    LINE      6120

    00009C28  B8 0A000000       MOV      EAX,10
    00009C2D  40                INC      EAX
    00009C2E  50                PUSH     EAX
    00009C2F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009C32  5B                POP      EBX
    00009C33  3B C3             CMP      EAX,EBX
    00009C35  0F 8503000000     JNE      3
    00009C3B  EB                JMP      

    LINE      6128

    00009C3C  B8 01000000       MOV      EAX,1
    00009C41  8B C8             MOV      ECX,EAX
    00009C43  B8 0A000000       MOV      EAX,10
    00009C48  50                PUSH     EAX
    00009C49  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00009C4C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009C4F  5B                POP      EBX
    00009C50  53                PUSH     EBX
    00009C51  3B C3             CMP      EAX,EBX
    00009C53  0F 8E03000000     JLE      3
    00009C59  EB                JMP      

    LINE      6130

    00009C5A  B8 01000000       MOV      EAX,1
    00009C5F  8B C8             MOV      ECX,EAX
    00009C61  B8 05000000       MOV      EAX,5
    00009C66  50                PUSH     EAX
    00009C67  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009C6A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009C6D  5B                POP      EBX
    00009C6E  53                PUSH     EBX
    00009C6F  3B C3             CMP      EAX,EBX
    00009C71  0F 8E03000000     JLE      3
    00009C77  EB                JMP      

    LINE      6137

    00009C78  B8 01000000       MOV      EAX,1
    00009C7D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6138

    00009C83  B8 01000000       MOV      EAX,1
    00009C88  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6139

    00009C8E  B8 01000000       MOV      EAX,1
    00009C93  8B C8             MOV      ECX,EAX
    00009C95  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009C98  48                DEC      EAX
    00009C99  BB 0E000000       MOV      EBX,14
    00009C9E  F7 E3             MUL      EBX
    00009CA0  50                PUSH     EAX
    00009CA1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009CA4  48                DEC      EAX
    00009CA5  BB 02000000       MOV      EBX,2
    00009CAA  F7 E3             MUL      EBX
    00009CAC  5B                POP      EBX
    00009CAD  03 C3             ADD      EAX,EBX
    00009CAF  8B F8             MOV      EDI,EAX
    00009CB1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6140

    00009CB8  B8 01000000       MOV      EAX,1
    00009CBD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6141

    00009CC3  B8 01000000       MOV      EAX,1
    00009CC8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6143

    00009CCE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00009CD5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00009CDA  5B                POP      EBX

    LINE      6145

    00009CDB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00009CE2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00009CE7  5B                POP      EBX

    LINE      6147

    00009CE8  B8 0A000000       MOV      EAX,10
    00009CED  40                INC      EAX
    00009CEE  50                PUSH     EAX
    00009CEF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009CF2  5B                POP      EBX
    00009CF3  3B C3             CMP      EAX,EBX
    00009CF5  0F 8503000000     JNE      3
    00009CFB  EB                JMP      

    LINE      6154

    00009CFC  B8 01000000       MOV      EAX,1
    00009D01  8B C8             MOV      ECX,EAX
    00009D03  B8 0A000000       MOV      EAX,10
    00009D08  50                PUSH     EAX
    00009D09  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00009D0C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009D0F  5B                POP      EBX
    00009D10  53                PUSH     EBX
    00009D11  3B C3             CMP      EAX,EBX
    00009D13  0F 8E03000000     JLE      3
    00009D19  EB                JMP      

    LINE      6156

    00009D1A  B8 01000000       MOV      EAX,1
    00009D1F  8B C8             MOV      ECX,EAX
    00009D21  B8 05000000       MOV      EAX,5
    00009D26  50                PUSH     EAX
    00009D27  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00009D2A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009D2D  5B                POP      EBX
    00009D2E  53                PUSH     EBX
    00009D2F  3B C3             CMP      EAX,EBX
    00009D31  0F 8E03000000     JLE      3
    00009D37  EB                JMP      

    LINE      6163

    00009D38  B8 01000000       MOV      EAX,1
    00009D3D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6164

    00009D43  B8 01000000       MOV      EAX,1
    00009D48  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6165

    00009D4E  B8 01000000       MOV      EAX,1
    00009D53  8B C8             MOV      ECX,EAX
    00009D55  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009D58  48                DEC      EAX
    00009D59  BB 0E000000       MOV      EBX,14
    00009D5E  F7 E3             MUL      EBX
    00009D60  50                PUSH     EAX
    00009D61  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009D64  48                DEC      EAX
    00009D65  BB 02000000       MOV      EBX,2
    00009D6A  F7 E3             MUL      EBX
    00009D6C  5B                POP      EBX
    00009D6D  03 C3             ADD      EAX,EBX
    00009D6F  8B F8             MOV      EDI,EAX
    00009D71  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6166

    00009D78  B8 01000000       MOV      EAX,1
    00009D7D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6167

    00009D83  B8 01000000       MOV      EAX,1
    00009D88  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6169

    00009D8E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00009D95  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00009D9A  5B                POP      EBX

    LINE      6171

    00009D9B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00009DA2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00009DA7  5B                POP      EBX

    LINE      6173

    00009DA8  B8 0A000000       MOV      EAX,10
    00009DAD  40                INC      EAX
    00009DAE  50                PUSH     EAX
    00009DAF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009DB2  5B                POP      EBX
    00009DB3  3B C3             CMP      EAX,EBX
    00009DB5  0F 8503000000     JNE      3
    00009DBB  EB                JMP      

    LINE      6187

    00009DBC  56                PUSH     ESI
    00009DBD  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00009DC3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00009DC9  FF D1             CALL     ECX                       run_inner_proc
    00009DCB  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6189

    00009DCC  B8 01000000       MOV      EAX,1
    00009DD1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6191

    00009DD4  B8 01000000       MOV      EAX,1
    00009DD9  8B C8             MOV      ECX,EAX
    00009DDB  B8 0A000000       MOV      EAX,10
    00009DE0  50                PUSH     EAX
    00009DE1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00009DE4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009DE7  5B                POP      EBX
    00009DE8  53                PUSH     EBX
    00009DE9  3B C3             CMP      EAX,EBX
    00009DEB  0F 8E03000000     JLE      3
    00009DF1  EB                JMP      

    LINE      6193

    00009DF2  B8 01000000       MOV      EAX,1
    00009DF7  8B C8             MOV      ECX,EAX
    00009DF9  B8 05000000       MOV      EAX,5
    00009DFE  50                PUSH     EAX
    00009DFF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009E02  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009E05  5B                POP      EBX
    00009E06  53                PUSH     EBX
    00009E07  3B C3             CMP      EAX,EBX
    00009E09  0F 8E03000000     JLE      3
    00009E0F  EB                JMP      

    LINE      6200

    00009E10  B8 01000000       MOV      EAX,1
    00009E15  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6201

    00009E18  B8 01000000       MOV      EAX,1
    00009E1D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6202

    00009E20  B8 01000000       MOV      EAX,1
    00009E25  8B C8             MOV      ECX,EAX
    00009E27  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009E2A  48                DEC      EAX
    00009E2B  BB 0E000000       MOV      EBX,14
    00009E30  F7 E3             MUL      EBX
    00009E32  50                PUSH     EAX
    00009E33  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009E36  48                DEC      EAX
    00009E37  BB 02000000       MOV      EBX,2
    00009E3C  F7 E3             MUL      EBX
    00009E3E  5B                POP      EBX
    00009E3F  03 C3             ADD      EAX,EBX
    00009E41  8B F8             MOV      EDI,EAX
    00009E43  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6203

    00009E47  B8 01000000       MOV      EAX,1
    00009E4C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6204

    00009E4F  B8 01000000       MOV      EAX,1
    00009E54  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6206

    00009E57  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00009E5E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009E63  5B                POP      EBX

    LINE      6208

    00009E64  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00009E6B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009E70  5B                POP      EBX

    LINE      6210

    00009E71  B8 0A000000       MOV      EAX,10
    00009E76  40                INC      EAX
    00009E77  50                PUSH     EAX
    00009E78  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009E7B  5B                POP      EBX
    00009E7C  3B C3             CMP      EAX,EBX
    00009E7E  0F 8503000000     JNE      3
    00009E84  EB                JMP      

    LINE      6217

    00009E85  B8 01000000       MOV      EAX,1
    00009E8A  8B C8             MOV      ECX,EAX
    00009E8C  B8 0A000000       MOV      EAX,10
    00009E91  50                PUSH     EAX
    00009E92  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00009E95  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009E98  5B                POP      EBX
    00009E99  53                PUSH     EBX
    00009E9A  3B C3             CMP      EAX,EBX
    00009E9C  0F 8E03000000     JLE      3
    00009EA2  EB                JMP      

    LINE      6219

    00009EA3  B8 01000000       MOV      EAX,1
    00009EA8  8B C8             MOV      ECX,EAX
    00009EAA  B8 05000000       MOV      EAX,5
    00009EAF  50                PUSH     EAX
    00009EB0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00009EB3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009EB6  5B                POP      EBX
    00009EB7  53                PUSH     EBX
    00009EB8  3B C3             CMP      EAX,EBX
    00009EBA  0F 8E03000000     JLE      3
    00009EC0  EB                JMP      

    LINE      6226

    00009EC1  B8 01000000       MOV      EAX,1
    00009EC6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6227

    00009EC9  B8 01000000       MOV      EAX,1
    00009ECE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6228

    00009ED1  B8 01000000       MOV      EAX,1
    00009ED6  8B C8             MOV      ECX,EAX
    00009ED8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00009EDB  48                DEC      EAX
    00009EDC  BB 0E000000       MOV      EBX,14
    00009EE1  F7 E3             MUL      EBX
    00009EE3  50                PUSH     EAX
    00009EE4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00009EE7  48                DEC      EAX
    00009EE8  BB 02000000       MOV      EBX,2
    00009EED  F7 E3             MUL      EBX
    00009EEF  5B                POP      EBX
    00009EF0  03 C3             ADD      EAX,EBX
    00009EF2  8B F8             MOV      EDI,EAX
    00009EF4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6229

    00009EF8  B8 01000000       MOV      EAX,1
    00009EFD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6230

    00009F00  B8 01000000       MOV      EAX,1
    00009F05  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6232

    00009F08  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00009F0F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00009F14  5B                POP      EBX

    LINE      6234

    00009F15  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00009F1C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00009F21  5B                POP      EBX

    LINE      6236

    00009F22  B8 0A000000       MOV      EAX,10
    00009F27  40                INC      EAX
    00009F28  50                PUSH     EAX
    00009F29  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009F2C  5B                POP      EBX
    00009F2D  3B C3             CMP      EAX,EBX
    00009F2F  0F 8503000000     JNE      3
    00009F35  EB                JMP      

    LINE      6244

    00009F36  B8 01000000       MOV      EAX,1
    00009F3B  8B C8             MOV      ECX,EAX
    00009F3D  B8 0A000000       MOV      EAX,10
    00009F42  50                PUSH     EAX
    00009F43  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00009F46  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009F49  5B                POP      EBX
    00009F4A  53                PUSH     EBX
    00009F4B  3B C3             CMP      EAX,EBX
    00009F4D  0F 8E03000000     JLE      3
    00009F53  EB                JMP      

    LINE      6246

    00009F54  B8 01000000       MOV      EAX,1
    00009F59  8B C8             MOV      ECX,EAX
    00009F5B  B8 05000000       MOV      EAX,5
    00009F60  50                PUSH     EAX
    00009F61  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00009F64  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009F67  5B                POP      EBX
    00009F68  53                PUSH     EBX
    00009F69  3B C3             CMP      EAX,EBX
    00009F6B  0F 8E03000000     JLE      3
    00009F71  EB                JMP      

    LINE      6253

    00009F72  B8 01000000       MOV      EAX,1
    00009F77  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6254

    00009F7D  B8 01000000       MOV      EAX,1
    00009F82  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6255

    00009F88  B8 01000000       MOV      EAX,1
    00009F8D  8B C8             MOV      ECX,EAX
    00009F8F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009F92  48                DEC      EAX
    00009F93  BB 0E000000       MOV      EBX,14
    00009F98  F7 E3             MUL      EBX
    00009F9A  50                PUSH     EAX
    00009F9B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00009F9E  48                DEC      EAX
    00009F9F  BB 02000000       MOV      EBX,2
    00009FA4  F7 E3             MUL      EBX
    00009FA6  5B                POP      EBX
    00009FA7  03 C3             ADD      EAX,EBX
    00009FA9  8B F8             MOV      EDI,EAX
    00009FAB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6256

    00009FB2  B8 01000000       MOV      EAX,1
    00009FB7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6257

    00009FBD  B8 01000000       MOV      EAX,1
    00009FC2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6259

    00009FC8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00009FCF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00009FD4  5B                POP      EBX

    LINE      6261

    00009FD5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00009FDC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00009FE1  5B                POP      EBX

    LINE      6263

    00009FE2  B8 0A000000       MOV      EAX,10
    00009FE7  40                INC      EAX
    00009FE8  50                PUSH     EAX
    00009FE9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00009FEC  5B                POP      EBX
    00009FED  3B C3             CMP      EAX,EBX
    00009FEF  0F 8503000000     JNE      3
    00009FF5  EB                JMP      

    LINE      6270

    00009FF6  B8 01000000       MOV      EAX,1
    00009FFB  8B C8             MOV      ECX,EAX
    00009FFD  B8 0A000000       MOV      EAX,10
    0000A002  50                PUSH     EAX
    0000A003  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000A006  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A009  5B                POP      EBX
    0000A00A  53                PUSH     EBX
    0000A00B  3B C3             CMP      EAX,EBX
    0000A00D  0F 8E03000000     JLE      3
    0000A013  EB                JMP      

    LINE      6272

    0000A014  B8 01000000       MOV      EAX,1
    0000A019  8B C8             MOV      ECX,EAX
    0000A01B  B8 05000000       MOV      EAX,5
    0000A020  50                PUSH     EAX
    0000A021  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000A024  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A027  5B                POP      EBX
    0000A028  53                PUSH     EBX
    0000A029  3B C3             CMP      EAX,EBX
    0000A02B  0F 8E03000000     JLE      3
    0000A031  EB                JMP      

    LINE      6279

    0000A032  B8 01000000       MOV      EAX,1
    0000A037  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6280

    0000A03D  B8 01000000       MOV      EAX,1
    0000A042  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6281

    0000A048  B8 01000000       MOV      EAX,1
    0000A04D  8B C8             MOV      ECX,EAX
    0000A04F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A052  48                DEC      EAX
    0000A053  BB 0E000000       MOV      EBX,14
    0000A058  F7 E3             MUL      EBX
    0000A05A  50                PUSH     EAX
    0000A05B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A05E  48                DEC      EAX
    0000A05F  BB 02000000       MOV      EBX,2
    0000A064  F7 E3             MUL      EBX
    0000A066  5B                POP      EBX
    0000A067  03 C3             ADD      EAX,EBX
    0000A069  8B F8             MOV      EDI,EAX
    0000A06B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6282

    0000A072  B8 01000000       MOV      EAX,1
    0000A077  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6283

    0000A07D  B8 01000000       MOV      EAX,1
    0000A082  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6285

    0000A088  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000A08F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000A094  5B                POP      EBX

    LINE      6287

    0000A095  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000A09C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000A0A1  5B                POP      EBX

    LINE      6289

    0000A0A2  B8 0A000000       MOV      EAX,10
    0000A0A7  40                INC      EAX
    0000A0A8  50                PUSH     EAX
    0000A0A9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A0AC  5B                POP      EBX
    0000A0AD  3B C3             CMP      EAX,EBX
    0000A0AF  0F 8503000000     JNE      3
    0000A0B5  EB                JMP      

    LINE      6303

    0000A0B6  56                PUSH     ESI
    0000A0B7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000A0BD  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000A0C3  FF D1             CALL     ECX                       run_inner_proc
    0000A0C5  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6305

    0000A0C6  B8 01000000       MOV      EAX,1
    0000A0CB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6307

    0000A0CE  B8 01000000       MOV      EAX,1
    0000A0D3  8B C8             MOV      ECX,EAX
    0000A0D5  B8 0A000000       MOV      EAX,10
    0000A0DA  50                PUSH     EAX
    0000A0DB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000A0DE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A0E1  5B                POP      EBX
    0000A0E2  53                PUSH     EBX
    0000A0E3  3B C3             CMP      EAX,EBX
    0000A0E5  0F 8E03000000     JLE      3
    0000A0EB  EB                JMP      

    LINE      6309

    0000A0EC  B8 01000000       MOV      EAX,1
    0000A0F1  8B C8             MOV      ECX,EAX
    0000A0F3  B8 05000000       MOV      EAX,5
    0000A0F8  50                PUSH     EAX
    0000A0F9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000A0FC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A0FF  5B                POP      EBX
    0000A100  53                PUSH     EBX
    0000A101  3B C3             CMP      EAX,EBX
    0000A103  0F 8E03000000     JLE      3
    0000A109  EB                JMP      

    LINE      6316

    0000A10A  B8 01000000       MOV      EAX,1
    0000A10F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6317

    0000A112  B8 01000000       MOV      EAX,1
    0000A117  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6318

    0000A11A  B8 01000000       MOV      EAX,1
    0000A11F  8B C8             MOV      ECX,EAX
    0000A121  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A124  48                DEC      EAX
    0000A125  BB 0E000000       MOV      EBX,14
    0000A12A  F7 E3             MUL      EBX
    0000A12C  50                PUSH     EAX
    0000A12D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A130  48                DEC      EAX
    0000A131  BB 02000000       MOV      EBX,2
    0000A136  F7 E3             MUL      EBX
    0000A138  5B                POP      EBX
    0000A139  03 C3             ADD      EAX,EBX
    0000A13B  8B F8             MOV      EDI,EAX
    0000A13D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6319

    0000A141  B8 01000000       MOV      EAX,1
    0000A146  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6320

    0000A149  B8 01000000       MOV      EAX,1
    0000A14E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6322

    0000A151  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000A158  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000A15D  5B                POP      EBX

    LINE      6324

    0000A15E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000A165  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000A16A  5B                POP      EBX

    LINE      6326

    0000A16B  B8 0A000000       MOV      EAX,10
    0000A170  40                INC      EAX
    0000A171  50                PUSH     EAX
    0000A172  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A175  5B                POP      EBX
    0000A176  3B C3             CMP      EAX,EBX
    0000A178  0F 8503000000     JNE      3
    0000A17E  EB                JMP      

    LINE      6333

    0000A17F  B8 01000000       MOV      EAX,1
    0000A184  8B C8             MOV      ECX,EAX
    0000A186  B8 0A000000       MOV      EAX,10
    0000A18B  50                PUSH     EAX
    0000A18C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000A18F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A192  5B                POP      EBX
    0000A193  53                PUSH     EBX
    0000A194  3B C3             CMP      EAX,EBX
    0000A196  0F 8E03000000     JLE      3
    0000A19C  EB                JMP      

    LINE      6335

    0000A19D  B8 01000000       MOV      EAX,1
    0000A1A2  8B C8             MOV      ECX,EAX
    0000A1A4  B8 05000000       MOV      EAX,5
    0000A1A9  50                PUSH     EAX
    0000A1AA  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000A1AD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A1B0  5B                POP      EBX
    0000A1B1  53                PUSH     EBX
    0000A1B2  3B C3             CMP      EAX,EBX
    0000A1B4  0F 8E03000000     JLE      3
    0000A1BA  EB                JMP      

    LINE      6342

    0000A1BB  B8 01000000       MOV      EAX,1
    0000A1C0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6343

    0000A1C3  B8 01000000       MOV      EAX,1
    0000A1C8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6344

    0000A1CB  B8 01000000       MOV      EAX,1
    0000A1D0  8B C8             MOV      ECX,EAX
    0000A1D2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A1D5  48                DEC      EAX
    0000A1D6  BB 0E000000       MOV      EBX,14
    0000A1DB  F7 E3             MUL      EBX
    0000A1DD  50                PUSH     EAX
    0000A1DE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A1E1  48                DEC      EAX
    0000A1E2  BB 02000000       MOV      EBX,2
    0000A1E7  F7 E3             MUL      EBX
    0000A1E9  5B                POP      EBX
    0000A1EA  03 C3             ADD      EAX,EBX
    0000A1EC  8B F8             MOV      EDI,EAX
    0000A1EE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6345

    0000A1F2  B8 01000000       MOV      EAX,1
    0000A1F7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6346

    0000A1FA  B8 01000000       MOV      EAX,1
    0000A1FF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6348

    0000A202  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000A209  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000A20E  5B                POP      EBX

    LINE      6350

    0000A20F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000A216  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000A21B  5B                POP      EBX

    LINE      6352

    0000A21C  B8 0A000000       MOV      EAX,10
    0000A221  40                INC      EAX
    0000A222  50                PUSH     EAX
    0000A223  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A226  5B                POP      EBX
    0000A227  3B C3             CMP      EAX,EBX
    0000A229  0F 8503000000     JNE      3
    0000A22F  EB                JMP      

    LINE      6360

    0000A230  B8 01000000       MOV      EAX,1
    0000A235  8B C8             MOV      ECX,EAX
    0000A237  B8 0A000000       MOV      EAX,10
    0000A23C  50                PUSH     EAX
    0000A23D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000A240  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A243  5B                POP      EBX
    0000A244  53                PUSH     EBX
    0000A245  3B C3             CMP      EAX,EBX
    0000A247  0F 8E03000000     JLE      3
    0000A24D  EB                JMP      

    LINE      6362

    0000A24E  B8 01000000       MOV      EAX,1
    0000A253  8B C8             MOV      ECX,EAX
    0000A255  B8 05000000       MOV      EAX,5
    0000A25A  50                PUSH     EAX
    0000A25B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000A25E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A261  5B                POP      EBX
    0000A262  53                PUSH     EBX
    0000A263  3B C3             CMP      EAX,EBX
    0000A265  0F 8E03000000     JLE      3
    0000A26B  EB                JMP      

    LINE      6369

    0000A26C  B8 01000000       MOV      EAX,1
    0000A271  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6370

    0000A277  B8 01000000       MOV      EAX,1
    0000A27C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6371

    0000A282  B8 01000000       MOV      EAX,1
    0000A287  8B C8             MOV      ECX,EAX
    0000A289  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A28C  48                DEC      EAX
    0000A28D  BB 0E000000       MOV      EBX,14
    0000A292  F7 E3             MUL      EBX
    0000A294  50                PUSH     EAX
    0000A295  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A298  48                DEC      EAX
    0000A299  BB 02000000       MOV      EBX,2
    0000A29E  F7 E3             MUL      EBX
    0000A2A0  5B                POP      EBX
    0000A2A1  03 C3             ADD      EAX,EBX
    0000A2A3  8B F8             MOV      EDI,EAX
    0000A2A5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6372

    0000A2AC  B8 01000000       MOV      EAX,1
    0000A2B1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6373

    0000A2B7  B8 01000000       MOV      EAX,1
    0000A2BC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6375

    0000A2C2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000A2C9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000A2CE  5B                POP      EBX

    LINE      6377

    0000A2CF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000A2D6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000A2DB  5B                POP      EBX

    LINE      6379

    0000A2DC  B8 0A000000       MOV      EAX,10
    0000A2E1  40                INC      EAX
    0000A2E2  50                PUSH     EAX
    0000A2E3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A2E6  5B                POP      EBX
    0000A2E7  3B C3             CMP      EAX,EBX
    0000A2E9  0F 8503000000     JNE      3
    0000A2EF  EB                JMP      

    LINE      6386

    0000A2F0  B8 01000000       MOV      EAX,1
    0000A2F5  8B C8             MOV      ECX,EAX
    0000A2F7  B8 0A000000       MOV      EAX,10
    0000A2FC  50                PUSH     EAX
    0000A2FD  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000A300  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A303  5B                POP      EBX
    0000A304  53                PUSH     EBX
    0000A305  3B C3             CMP      EAX,EBX
    0000A307  0F 8E03000000     JLE      3
    0000A30D  EB                JMP      

    LINE      6388

    0000A30E  B8 01000000       MOV      EAX,1
    0000A313  8B C8             MOV      ECX,EAX
    0000A315  B8 05000000       MOV      EAX,5
    0000A31A  50                PUSH     EAX
    0000A31B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000A31E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A321  5B                POP      EBX
    0000A322  53                PUSH     EBX
    0000A323  3B C3             CMP      EAX,EBX
    0000A325  0F 8E03000000     JLE      3
    0000A32B  EB                JMP      

    LINE      6395

    0000A32C  B8 01000000       MOV      EAX,1
    0000A331  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6396

    0000A337  B8 01000000       MOV      EAX,1
    0000A33C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6397

    0000A342  B8 01000000       MOV      EAX,1
    0000A347  8B C8             MOV      ECX,EAX
    0000A349  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A34C  48                DEC      EAX
    0000A34D  BB 0E000000       MOV      EBX,14
    0000A352  F7 E3             MUL      EBX
    0000A354  50                PUSH     EAX
    0000A355  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A358  48                DEC      EAX
    0000A359  BB 02000000       MOV      EBX,2
    0000A35E  F7 E3             MUL      EBX
    0000A360  5B                POP      EBX
    0000A361  03 C3             ADD      EAX,EBX
    0000A363  8B F8             MOV      EDI,EAX
    0000A365  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6398

    0000A36C  B8 01000000       MOV      EAX,1
    0000A371  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6399

    0000A377  B8 01000000       MOV      EAX,1
    0000A37C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6401

    0000A382  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000A389  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000A38E  5B                POP      EBX

    LINE      6403

    0000A38F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000A396  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000A39B  5B                POP      EBX

    LINE      6405

    0000A39C  B8 0A000000       MOV      EAX,10
    0000A3A1  40                INC      EAX
    0000A3A2  50                PUSH     EAX
    0000A3A3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A3A6  5B                POP      EBX
    0000A3A7  3B C3             CMP      EAX,EBX
    0000A3A9  0F 8503000000     JNE      3
    0000A3AF  EB                JMP      

    LINE      6419

    0000A3B0  56                PUSH     ESI
    0000A3B1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000A3B7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000A3BD  FF D1             CALL     ECX                       run_inner_proc
    0000A3BF  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6421

    0000A3C0  B8 01000000       MOV      EAX,1
    0000A3C5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6423

    0000A3C8  B8 01000000       MOV      EAX,1
    0000A3CD  8B C8             MOV      ECX,EAX
    0000A3CF  B8 0A000000       MOV      EAX,10
    0000A3D4  50                PUSH     EAX
    0000A3D5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000A3D8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A3DB  5B                POP      EBX
    0000A3DC  53                PUSH     EBX
    0000A3DD  3B C3             CMP      EAX,EBX
    0000A3DF  0F 8E03000000     JLE      3
    0000A3E5  EB                JMP      

    LINE      6425

    0000A3E6  B8 01000000       MOV      EAX,1
    0000A3EB  8B C8             MOV      ECX,EAX
    0000A3ED  B8 05000000       MOV      EAX,5
    0000A3F2  50                PUSH     EAX
    0000A3F3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000A3F6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A3F9  5B                POP      EBX
    0000A3FA  53                PUSH     EBX
    0000A3FB  3B C3             CMP      EAX,EBX
    0000A3FD  0F 8E03000000     JLE      3
    0000A403  EB                JMP      

    LINE      6432

    0000A404  B8 01000000       MOV      EAX,1
    0000A409  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6433

    0000A40C  B8 01000000       MOV      EAX,1
    0000A411  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6434

    0000A414  B8 01000000       MOV      EAX,1
    0000A419  8B C8             MOV      ECX,EAX
    0000A41B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A41E  48                DEC      EAX
    0000A41F  BB 0E000000       MOV      EBX,14
    0000A424  F7 E3             MUL      EBX
    0000A426  50                PUSH     EAX
    0000A427  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A42A  48                DEC      EAX
    0000A42B  BB 02000000       MOV      EBX,2
    0000A430  F7 E3             MUL      EBX
    0000A432  5B                POP      EBX
    0000A433  03 C3             ADD      EAX,EBX
    0000A435  8B F8             MOV      EDI,EAX
    0000A437  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6435

    0000A43B  B8 01000000       MOV      EAX,1
    0000A440  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6436

    0000A443  B8 01000000       MOV      EAX,1
    0000A448  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6438

    0000A44B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000A452  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000A457  5B                POP      EBX

    LINE      6440

    0000A458  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000A45F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000A464  5B                POP      EBX

    LINE      6442

    0000A465  B8 0A000000       MOV      EAX,10
    0000A46A  40                INC      EAX
    0000A46B  50                PUSH     EAX
    0000A46C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A46F  5B                POP      EBX
    0000A470  3B C3             CMP      EAX,EBX
    0000A472  0F 8503000000     JNE      3
    0000A478  EB                JMP      

    LINE      6449

    0000A479  B8 01000000       MOV      EAX,1
    0000A47E  8B C8             MOV      ECX,EAX
    0000A480  B8 0A000000       MOV      EAX,10
    0000A485  50                PUSH     EAX
    0000A486  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000A489  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A48C  5B                POP      EBX
    0000A48D  53                PUSH     EBX
    0000A48E  3B C3             CMP      EAX,EBX
    0000A490  0F 8E03000000     JLE      3
    0000A496  EB                JMP      

    LINE      6451

    0000A497  B8 01000000       MOV      EAX,1
    0000A49C  8B C8             MOV      ECX,EAX
    0000A49E  B8 05000000       MOV      EAX,5
    0000A4A3  50                PUSH     EAX
    0000A4A4  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000A4A7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A4AA  5B                POP      EBX
    0000A4AB  53                PUSH     EBX
    0000A4AC  3B C3             CMP      EAX,EBX
    0000A4AE  0F 8E03000000     JLE      3
    0000A4B4  EB                JMP      

    LINE      6458

    0000A4B5  B8 01000000       MOV      EAX,1
    0000A4BA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6459

    0000A4BD  B8 01000000       MOV      EAX,1
    0000A4C2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6460

    0000A4C5  B8 01000000       MOV      EAX,1
    0000A4CA  8B C8             MOV      ECX,EAX
    0000A4CC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A4CF  48                DEC      EAX
    0000A4D0  BB 0E000000       MOV      EBX,14
    0000A4D5  F7 E3             MUL      EBX
    0000A4D7  50                PUSH     EAX
    0000A4D8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A4DB  48                DEC      EAX
    0000A4DC  BB 02000000       MOV      EBX,2
    0000A4E1  F7 E3             MUL      EBX
    0000A4E3  5B                POP      EBX
    0000A4E4  03 C3             ADD      EAX,EBX
    0000A4E6  8B F8             MOV      EDI,EAX
    0000A4E8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6461

    0000A4EC  B8 01000000       MOV      EAX,1
    0000A4F1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6462

    0000A4F4  B8 01000000       MOV      EAX,1
    0000A4F9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6464

    0000A4FC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000A503  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000A508  5B                POP      EBX

    LINE      6466

    0000A509  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000A510  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000A515  5B                POP      EBX

    LINE      6468

    0000A516  B8 0A000000       MOV      EAX,10
    0000A51B  40                INC      EAX
    0000A51C  50                PUSH     EAX
    0000A51D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A520  5B                POP      EBX
    0000A521  3B C3             CMP      EAX,EBX
    0000A523  0F 8503000000     JNE      3
    0000A529  EB                JMP      

    LINE      6476

    0000A52A  B8 01000000       MOV      EAX,1
    0000A52F  8B C8             MOV      ECX,EAX
    0000A531  B8 0A000000       MOV      EAX,10
    0000A536  50                PUSH     EAX
    0000A537  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000A53A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A53D  5B                POP      EBX
    0000A53E  53                PUSH     EBX
    0000A53F  3B C3             CMP      EAX,EBX
    0000A541  0F 8E03000000     JLE      3
    0000A547  EB                JMP      

    LINE      6478

    0000A548  B8 01000000       MOV      EAX,1
    0000A54D  8B C8             MOV      ECX,EAX
    0000A54F  B8 05000000       MOV      EAX,5
    0000A554  50                PUSH     EAX
    0000A555  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000A558  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A55B  5B                POP      EBX
    0000A55C  53                PUSH     EBX
    0000A55D  3B C3             CMP      EAX,EBX
    0000A55F  0F 8E03000000     JLE      3
    0000A565  EB                JMP      

    LINE      6485

    0000A566  B8 01000000       MOV      EAX,1
    0000A56B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6486

    0000A571  B8 01000000       MOV      EAX,1
    0000A576  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6487

    0000A57C  B8 01000000       MOV      EAX,1
    0000A581  8B C8             MOV      ECX,EAX
    0000A583  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A586  48                DEC      EAX
    0000A587  BB 0E000000       MOV      EBX,14
    0000A58C  F7 E3             MUL      EBX
    0000A58E  50                PUSH     EAX
    0000A58F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A592  48                DEC      EAX
    0000A593  BB 02000000       MOV      EBX,2
    0000A598  F7 E3             MUL      EBX
    0000A59A  5B                POP      EBX
    0000A59B  03 C3             ADD      EAX,EBX
    0000A59D  8B F8             MOV      EDI,EAX
    0000A59F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6488

    0000A5A6  B8 01000000       MOV      EAX,1
    0000A5AB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6489

    0000A5B1  B8 01000000       MOV      EAX,1
    0000A5B6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6491

    0000A5BC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000A5C3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000A5C8  5B                POP      EBX

    LINE      6493

    0000A5C9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000A5D0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000A5D5  5B                POP      EBX

    LINE      6495

    0000A5D6  B8 0A000000       MOV      EAX,10
    0000A5DB  40                INC      EAX
    0000A5DC  50                PUSH     EAX
    0000A5DD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A5E0  5B                POP      EBX
    0000A5E1  3B C3             CMP      EAX,EBX
    0000A5E3  0F 8503000000     JNE      3
    0000A5E9  EB                JMP      

    LINE      6502

    0000A5EA  B8 01000000       MOV      EAX,1
    0000A5EF  8B C8             MOV      ECX,EAX
    0000A5F1  B8 0A000000       MOV      EAX,10
    0000A5F6  50                PUSH     EAX
    0000A5F7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000A5FA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A5FD  5B                POP      EBX
    0000A5FE  53                PUSH     EBX
    0000A5FF  3B C3             CMP      EAX,EBX
    0000A601  0F 8E03000000     JLE      3
    0000A607  EB                JMP      

    LINE      6504

    0000A608  B8 01000000       MOV      EAX,1
    0000A60D  8B C8             MOV      ECX,EAX
    0000A60F  B8 05000000       MOV      EAX,5
    0000A614  50                PUSH     EAX
    0000A615  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000A618  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A61B  5B                POP      EBX
    0000A61C  53                PUSH     EBX
    0000A61D  3B C3             CMP      EAX,EBX
    0000A61F  0F 8E03000000     JLE      3
    0000A625  EB                JMP      

    LINE      6511

    0000A626  B8 01000000       MOV      EAX,1
    0000A62B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6512

    0000A631  B8 01000000       MOV      EAX,1
    0000A636  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6513

    0000A63C  B8 01000000       MOV      EAX,1
    0000A641  8B C8             MOV      ECX,EAX
    0000A643  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A646  48                DEC      EAX
    0000A647  BB 0E000000       MOV      EBX,14
    0000A64C  F7 E3             MUL      EBX
    0000A64E  50                PUSH     EAX
    0000A64F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A652  48                DEC      EAX
    0000A653  BB 02000000       MOV      EBX,2
    0000A658  F7 E3             MUL      EBX
    0000A65A  5B                POP      EBX
    0000A65B  03 C3             ADD      EAX,EBX
    0000A65D  8B F8             MOV      EDI,EAX
    0000A65F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6514

    0000A666  B8 01000000       MOV      EAX,1
    0000A66B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6515

    0000A671  B8 01000000       MOV      EAX,1
    0000A676  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6517

    0000A67C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000A683  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000A688  5B                POP      EBX

    LINE      6519

    0000A689  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000A690  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000A695  5B                POP      EBX

    LINE      6521

    0000A696  B8 0A000000       MOV      EAX,10
    0000A69B  40                INC      EAX
    0000A69C  50                PUSH     EAX
    0000A69D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A6A0  5B                POP      EBX
    0000A6A1  3B C3             CMP      EAX,EBX
    0000A6A3  0F 8503000000     JNE      3
    0000A6A9  EB                JMP      

    LINE      6535

    0000A6AA  56                PUSH     ESI
    0000A6AB  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000A6B1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000A6B7  FF D1             CALL     ECX                       run_inner_proc
    0000A6B9  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6537

    0000A6BA  B8 01000000       MOV      EAX,1
    0000A6BF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6539

    0000A6C2  B8 01000000       MOV      EAX,1
    0000A6C7  8B C8             MOV      ECX,EAX
    0000A6C9  B8 0A000000       MOV      EAX,10
    0000A6CE  50                PUSH     EAX
    0000A6CF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000A6D2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A6D5  5B                POP      EBX
    0000A6D6  53                PUSH     EBX
    0000A6D7  3B C3             CMP      EAX,EBX
    0000A6D9  0F 8E03000000     JLE      3
    0000A6DF  EB                JMP      

    LINE      6541

    0000A6E0  B8 01000000       MOV      EAX,1
    0000A6E5  8B C8             MOV      ECX,EAX
    0000A6E7  B8 05000000       MOV      EAX,5
    0000A6EC  50                PUSH     EAX
    0000A6ED  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000A6F0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A6F3  5B                POP      EBX
    0000A6F4  53                PUSH     EBX
    0000A6F5  3B C3             CMP      EAX,EBX
    0000A6F7  0F 8E03000000     JLE      3
    0000A6FD  EB                JMP      

    LINE      6548

    0000A6FE  B8 01000000       MOV      EAX,1
    0000A703  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6549

    0000A706  B8 01000000       MOV      EAX,1
    0000A70B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6550

    0000A70E  B8 01000000       MOV      EAX,1
    0000A713  8B C8             MOV      ECX,EAX
    0000A715  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A718  48                DEC      EAX
    0000A719  BB 0E000000       MOV      EBX,14
    0000A71E  F7 E3             MUL      EBX
    0000A720  50                PUSH     EAX
    0000A721  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A724  48                DEC      EAX
    0000A725  BB 02000000       MOV      EBX,2
    0000A72A  F7 E3             MUL      EBX
    0000A72C  5B                POP      EBX
    0000A72D  03 C3             ADD      EAX,EBX
    0000A72F  8B F8             MOV      EDI,EAX
    0000A731  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6551

    0000A735  B8 01000000       MOV      EAX,1
    0000A73A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6552

    0000A73D  B8 01000000       MOV      EAX,1
    0000A742  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6554

    0000A745  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000A74C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000A751  5B                POP      EBX

    LINE      6556

    0000A752  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000A759  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000A75E  5B                POP      EBX

    LINE      6558

    0000A75F  B8 0A000000       MOV      EAX,10
    0000A764  40                INC      EAX
    0000A765  50                PUSH     EAX
    0000A766  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A769  5B                POP      EBX
    0000A76A  3B C3             CMP      EAX,EBX
    0000A76C  0F 8503000000     JNE      3
    0000A772  EB                JMP      

    LINE      6565

    0000A773  B8 01000000       MOV      EAX,1
    0000A778  8B C8             MOV      ECX,EAX
    0000A77A  B8 0A000000       MOV      EAX,10
    0000A77F  50                PUSH     EAX
    0000A780  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000A783  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A786  5B                POP      EBX
    0000A787  53                PUSH     EBX
    0000A788  3B C3             CMP      EAX,EBX
    0000A78A  0F 8E03000000     JLE      3
    0000A790  EB                JMP      

    LINE      6567

    0000A791  B8 01000000       MOV      EAX,1
    0000A796  8B C8             MOV      ECX,EAX
    0000A798  B8 05000000       MOV      EAX,5
    0000A79D  50                PUSH     EAX
    0000A79E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000A7A1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A7A4  5B                POP      EBX
    0000A7A5  53                PUSH     EBX
    0000A7A6  3B C3             CMP      EAX,EBX
    0000A7A8  0F 8E03000000     JLE      3
    0000A7AE  EB                JMP      

    LINE      6574

    0000A7AF  B8 01000000       MOV      EAX,1
    0000A7B4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6575

    0000A7B7  B8 01000000       MOV      EAX,1
    0000A7BC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6576

    0000A7BF  B8 01000000       MOV      EAX,1
    0000A7C4  8B C8             MOV      ECX,EAX
    0000A7C6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A7C9  48                DEC      EAX
    0000A7CA  BB 0E000000       MOV      EBX,14
    0000A7CF  F7 E3             MUL      EBX
    0000A7D1  50                PUSH     EAX
    0000A7D2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A7D5  48                DEC      EAX
    0000A7D6  BB 02000000       MOV      EBX,2
    0000A7DB  F7 E3             MUL      EBX
    0000A7DD  5B                POP      EBX
    0000A7DE  03 C3             ADD      EAX,EBX
    0000A7E0  8B F8             MOV      EDI,EAX
    0000A7E2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6577

    0000A7E6  B8 01000000       MOV      EAX,1
    0000A7EB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6578

    0000A7EE  B8 01000000       MOV      EAX,1
    0000A7F3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6580

    0000A7F6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000A7FD  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000A802  5B                POP      EBX

    LINE      6582

    0000A803  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000A80A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000A80F  5B                POP      EBX

    LINE      6584

    0000A810  B8 0A000000       MOV      EAX,10
    0000A815  40                INC      EAX
    0000A816  50                PUSH     EAX
    0000A817  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A81A  5B                POP      EBX
    0000A81B  3B C3             CMP      EAX,EBX
    0000A81D  0F 8503000000     JNE      3
    0000A823  EB                JMP      

    LINE      6592

    0000A824  B8 01000000       MOV      EAX,1
    0000A829  8B C8             MOV      ECX,EAX
    0000A82B  B8 0A000000       MOV      EAX,10
    0000A830  50                PUSH     EAX
    0000A831  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000A834  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A837  5B                POP      EBX
    0000A838  53                PUSH     EBX
    0000A839  3B C3             CMP      EAX,EBX
    0000A83B  0F 8E03000000     JLE      3
    0000A841  EB                JMP      

    LINE      6594

    0000A842  B8 01000000       MOV      EAX,1
    0000A847  8B C8             MOV      ECX,EAX
    0000A849  B8 05000000       MOV      EAX,5
    0000A84E  50                PUSH     EAX
    0000A84F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000A852  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A855  5B                POP      EBX
    0000A856  53                PUSH     EBX
    0000A857  3B C3             CMP      EAX,EBX
    0000A859  0F 8E03000000     JLE      3
    0000A85F  EB                JMP      

    LINE      6601

    0000A860  B8 01000000       MOV      EAX,1
    0000A865  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6602

    0000A86B  B8 01000000       MOV      EAX,1
    0000A870  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6603

    0000A876  B8 01000000       MOV      EAX,1
    0000A87B  8B C8             MOV      ECX,EAX
    0000A87D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A880  48                DEC      EAX
    0000A881  BB 0E000000       MOV      EBX,14
    0000A886  F7 E3             MUL      EBX
    0000A888  50                PUSH     EAX
    0000A889  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A88C  48                DEC      EAX
    0000A88D  BB 02000000       MOV      EBX,2
    0000A892  F7 E3             MUL      EBX
    0000A894  5B                POP      EBX
    0000A895  03 C3             ADD      EAX,EBX
    0000A897  8B F8             MOV      EDI,EAX
    0000A899  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6604

    0000A8A0  B8 01000000       MOV      EAX,1
    0000A8A5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6605

    0000A8AB  B8 01000000       MOV      EAX,1
    0000A8B0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6607

    0000A8B6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000A8BD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000A8C2  5B                POP      EBX

    LINE      6609

    0000A8C3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000A8CA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000A8CF  5B                POP      EBX

    LINE      6611

    0000A8D0  B8 0A000000       MOV      EAX,10
    0000A8D5  40                INC      EAX
    0000A8D6  50                PUSH     EAX
    0000A8D7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A8DA  5B                POP      EBX
    0000A8DB  3B C3             CMP      EAX,EBX
    0000A8DD  0F 8503000000     JNE      3
    0000A8E3  EB                JMP      

    LINE      6618

    0000A8E4  B8 01000000       MOV      EAX,1
    0000A8E9  8B C8             MOV      ECX,EAX
    0000A8EB  B8 0A000000       MOV      EAX,10
    0000A8F0  50                PUSH     EAX
    0000A8F1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000A8F4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A8F7  5B                POP      EBX
    0000A8F8  53                PUSH     EBX
    0000A8F9  3B C3             CMP      EAX,EBX
    0000A8FB  0F 8E03000000     JLE      3
    0000A901  EB                JMP      

    LINE      6620

    0000A902  B8 01000000       MOV      EAX,1
    0000A907  8B C8             MOV      ECX,EAX
    0000A909  B8 05000000       MOV      EAX,5
    0000A90E  50                PUSH     EAX
    0000A90F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000A912  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A915  5B                POP      EBX
    0000A916  53                PUSH     EBX
    0000A917  3B C3             CMP      EAX,EBX
    0000A919  0F 8E03000000     JLE      3
    0000A91F  EB                JMP      

    LINE      6627

    0000A920  B8 01000000       MOV      EAX,1
    0000A925  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6628

    0000A92B  B8 01000000       MOV      EAX,1
    0000A930  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6629

    0000A936  B8 01000000       MOV      EAX,1
    0000A93B  8B C8             MOV      ECX,EAX
    0000A93D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000A940  48                DEC      EAX
    0000A941  BB 0E000000       MOV      EBX,14
    0000A946  F7 E3             MUL      EBX
    0000A948  50                PUSH     EAX
    0000A949  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000A94C  48                DEC      EAX
    0000A94D  BB 02000000       MOV      EBX,2
    0000A952  F7 E3             MUL      EBX
    0000A954  5B                POP      EBX
    0000A955  03 C3             ADD      EAX,EBX
    0000A957  8B F8             MOV      EDI,EAX
    0000A959  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6630

    0000A960  B8 01000000       MOV      EAX,1
    0000A965  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6631

    0000A96B  B8 01000000       MOV      EAX,1
    0000A970  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6633

    0000A976  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000A97D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000A982  5B                POP      EBX

    LINE      6635

    0000A983  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000A98A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000A98F  5B                POP      EBX

    LINE      6637

    0000A990  B8 0A000000       MOV      EAX,10
    0000A995  40                INC      EAX
    0000A996  50                PUSH     EAX
    0000A997  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A99A  5B                POP      EBX
    0000A99B  3B C3             CMP      EAX,EBX
    0000A99D  0F 8503000000     JNE      3
    0000A9A3  EB                JMP      

    LINE      6651

    0000A9A4  56                PUSH     ESI
    0000A9A5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000A9AB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000A9B1  FF D1             CALL     ECX                       run_inner_proc
    0000A9B3  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6653

    0000A9B4  B8 01000000       MOV      EAX,1
    0000A9B9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6655

    0000A9BC  B8 01000000       MOV      EAX,1
    0000A9C1  8B C8             MOV      ECX,EAX
    0000A9C3  B8 0A000000       MOV      EAX,10
    0000A9C8  50                PUSH     EAX
    0000A9C9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000A9CC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000A9CF  5B                POP      EBX
    0000A9D0  53                PUSH     EBX
    0000A9D1  3B C3             CMP      EAX,EBX
    0000A9D3  0F 8E03000000     JLE      3
    0000A9D9  EB                JMP      

    LINE      6657

    0000A9DA  B8 01000000       MOV      EAX,1
    0000A9DF  8B C8             MOV      ECX,EAX
    0000A9E1  B8 05000000       MOV      EAX,5
    0000A9E6  50                PUSH     EAX
    0000A9E7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000A9EA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000A9ED  5B                POP      EBX
    0000A9EE  53                PUSH     EBX
    0000A9EF  3B C3             CMP      EAX,EBX
    0000A9F1  0F 8E03000000     JLE      3
    0000A9F7  EB                JMP      

    LINE      6664

    0000A9F8  B8 01000000       MOV      EAX,1
    0000A9FD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6665

    0000AA00  B8 01000000       MOV      EAX,1
    0000AA05  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6666

    0000AA08  B8 01000000       MOV      EAX,1
    0000AA0D  8B C8             MOV      ECX,EAX
    0000AA0F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AA12  48                DEC      EAX
    0000AA13  BB 0E000000       MOV      EBX,14
    0000AA18  F7 E3             MUL      EBX
    0000AA1A  50                PUSH     EAX
    0000AA1B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000AA1E  48                DEC      EAX
    0000AA1F  BB 02000000       MOV      EBX,2
    0000AA24  F7 E3             MUL      EBX
    0000AA26  5B                POP      EBX
    0000AA27  03 C3             ADD      EAX,EBX
    0000AA29  8B F8             MOV      EDI,EAX
    0000AA2B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6667

    0000AA2F  B8 01000000       MOV      EAX,1
    0000AA34  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6668

    0000AA37  B8 01000000       MOV      EAX,1
    0000AA3C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6670

    0000AA3F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000AA46  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000AA4B  5B                POP      EBX

    LINE      6672

    0000AA4C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000AA53  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000AA58  5B                POP      EBX

    LINE      6674

    0000AA59  B8 0A000000       MOV      EAX,10
    0000AA5E  40                INC      EAX
    0000AA5F  50                PUSH     EAX
    0000AA60  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AA63  5B                POP      EBX
    0000AA64  3B C3             CMP      EAX,EBX
    0000AA66  0F 8503000000     JNE      3
    0000AA6C  EB                JMP      

    LINE      6681

    0000AA6D  B8 01000000       MOV      EAX,1
    0000AA72  8B C8             MOV      ECX,EAX
    0000AA74  B8 0A000000       MOV      EAX,10
    0000AA79  50                PUSH     EAX
    0000AA7A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000AA7D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000AA80  5B                POP      EBX
    0000AA81  53                PUSH     EBX
    0000AA82  3B C3             CMP      EAX,EBX
    0000AA84  0F 8E03000000     JLE      3
    0000AA8A  EB                JMP      

    LINE      6683

    0000AA8B  B8 01000000       MOV      EAX,1
    0000AA90  8B C8             MOV      ECX,EAX
    0000AA92  B8 05000000       MOV      EAX,5
    0000AA97  50                PUSH     EAX
    0000AA98  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000AA9B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000AA9E  5B                POP      EBX
    0000AA9F  53                PUSH     EBX
    0000AAA0  3B C3             CMP      EAX,EBX
    0000AAA2  0F 8E03000000     JLE      3
    0000AAA8  EB                JMP      

    LINE      6690

    0000AAA9  B8 01000000       MOV      EAX,1
    0000AAAE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6691

    0000AAB1  B8 01000000       MOV      EAX,1
    0000AAB6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6692

    0000AAB9  B8 01000000       MOV      EAX,1
    0000AABE  8B C8             MOV      ECX,EAX
    0000AAC0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000AAC3  48                DEC      EAX
    0000AAC4  BB 0E000000       MOV      EBX,14
    0000AAC9  F7 E3             MUL      EBX
    0000AACB  50                PUSH     EAX
    0000AACC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000AACF  48                DEC      EAX
    0000AAD0  BB 02000000       MOV      EBX,2
    0000AAD5  F7 E3             MUL      EBX
    0000AAD7  5B                POP      EBX
    0000AAD8  03 C3             ADD      EAX,EBX
    0000AADA  8B F8             MOV      EDI,EAX
    0000AADC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6693

    0000AAE0  B8 01000000       MOV      EAX,1
    0000AAE5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6694

    0000AAE8  B8 01000000       MOV      EAX,1
    0000AAED  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6696

    0000AAF0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000AAF7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000AAFC  5B                POP      EBX

    LINE      6698

    0000AAFD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000AB04  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000AB09  5B                POP      EBX

    LINE      6700

    0000AB0A  B8 0A000000       MOV      EAX,10
    0000AB0F  40                INC      EAX
    0000AB10  50                PUSH     EAX
    0000AB11  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AB14  5B                POP      EBX
    0000AB15  3B C3             CMP      EAX,EBX
    0000AB17  0F 8503000000     JNE      3
    0000AB1D  EB                JMP      

    LINE      6708

    0000AB1E  B8 01000000       MOV      EAX,1
    0000AB23  8B C8             MOV      ECX,EAX
    0000AB25  B8 0A000000       MOV      EAX,10
    0000AB2A  50                PUSH     EAX
    0000AB2B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000AB2E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AB31  5B                POP      EBX
    0000AB32  53                PUSH     EBX
    0000AB33  3B C3             CMP      EAX,EBX
    0000AB35  0F 8E03000000     JLE      3
    0000AB3B  EB                JMP      

    LINE      6710

    0000AB3C  B8 01000000       MOV      EAX,1
    0000AB41  8B C8             MOV      ECX,EAX
    0000AB43  B8 05000000       MOV      EAX,5
    0000AB48  50                PUSH     EAX
    0000AB49  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000AB4C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000AB4F  5B                POP      EBX
    0000AB50  53                PUSH     EBX
    0000AB51  3B C3             CMP      EAX,EBX
    0000AB53  0F 8E03000000     JLE      3
    0000AB59  EB                JMP      

    LINE      6717

    0000AB5A  B8 01000000       MOV      EAX,1
    0000AB5F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6718

    0000AB65  B8 01000000       MOV      EAX,1
    0000AB6A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6719

    0000AB70  B8 01000000       MOV      EAX,1
    0000AB75  8B C8             MOV      ECX,EAX
    0000AB77  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AB7A  48                DEC      EAX
    0000AB7B  BB 0E000000       MOV      EBX,14
    0000AB80  F7 E3             MUL      EBX
    0000AB82  50                PUSH     EAX
    0000AB83  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000AB86  48                DEC      EAX
    0000AB87  BB 02000000       MOV      EBX,2
    0000AB8C  F7 E3             MUL      EBX
    0000AB8E  5B                POP      EBX
    0000AB8F  03 C3             ADD      EAX,EBX
    0000AB91  8B F8             MOV      EDI,EAX
    0000AB93  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6720

    0000AB9A  B8 01000000       MOV      EAX,1
    0000AB9F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6721

    0000ABA5  B8 01000000       MOV      EAX,1
    0000ABAA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6723

    0000ABB0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000ABB7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000ABBC  5B                POP      EBX

    LINE      6725

    0000ABBD  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000ABC4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000ABC9  5B                POP      EBX

    LINE      6727

    0000ABCA  B8 0A000000       MOV      EAX,10
    0000ABCF  40                INC      EAX
    0000ABD0  50                PUSH     EAX
    0000ABD1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000ABD4  5B                POP      EBX
    0000ABD5  3B C3             CMP      EAX,EBX
    0000ABD7  0F 8503000000     JNE      3
    0000ABDD  EB                JMP      

    LINE      6734

    0000ABDE  B8 01000000       MOV      EAX,1
    0000ABE3  8B C8             MOV      ECX,EAX
    0000ABE5  B8 0A000000       MOV      EAX,10
    0000ABEA  50                PUSH     EAX
    0000ABEB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000ABEE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000ABF1  5B                POP      EBX
    0000ABF2  53                PUSH     EBX
    0000ABF3  3B C3             CMP      EAX,EBX
    0000ABF5  0F 8E03000000     JLE      3
    0000ABFB  EB                JMP      

    LINE      6736

    0000ABFC  B8 01000000       MOV      EAX,1
    0000AC01  8B C8             MOV      ECX,EAX
    0000AC03  B8 05000000       MOV      EAX,5
    0000AC08  50                PUSH     EAX
    0000AC09  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000AC0C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000AC0F  5B                POP      EBX
    0000AC10  53                PUSH     EBX
    0000AC11  3B C3             CMP      EAX,EBX
    0000AC13  0F 8E03000000     JLE      3
    0000AC19  EB                JMP      

    LINE      6743

    0000AC1A  B8 01000000       MOV      EAX,1
    0000AC1F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6744

    0000AC25  B8 01000000       MOV      EAX,1
    0000AC2A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6745

    0000AC30  B8 01000000       MOV      EAX,1
    0000AC35  8B C8             MOV      ECX,EAX
    0000AC37  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000AC3A  48                DEC      EAX
    0000AC3B  BB 0E000000       MOV      EBX,14
    0000AC40  F7 E3             MUL      EBX
    0000AC42  50                PUSH     EAX
    0000AC43  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000AC46  48                DEC      EAX
    0000AC47  BB 02000000       MOV      EBX,2
    0000AC4C  F7 E3             MUL      EBX
    0000AC4E  5B                POP      EBX
    0000AC4F  03 C3             ADD      EAX,EBX
    0000AC51  8B F8             MOV      EDI,EAX
    0000AC53  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6746

    0000AC5A  B8 01000000       MOV      EAX,1
    0000AC5F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6747

    0000AC65  B8 01000000       MOV      EAX,1
    0000AC6A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6749

    0000AC70  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000AC77  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000AC7C  5B                POP      EBX

    LINE      6751

    0000AC7D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000AC84  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000AC89  5B                POP      EBX

    LINE      6753

    0000AC8A  B8 0A000000       MOV      EAX,10
    0000AC8F  40                INC      EAX
    0000AC90  50                PUSH     EAX
    0000AC91  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AC94  5B                POP      EBX
    0000AC95  3B C3             CMP      EAX,EBX
    0000AC97  0F 8503000000     JNE      3
    0000AC9D  EB                JMP      

    LINE      6767

    0000AC9E  56                PUSH     ESI
    0000AC9F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000ACA5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000ACAB  FF D1             CALL     ECX                       run_inner_proc
    0000ACAD  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6769

    0000ACAE  B8 01000000       MOV      EAX,1
    0000ACB3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6771

    0000ACB6  B8 01000000       MOV      EAX,1
    0000ACBB  8B C8             MOV      ECX,EAX
    0000ACBD  B8 0A000000       MOV      EAX,10
    0000ACC2  50                PUSH     EAX
    0000ACC3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000ACC6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000ACC9  5B                POP      EBX
    0000ACCA  53                PUSH     EBX
    0000ACCB  3B C3             CMP      EAX,EBX
    0000ACCD  0F 8E03000000     JLE      3
    0000ACD3  EB                JMP      

    LINE      6773

    0000ACD4  B8 01000000       MOV      EAX,1
    0000ACD9  8B C8             MOV      ECX,EAX
    0000ACDB  B8 05000000       MOV      EAX,5
    0000ACE0  50                PUSH     EAX
    0000ACE1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000ACE4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000ACE7  5B                POP      EBX
    0000ACE8  53                PUSH     EBX
    0000ACE9  3B C3             CMP      EAX,EBX
    0000ACEB  0F 8E03000000     JLE      3
    0000ACF1  EB                JMP      

    LINE      6780

    0000ACF2  B8 01000000       MOV      EAX,1
    0000ACF7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6781

    0000ACFA  B8 01000000       MOV      EAX,1
    0000ACFF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6782

    0000AD02  B8 01000000       MOV      EAX,1
    0000AD07  8B C8             MOV      ECX,EAX
    0000AD09  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AD0C  48                DEC      EAX
    0000AD0D  BB 0E000000       MOV      EBX,14
    0000AD12  F7 E3             MUL      EBX
    0000AD14  50                PUSH     EAX
    0000AD15  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000AD18  48                DEC      EAX
    0000AD19  BB 02000000       MOV      EBX,2
    0000AD1E  F7 E3             MUL      EBX
    0000AD20  5B                POP      EBX
    0000AD21  03 C3             ADD      EAX,EBX
    0000AD23  8B F8             MOV      EDI,EAX
    0000AD25  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6783

    0000AD29  B8 01000000       MOV      EAX,1
    0000AD2E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6784

    0000AD31  B8 01000000       MOV      EAX,1
    0000AD36  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6786

    0000AD39  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000AD40  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000AD45  5B                POP      EBX

    LINE      6788

    0000AD46  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000AD4D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000AD52  5B                POP      EBX

    LINE      6790

    0000AD53  B8 0A000000       MOV      EAX,10
    0000AD58  40                INC      EAX
    0000AD59  50                PUSH     EAX
    0000AD5A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AD5D  5B                POP      EBX
    0000AD5E  3B C3             CMP      EAX,EBX
    0000AD60  0F 8503000000     JNE      3
    0000AD66  EB                JMP      

    LINE      6797

    0000AD67  B8 01000000       MOV      EAX,1
    0000AD6C  8B C8             MOV      ECX,EAX
    0000AD6E  B8 0A000000       MOV      EAX,10
    0000AD73  50                PUSH     EAX
    0000AD74  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000AD77  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000AD7A  5B                POP      EBX
    0000AD7B  53                PUSH     EBX
    0000AD7C  3B C3             CMP      EAX,EBX
    0000AD7E  0F 8E03000000     JLE      3
    0000AD84  EB                JMP      

    LINE      6799

    0000AD85  B8 01000000       MOV      EAX,1
    0000AD8A  8B C8             MOV      ECX,EAX
    0000AD8C  B8 05000000       MOV      EAX,5
    0000AD91  50                PUSH     EAX
    0000AD92  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000AD95  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000AD98  5B                POP      EBX
    0000AD99  53                PUSH     EBX
    0000AD9A  3B C3             CMP      EAX,EBX
    0000AD9C  0F 8E03000000     JLE      3
    0000ADA2  EB                JMP      

    LINE      6806

    0000ADA3  B8 01000000       MOV      EAX,1
    0000ADA8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6807

    0000ADAB  B8 01000000       MOV      EAX,1
    0000ADB0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6808

    0000ADB3  B8 01000000       MOV      EAX,1
    0000ADB8  8B C8             MOV      ECX,EAX
    0000ADBA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000ADBD  48                DEC      EAX
    0000ADBE  BB 0E000000       MOV      EBX,14
    0000ADC3  F7 E3             MUL      EBX
    0000ADC5  50                PUSH     EAX
    0000ADC6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000ADC9  48                DEC      EAX
    0000ADCA  BB 02000000       MOV      EBX,2
    0000ADCF  F7 E3             MUL      EBX
    0000ADD1  5B                POP      EBX
    0000ADD2  03 C3             ADD      EAX,EBX
    0000ADD4  8B F8             MOV      EDI,EAX
    0000ADD6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6809

    0000ADDA  B8 01000000       MOV      EAX,1
    0000ADDF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6810

    0000ADE2  B8 01000000       MOV      EAX,1
    0000ADE7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6812

    0000ADEA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000ADF1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000ADF6  5B                POP      EBX

    LINE      6814

    0000ADF7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000ADFE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000AE03  5B                POP      EBX

    LINE      6816

    0000AE04  B8 0A000000       MOV      EAX,10
    0000AE09  40                INC      EAX
    0000AE0A  50                PUSH     EAX
    0000AE0B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AE0E  5B                POP      EBX
    0000AE0F  3B C3             CMP      EAX,EBX
    0000AE11  0F 8503000000     JNE      3
    0000AE17  EB                JMP      

    LINE      6824

    0000AE18  B8 01000000       MOV      EAX,1
    0000AE1D  8B C8             MOV      ECX,EAX
    0000AE1F  B8 0A000000       MOV      EAX,10
    0000AE24  50                PUSH     EAX
    0000AE25  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000AE28  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AE2B  5B                POP      EBX
    0000AE2C  53                PUSH     EBX
    0000AE2D  3B C3             CMP      EAX,EBX
    0000AE2F  0F 8E03000000     JLE      3
    0000AE35  EB                JMP      

    LINE      6826

    0000AE36  B8 01000000       MOV      EAX,1
    0000AE3B  8B C8             MOV      ECX,EAX
    0000AE3D  B8 05000000       MOV      EAX,5
    0000AE42  50                PUSH     EAX
    0000AE43  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000AE46  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000AE49  5B                POP      EBX
    0000AE4A  53                PUSH     EBX
    0000AE4B  3B C3             CMP      EAX,EBX
    0000AE4D  0F 8E03000000     JLE      3
    0000AE53  EB                JMP      

    LINE      6833

    0000AE54  B8 01000000       MOV      EAX,1
    0000AE59  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6834

    0000AE5F  B8 01000000       MOV      EAX,1
    0000AE64  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6835

    0000AE6A  B8 01000000       MOV      EAX,1
    0000AE6F  8B C8             MOV      ECX,EAX
    0000AE71  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AE74  48                DEC      EAX
    0000AE75  BB 0E000000       MOV      EBX,14
    0000AE7A  F7 E3             MUL      EBX
    0000AE7C  50                PUSH     EAX
    0000AE7D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000AE80  48                DEC      EAX
    0000AE81  BB 02000000       MOV      EBX,2
    0000AE86  F7 E3             MUL      EBX
    0000AE88  5B                POP      EBX
    0000AE89  03 C3             ADD      EAX,EBX
    0000AE8B  8B F8             MOV      EDI,EAX
    0000AE8D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6836

    0000AE94  B8 01000000       MOV      EAX,1
    0000AE99  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6837

    0000AE9F  B8 01000000       MOV      EAX,1
    0000AEA4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6839

    0000AEAA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000AEB1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000AEB6  5B                POP      EBX

    LINE      6841

    0000AEB7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000AEBE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000AEC3  5B                POP      EBX

    LINE      6843

    0000AEC4  B8 0A000000       MOV      EAX,10
    0000AEC9  40                INC      EAX
    0000AECA  50                PUSH     EAX
    0000AECB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AECE  5B                POP      EBX
    0000AECF  3B C3             CMP      EAX,EBX
    0000AED1  0F 8503000000     JNE      3
    0000AED7  EB                JMP      

    LINE      6850

    0000AED8  B8 01000000       MOV      EAX,1
    0000AEDD  8B C8             MOV      ECX,EAX
    0000AEDF  B8 0A000000       MOV      EAX,10
    0000AEE4  50                PUSH     EAX
    0000AEE5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000AEE8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000AEEB  5B                POP      EBX
    0000AEEC  53                PUSH     EBX
    0000AEED  3B C3             CMP      EAX,EBX
    0000AEEF  0F 8E03000000     JLE      3
    0000AEF5  EB                JMP      

    LINE      6852

    0000AEF6  B8 01000000       MOV      EAX,1
    0000AEFB  8B C8             MOV      ECX,EAX
    0000AEFD  B8 05000000       MOV      EAX,5
    0000AF02  50                PUSH     EAX
    0000AF03  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000AF06  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000AF09  5B                POP      EBX
    0000AF0A  53                PUSH     EBX
    0000AF0B  3B C3             CMP      EAX,EBX
    0000AF0D  0F 8E03000000     JLE      3
    0000AF13  EB                JMP      

    LINE      6859

    0000AF14  B8 01000000       MOV      EAX,1
    0000AF19  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6860

    0000AF1F  B8 01000000       MOV      EAX,1
    0000AF24  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6861

    0000AF2A  B8 01000000       MOV      EAX,1
    0000AF2F  8B C8             MOV      ECX,EAX
    0000AF31  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000AF34  48                DEC      EAX
    0000AF35  BB 0E000000       MOV      EBX,14
    0000AF3A  F7 E3             MUL      EBX
    0000AF3C  50                PUSH     EAX
    0000AF3D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000AF40  48                DEC      EAX
    0000AF41  BB 02000000       MOV      EBX,2
    0000AF46  F7 E3             MUL      EBX
    0000AF48  5B                POP      EBX
    0000AF49  03 C3             ADD      EAX,EBX
    0000AF4B  8B F8             MOV      EDI,EAX
    0000AF4D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6862

    0000AF54  B8 01000000       MOV      EAX,1
    0000AF59  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6863

    0000AF5F  B8 01000000       MOV      EAX,1
    0000AF64  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6865

    0000AF6A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000AF71  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000AF76  5B                POP      EBX

    LINE      6867

    0000AF77  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000AF7E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000AF83  5B                POP      EBX

    LINE      6869

    0000AF84  B8 0A000000       MOV      EAX,10
    0000AF89  40                INC      EAX
    0000AF8A  50                PUSH     EAX
    0000AF8B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AF8E  5B                POP      EBX
    0000AF8F  3B C3             CMP      EAX,EBX
    0000AF91  0F 8503000000     JNE      3
    0000AF97  EB                JMP      

    LINE      6883

    0000AF98  56                PUSH     ESI
    0000AF99  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000AF9F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000AFA5  FF D1             CALL     ECX                       run_inner_proc
    0000AFA7  5E                POP      ESI                       /* restore callers static pointer */

    LINE      6885

    0000AFA8  B8 01000000       MOV      EAX,1
    0000AFAD  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      6887

    0000AFB0  B8 01000000       MOV      EAX,1
    0000AFB5  8B C8             MOV      ECX,EAX
    0000AFB7  B8 0A000000       MOV      EAX,10
    0000AFBC  50                PUSH     EAX
    0000AFBD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000AFC0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000AFC3  5B                POP      EBX
    0000AFC4  53                PUSH     EBX
    0000AFC5  3B C3             CMP      EAX,EBX
    0000AFC7  0F 8E03000000     JLE      3
    0000AFCD  EB                JMP      

    LINE      6889

    0000AFCE  B8 01000000       MOV      EAX,1
    0000AFD3  8B C8             MOV      ECX,EAX
    0000AFD5  B8 05000000       MOV      EAX,5
    0000AFDA  50                PUSH     EAX
    0000AFDB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000AFDE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000AFE1  5B                POP      EBX
    0000AFE2  53                PUSH     EBX
    0000AFE3  3B C3             CMP      EAX,EBX
    0000AFE5  0F 8E03000000     JLE      3
    0000AFEB  EB                JMP      

    LINE      6896

    0000AFEC  B8 01000000       MOV      EAX,1
    0000AFF1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6897

    0000AFF4  B8 01000000       MOV      EAX,1
    0000AFF9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6898

    0000AFFC  B8 01000000       MOV      EAX,1
    0000B001  8B C8             MOV      ECX,EAX
    0000B003  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B006  48                DEC      EAX
    0000B007  BB 0E000000       MOV      EBX,14
    0000B00C  F7 E3             MUL      EBX
    0000B00E  50                PUSH     EAX
    0000B00F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B012  48                DEC      EAX
    0000B013  BB 02000000       MOV      EBX,2
    0000B018  F7 E3             MUL      EBX
    0000B01A  5B                POP      EBX
    0000B01B  03 C3             ADD      EAX,EBX
    0000B01D  8B F8             MOV      EDI,EAX
    0000B01F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6899

    0000B023  B8 01000000       MOV      EAX,1
    0000B028  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6900

    0000B02B  B8 01000000       MOV      EAX,1
    0000B030  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6902

    0000B033  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000B03A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B03F  5B                POP      EBX

    LINE      6904

    0000B040  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000B047  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B04C  5B                POP      EBX

    LINE      6906

    0000B04D  B8 0A000000       MOV      EAX,10
    0000B052  40                INC      EAX
    0000B053  50                PUSH     EAX
    0000B054  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B057  5B                POP      EBX
    0000B058  3B C3             CMP      EAX,EBX
    0000B05A  0F 8503000000     JNE      3
    0000B060  EB                JMP      

    LINE      6913

    0000B061  B8 01000000       MOV      EAX,1
    0000B066  8B C8             MOV      ECX,EAX
    0000B068  B8 0A000000       MOV      EAX,10
    0000B06D  50                PUSH     EAX
    0000B06E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000B071  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B074  5B                POP      EBX
    0000B075  53                PUSH     EBX
    0000B076  3B C3             CMP      EAX,EBX
    0000B078  0F 8E03000000     JLE      3
    0000B07E  EB                JMP      

    LINE      6915

    0000B07F  B8 01000000       MOV      EAX,1
    0000B084  8B C8             MOV      ECX,EAX
    0000B086  B8 05000000       MOV      EAX,5
    0000B08B  50                PUSH     EAX
    0000B08C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000B08F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B092  5B                POP      EBX
    0000B093  53                PUSH     EBX
    0000B094  3B C3             CMP      EAX,EBX
    0000B096  0F 8E03000000     JLE      3
    0000B09C  EB                JMP      

    LINE      6922

    0000B09D  B8 01000000       MOV      EAX,1
    0000B0A2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6923

    0000B0A5  B8 01000000       MOV      EAX,1
    0000B0AA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6924

    0000B0AD  B8 01000000       MOV      EAX,1
    0000B0B2  8B C8             MOV      ECX,EAX
    0000B0B4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B0B7  48                DEC      EAX
    0000B0B8  BB 0E000000       MOV      EBX,14
    0000B0BD  F7 E3             MUL      EBX
    0000B0BF  50                PUSH     EAX
    0000B0C0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B0C3  48                DEC      EAX
    0000B0C4  BB 02000000       MOV      EBX,2
    0000B0C9  F7 E3             MUL      EBX
    0000B0CB  5B                POP      EBX
    0000B0CC  03 C3             ADD      EAX,EBX
    0000B0CE  8B F8             MOV      EDI,EAX
    0000B0D0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      6925

    0000B0D4  B8 01000000       MOV      EAX,1
    0000B0D9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6926

    0000B0DC  B8 01000000       MOV      EAX,1
    0000B0E1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      6928

    0000B0E4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000B0EB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B0F0  5B                POP      EBX

    LINE      6930

    0000B0F1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000B0F8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B0FD  5B                POP      EBX

    LINE      6932

    0000B0FE  B8 0A000000       MOV      EAX,10
    0000B103  40                INC      EAX
    0000B104  50                PUSH     EAX
    0000B105  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B108  5B                POP      EBX
    0000B109  3B C3             CMP      EAX,EBX
    0000B10B  0F 8503000000     JNE      3
    0000B111  EB                JMP      

    LINE      6940

    0000B112  B8 01000000       MOV      EAX,1
    0000B117  8B C8             MOV      ECX,EAX
    0000B119  B8 0A000000       MOV      EAX,10
    0000B11E  50                PUSH     EAX
    0000B11F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000B122  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B125  5B                POP      EBX
    0000B126  53                PUSH     EBX
    0000B127  3B C3             CMP      EAX,EBX
    0000B129  0F 8E03000000     JLE      3
    0000B12F  EB                JMP      

    LINE      6942

    0000B130  B8 01000000       MOV      EAX,1
    0000B135  8B C8             MOV      ECX,EAX
    0000B137  B8 05000000       MOV      EAX,5
    0000B13C  50                PUSH     EAX
    0000B13D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000B140  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B143  5B                POP      EBX
    0000B144  53                PUSH     EBX
    0000B145  3B C3             CMP      EAX,EBX
    0000B147  0F 8E03000000     JLE      3
    0000B14D  EB                JMP      

    LINE      6949

    0000B14E  B8 01000000       MOV      EAX,1
    0000B153  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6950

    0000B159  B8 01000000       MOV      EAX,1
    0000B15E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6951

    0000B164  B8 01000000       MOV      EAX,1
    0000B169  8B C8             MOV      ECX,EAX
    0000B16B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B16E  48                DEC      EAX
    0000B16F  BB 0E000000       MOV      EBX,14
    0000B174  F7 E3             MUL      EBX
    0000B176  50                PUSH     EAX
    0000B177  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B17A  48                DEC      EAX
    0000B17B  BB 02000000       MOV      EBX,2
    0000B180  F7 E3             MUL      EBX
    0000B182  5B                POP      EBX
    0000B183  03 C3             ADD      EAX,EBX
    0000B185  8B F8             MOV      EDI,EAX
    0000B187  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6952

    0000B18E  B8 01000000       MOV      EAX,1
    0000B193  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6953

    0000B199  B8 01000000       MOV      EAX,1
    0000B19E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6955

    0000B1A4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000B1AB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000B1B0  5B                POP      EBX

    LINE      6957

    0000B1B1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000B1B8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000B1BD  5B                POP      EBX

    LINE      6959

    0000B1BE  B8 0A000000       MOV      EAX,10
    0000B1C3  40                INC      EAX
    0000B1C4  50                PUSH     EAX
    0000B1C5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B1C8  5B                POP      EBX
    0000B1C9  3B C3             CMP      EAX,EBX
    0000B1CB  0F 8503000000     JNE      3
    0000B1D1  EB                JMP      

    LINE      6966

    0000B1D2  B8 01000000       MOV      EAX,1
    0000B1D7  8B C8             MOV      ECX,EAX
    0000B1D9  B8 0A000000       MOV      EAX,10
    0000B1DE  50                PUSH     EAX
    0000B1DF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000B1E2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B1E5  5B                POP      EBX
    0000B1E6  53                PUSH     EBX
    0000B1E7  3B C3             CMP      EAX,EBX
    0000B1E9  0F 8E03000000     JLE      3
    0000B1EF  EB                JMP      

    LINE      6968

    0000B1F0  B8 01000000       MOV      EAX,1
    0000B1F5  8B C8             MOV      ECX,EAX
    0000B1F7  B8 05000000       MOV      EAX,5
    0000B1FC  50                PUSH     EAX
    0000B1FD  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000B200  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B203  5B                POP      EBX
    0000B204  53                PUSH     EBX
    0000B205  3B C3             CMP      EAX,EBX
    0000B207  0F 8E03000000     JLE      3
    0000B20D  EB                JMP      

    LINE      6975

    0000B20E  B8 01000000       MOV      EAX,1
    0000B213  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6976

    0000B219  B8 01000000       MOV      EAX,1
    0000B21E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6977

    0000B224  B8 01000000       MOV      EAX,1
    0000B229  8B C8             MOV      ECX,EAX
    0000B22B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B22E  48                DEC      EAX
    0000B22F  BB 0E000000       MOV      EBX,14
    0000B234  F7 E3             MUL      EBX
    0000B236  50                PUSH     EAX
    0000B237  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B23A  48                DEC      EAX
    0000B23B  BB 02000000       MOV      EBX,2
    0000B240  F7 E3             MUL      EBX
    0000B242  5B                POP      EBX
    0000B243  03 C3             ADD      EAX,EBX
    0000B245  8B F8             MOV      EDI,EAX
    0000B247  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      6978

    0000B24E  B8 01000000       MOV      EAX,1
    0000B253  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6979

    0000B259  B8 01000000       MOV      EAX,1
    0000B25E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      6981

    0000B264  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000B26B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000B270  5B                POP      EBX

    LINE      6983

    0000B271  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000B278  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000B27D  5B                POP      EBX

    LINE      6985

    0000B27E  B8 0A000000       MOV      EAX,10
    0000B283  40                INC      EAX
    0000B284  50                PUSH     EAX
    0000B285  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B288  5B                POP      EBX
    0000B289  3B C3             CMP      EAX,EBX
    0000B28B  0F 8503000000     JNE      3
    0000B291  EB                JMP      

    LINE      6999

    0000B292  56                PUSH     ESI
    0000B293  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000B299  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000B29F  FF D1             CALL     ECX                       run_inner_proc
    0000B2A1  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7001

    0000B2A2  B8 01000000       MOV      EAX,1
    0000B2A7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7003

    0000B2AA  B8 01000000       MOV      EAX,1
    0000B2AF  8B C8             MOV      ECX,EAX
    0000B2B1  B8 0A000000       MOV      EAX,10
    0000B2B6  50                PUSH     EAX
    0000B2B7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000B2BA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B2BD  5B                POP      EBX
    0000B2BE  53                PUSH     EBX
    0000B2BF  3B C3             CMP      EAX,EBX
    0000B2C1  0F 8E03000000     JLE      3
    0000B2C7  EB                JMP      

    LINE      7005

    0000B2C8  B8 01000000       MOV      EAX,1
    0000B2CD  8B C8             MOV      ECX,EAX
    0000B2CF  B8 05000000       MOV      EAX,5
    0000B2D4  50                PUSH     EAX
    0000B2D5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000B2D8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B2DB  5B                POP      EBX
    0000B2DC  53                PUSH     EBX
    0000B2DD  3B C3             CMP      EAX,EBX
    0000B2DF  0F 8E03000000     JLE      3
    0000B2E5  EB                JMP      

    LINE      7012

    0000B2E6  B8 01000000       MOV      EAX,1
    0000B2EB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7013

    0000B2EE  B8 01000000       MOV      EAX,1
    0000B2F3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7014

    0000B2F6  B8 01000000       MOV      EAX,1
    0000B2FB  8B C8             MOV      ECX,EAX
    0000B2FD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B300  48                DEC      EAX
    0000B301  BB 0E000000       MOV      EBX,14
    0000B306  F7 E3             MUL      EBX
    0000B308  50                PUSH     EAX
    0000B309  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B30C  48                DEC      EAX
    0000B30D  BB 02000000       MOV      EBX,2
    0000B312  F7 E3             MUL      EBX
    0000B314  5B                POP      EBX
    0000B315  03 C3             ADD      EAX,EBX
    0000B317  8B F8             MOV      EDI,EAX
    0000B319  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7015

    0000B31D  B8 01000000       MOV      EAX,1
    0000B322  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7016

    0000B325  B8 01000000       MOV      EAX,1
    0000B32A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7018

    0000B32D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000B334  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B339  5B                POP      EBX

    LINE      7020

    0000B33A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000B341  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B346  5B                POP      EBX

    LINE      7022

    0000B347  B8 0A000000       MOV      EAX,10
    0000B34C  40                INC      EAX
    0000B34D  50                PUSH     EAX
    0000B34E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B351  5B                POP      EBX
    0000B352  3B C3             CMP      EAX,EBX
    0000B354  0F 8503000000     JNE      3
    0000B35A  EB                JMP      

    LINE      7029

    0000B35B  B8 01000000       MOV      EAX,1
    0000B360  8B C8             MOV      ECX,EAX
    0000B362  B8 0A000000       MOV      EAX,10
    0000B367  50                PUSH     EAX
    0000B368  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000B36B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B36E  5B                POP      EBX
    0000B36F  53                PUSH     EBX
    0000B370  3B C3             CMP      EAX,EBX
    0000B372  0F 8E03000000     JLE      3
    0000B378  EB                JMP      

    LINE      7031

    0000B379  B8 01000000       MOV      EAX,1
    0000B37E  8B C8             MOV      ECX,EAX
    0000B380  B8 05000000       MOV      EAX,5
    0000B385  50                PUSH     EAX
    0000B386  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000B389  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B38C  5B                POP      EBX
    0000B38D  53                PUSH     EBX
    0000B38E  3B C3             CMP      EAX,EBX
    0000B390  0F 8E03000000     JLE      3
    0000B396  EB                JMP      

    LINE      7038

    0000B397  B8 01000000       MOV      EAX,1
    0000B39C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7039

    0000B39F  B8 01000000       MOV      EAX,1
    0000B3A4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7040

    0000B3A7  B8 01000000       MOV      EAX,1
    0000B3AC  8B C8             MOV      ECX,EAX
    0000B3AE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B3B1  48                DEC      EAX
    0000B3B2  BB 0E000000       MOV      EBX,14
    0000B3B7  F7 E3             MUL      EBX
    0000B3B9  50                PUSH     EAX
    0000B3BA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B3BD  48                DEC      EAX
    0000B3BE  BB 02000000       MOV      EBX,2
    0000B3C3  F7 E3             MUL      EBX
    0000B3C5  5B                POP      EBX
    0000B3C6  03 C3             ADD      EAX,EBX
    0000B3C8  8B F8             MOV      EDI,EAX
    0000B3CA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7041

    0000B3CE  B8 01000000       MOV      EAX,1
    0000B3D3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7042

    0000B3D6  B8 01000000       MOV      EAX,1
    0000B3DB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7044

    0000B3DE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000B3E5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B3EA  5B                POP      EBX

    LINE      7046

    0000B3EB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000B3F2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B3F7  5B                POP      EBX

    LINE      7048

    0000B3F8  B8 0A000000       MOV      EAX,10
    0000B3FD  40                INC      EAX
    0000B3FE  50                PUSH     EAX
    0000B3FF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B402  5B                POP      EBX
    0000B403  3B C3             CMP      EAX,EBX
    0000B405  0F 8503000000     JNE      3
    0000B40B  EB                JMP      
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   8



    LINE      7056

    0000B40C  B8 01000000       MOV      EAX,1
    0000B411  8B C8             MOV      ECX,EAX
    0000B413  B8 0A000000       MOV      EAX,10
    0000B418  50                PUSH     EAX
    0000B419  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000B41C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B41F  5B                POP      EBX
    0000B420  53                PUSH     EBX
    0000B421  3B C3             CMP      EAX,EBX
    0000B423  0F 8E03000000     JLE      3
    0000B429  EB                JMP      

    LINE      7058

    0000B42A  B8 01000000       MOV      EAX,1
    0000B42F  8B C8             MOV      ECX,EAX
    0000B431  B8 05000000       MOV      EAX,5
    0000B436  50                PUSH     EAX
    0000B437  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000B43A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B43D  5B                POP      EBX
    0000B43E  53                PUSH     EBX
    0000B43F  3B C3             CMP      EAX,EBX
    0000B441  0F 8E03000000     JLE      3
    0000B447  EB                JMP      

    LINE      7065

    0000B448  B8 01000000       MOV      EAX,1
    0000B44D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7066

    0000B453  B8 01000000       MOV      EAX,1
    0000B458  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7067

    0000B45E  B8 01000000       MOV      EAX,1
    0000B463  8B C8             MOV      ECX,EAX
    0000B465  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B468  48                DEC      EAX
    0000B469  BB 0E000000       MOV      EBX,14
    0000B46E  F7 E3             MUL      EBX
    0000B470  50                PUSH     EAX
    0000B471  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B474  48                DEC      EAX
    0000B475  BB 02000000       MOV      EBX,2
    0000B47A  F7 E3             MUL      EBX
    0000B47C  5B                POP      EBX
    0000B47D  03 C3             ADD      EAX,EBX
    0000B47F  8B F8             MOV      EDI,EAX
    0000B481  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7068

    0000B488  B8 01000000       MOV      EAX,1
    0000B48D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7069

    0000B493  B8 01000000       MOV      EAX,1
    0000B498  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7071

    0000B49E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000B4A5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000B4AA  5B                POP      EBX

    LINE      7073

    0000B4AB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000B4B2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000B4B7  5B                POP      EBX

    LINE      7075

    0000B4B8  B8 0A000000       MOV      EAX,10
    0000B4BD  40                INC      EAX
    0000B4BE  50                PUSH     EAX
    0000B4BF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B4C2  5B                POP      EBX
    0000B4C3  3B C3             CMP      EAX,EBX
    0000B4C5  0F 8503000000     JNE      3
    0000B4CB  EB                JMP      

    LINE      7082

    0000B4CC  B8 01000000       MOV      EAX,1
    0000B4D1  8B C8             MOV      ECX,EAX
    0000B4D3  B8 0A000000       MOV      EAX,10
    0000B4D8  50                PUSH     EAX
    0000B4D9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000B4DC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B4DF  5B                POP      EBX
    0000B4E0  53                PUSH     EBX
    0000B4E1  3B C3             CMP      EAX,EBX
    0000B4E3  0F 8E03000000     JLE      3
    0000B4E9  EB                JMP      

    LINE      7084

    0000B4EA  B8 01000000       MOV      EAX,1
    0000B4EF  8B C8             MOV      ECX,EAX
    0000B4F1  B8 05000000       MOV      EAX,5
    0000B4F6  50                PUSH     EAX
    0000B4F7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000B4FA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B4FD  5B                POP      EBX
    0000B4FE  53                PUSH     EBX
    0000B4FF  3B C3             CMP      EAX,EBX
    0000B501  0F 8E03000000     JLE      3
    0000B507  EB                JMP      

    LINE      7091

    0000B508  B8 01000000       MOV      EAX,1
    0000B50D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7092

    0000B513  B8 01000000       MOV      EAX,1
    0000B518  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7093

    0000B51E  B8 01000000       MOV      EAX,1
    0000B523  8B C8             MOV      ECX,EAX
    0000B525  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B528  48                DEC      EAX
    0000B529  BB 0E000000       MOV      EBX,14
    0000B52E  F7 E3             MUL      EBX
    0000B530  50                PUSH     EAX
    0000B531  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B534  48                DEC      EAX
    0000B535  BB 02000000       MOV      EBX,2
    0000B53A  F7 E3             MUL      EBX
    0000B53C  5B                POP      EBX
    0000B53D  03 C3             ADD      EAX,EBX
    0000B53F  8B F8             MOV      EDI,EAX
    0000B541  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7094

    0000B548  B8 01000000       MOV      EAX,1
    0000B54D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7095

    0000B553  B8 01000000       MOV      EAX,1
    0000B558  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7097

    0000B55E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000B565  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000B56A  5B                POP      EBX

    LINE      7099

    0000B56B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000B572  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000B577  5B                POP      EBX

    LINE      7101

    0000B578  B8 0A000000       MOV      EAX,10
    0000B57D  40                INC      EAX
    0000B57E  50                PUSH     EAX
    0000B57F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B582  5B                POP      EBX
    0000B583  3B C3             CMP      EAX,EBX
    0000B585  0F 8503000000     JNE      3
    0000B58B  EB                JMP      

    LINE      7115

    0000B58C  56                PUSH     ESI
    0000B58D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000B593  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000B599  FF D1             CALL     ECX                       run_inner_proc
    0000B59B  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7117

    0000B59C  B8 01000000       MOV      EAX,1
    0000B5A1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7119

    0000B5A4  B8 01000000       MOV      EAX,1
    0000B5A9  8B C8             MOV      ECX,EAX
    0000B5AB  B8 0A000000       MOV      EAX,10
    0000B5B0  50                PUSH     EAX
    0000B5B1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000B5B4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B5B7  5B                POP      EBX
    0000B5B8  53                PUSH     EBX
    0000B5B9  3B C3             CMP      EAX,EBX
    0000B5BB  0F 8E03000000     JLE      3
    0000B5C1  EB                JMP      

    LINE      7121

    0000B5C2  B8 01000000       MOV      EAX,1
    0000B5C7  8B C8             MOV      ECX,EAX
    0000B5C9  B8 05000000       MOV      EAX,5
    0000B5CE  50                PUSH     EAX
    0000B5CF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000B5D2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B5D5  5B                POP      EBX
    0000B5D6  53                PUSH     EBX
    0000B5D7  3B C3             CMP      EAX,EBX
    0000B5D9  0F 8E03000000     JLE      3
    0000B5DF  EB                JMP      

    LINE      7128

    0000B5E0  B8 01000000       MOV      EAX,1
    0000B5E5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7129

    0000B5E8  B8 01000000       MOV      EAX,1
    0000B5ED  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7130

    0000B5F0  B8 01000000       MOV      EAX,1
    0000B5F5  8B C8             MOV      ECX,EAX
    0000B5F7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B5FA  48                DEC      EAX
    0000B5FB  BB 0E000000       MOV      EBX,14
    0000B600  F7 E3             MUL      EBX
    0000B602  50                PUSH     EAX
    0000B603  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B606  48                DEC      EAX
    0000B607  BB 02000000       MOV      EBX,2
    0000B60C  F7 E3             MUL      EBX
    0000B60E  5B                POP      EBX
    0000B60F  03 C3             ADD      EAX,EBX
    0000B611  8B F8             MOV      EDI,EAX
    0000B613  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7131

    0000B617  B8 01000000       MOV      EAX,1
    0000B61C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7132

    0000B61F  B8 01000000       MOV      EAX,1
    0000B624  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7134

    0000B627  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000B62E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B633  5B                POP      EBX

    LINE      7136

    0000B634  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000B63B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B640  5B                POP      EBX

    LINE      7138

    0000B641  B8 0A000000       MOV      EAX,10
    0000B646  40                INC      EAX
    0000B647  50                PUSH     EAX
    0000B648  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B64B  5B                POP      EBX
    0000B64C  3B C3             CMP      EAX,EBX
    0000B64E  0F 8503000000     JNE      3
    0000B654  EB                JMP      

    LINE      7145

    0000B655  B8 01000000       MOV      EAX,1
    0000B65A  8B C8             MOV      ECX,EAX
    0000B65C  B8 0A000000       MOV      EAX,10
    0000B661  50                PUSH     EAX
    0000B662  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000B665  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B668  5B                POP      EBX
    0000B669  53                PUSH     EBX
    0000B66A  3B C3             CMP      EAX,EBX
    0000B66C  0F 8E03000000     JLE      3
    0000B672  EB                JMP      

    LINE      7147

    0000B673  B8 01000000       MOV      EAX,1
    0000B678  8B C8             MOV      ECX,EAX
    0000B67A  B8 05000000       MOV      EAX,5
    0000B67F  50                PUSH     EAX
    0000B680  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000B683  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B686  5B                POP      EBX
    0000B687  53                PUSH     EBX
    0000B688  3B C3             CMP      EAX,EBX
    0000B68A  0F 8E03000000     JLE      3
    0000B690  EB                JMP      

    LINE      7154

    0000B691  B8 01000000       MOV      EAX,1
    0000B696  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7155

    0000B699  B8 01000000       MOV      EAX,1
    0000B69E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7156

    0000B6A1  B8 01000000       MOV      EAX,1
    0000B6A6  8B C8             MOV      ECX,EAX
    0000B6A8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B6AB  48                DEC      EAX
    0000B6AC  BB 0E000000       MOV      EBX,14
    0000B6B1  F7 E3             MUL      EBX
    0000B6B3  50                PUSH     EAX
    0000B6B4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B6B7  48                DEC      EAX
    0000B6B8  BB 02000000       MOV      EBX,2
    0000B6BD  F7 E3             MUL      EBX
    0000B6BF  5B                POP      EBX
    0000B6C0  03 C3             ADD      EAX,EBX
    0000B6C2  8B F8             MOV      EDI,EAX
    0000B6C4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7157

    0000B6C8  B8 01000000       MOV      EAX,1
    0000B6CD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7158

    0000B6D0  B8 01000000       MOV      EAX,1
    0000B6D5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7160

    0000B6D8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000B6DF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B6E4  5B                POP      EBX

    LINE      7162

    0000B6E5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000B6EC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B6F1  5B                POP      EBX

    LINE      7164

    0000B6F2  B8 0A000000       MOV      EAX,10
    0000B6F7  40                INC      EAX
    0000B6F8  50                PUSH     EAX
    0000B6F9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B6FC  5B                POP      EBX
    0000B6FD  3B C3             CMP      EAX,EBX
    0000B6FF  0F 8503000000     JNE      3
    0000B705  EB                JMP      

    LINE      7172

    0000B706  B8 01000000       MOV      EAX,1
    0000B70B  8B C8             MOV      ECX,EAX
    0000B70D  B8 0A000000       MOV      EAX,10
    0000B712  50                PUSH     EAX
    0000B713  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000B716  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B719  5B                POP      EBX
    0000B71A  53                PUSH     EBX
    0000B71B  3B C3             CMP      EAX,EBX
    0000B71D  0F 8E03000000     JLE      3
    0000B723  EB                JMP      

    LINE      7174

    0000B724  B8 01000000       MOV      EAX,1
    0000B729  8B C8             MOV      ECX,EAX
    0000B72B  B8 05000000       MOV      EAX,5
    0000B730  50                PUSH     EAX
    0000B731  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000B734  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B737  5B                POP      EBX
    0000B738  53                PUSH     EBX
    0000B739  3B C3             CMP      EAX,EBX
    0000B73B  0F 8E03000000     JLE      3
    0000B741  EB                JMP      

    LINE      7181

    0000B742  B8 01000000       MOV      EAX,1
    0000B747  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7182

    0000B74D  B8 01000000       MOV      EAX,1
    0000B752  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7183

    0000B758  B8 01000000       MOV      EAX,1
    0000B75D  8B C8             MOV      ECX,EAX
    0000B75F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B762  48                DEC      EAX
    0000B763  BB 0E000000       MOV      EBX,14
    0000B768  F7 E3             MUL      EBX
    0000B76A  50                PUSH     EAX
    0000B76B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B76E  48                DEC      EAX
    0000B76F  BB 02000000       MOV      EBX,2
    0000B774  F7 E3             MUL      EBX
    0000B776  5B                POP      EBX
    0000B777  03 C3             ADD      EAX,EBX
    0000B779  8B F8             MOV      EDI,EAX
    0000B77B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7184

    0000B782  B8 01000000       MOV      EAX,1
    0000B787  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7185

    0000B78D  B8 01000000       MOV      EAX,1
    0000B792  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7187

    0000B798  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000B79F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000B7A4  5B                POP      EBX

    LINE      7189

    0000B7A5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000B7AC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000B7B1  5B                POP      EBX

    LINE      7191

    0000B7B2  B8 0A000000       MOV      EAX,10
    0000B7B7  40                INC      EAX
    0000B7B8  50                PUSH     EAX
    0000B7B9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B7BC  5B                POP      EBX
    0000B7BD  3B C3             CMP      EAX,EBX
    0000B7BF  0F 8503000000     JNE      3
    0000B7C5  EB                JMP      

    LINE      7198

    0000B7C6  B8 01000000       MOV      EAX,1
    0000B7CB  8B C8             MOV      ECX,EAX
    0000B7CD  B8 0A000000       MOV      EAX,10
    0000B7D2  50                PUSH     EAX
    0000B7D3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000B7D6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B7D9  5B                POP      EBX
    0000B7DA  53                PUSH     EBX
    0000B7DB  3B C3             CMP      EAX,EBX
    0000B7DD  0F 8E03000000     JLE      3
    0000B7E3  EB                JMP      

    LINE      7200

    0000B7E4  B8 01000000       MOV      EAX,1
    0000B7E9  8B C8             MOV      ECX,EAX
    0000B7EB  B8 05000000       MOV      EAX,5
    0000B7F0  50                PUSH     EAX
    0000B7F1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000B7F4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B7F7  5B                POP      EBX
    0000B7F8  53                PUSH     EBX
    0000B7F9  3B C3             CMP      EAX,EBX
    0000B7FB  0F 8E03000000     JLE      3
    0000B801  EB                JMP      

    LINE      7207

    0000B802  B8 01000000       MOV      EAX,1
    0000B807  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7208

    0000B80D  B8 01000000       MOV      EAX,1
    0000B812  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7209

    0000B818  B8 01000000       MOV      EAX,1
    0000B81D  8B C8             MOV      ECX,EAX
    0000B81F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B822  48                DEC      EAX
    0000B823  BB 0E000000       MOV      EBX,14
    0000B828  F7 E3             MUL      EBX
    0000B82A  50                PUSH     EAX
    0000B82B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B82E  48                DEC      EAX
    0000B82F  BB 02000000       MOV      EBX,2
    0000B834  F7 E3             MUL      EBX
    0000B836  5B                POP      EBX
    0000B837  03 C3             ADD      EAX,EBX
    0000B839  8B F8             MOV      EDI,EAX
    0000B83B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7210

    0000B842  B8 01000000       MOV      EAX,1
    0000B847  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7211

    0000B84D  B8 01000000       MOV      EAX,1
    0000B852  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7213

    0000B858  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000B85F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000B864  5B                POP      EBX

    LINE      7215

    0000B865  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000B86C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000B871  5B                POP      EBX

    LINE      7217

    0000B872  B8 0A000000       MOV      EAX,10
    0000B877  40                INC      EAX
    0000B878  50                PUSH     EAX
    0000B879  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B87C  5B                POP      EBX
    0000B87D  3B C3             CMP      EAX,EBX
    0000B87F  0F 8503000000     JNE      3
    0000B885  EB                JMP      

    LINE      7231

    0000B886  56                PUSH     ESI
    0000B887  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000B88D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000B893  FF D1             CALL     ECX                       run_inner_proc
    0000B895  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7233

    0000B896  B8 01000000       MOV      EAX,1
    0000B89B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7235

    0000B89E  B8 01000000       MOV      EAX,1
    0000B8A3  8B C8             MOV      ECX,EAX
    0000B8A5  B8 0A000000       MOV      EAX,10
    0000B8AA  50                PUSH     EAX
    0000B8AB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000B8AE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B8B1  5B                POP      EBX
    0000B8B2  53                PUSH     EBX
    0000B8B3  3B C3             CMP      EAX,EBX
    0000B8B5  0F 8E03000000     JLE      3
    0000B8BB  EB                JMP      

    LINE      7237

    0000B8BC  B8 01000000       MOV      EAX,1
    0000B8C1  8B C8             MOV      ECX,EAX
    0000B8C3  B8 05000000       MOV      EAX,5
    0000B8C8  50                PUSH     EAX
    0000B8C9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000B8CC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B8CF  5B                POP      EBX
    0000B8D0  53                PUSH     EBX
    0000B8D1  3B C3             CMP      EAX,EBX
    0000B8D3  0F 8E03000000     JLE      3
    0000B8D9  EB                JMP      

    LINE      7244

    0000B8DA  B8 01000000       MOV      EAX,1
    0000B8DF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7245

    0000B8E2  B8 01000000       MOV      EAX,1
    0000B8E7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7246

    0000B8EA  B8 01000000       MOV      EAX,1
    0000B8EF  8B C8             MOV      ECX,EAX
    0000B8F1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B8F4  48                DEC      EAX
    0000B8F5  BB 0E000000       MOV      EBX,14
    0000B8FA  F7 E3             MUL      EBX
    0000B8FC  50                PUSH     EAX
    0000B8FD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000B900  48                DEC      EAX
    0000B901  BB 02000000       MOV      EBX,2
    0000B906  F7 E3             MUL      EBX
    0000B908  5B                POP      EBX
    0000B909  03 C3             ADD      EAX,EBX
    0000B90B  8B F8             MOV      EDI,EAX
    0000B90D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7247

    0000B911  B8 01000000       MOV      EAX,1
    0000B916  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7248

    0000B919  B8 01000000       MOV      EAX,1
    0000B91E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7250

    0000B921  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000B928  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B92D  5B                POP      EBX

    LINE      7252

    0000B92E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000B935  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B93A  5B                POP      EBX

    LINE      7254

    0000B93B  B8 0A000000       MOV      EAX,10
    0000B940  40                INC      EAX
    0000B941  50                PUSH     EAX
    0000B942  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B945  5B                POP      EBX
    0000B946  3B C3             CMP      EAX,EBX
    0000B948  0F 8503000000     JNE      3
    0000B94E  EB                JMP      

    LINE      7261

    0000B94F  B8 01000000       MOV      EAX,1
    0000B954  8B C8             MOV      ECX,EAX
    0000B956  B8 0A000000       MOV      EAX,10
    0000B95B  50                PUSH     EAX
    0000B95C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000B95F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B962  5B                POP      EBX
    0000B963  53                PUSH     EBX
    0000B964  3B C3             CMP      EAX,EBX
    0000B966  0F 8E03000000     JLE      3
    0000B96C  EB                JMP      

    LINE      7263

    0000B96D  B8 01000000       MOV      EAX,1
    0000B972  8B C8             MOV      ECX,EAX
    0000B974  B8 05000000       MOV      EAX,5
    0000B979  50                PUSH     EAX
    0000B97A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000B97D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B980  5B                POP      EBX
    0000B981  53                PUSH     EBX
    0000B982  3B C3             CMP      EAX,EBX
    0000B984  0F 8E03000000     JLE      3
    0000B98A  EB                JMP      

    LINE      7270

    0000B98B  B8 01000000       MOV      EAX,1
    0000B990  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7271

    0000B993  B8 01000000       MOV      EAX,1
    0000B998  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7272

    0000B99B  B8 01000000       MOV      EAX,1
    0000B9A0  8B C8             MOV      ECX,EAX
    0000B9A2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000B9A5  48                DEC      EAX
    0000B9A6  BB 0E000000       MOV      EBX,14
    0000B9AB  F7 E3             MUL      EBX
    0000B9AD  50                PUSH     EAX
    0000B9AE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000B9B1  48                DEC      EAX
    0000B9B2  BB 02000000       MOV      EBX,2
    0000B9B7  F7 E3             MUL      EBX
    0000B9B9  5B                POP      EBX
    0000B9BA  03 C3             ADD      EAX,EBX
    0000B9BC  8B F8             MOV      EDI,EAX
    0000B9BE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7273

    0000B9C2  B8 01000000       MOV      EAX,1
    0000B9C7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7274

    0000B9CA  B8 01000000       MOV      EAX,1
    0000B9CF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7276

    0000B9D2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000B9D9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000B9DE  5B                POP      EBX

    LINE      7278

    0000B9DF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000B9E6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000B9EB  5B                POP      EBX

    LINE      7280

    0000B9EC  B8 0A000000       MOV      EAX,10
    0000B9F1  40                INC      EAX
    0000B9F2  50                PUSH     EAX
    0000B9F3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000B9F6  5B                POP      EBX
    0000B9F7  3B C3             CMP      EAX,EBX
    0000B9F9  0F 8503000000     JNE      3
    0000B9FF  EB                JMP      

    LINE      7288

    0000BA00  B8 01000000       MOV      EAX,1
    0000BA05  8B C8             MOV      ECX,EAX
    0000BA07  B8 0A000000       MOV      EAX,10
    0000BA0C  50                PUSH     EAX
    0000BA0D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000BA10  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BA13  5B                POP      EBX
    0000BA14  53                PUSH     EBX
    0000BA15  3B C3             CMP      EAX,EBX
    0000BA17  0F 8E03000000     JLE      3
    0000BA1D  EB                JMP      

    LINE      7290

    0000BA1E  B8 01000000       MOV      EAX,1
    0000BA23  8B C8             MOV      ECX,EAX
    0000BA25  B8 05000000       MOV      EAX,5
    0000BA2A  50                PUSH     EAX
    0000BA2B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000BA2E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BA31  5B                POP      EBX
    0000BA32  53                PUSH     EBX
    0000BA33  3B C3             CMP      EAX,EBX
    0000BA35  0F 8E03000000     JLE      3
    0000BA3B  EB                JMP      

    LINE      7297

    0000BA3C  B8 01000000       MOV      EAX,1
    0000BA41  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7298

    0000BA47  B8 01000000       MOV      EAX,1
    0000BA4C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7299

    0000BA52  B8 01000000       MOV      EAX,1
    0000BA57  8B C8             MOV      ECX,EAX
    0000BA59  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BA5C  48                DEC      EAX
    0000BA5D  BB 0E000000       MOV      EBX,14
    0000BA62  F7 E3             MUL      EBX
    0000BA64  50                PUSH     EAX
    0000BA65  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BA68  48                DEC      EAX
    0000BA69  BB 02000000       MOV      EBX,2
    0000BA6E  F7 E3             MUL      EBX
    0000BA70  5B                POP      EBX
    0000BA71  03 C3             ADD      EAX,EBX
    0000BA73  8B F8             MOV      EDI,EAX
    0000BA75  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7300

    0000BA7C  B8 01000000       MOV      EAX,1
    0000BA81  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7301

    0000BA87  B8 01000000       MOV      EAX,1
    0000BA8C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7303

    0000BA92  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000BA99  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000BA9E  5B                POP      EBX

    LINE      7305

    0000BA9F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000BAA6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000BAAB  5B                POP      EBX

    LINE      7307

    0000BAAC  B8 0A000000       MOV      EAX,10
    0000BAB1  40                INC      EAX
    0000BAB2  50                PUSH     EAX
    0000BAB3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BAB6  5B                POP      EBX
    0000BAB7  3B C3             CMP      EAX,EBX
    0000BAB9  0F 8503000000     JNE      3
    0000BABF  EB                JMP      

    LINE      7314

    0000BAC0  B8 01000000       MOV      EAX,1
    0000BAC5  8B C8             MOV      ECX,EAX
    0000BAC7  B8 0A000000       MOV      EAX,10
    0000BACC  50                PUSH     EAX
    0000BACD  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000BAD0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BAD3  5B                POP      EBX
    0000BAD4  53                PUSH     EBX
    0000BAD5  3B C3             CMP      EAX,EBX
    0000BAD7  0F 8E03000000     JLE      3
    0000BADD  EB                JMP      

    LINE      7316

    0000BADE  B8 01000000       MOV      EAX,1
    0000BAE3  8B C8             MOV      ECX,EAX
    0000BAE5  B8 05000000       MOV      EAX,5
    0000BAEA  50                PUSH     EAX
    0000BAEB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000BAEE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BAF1  5B                POP      EBX
    0000BAF2  53                PUSH     EBX
    0000BAF3  3B C3             CMP      EAX,EBX
    0000BAF5  0F 8E03000000     JLE      3
    0000BAFB  EB                JMP      

    LINE      7323

    0000BAFC  B8 01000000       MOV      EAX,1
    0000BB01  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7324

    0000BB07  B8 01000000       MOV      EAX,1
    0000BB0C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7325

    0000BB12  B8 01000000       MOV      EAX,1
    0000BB17  8B C8             MOV      ECX,EAX
    0000BB19  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BB1C  48                DEC      EAX
    0000BB1D  BB 0E000000       MOV      EBX,14
    0000BB22  F7 E3             MUL      EBX
    0000BB24  50                PUSH     EAX
    0000BB25  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BB28  48                DEC      EAX
    0000BB29  BB 02000000       MOV      EBX,2
    0000BB2E  F7 E3             MUL      EBX
    0000BB30  5B                POP      EBX
    0000BB31  03 C3             ADD      EAX,EBX
    0000BB33  8B F8             MOV      EDI,EAX
    0000BB35  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7326

    0000BB3C  B8 01000000       MOV      EAX,1
    0000BB41  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7327

    0000BB47  B8 01000000       MOV      EAX,1
    0000BB4C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7329

    0000BB52  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000BB59  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000BB5E  5B                POP      EBX

    LINE      7331

    0000BB5F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000BB66  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000BB6B  5B                POP      EBX

    LINE      7333

    0000BB6C  B8 0A000000       MOV      EAX,10
    0000BB71  40                INC      EAX
    0000BB72  50                PUSH     EAX
    0000BB73  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BB76  5B                POP      EBX
    0000BB77  3B C3             CMP      EAX,EBX
    0000BB79  0F 8503000000     JNE      3
    0000BB7F  EB                JMP      

    LINE      7347

    0000BB80  56                PUSH     ESI
    0000BB81  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000BB87  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000BB8D  FF D1             CALL     ECX                       run_inner_proc
    0000BB8F  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7349

    0000BB90  B8 01000000       MOV      EAX,1
    0000BB95  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7351

    0000BB98  B8 01000000       MOV      EAX,1
    0000BB9D  8B C8             MOV      ECX,EAX
    0000BB9F  B8 0A000000       MOV      EAX,10
    0000BBA4  50                PUSH     EAX
    0000BBA5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000BBA8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BBAB  5B                POP      EBX
    0000BBAC  53                PUSH     EBX
    0000BBAD  3B C3             CMP      EAX,EBX
    0000BBAF  0F 8E03000000     JLE      3
    0000BBB5  EB                JMP      

    LINE      7353

    0000BBB6  B8 01000000       MOV      EAX,1
    0000BBBB  8B C8             MOV      ECX,EAX
    0000BBBD  B8 05000000       MOV      EAX,5
    0000BBC2  50                PUSH     EAX
    0000BBC3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000BBC6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BBC9  5B                POP      EBX
    0000BBCA  53                PUSH     EBX
    0000BBCB  3B C3             CMP      EAX,EBX
    0000BBCD  0F 8E03000000     JLE      3
    0000BBD3  EB                JMP      

    LINE      7360

    0000BBD4  B8 01000000       MOV      EAX,1
    0000BBD9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7361

    0000BBDC  B8 01000000       MOV      EAX,1
    0000BBE1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7362

    0000BBE4  B8 01000000       MOV      EAX,1
    0000BBE9  8B C8             MOV      ECX,EAX
    0000BBEB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BBEE  48                DEC      EAX
    0000BBEF  BB 0E000000       MOV      EBX,14
    0000BBF4  F7 E3             MUL      EBX
    0000BBF6  50                PUSH     EAX
    0000BBF7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BBFA  48                DEC      EAX
    0000BBFB  BB 02000000       MOV      EBX,2
    0000BC00  F7 E3             MUL      EBX
    0000BC02  5B                POP      EBX
    0000BC03  03 C3             ADD      EAX,EBX
    0000BC05  8B F8             MOV      EDI,EAX
    0000BC07  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7363

    0000BC0B  B8 01000000       MOV      EAX,1
    0000BC10  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7364

    0000BC13  B8 01000000       MOV      EAX,1
    0000BC18  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7366

    0000BC1B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000BC22  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000BC27  5B                POP      EBX

    LINE      7368

    0000BC28  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000BC2F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000BC34  5B                POP      EBX

    LINE      7370

    0000BC35  B8 0A000000       MOV      EAX,10
    0000BC3A  40                INC      EAX
    0000BC3B  50                PUSH     EAX
    0000BC3C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BC3F  5B                POP      EBX
    0000BC40  3B C3             CMP      EAX,EBX
    0000BC42  0F 8503000000     JNE      3
    0000BC48  EB                JMP      

    LINE      7377

    0000BC49  B8 01000000       MOV      EAX,1
    0000BC4E  8B C8             MOV      ECX,EAX
    0000BC50  B8 0A000000       MOV      EAX,10
    0000BC55  50                PUSH     EAX
    0000BC56  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000BC59  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BC5C  5B                POP      EBX
    0000BC5D  53                PUSH     EBX
    0000BC5E  3B C3             CMP      EAX,EBX
    0000BC60  0F 8E03000000     JLE      3
    0000BC66  EB                JMP      

    LINE      7379

    0000BC67  B8 01000000       MOV      EAX,1
    0000BC6C  8B C8             MOV      ECX,EAX
    0000BC6E  B8 05000000       MOV      EAX,5
    0000BC73  50                PUSH     EAX
    0000BC74  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000BC77  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BC7A  5B                POP      EBX
    0000BC7B  53                PUSH     EBX
    0000BC7C  3B C3             CMP      EAX,EBX
    0000BC7E  0F 8E03000000     JLE      3
    0000BC84  EB                JMP      

    LINE      7386

    0000BC85  B8 01000000       MOV      EAX,1
    0000BC8A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7387

    0000BC8D  B8 01000000       MOV      EAX,1
    0000BC92  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7388

    0000BC95  B8 01000000       MOV      EAX,1
    0000BC9A  8B C8             MOV      ECX,EAX
    0000BC9C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BC9F  48                DEC      EAX
    0000BCA0  BB 0E000000       MOV      EBX,14
    0000BCA5  F7 E3             MUL      EBX
    0000BCA7  50                PUSH     EAX
    0000BCA8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BCAB  48                DEC      EAX
    0000BCAC  BB 02000000       MOV      EBX,2
    0000BCB1  F7 E3             MUL      EBX
    0000BCB3  5B                POP      EBX
    0000BCB4  03 C3             ADD      EAX,EBX
    0000BCB6  8B F8             MOV      EDI,EAX
    0000BCB8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7389

    0000BCBC  B8 01000000       MOV      EAX,1
    0000BCC1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7390

    0000BCC4  B8 01000000       MOV      EAX,1
    0000BCC9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7392

    0000BCCC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000BCD3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000BCD8  5B                POP      EBX

    LINE      7394

    0000BCD9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000BCE0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000BCE5  5B                POP      EBX

    LINE      7396

    0000BCE6  B8 0A000000       MOV      EAX,10
    0000BCEB  40                INC      EAX
    0000BCEC  50                PUSH     EAX
    0000BCED  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BCF0  5B                POP      EBX
    0000BCF1  3B C3             CMP      EAX,EBX
    0000BCF3  0F 8503000000     JNE      3
    0000BCF9  EB                JMP      

    LINE      7404

    0000BCFA  B8 01000000       MOV      EAX,1
    0000BCFF  8B C8             MOV      ECX,EAX
    0000BD01  B8 0A000000       MOV      EAX,10
    0000BD06  50                PUSH     EAX
    0000BD07  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000BD0A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BD0D  5B                POP      EBX
    0000BD0E  53                PUSH     EBX
    0000BD0F  3B C3             CMP      EAX,EBX
    0000BD11  0F 8E03000000     JLE      3
    0000BD17  EB                JMP      

    LINE      7406

    0000BD18  B8 01000000       MOV      EAX,1
    0000BD1D  8B C8             MOV      ECX,EAX
    0000BD1F  B8 05000000       MOV      EAX,5
    0000BD24  50                PUSH     EAX
    0000BD25  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000BD28  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BD2B  5B                POP      EBX
    0000BD2C  53                PUSH     EBX
    0000BD2D  3B C3             CMP      EAX,EBX
    0000BD2F  0F 8E03000000     JLE      3
    0000BD35  EB                JMP      

    LINE      7413

    0000BD36  B8 01000000       MOV      EAX,1
    0000BD3B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7414

    0000BD41  B8 01000000       MOV      EAX,1
    0000BD46  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7415

    0000BD4C  B8 01000000       MOV      EAX,1
    0000BD51  8B C8             MOV      ECX,EAX
    0000BD53  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BD56  48                DEC      EAX
    0000BD57  BB 0E000000       MOV      EBX,14
    0000BD5C  F7 E3             MUL      EBX
    0000BD5E  50                PUSH     EAX
    0000BD5F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BD62  48                DEC      EAX
    0000BD63  BB 02000000       MOV      EBX,2
    0000BD68  F7 E3             MUL      EBX
    0000BD6A  5B                POP      EBX
    0000BD6B  03 C3             ADD      EAX,EBX
    0000BD6D  8B F8             MOV      EDI,EAX
    0000BD6F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7416

    0000BD76  B8 01000000       MOV      EAX,1
    0000BD7B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7417

    0000BD81  B8 01000000       MOV      EAX,1
    0000BD86  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7419

    0000BD8C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000BD93  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000BD98  5B                POP      EBX

    LINE      7421

    0000BD99  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000BDA0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000BDA5  5B                POP      EBX

    LINE      7423

    0000BDA6  B8 0A000000       MOV      EAX,10
    0000BDAB  40                INC      EAX
    0000BDAC  50                PUSH     EAX
    0000BDAD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BDB0  5B                POP      EBX
    0000BDB1  3B C3             CMP      EAX,EBX
    0000BDB3  0F 8503000000     JNE      3
    0000BDB9  EB                JMP      

    LINE      7430

    0000BDBA  B8 01000000       MOV      EAX,1
    0000BDBF  8B C8             MOV      ECX,EAX
    0000BDC1  B8 0A000000       MOV      EAX,10
    0000BDC6  50                PUSH     EAX
    0000BDC7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000BDCA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BDCD  5B                POP      EBX
    0000BDCE  53                PUSH     EBX
    0000BDCF  3B C3             CMP      EAX,EBX
    0000BDD1  0F 8E03000000     JLE      3
    0000BDD7  EB                JMP      

    LINE      7432

    0000BDD8  B8 01000000       MOV      EAX,1
    0000BDDD  8B C8             MOV      ECX,EAX
    0000BDDF  B8 05000000       MOV      EAX,5
    0000BDE4  50                PUSH     EAX
    0000BDE5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000BDE8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BDEB  5B                POP      EBX
    0000BDEC  53                PUSH     EBX
    0000BDED  3B C3             CMP      EAX,EBX
    0000BDEF  0F 8E03000000     JLE      3
    0000BDF5  EB                JMP      

    LINE      7439

    0000BDF6  B8 01000000       MOV      EAX,1
    0000BDFB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7440

    0000BE01  B8 01000000       MOV      EAX,1
    0000BE06  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7441

    0000BE0C  B8 01000000       MOV      EAX,1
    0000BE11  8B C8             MOV      ECX,EAX
    0000BE13  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BE16  48                DEC      EAX
    0000BE17  BB 0E000000       MOV      EBX,14
    0000BE1C  F7 E3             MUL      EBX
    0000BE1E  50                PUSH     EAX
    0000BE1F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BE22  48                DEC      EAX
    0000BE23  BB 02000000       MOV      EBX,2
    0000BE28  F7 E3             MUL      EBX
    0000BE2A  5B                POP      EBX
    0000BE2B  03 C3             ADD      EAX,EBX
    0000BE2D  8B F8             MOV      EDI,EAX
    0000BE2F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7442

    0000BE36  B8 01000000       MOV      EAX,1
    0000BE3B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7443

    0000BE41  B8 01000000       MOV      EAX,1
    0000BE46  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7445

    0000BE4C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000BE53  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000BE58  5B                POP      EBX

    LINE      7447

    0000BE59  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000BE60  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000BE65  5B                POP      EBX

    LINE      7449

    0000BE66  B8 0A000000       MOV      EAX,10
    0000BE6B  40                INC      EAX
    0000BE6C  50                PUSH     EAX
    0000BE6D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BE70  5B                POP      EBX
    0000BE71  3B C3             CMP      EAX,EBX
    0000BE73  0F 8503000000     JNE      3
    0000BE79  EB                JMP      

    LINE      7463

    0000BE7A  56                PUSH     ESI
    0000BE7B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000BE81  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000BE87  FF D1             CALL     ECX                       run_inner_proc
    0000BE89  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7465

    0000BE8A  B8 01000000       MOV      EAX,1
    0000BE8F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7467

    0000BE92  B8 01000000       MOV      EAX,1
    0000BE97  8B C8             MOV      ECX,EAX
    0000BE99  B8 0A000000       MOV      EAX,10
    0000BE9E  50                PUSH     EAX
    0000BE9F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000BEA2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BEA5  5B                POP      EBX
    0000BEA6  53                PUSH     EBX
    0000BEA7  3B C3             CMP      EAX,EBX
    0000BEA9  0F 8E03000000     JLE      3
    0000BEAF  EB                JMP      

    LINE      7469

    0000BEB0  B8 01000000       MOV      EAX,1
    0000BEB5  8B C8             MOV      ECX,EAX
    0000BEB7  B8 05000000       MOV      EAX,5
    0000BEBC  50                PUSH     EAX
    0000BEBD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000BEC0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BEC3  5B                POP      EBX
    0000BEC4  53                PUSH     EBX
    0000BEC5  3B C3             CMP      EAX,EBX
    0000BEC7  0F 8E03000000     JLE      3
    0000BECD  EB                JMP      

    LINE      7476

    0000BECE  B8 01000000       MOV      EAX,1
    0000BED3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7477

    0000BED6  B8 01000000       MOV      EAX,1
    0000BEDB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7478

    0000BEDE  B8 01000000       MOV      EAX,1
    0000BEE3  8B C8             MOV      ECX,EAX
    0000BEE5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BEE8  48                DEC      EAX
    0000BEE9  BB 0E000000       MOV      EBX,14
    0000BEEE  F7 E3             MUL      EBX
    0000BEF0  50                PUSH     EAX
    0000BEF1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000BEF4  48                DEC      EAX
    0000BEF5  BB 02000000       MOV      EBX,2
    0000BEFA  F7 E3             MUL      EBX
    0000BEFC  5B                POP      EBX
    0000BEFD  03 C3             ADD      EAX,EBX
    0000BEFF  8B F8             MOV      EDI,EAX
    0000BF01  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7479

    0000BF05  B8 01000000       MOV      EAX,1
    0000BF0A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7480

    0000BF0D  B8 01000000       MOV      EAX,1
    0000BF12  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7482

    0000BF15  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000BF1C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000BF21  5B                POP      EBX

    LINE      7484

    0000BF22  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000BF29  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000BF2E  5B                POP      EBX

    LINE      7486

    0000BF2F  B8 0A000000       MOV      EAX,10
    0000BF34  40                INC      EAX
    0000BF35  50                PUSH     EAX
    0000BF36  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BF39  5B                POP      EBX
    0000BF3A  3B C3             CMP      EAX,EBX
    0000BF3C  0F 8503000000     JNE      3
    0000BF42  EB                JMP      

    LINE      7493

    0000BF43  B8 01000000       MOV      EAX,1
    0000BF48  8B C8             MOV      ECX,EAX
    0000BF4A  B8 0A000000       MOV      EAX,10
    0000BF4F  50                PUSH     EAX
    0000BF50  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000BF53  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BF56  5B                POP      EBX
    0000BF57  53                PUSH     EBX
    0000BF58  3B C3             CMP      EAX,EBX
    0000BF5A  0F 8E03000000     JLE      3
    0000BF60  EB                JMP      

    LINE      7495

    0000BF61  B8 01000000       MOV      EAX,1
    0000BF66  8B C8             MOV      ECX,EAX
    0000BF68  B8 05000000       MOV      EAX,5
    0000BF6D  50                PUSH     EAX
    0000BF6E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000BF71  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BF74  5B                POP      EBX
    0000BF75  53                PUSH     EBX
    0000BF76  3B C3             CMP      EAX,EBX
    0000BF78  0F 8E03000000     JLE      3
    0000BF7E  EB                JMP      

    LINE      7502

    0000BF7F  B8 01000000       MOV      EAX,1
    0000BF84  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7503

    0000BF87  B8 01000000       MOV      EAX,1
    0000BF8C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7504

    0000BF8F  B8 01000000       MOV      EAX,1
    0000BF94  8B C8             MOV      ECX,EAX
    0000BF96  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000BF99  48                DEC      EAX
    0000BF9A  BB 0E000000       MOV      EBX,14
    0000BF9F  F7 E3             MUL      EBX
    0000BFA1  50                PUSH     EAX
    0000BFA2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000BFA5  48                DEC      EAX
    0000BFA6  BB 02000000       MOV      EBX,2
    0000BFAB  F7 E3             MUL      EBX
    0000BFAD  5B                POP      EBX
    0000BFAE  03 C3             ADD      EAX,EBX
    0000BFB0  8B F8             MOV      EDI,EAX
    0000BFB2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7505

    0000BFB6  B8 01000000       MOV      EAX,1
    0000BFBB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7506

    0000BFBE  B8 01000000       MOV      EAX,1
    0000BFC3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7508

    0000BFC6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000BFCD  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000BFD2  5B                POP      EBX

    LINE      7510

    0000BFD3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000BFDA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000BFDF  5B                POP      EBX

    LINE      7512

    0000BFE0  B8 0A000000       MOV      EAX,10
    0000BFE5  40                INC      EAX
    0000BFE6  50                PUSH     EAX
    0000BFE7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000BFEA  5B                POP      EBX
    0000BFEB  3B C3             CMP      EAX,EBX
    0000BFED  0F 8503000000     JNE      3
    0000BFF3  EB                JMP      

    LINE      7520

    0000BFF4  B8 01000000       MOV      EAX,1
    0000BFF9  8B C8             MOV      ECX,EAX
    0000BFFB  B8 0A000000       MOV      EAX,10
    0000C000  50                PUSH     EAX
    0000C001  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000C004  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C007  5B                POP      EBX
    0000C008  53                PUSH     EBX
    0000C009  3B C3             CMP      EAX,EBX
    0000C00B  0F 8E03000000     JLE      3
    0000C011  EB                JMP      

    LINE      7522

    0000C012  B8 01000000       MOV      EAX,1
    0000C017  8B C8             MOV      ECX,EAX
    0000C019  B8 05000000       MOV      EAX,5
    0000C01E  50                PUSH     EAX
    0000C01F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000C022  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C025  5B                POP      EBX
    0000C026  53                PUSH     EBX
    0000C027  3B C3             CMP      EAX,EBX
    0000C029  0F 8E03000000     JLE      3
    0000C02F  EB                JMP      

    LINE      7529

    0000C030  B8 01000000       MOV      EAX,1
    0000C035  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7530

    0000C03B  B8 01000000       MOV      EAX,1
    0000C040  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7531

    0000C046  B8 01000000       MOV      EAX,1
    0000C04B  8B C8             MOV      ECX,EAX
    0000C04D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C050  48                DEC      EAX
    0000C051  BB 0E000000       MOV      EBX,14
    0000C056  F7 E3             MUL      EBX
    0000C058  50                PUSH     EAX
    0000C059  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C05C  48                DEC      EAX
    0000C05D  BB 02000000       MOV      EBX,2
    0000C062  F7 E3             MUL      EBX
    0000C064  5B                POP      EBX
    0000C065  03 C3             ADD      EAX,EBX
    0000C067  8B F8             MOV      EDI,EAX
    0000C069  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7532

    0000C070  B8 01000000       MOV      EAX,1
    0000C075  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7533

    0000C07B  B8 01000000       MOV      EAX,1
    0000C080  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7535

    0000C086  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000C08D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000C092  5B                POP      EBX

    LINE      7537

    0000C093  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000C09A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000C09F  5B                POP      EBX

    LINE      7539

    0000C0A0  B8 0A000000       MOV      EAX,10
    0000C0A5  40                INC      EAX
    0000C0A6  50                PUSH     EAX
    0000C0A7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C0AA  5B                POP      EBX
    0000C0AB  3B C3             CMP      EAX,EBX
    0000C0AD  0F 8503000000     JNE      3
    0000C0B3  EB                JMP      

    LINE      7546

    0000C0B4  B8 01000000       MOV      EAX,1
    0000C0B9  8B C8             MOV      ECX,EAX
    0000C0BB  B8 0A000000       MOV      EAX,10
    0000C0C0  50                PUSH     EAX
    0000C0C1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000C0C4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C0C7  5B                POP      EBX
    0000C0C8  53                PUSH     EBX
    0000C0C9  3B C3             CMP      EAX,EBX
    0000C0CB  0F 8E03000000     JLE      3
    0000C0D1  EB                JMP      

    LINE      7548

    0000C0D2  B8 01000000       MOV      EAX,1
    0000C0D7  8B C8             MOV      ECX,EAX
    0000C0D9  B8 05000000       MOV      EAX,5
    0000C0DE  50                PUSH     EAX
    0000C0DF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000C0E2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C0E5  5B                POP      EBX
    0000C0E6  53                PUSH     EBX
    0000C0E7  3B C3             CMP      EAX,EBX
    0000C0E9  0F 8E03000000     JLE      3
    0000C0EF  EB                JMP      

    LINE      7555

    0000C0F0  B8 01000000       MOV      EAX,1
    0000C0F5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7556

    0000C0FB  B8 01000000       MOV      EAX,1
    0000C100  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7557

    0000C106  B8 01000000       MOV      EAX,1
    0000C10B  8B C8             MOV      ECX,EAX
    0000C10D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C110  48                DEC      EAX
    0000C111  BB 0E000000       MOV      EBX,14
    0000C116  F7 E3             MUL      EBX
    0000C118  50                PUSH     EAX
    0000C119  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C11C  48                DEC      EAX
    0000C11D  BB 02000000       MOV      EBX,2
    0000C122  F7 E3             MUL      EBX
    0000C124  5B                POP      EBX
    0000C125  03 C3             ADD      EAX,EBX
    0000C127  8B F8             MOV      EDI,EAX
    0000C129  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7558

    0000C130  B8 01000000       MOV      EAX,1
    0000C135  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7559

    0000C13B  B8 01000000       MOV      EAX,1
    0000C140  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7561

    0000C146  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000C14D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000C152  5B                POP      EBX

    LINE      7563

    0000C153  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000C15A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000C15F  5B                POP      EBX

    LINE      7565

    0000C160  B8 0A000000       MOV      EAX,10
    0000C165  40                INC      EAX
    0000C166  50                PUSH     EAX
    0000C167  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C16A  5B                POP      EBX
    0000C16B  3B C3             CMP      EAX,EBX
    0000C16D  0F 8503000000     JNE      3
    0000C173  EB                JMP      

    LINE      7579

    0000C174  56                PUSH     ESI
    0000C175  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000C17B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000C181  FF D1             CALL     ECX                       run_inner_proc
    0000C183  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7581

    0000C184  B8 01000000       MOV      EAX,1
    0000C189  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7583

    0000C18C  B8 01000000       MOV      EAX,1
    0000C191  8B C8             MOV      ECX,EAX
    0000C193  B8 0A000000       MOV      EAX,10
    0000C198  50                PUSH     EAX
    0000C199  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000C19C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C19F  5B                POP      EBX
    0000C1A0  53                PUSH     EBX
    0000C1A1  3B C3             CMP      EAX,EBX
    0000C1A3  0F 8E03000000     JLE      3
    0000C1A9  EB                JMP      

    LINE      7585

    0000C1AA  B8 01000000       MOV      EAX,1
    0000C1AF  8B C8             MOV      ECX,EAX
    0000C1B1  B8 05000000       MOV      EAX,5
    0000C1B6  50                PUSH     EAX
    0000C1B7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000C1BA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C1BD  5B                POP      EBX
    0000C1BE  53                PUSH     EBX
    0000C1BF  3B C3             CMP      EAX,EBX
    0000C1C1  0F 8E03000000     JLE      3
    0000C1C7  EB                JMP      

    LINE      7592

    0000C1C8  B8 01000000       MOV      EAX,1
    0000C1CD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7593

    0000C1D0  B8 01000000       MOV      EAX,1
    0000C1D5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7594

    0000C1D8  B8 01000000       MOV      EAX,1
    0000C1DD  8B C8             MOV      ECX,EAX
    0000C1DF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C1E2  48                DEC      EAX
    0000C1E3  BB 0E000000       MOV      EBX,14
    0000C1E8  F7 E3             MUL      EBX
    0000C1EA  50                PUSH     EAX
    0000C1EB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C1EE  48                DEC      EAX
    0000C1EF  BB 02000000       MOV      EBX,2
    0000C1F4  F7 E3             MUL      EBX
    0000C1F6  5B                POP      EBX
    0000C1F7  03 C3             ADD      EAX,EBX
    0000C1F9  8B F8             MOV      EDI,EAX
    0000C1FB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7595

    0000C1FF  B8 01000000       MOV      EAX,1
    0000C204  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7596

    0000C207  B8 01000000       MOV      EAX,1
    0000C20C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7598

    0000C20F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000C216  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000C21B  5B                POP      EBX

    LINE      7600

    0000C21C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000C223  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000C228  5B                POP      EBX

    LINE      7602

    0000C229  B8 0A000000       MOV      EAX,10
    0000C22E  40                INC      EAX
    0000C22F  50                PUSH     EAX
    0000C230  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C233  5B                POP      EBX
    0000C234  3B C3             CMP      EAX,EBX
    0000C236  0F 8503000000     JNE      3
    0000C23C  EB                JMP      

    LINE      7609

    0000C23D  B8 01000000       MOV      EAX,1
    0000C242  8B C8             MOV      ECX,EAX
    0000C244  B8 0A000000       MOV      EAX,10
    0000C249  50                PUSH     EAX
    0000C24A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000C24D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C250  5B                POP      EBX
    0000C251  53                PUSH     EBX
    0000C252  3B C3             CMP      EAX,EBX
    0000C254  0F 8E03000000     JLE      3
    0000C25A  EB                JMP      

    LINE      7611

    0000C25B  B8 01000000       MOV      EAX,1
    0000C260  8B C8             MOV      ECX,EAX
    0000C262  B8 05000000       MOV      EAX,5
    0000C267  50                PUSH     EAX
    0000C268  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000C26B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C26E  5B                POP      EBX
    0000C26F  53                PUSH     EBX
    0000C270  3B C3             CMP      EAX,EBX
    0000C272  0F 8E03000000     JLE      3
    0000C278  EB                JMP      

    LINE      7618

    0000C279  B8 01000000       MOV      EAX,1
    0000C27E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7619

    0000C281  B8 01000000       MOV      EAX,1
    0000C286  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7620

    0000C289  B8 01000000       MOV      EAX,1
    0000C28E  8B C8             MOV      ECX,EAX
    0000C290  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C293  48                DEC      EAX
    0000C294  BB 0E000000       MOV      EBX,14
    0000C299  F7 E3             MUL      EBX
    0000C29B  50                PUSH     EAX
    0000C29C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C29F  48                DEC      EAX
    0000C2A0  BB 02000000       MOV      EBX,2
    0000C2A5  F7 E3             MUL      EBX
    0000C2A7  5B                POP      EBX
    0000C2A8  03 C3             ADD      EAX,EBX
    0000C2AA  8B F8             MOV      EDI,EAX
    0000C2AC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7621

    0000C2B0  B8 01000000       MOV      EAX,1
    0000C2B5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7622

    0000C2B8  B8 01000000       MOV      EAX,1
    0000C2BD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7624

    0000C2C0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000C2C7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000C2CC  5B                POP      EBX

    LINE      7626

    0000C2CD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000C2D4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000C2D9  5B                POP      EBX

    LINE      7628

    0000C2DA  B8 0A000000       MOV      EAX,10
    0000C2DF  40                INC      EAX
    0000C2E0  50                PUSH     EAX
    0000C2E1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C2E4  5B                POP      EBX
    0000C2E5  3B C3             CMP      EAX,EBX
    0000C2E7  0F 8503000000     JNE      3
    0000C2ED  EB                JMP      

    LINE      7636

    0000C2EE  B8 01000000       MOV      EAX,1
    0000C2F3  8B C8             MOV      ECX,EAX
    0000C2F5  B8 0A000000       MOV      EAX,10
    0000C2FA  50                PUSH     EAX
    0000C2FB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000C2FE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C301  5B                POP      EBX
    0000C302  53                PUSH     EBX
    0000C303  3B C3             CMP      EAX,EBX
    0000C305  0F 8E03000000     JLE      3
    0000C30B  EB                JMP      

    LINE      7638

    0000C30C  B8 01000000       MOV      EAX,1
    0000C311  8B C8             MOV      ECX,EAX
    0000C313  B8 05000000       MOV      EAX,5
    0000C318  50                PUSH     EAX
    0000C319  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000C31C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C31F  5B                POP      EBX
    0000C320  53                PUSH     EBX
    0000C321  3B C3             CMP      EAX,EBX
    0000C323  0F 8E03000000     JLE      3
    0000C329  EB                JMP      

    LINE      7645

    0000C32A  B8 01000000       MOV      EAX,1
    0000C32F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7646

    0000C335  B8 01000000       MOV      EAX,1
    0000C33A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7647

    0000C340  B8 01000000       MOV      EAX,1
    0000C345  8B C8             MOV      ECX,EAX
    0000C347  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C34A  48                DEC      EAX
    0000C34B  BB 0E000000       MOV      EBX,14
    0000C350  F7 E3             MUL      EBX
    0000C352  50                PUSH     EAX
    0000C353  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C356  48                DEC      EAX
    0000C357  BB 02000000       MOV      EBX,2
    0000C35C  F7 E3             MUL      EBX
    0000C35E  5B                POP      EBX
    0000C35F  03 C3             ADD      EAX,EBX
    0000C361  8B F8             MOV      EDI,EAX
    0000C363  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7648

    0000C36A  B8 01000000       MOV      EAX,1
    0000C36F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7649

    0000C375  B8 01000000       MOV      EAX,1
    0000C37A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7651

    0000C380  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000C387  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000C38C  5B                POP      EBX

    LINE      7653

    0000C38D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000C394  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000C399  5B                POP      EBX

    LINE      7655

    0000C39A  B8 0A000000       MOV      EAX,10
    0000C39F  40                INC      EAX
    0000C3A0  50                PUSH     EAX
    0000C3A1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C3A4  5B                POP      EBX
    0000C3A5  3B C3             CMP      EAX,EBX
    0000C3A7  0F 8503000000     JNE      3
    0000C3AD  EB                JMP      

    LINE      7662

    0000C3AE  B8 01000000       MOV      EAX,1
    0000C3B3  8B C8             MOV      ECX,EAX
    0000C3B5  B8 0A000000       MOV      EAX,10
    0000C3BA  50                PUSH     EAX
    0000C3BB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000C3BE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C3C1  5B                POP      EBX
    0000C3C2  53                PUSH     EBX
    0000C3C3  3B C3             CMP      EAX,EBX
    0000C3C5  0F 8E03000000     JLE      3
    0000C3CB  EB                JMP      

    LINE      7664

    0000C3CC  B8 01000000       MOV      EAX,1
    0000C3D1  8B C8             MOV      ECX,EAX
    0000C3D3  B8 05000000       MOV      EAX,5
    0000C3D8  50                PUSH     EAX
    0000C3D9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000C3DC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C3DF  5B                POP      EBX
    0000C3E0  53                PUSH     EBX
    0000C3E1  3B C3             CMP      EAX,EBX
    0000C3E3  0F 8E03000000     JLE      3
    0000C3E9  EB                JMP      

    LINE      7671

    0000C3EA  B8 01000000       MOV      EAX,1
    0000C3EF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7672

    0000C3F5  B8 01000000       MOV      EAX,1
    0000C3FA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7673

    0000C400  B8 01000000       MOV      EAX,1
    0000C405  8B C8             MOV      ECX,EAX
    0000C407  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C40A  48                DEC      EAX
    0000C40B  BB 0E000000       MOV      EBX,14
    0000C410  F7 E3             MUL      EBX
    0000C412  50                PUSH     EAX
    0000C413  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C416  48                DEC      EAX
    0000C417  BB 02000000       MOV      EBX,2
    0000C41C  F7 E3             MUL      EBX
    0000C41E  5B                POP      EBX
    0000C41F  03 C3             ADD      EAX,EBX
    0000C421  8B F8             MOV      EDI,EAX
    0000C423  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7674

    0000C42A  B8 01000000       MOV      EAX,1
    0000C42F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7675

    0000C435  B8 01000000       MOV      EAX,1
    0000C43A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7677

    0000C440  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000C447  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000C44C  5B                POP      EBX

    LINE      7679

    0000C44D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000C454  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000C459  5B                POP      EBX

    LINE      7681

    0000C45A  B8 0A000000       MOV      EAX,10
    0000C45F  40                INC      EAX
    0000C460  50                PUSH     EAX
    0000C461  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C464  5B                POP      EBX
    0000C465  3B C3             CMP      EAX,EBX
    0000C467  0F 8503000000     JNE      3
    0000C46D  EB                JMP      

    LINE      7695

    0000C46E  56                PUSH     ESI
    0000C46F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000C475  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000C47B  FF D1             CALL     ECX                       run_inner_proc
    0000C47D  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7697

    0000C47E  B8 01000000       MOV      EAX,1
    0000C483  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7699

    0000C486  B8 01000000       MOV      EAX,1
    0000C48B  8B C8             MOV      ECX,EAX
    0000C48D  B8 0A000000       MOV      EAX,10
    0000C492  50                PUSH     EAX
    0000C493  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000C496  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C499  5B                POP      EBX
    0000C49A  53                PUSH     EBX
    0000C49B  3B C3             CMP      EAX,EBX
    0000C49D  0F 8E03000000     JLE      3
    0000C4A3  EB                JMP      

    LINE      7701

    0000C4A4  B8 01000000       MOV      EAX,1
    0000C4A9  8B C8             MOV      ECX,EAX
    0000C4AB  B8 05000000       MOV      EAX,5
    0000C4B0  50                PUSH     EAX
    0000C4B1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000C4B4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C4B7  5B                POP      EBX
    0000C4B8  53                PUSH     EBX
    0000C4B9  3B C3             CMP      EAX,EBX
    0000C4BB  0F 8E03000000     JLE      3
    0000C4C1  EB                JMP      

    LINE      7708

    0000C4C2  B8 01000000       MOV      EAX,1
    0000C4C7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7709

    0000C4CA  B8 01000000       MOV      EAX,1
    0000C4CF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7710

    0000C4D2  B8 01000000       MOV      EAX,1
    0000C4D7  8B C8             MOV      ECX,EAX
    0000C4D9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C4DC  48                DEC      EAX
    0000C4DD  BB 0E000000       MOV      EBX,14
    0000C4E2  F7 E3             MUL      EBX
    0000C4E4  50                PUSH     EAX
    0000C4E5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C4E8  48                DEC      EAX
    0000C4E9  BB 02000000       MOV      EBX,2
    0000C4EE  F7 E3             MUL      EBX
    0000C4F0  5B                POP      EBX
    0000C4F1  03 C3             ADD      EAX,EBX
    0000C4F3  8B F8             MOV      EDI,EAX
    0000C4F5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7711

    0000C4F9  B8 01000000       MOV      EAX,1
    0000C4FE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7712

    0000C501  B8 01000000       MOV      EAX,1
    0000C506  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7714

    0000C509  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000C510  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000C515  5B                POP      EBX

    LINE      7716

    0000C516  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000C51D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000C522  5B                POP      EBX

    LINE      7718

    0000C523  B8 0A000000       MOV      EAX,10
    0000C528  40                INC      EAX
    0000C529  50                PUSH     EAX
    0000C52A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C52D  5B                POP      EBX
    0000C52E  3B C3             CMP      EAX,EBX
    0000C530  0F 8503000000     JNE      3
    0000C536  EB                JMP      

    LINE      7725

    0000C537  B8 01000000       MOV      EAX,1
    0000C53C  8B C8             MOV      ECX,EAX
    0000C53E  B8 0A000000       MOV      EAX,10
    0000C543  50                PUSH     EAX
    0000C544  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000C547  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C54A  5B                POP      EBX
    0000C54B  53                PUSH     EBX
    0000C54C  3B C3             CMP      EAX,EBX
    0000C54E  0F 8E03000000     JLE      3
    0000C554  EB                JMP      

    LINE      7727

    0000C555  B8 01000000       MOV      EAX,1
    0000C55A  8B C8             MOV      ECX,EAX
    0000C55C  B8 05000000       MOV      EAX,5
    0000C561  50                PUSH     EAX
    0000C562  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000C565  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C568  5B                POP      EBX
    0000C569  53                PUSH     EBX
    0000C56A  3B C3             CMP      EAX,EBX
    0000C56C  0F 8E03000000     JLE      3
    0000C572  EB                JMP      

    LINE      7734

    0000C573  B8 01000000       MOV      EAX,1
    0000C578  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7735

    0000C57B  B8 01000000       MOV      EAX,1
    0000C580  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7736

    0000C583  B8 01000000       MOV      EAX,1
    0000C588  8B C8             MOV      ECX,EAX
    0000C58A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C58D  48                DEC      EAX
    0000C58E  BB 0E000000       MOV      EBX,14
    0000C593  F7 E3             MUL      EBX
    0000C595  50                PUSH     EAX
    0000C596  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C599  48                DEC      EAX
    0000C59A  BB 02000000       MOV      EBX,2
    0000C59F  F7 E3             MUL      EBX
    0000C5A1  5B                POP      EBX
    0000C5A2  03 C3             ADD      EAX,EBX
    0000C5A4  8B F8             MOV      EDI,EAX
    0000C5A6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7737

    0000C5AA  B8 01000000       MOV      EAX,1
    0000C5AF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7738

    0000C5B2  B8 01000000       MOV      EAX,1
    0000C5B7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7740

    0000C5BA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000C5C1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000C5C6  5B                POP      EBX

    LINE      7742

    0000C5C7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000C5CE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000C5D3  5B                POP      EBX

    LINE      7744

    0000C5D4  B8 0A000000       MOV      EAX,10
    0000C5D9  40                INC      EAX
    0000C5DA  50                PUSH     EAX
    0000C5DB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C5DE  5B                POP      EBX
    0000C5DF  3B C3             CMP      EAX,EBX
    0000C5E1  0F 8503000000     JNE      3
    0000C5E7  EB                JMP      

    LINE      7752

    0000C5E8  B8 01000000       MOV      EAX,1
    0000C5ED  8B C8             MOV      ECX,EAX
    0000C5EF  B8 0A000000       MOV      EAX,10
    0000C5F4  50                PUSH     EAX
    0000C5F5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000C5F8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C5FB  5B                POP      EBX
    0000C5FC  53                PUSH     EBX
    0000C5FD  3B C3             CMP      EAX,EBX
    0000C5FF  0F 8E03000000     JLE      3
    0000C605  EB                JMP      

    LINE      7754

    0000C606  B8 01000000       MOV      EAX,1
    0000C60B  8B C8             MOV      ECX,EAX
    0000C60D  B8 05000000       MOV      EAX,5
    0000C612  50                PUSH     EAX
    0000C613  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000C616  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C619  5B                POP      EBX
    0000C61A  53                PUSH     EBX
    0000C61B  3B C3             CMP      EAX,EBX
    0000C61D  0F 8E03000000     JLE      3
    0000C623  EB                JMP      

    LINE      7761

    0000C624  B8 01000000       MOV      EAX,1
    0000C629  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7762

    0000C62F  B8 01000000       MOV      EAX,1
    0000C634  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7763

    0000C63A  B8 01000000       MOV      EAX,1
    0000C63F  8B C8             MOV      ECX,EAX
    0000C641  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C644  48                DEC      EAX
    0000C645  BB 0E000000       MOV      EBX,14
    0000C64A  F7 E3             MUL      EBX
    0000C64C  50                PUSH     EAX
    0000C64D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C650  48                DEC      EAX
    0000C651  BB 02000000       MOV      EBX,2
    0000C656  F7 E3             MUL      EBX
    0000C658  5B                POP      EBX
    0000C659  03 C3             ADD      EAX,EBX
    0000C65B  8B F8             MOV      EDI,EAX
    0000C65D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7764

    0000C664  B8 01000000       MOV      EAX,1
    0000C669  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7765

    0000C66F  B8 01000000       MOV      EAX,1
    0000C674  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7767

    0000C67A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000C681  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000C686  5B                POP      EBX

    LINE      7769

    0000C687  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000C68E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000C693  5B                POP      EBX

    LINE      7771

    0000C694  B8 0A000000       MOV      EAX,10
    0000C699  40                INC      EAX
    0000C69A  50                PUSH     EAX
    0000C69B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C69E  5B                POP      EBX
    0000C69F  3B C3             CMP      EAX,EBX
    0000C6A1  0F 8503000000     JNE      3
    0000C6A7  EB                JMP      

    LINE      7778

    0000C6A8  B8 01000000       MOV      EAX,1
    0000C6AD  8B C8             MOV      ECX,EAX
    0000C6AF  B8 0A000000       MOV      EAX,10
    0000C6B4  50                PUSH     EAX
    0000C6B5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000C6B8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C6BB  5B                POP      EBX
    0000C6BC  53                PUSH     EBX
    0000C6BD  3B C3             CMP      EAX,EBX
    0000C6BF  0F 8E03000000     JLE      3
    0000C6C5  EB                JMP      

    LINE      7780

    0000C6C6  B8 01000000       MOV      EAX,1
    0000C6CB  8B C8             MOV      ECX,EAX
    0000C6CD  B8 05000000       MOV      EAX,5
    0000C6D2  50                PUSH     EAX
    0000C6D3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000C6D6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C6D9  5B                POP      EBX
    0000C6DA  53                PUSH     EBX
    0000C6DB  3B C3             CMP      EAX,EBX
    0000C6DD  0F 8E03000000     JLE      3
    0000C6E3  EB                JMP      

    LINE      7787

    0000C6E4  B8 01000000       MOV      EAX,1
    0000C6E9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7788

    0000C6EF  B8 01000000       MOV      EAX,1
    0000C6F4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7789

    0000C6FA  B8 01000000       MOV      EAX,1
    0000C6FF  8B C8             MOV      ECX,EAX
    0000C701  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C704  48                DEC      EAX
    0000C705  BB 0E000000       MOV      EBX,14
    0000C70A  F7 E3             MUL      EBX
    0000C70C  50                PUSH     EAX
    0000C70D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C710  48                DEC      EAX
    0000C711  BB 02000000       MOV      EBX,2
    0000C716  F7 E3             MUL      EBX
    0000C718  5B                POP      EBX
    0000C719  03 C3             ADD      EAX,EBX
    0000C71B  8B F8             MOV      EDI,EAX
    0000C71D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7790

    0000C724  B8 01000000       MOV      EAX,1
    0000C729  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7791

    0000C72F  B8 01000000       MOV      EAX,1
    0000C734  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7793

    0000C73A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000C741  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000C746  5B                POP      EBX

    LINE      7795

    0000C747  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000C74E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000C753  5B                POP      EBX

    LINE      7797

    0000C754  B8 0A000000       MOV      EAX,10
    0000C759  40                INC      EAX
    0000C75A  50                PUSH     EAX
    0000C75B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C75E  5B                POP      EBX
    0000C75F  3B C3             CMP      EAX,EBX
    0000C761  0F 8503000000     JNE      3
    0000C767  EB                JMP      

    LINE      7811

    0000C768  56                PUSH     ESI
    0000C769  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000C76F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000C775  FF D1             CALL     ECX                       run_inner_proc
    0000C777  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7813

    0000C778  B8 01000000       MOV      EAX,1
    0000C77D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7815

    0000C780  B8 01000000       MOV      EAX,1
    0000C785  8B C8             MOV      ECX,EAX
    0000C787  B8 0A000000       MOV      EAX,10
    0000C78C  50                PUSH     EAX
    0000C78D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000C790  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C793  5B                POP      EBX
    0000C794  53                PUSH     EBX
    0000C795  3B C3             CMP      EAX,EBX
    0000C797  0F 8E03000000     JLE      3
    0000C79D  EB                JMP      

    LINE      7817

    0000C79E  B8 01000000       MOV      EAX,1
    0000C7A3  8B C8             MOV      ECX,EAX
    0000C7A5  B8 05000000       MOV      EAX,5
    0000C7AA  50                PUSH     EAX
    0000C7AB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000C7AE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C7B1  5B                POP      EBX
    0000C7B2  53                PUSH     EBX
    0000C7B3  3B C3             CMP      EAX,EBX
    0000C7B5  0F 8E03000000     JLE      3
    0000C7BB  EB                JMP      

    LINE      7824

    0000C7BC  B8 01000000       MOV      EAX,1
    0000C7C1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7825

    0000C7C4  B8 01000000       MOV      EAX,1
    0000C7C9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7826

    0000C7CC  B8 01000000       MOV      EAX,1
    0000C7D1  8B C8             MOV      ECX,EAX
    0000C7D3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C7D6  48                DEC      EAX
    0000C7D7  BB 0E000000       MOV      EBX,14
    0000C7DC  F7 E3             MUL      EBX
    0000C7DE  50                PUSH     EAX
    0000C7DF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C7E2  48                DEC      EAX
    0000C7E3  BB 02000000       MOV      EBX,2
    0000C7E8  F7 E3             MUL      EBX
    0000C7EA  5B                POP      EBX
    0000C7EB  03 C3             ADD      EAX,EBX
    0000C7ED  8B F8             MOV      EDI,EAX
    0000C7EF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7827

    0000C7F3  B8 01000000       MOV      EAX,1
    0000C7F8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7828

    0000C7FB  B8 01000000       MOV      EAX,1
    0000C800  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7830

    0000C803  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000C80A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000C80F  5B                POP      EBX

    LINE      7832

    0000C810  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000C817  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000C81C  5B                POP      EBX

    LINE      7834

    0000C81D  B8 0A000000       MOV      EAX,10
    0000C822  40                INC      EAX
    0000C823  50                PUSH     EAX
    0000C824  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C827  5B                POP      EBX
    0000C828  3B C3             CMP      EAX,EBX
    0000C82A  0F 8503000000     JNE      3
    0000C830  EB                JMP      

    LINE      7841

    0000C831  B8 01000000       MOV      EAX,1
    0000C836  8B C8             MOV      ECX,EAX
    0000C838  B8 0A000000       MOV      EAX,10
    0000C83D  50                PUSH     EAX
    0000C83E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000C841  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C844  5B                POP      EBX
    0000C845  53                PUSH     EBX
    0000C846  3B C3             CMP      EAX,EBX
    0000C848  0F 8E03000000     JLE      3
    0000C84E  EB                JMP      

    LINE      7843

    0000C84F  B8 01000000       MOV      EAX,1
    0000C854  8B C8             MOV      ECX,EAX
    0000C856  B8 05000000       MOV      EAX,5
    0000C85B  50                PUSH     EAX
    0000C85C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000C85F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C862  5B                POP      EBX
    0000C863  53                PUSH     EBX
    0000C864  3B C3             CMP      EAX,EBX
    0000C866  0F 8E03000000     JLE      3
    0000C86C  EB                JMP      

    LINE      7850

    0000C86D  B8 01000000       MOV      EAX,1
    0000C872  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7851

    0000C875  B8 01000000       MOV      EAX,1
    0000C87A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7852

    0000C87D  B8 01000000       MOV      EAX,1
    0000C882  8B C8             MOV      ECX,EAX
    0000C884  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C887  48                DEC      EAX
    0000C888  BB 0E000000       MOV      EBX,14
    0000C88D  F7 E3             MUL      EBX
    0000C88F  50                PUSH     EAX
    0000C890  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C893  48                DEC      EAX
    0000C894  BB 02000000       MOV      EBX,2
    0000C899  F7 E3             MUL      EBX
    0000C89B  5B                POP      EBX
    0000C89C  03 C3             ADD      EAX,EBX
    0000C89E  8B F8             MOV      EDI,EAX
    0000C8A0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7853

    0000C8A4  B8 01000000       MOV      EAX,1
    0000C8A9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7854

    0000C8AC  B8 01000000       MOV      EAX,1
    0000C8B1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7856

    0000C8B4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000C8BB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000C8C0  5B                POP      EBX

    LINE      7858

    0000C8C1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000C8C8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000C8CD  5B                POP      EBX

    LINE      7860

    0000C8CE  B8 0A000000       MOV      EAX,10
    0000C8D3  40                INC      EAX
    0000C8D4  50                PUSH     EAX
    0000C8D5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C8D8  5B                POP      EBX
    0000C8D9  3B C3             CMP      EAX,EBX
    0000C8DB  0F 8503000000     JNE      3
    0000C8E1  EB                JMP      

    LINE      7868

    0000C8E2  B8 01000000       MOV      EAX,1
    0000C8E7  8B C8             MOV      ECX,EAX
    0000C8E9  B8 0A000000       MOV      EAX,10
    0000C8EE  50                PUSH     EAX
    0000C8EF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000C8F2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C8F5  5B                POP      EBX
    0000C8F6  53                PUSH     EBX
    0000C8F7  3B C3             CMP      EAX,EBX
    0000C8F9  0F 8E03000000     JLE      3
    0000C8FF  EB                JMP      

    LINE      7870

    0000C900  B8 01000000       MOV      EAX,1
    0000C905  8B C8             MOV      ECX,EAX
    0000C907  B8 05000000       MOV      EAX,5
    0000C90C  50                PUSH     EAX
    0000C90D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000C910  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C913  5B                POP      EBX
    0000C914  53                PUSH     EBX
    0000C915  3B C3             CMP      EAX,EBX
    0000C917  0F 8E03000000     JLE      3
    0000C91D  EB                JMP      

    LINE      7877

    0000C91E  B8 01000000       MOV      EAX,1
    0000C923  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7878

    0000C929  B8 01000000       MOV      EAX,1
    0000C92E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7879

    0000C934  B8 01000000       MOV      EAX,1
    0000C939  8B C8             MOV      ECX,EAX
    0000C93B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C93E  48                DEC      EAX
    0000C93F  BB 0E000000       MOV      EBX,14
    0000C944  F7 E3             MUL      EBX
    0000C946  50                PUSH     EAX
    0000C947  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000C94A  48                DEC      EAX
    0000C94B  BB 02000000       MOV      EBX,2
    0000C950  F7 E3             MUL      EBX
    0000C952  5B                POP      EBX
    0000C953  03 C3             ADD      EAX,EBX
    0000C955  8B F8             MOV      EDI,EAX
    0000C957  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7880

    0000C95E  B8 01000000       MOV      EAX,1
    0000C963  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7881

    0000C969  B8 01000000       MOV      EAX,1
    0000C96E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7883

    0000C974  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000C97B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000C980  5B                POP      EBX

    LINE      7885

    0000C981  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000C988  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000C98D  5B                POP      EBX

    LINE      7887

    0000C98E  B8 0A000000       MOV      EAX,10
    0000C993  40                INC      EAX
    0000C994  50                PUSH     EAX
    0000C995  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000C998  5B                POP      EBX
    0000C999  3B C3             CMP      EAX,EBX
    0000C99B  0F 8503000000     JNE      3
    0000C9A1  EB                JMP      

    LINE      7894

    0000C9A2  B8 01000000       MOV      EAX,1
    0000C9A7  8B C8             MOV      ECX,EAX
    0000C9A9  B8 0A000000       MOV      EAX,10
    0000C9AE  50                PUSH     EAX
    0000C9AF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000C9B2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C9B5  5B                POP      EBX
    0000C9B6  53                PUSH     EBX
    0000C9B7  3B C3             CMP      EAX,EBX
    0000C9B9  0F 8E03000000     JLE      3
    0000C9BF  EB                JMP      

    LINE      7896

    0000C9C0  B8 01000000       MOV      EAX,1
    0000C9C5  8B C8             MOV      ECX,EAX
    0000C9C7  B8 05000000       MOV      EAX,5
    0000C9CC  50                PUSH     EAX
    0000C9CD  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000C9D0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000C9D3  5B                POP      EBX
    0000C9D4  53                PUSH     EBX
    0000C9D5  3B C3             CMP      EAX,EBX
    0000C9D7  0F 8E03000000     JLE      3
    0000C9DD  EB                JMP      

    LINE      7903

    0000C9DE  B8 01000000       MOV      EAX,1
    0000C9E3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7904

    0000C9E9  B8 01000000       MOV      EAX,1
    0000C9EE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7905

    0000C9F4  B8 01000000       MOV      EAX,1
    0000C9F9  8B C8             MOV      ECX,EAX
    0000C9FB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000C9FE  48                DEC      EAX
    0000C9FF  BB 0E000000       MOV      EBX,14
    0000CA04  F7 E3             MUL      EBX
    0000CA06  50                PUSH     EAX
    0000CA07  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CA0A  48                DEC      EAX
    0000CA0B  BB 02000000       MOV      EBX,2
    0000CA10  F7 E3             MUL      EBX
    0000CA12  5B                POP      EBX
    0000CA13  03 C3             ADD      EAX,EBX
    0000CA15  8B F8             MOV      EDI,EAX
    0000CA17  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7906

    0000CA1E  B8 01000000       MOV      EAX,1
    0000CA23  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7907

    0000CA29  B8 01000000       MOV      EAX,1
    0000CA2E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7909

    0000CA34  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000CA3B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000CA40  5B                POP      EBX

    LINE      7911

    0000CA41  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000CA48  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000CA4D  5B                POP      EBX

    LINE      7913

    0000CA4E  B8 0A000000       MOV      EAX,10
    0000CA53  40                INC      EAX
    0000CA54  50                PUSH     EAX
    0000CA55  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CA58  5B                POP      EBX
    0000CA59  3B C3             CMP      EAX,EBX
    0000CA5B  0F 8503000000     JNE      3
    0000CA61  EB                JMP      

    LINE      7927

    0000CA62  56                PUSH     ESI
    0000CA63  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000CA69  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000CA6F  FF D1             CALL     ECX                       run_inner_proc
    0000CA71  5E                POP      ESI                       /* restore callers static pointer */

    LINE      7929

    0000CA72  B8 01000000       MOV      EAX,1
    0000CA77  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      7931

    0000CA7A  B8 01000000       MOV      EAX,1
    0000CA7F  8B C8             MOV      ECX,EAX
    0000CA81  B8 0A000000       MOV      EAX,10
    0000CA86  50                PUSH     EAX
    0000CA87  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000CA8A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CA8D  5B                POP      EBX
    0000CA8E  53                PUSH     EBX
    0000CA8F  3B C3             CMP      EAX,EBX
    0000CA91  0F 8E03000000     JLE      3
    0000CA97  EB                JMP      

    LINE      7933

    0000CA98  B8 01000000       MOV      EAX,1
    0000CA9D  8B C8             MOV      ECX,EAX
    0000CA9F  B8 05000000       MOV      EAX,5
    0000CAA4  50                PUSH     EAX
    0000CAA5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000CAA8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CAAB  5B                POP      EBX
    0000CAAC  53                PUSH     EBX
    0000CAAD  3B C3             CMP      EAX,EBX
    0000CAAF  0F 8E03000000     JLE      3
    0000CAB5  EB                JMP      

    LINE      7940

    0000CAB6  B8 01000000       MOV      EAX,1
    0000CABB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7941

    0000CABE  B8 01000000       MOV      EAX,1
    0000CAC3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7942

    0000CAC6  B8 01000000       MOV      EAX,1
    0000CACB  8B C8             MOV      ECX,EAX
    0000CACD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CAD0  48                DEC      EAX
    0000CAD1  BB 0E000000       MOV      EBX,14
    0000CAD6  F7 E3             MUL      EBX
    0000CAD8  50                PUSH     EAX
    0000CAD9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CADC  48                DEC      EAX
    0000CADD  BB 02000000       MOV      EBX,2
    0000CAE2  F7 E3             MUL      EBX
    0000CAE4  5B                POP      EBX
    0000CAE5  03 C3             ADD      EAX,EBX
    0000CAE7  8B F8             MOV      EDI,EAX
    0000CAE9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7943

    0000CAED  B8 01000000       MOV      EAX,1
    0000CAF2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7944

    0000CAF5  B8 01000000       MOV      EAX,1
    0000CAFA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7946

    0000CAFD  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000CB04  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000CB09  5B                POP      EBX

    LINE      7948

    0000CB0A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000CB11  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000CB16  5B                POP      EBX

    LINE      7950

    0000CB17  B8 0A000000       MOV      EAX,10
    0000CB1C  40                INC      EAX
    0000CB1D  50                PUSH     EAX
    0000CB1E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CB21  5B                POP      EBX
    0000CB22  3B C3             CMP      EAX,EBX
    0000CB24  0F 8503000000     JNE      3
    0000CB2A  EB                JMP      

    LINE      7957

    0000CB2B  B8 01000000       MOV      EAX,1
    0000CB30  8B C8             MOV      ECX,EAX
    0000CB32  B8 0A000000       MOV      EAX,10
    0000CB37  50                PUSH     EAX
    0000CB38  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000CB3B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CB3E  5B                POP      EBX
    0000CB3F  53                PUSH     EBX
    0000CB40  3B C3             CMP      EAX,EBX
    0000CB42  0F 8E03000000     JLE      3
    0000CB48  EB                JMP      

    LINE      7959

    0000CB49  B8 01000000       MOV      EAX,1
    0000CB4E  8B C8             MOV      ECX,EAX
    0000CB50  B8 05000000       MOV      EAX,5
    0000CB55  50                PUSH     EAX
    0000CB56  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000CB59  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CB5C  5B                POP      EBX
    0000CB5D  53                PUSH     EBX
    0000CB5E  3B C3             CMP      EAX,EBX
    0000CB60  0F 8E03000000     JLE      3
    0000CB66  EB                JMP      

    LINE      7966

    0000CB67  B8 01000000       MOV      EAX,1
    0000CB6C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7967

    0000CB6F  B8 01000000       MOV      EAX,1
    0000CB74  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7968

    0000CB77  B8 01000000       MOV      EAX,1
    0000CB7C  8B C8             MOV      ECX,EAX
    0000CB7E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CB81  48                DEC      EAX
    0000CB82  BB 0E000000       MOV      EBX,14
    0000CB87  F7 E3             MUL      EBX
    0000CB89  50                PUSH     EAX
    0000CB8A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CB8D  48                DEC      EAX
    0000CB8E  BB 02000000       MOV      EBX,2
    0000CB93  F7 E3             MUL      EBX
    0000CB95  5B                POP      EBX
    0000CB96  03 C3             ADD      EAX,EBX
    0000CB98  8B F8             MOV      EDI,EAX
    0000CB9A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      7969

    0000CB9E  B8 01000000       MOV      EAX,1
    0000CBA3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7970

    0000CBA6  B8 01000000       MOV      EAX,1
    0000CBAB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      7972

    0000CBAE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000CBB5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000CBBA  5B                POP      EBX

    LINE      7974

    0000CBBB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000CBC2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000CBC7  5B                POP      EBX

    LINE      7976

    0000CBC8  B8 0A000000       MOV      EAX,10
    0000CBCD  40                INC      EAX
    0000CBCE  50                PUSH     EAX
    0000CBCF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CBD2  5B                POP      EBX
    0000CBD3  3B C3             CMP      EAX,EBX
    0000CBD5  0F 8503000000     JNE      3
    0000CBDB  EB                JMP      

    LINE      7984

    0000CBDC  B8 01000000       MOV      EAX,1
    0000CBE1  8B C8             MOV      ECX,EAX
    0000CBE3  B8 0A000000       MOV      EAX,10
    0000CBE8  50                PUSH     EAX
    0000CBE9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000CBEC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CBEF  5B                POP      EBX
    0000CBF0  53                PUSH     EBX
    0000CBF1  3B C3             CMP      EAX,EBX
    0000CBF3  0F 8E03000000     JLE      3
    0000CBF9  EB                JMP      

    LINE      7986

    0000CBFA  B8 01000000       MOV      EAX,1
    0000CBFF  8B C8             MOV      ECX,EAX
    0000CC01  B8 05000000       MOV      EAX,5
    0000CC06  50                PUSH     EAX
    0000CC07  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000CC0A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CC0D  5B                POP      EBX
    0000CC0E  53                PUSH     EBX
    0000CC0F  3B C3             CMP      EAX,EBX
    0000CC11  0F 8E03000000     JLE      3
    0000CC17  EB                JMP      

    LINE      7993

    0000CC18  B8 01000000       MOV      EAX,1
    0000CC1D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7994

    0000CC23  B8 01000000       MOV      EAX,1
    0000CC28  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7995

    0000CC2E  B8 01000000       MOV      EAX,1
    0000CC33  8B C8             MOV      ECX,EAX
    0000CC35  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CC38  48                DEC      EAX
    0000CC39  BB 0E000000       MOV      EBX,14
    0000CC3E  F7 E3             MUL      EBX
    0000CC40  50                PUSH     EAX
    0000CC41  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CC44  48                DEC      EAX
    0000CC45  BB 02000000       MOV      EBX,2
    0000CC4A  F7 E3             MUL      EBX
    0000CC4C  5B                POP      EBX
    0000CC4D  03 C3             ADD      EAX,EBX
    0000CC4F  8B F8             MOV      EDI,EAX
    0000CC51  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      7996

    0000CC58  B8 01000000       MOV      EAX,1
    0000CC5D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7997

    0000CC63  B8 01000000       MOV      EAX,1
    0000CC68  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      7999

    0000CC6E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000CC75  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000CC7A  5B                POP      EBX

    LINE      8001

    0000CC7B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000CC82  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000CC87  5B                POP      EBX

    LINE      8003

    0000CC88  B8 0A000000       MOV      EAX,10
    0000CC8D  40                INC      EAX
    0000CC8E  50                PUSH     EAX
    0000CC8F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CC92  5B                POP      EBX
    0000CC93  3B C3             CMP      EAX,EBX
    0000CC95  0F 8503000000     JNE      3
    0000CC9B  EB                JMP      

    LINE      8010

    0000CC9C  B8 01000000       MOV      EAX,1
    0000CCA1  8B C8             MOV      ECX,EAX
    0000CCA3  B8 0A000000       MOV      EAX,10
    0000CCA8  50                PUSH     EAX
    0000CCA9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000CCAC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CCAF  5B                POP      EBX
    0000CCB0  53                PUSH     EBX
    0000CCB1  3B C3             CMP      EAX,EBX
    0000CCB3  0F 8E03000000     JLE      3
    0000CCB9  EB                JMP      

    LINE      8012

    0000CCBA  B8 01000000       MOV      EAX,1
    0000CCBF  8B C8             MOV      ECX,EAX
    0000CCC1  B8 05000000       MOV      EAX,5
    0000CCC6  50                PUSH     EAX
    0000CCC7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000CCCA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CCCD  5B                POP      EBX
    0000CCCE  53                PUSH     EBX
    0000CCCF  3B C3             CMP      EAX,EBX
    0000CCD1  0F 8E03000000     JLE      3
    0000CCD7  EB                JMP      

    LINE      8019

    0000CCD8  B8 01000000       MOV      EAX,1
    0000CCDD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8020

    0000CCE3  B8 01000000       MOV      EAX,1
    0000CCE8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8021

    0000CCEE  B8 01000000       MOV      EAX,1
    0000CCF3  8B C8             MOV      ECX,EAX
    0000CCF5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CCF8  48                DEC      EAX
    0000CCF9  BB 0E000000       MOV      EBX,14
    0000CCFE  F7 E3             MUL      EBX
    0000CD00  50                PUSH     EAX
    0000CD01  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CD04  48                DEC      EAX
    0000CD05  BB 02000000       MOV      EBX,2
    0000CD0A  F7 E3             MUL      EBX
    0000CD0C  5B                POP      EBX
    0000CD0D  03 C3             ADD      EAX,EBX
    0000CD0F  8B F8             MOV      EDI,EAX
    0000CD11  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8022

    0000CD18  B8 01000000       MOV      EAX,1
    0000CD1D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8023

    0000CD23  B8 01000000       MOV      EAX,1
    0000CD28  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8025

    0000CD2E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000CD35  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000CD3A  5B                POP      EBX

    LINE      8027

    0000CD3B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000CD42  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000CD47  5B                POP      EBX

    LINE      8029

    0000CD48  B8 0A000000       MOV      EAX,10
    0000CD4D  40                INC      EAX
    0000CD4E  50                PUSH     EAX
    0000CD4F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CD52  5B                POP      EBX
    0000CD53  3B C3             CMP      EAX,EBX
    0000CD55  0F 8503000000     JNE      3
    0000CD5B  EB                JMP      

    LINE      8043

    0000CD5C  56                PUSH     ESI
    0000CD5D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000CD63  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000CD69  FF D1             CALL     ECX                       run_inner_proc
    0000CD6B  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8045

    0000CD6C  B8 01000000       MOV      EAX,1
    0000CD71  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8047

    0000CD74  B8 01000000       MOV      EAX,1
    0000CD79  8B C8             MOV      ECX,EAX
    0000CD7B  B8 0A000000       MOV      EAX,10
    0000CD80  50                PUSH     EAX
    0000CD81  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000CD84  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CD87  5B                POP      EBX
    0000CD88  53                PUSH     EBX
    0000CD89  3B C3             CMP      EAX,EBX
    0000CD8B  0F 8E03000000     JLE      3
    0000CD91  EB                JMP      

    LINE      8049

    0000CD92  B8 01000000       MOV      EAX,1
    0000CD97  8B C8             MOV      ECX,EAX
    0000CD99  B8 05000000       MOV      EAX,5
    0000CD9E  50                PUSH     EAX
    0000CD9F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000CDA2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CDA5  5B                POP      EBX
    0000CDA6  53                PUSH     EBX
    0000CDA7  3B C3             CMP      EAX,EBX
    0000CDA9  0F 8E03000000     JLE      3
    0000CDAF  EB                JMP      

    LINE      8056

    0000CDB0  B8 01000000       MOV      EAX,1
    0000CDB5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8057

    0000CDB8  B8 01000000       MOV      EAX,1
    0000CDBD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8058

    0000CDC0  B8 01000000       MOV      EAX,1
    0000CDC5  8B C8             MOV      ECX,EAX
    0000CDC7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CDCA  48                DEC      EAX
    0000CDCB  BB 0E000000       MOV      EBX,14
    0000CDD0  F7 E3             MUL      EBX
    0000CDD2  50                PUSH     EAX
    0000CDD3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CDD6  48                DEC      EAX
    0000CDD7  BB 02000000       MOV      EBX,2
    0000CDDC  F7 E3             MUL      EBX
    0000CDDE  5B                POP      EBX
    0000CDDF  03 C3             ADD      EAX,EBX
    0000CDE1  8B F8             MOV      EDI,EAX
    0000CDE3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8059

    0000CDE7  B8 01000000       MOV      EAX,1
    0000CDEC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8060

    0000CDEF  B8 01000000       MOV      EAX,1
    0000CDF4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8062

    0000CDF7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000CDFE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000CE03  5B                POP      EBX

    LINE      8064

    0000CE04  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000CE0B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000CE10  5B                POP      EBX

    LINE      8066

    0000CE11  B8 0A000000       MOV      EAX,10
    0000CE16  40                INC      EAX
    0000CE17  50                PUSH     EAX
    0000CE18  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CE1B  5B                POP      EBX
    0000CE1C  3B C3             CMP      EAX,EBX
    0000CE1E  0F 8503000000     JNE      3
    0000CE24  EB                JMP      

    LINE      8073

    0000CE25  B8 01000000       MOV      EAX,1
    0000CE2A  8B C8             MOV      ECX,EAX
    0000CE2C  B8 0A000000       MOV      EAX,10
    0000CE31  50                PUSH     EAX
    0000CE32  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000CE35  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CE38  5B                POP      EBX
    0000CE39  53                PUSH     EBX
    0000CE3A  3B C3             CMP      EAX,EBX
    0000CE3C  0F 8E03000000     JLE      3
    0000CE42  EB                JMP      

    LINE      8075

    0000CE43  B8 01000000       MOV      EAX,1
    0000CE48  8B C8             MOV      ECX,EAX
    0000CE4A  B8 05000000       MOV      EAX,5
    0000CE4F  50                PUSH     EAX
    0000CE50  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000CE53  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CE56  5B                POP      EBX
    0000CE57  53                PUSH     EBX
    0000CE58  3B C3             CMP      EAX,EBX
    0000CE5A  0F 8E03000000     JLE      3
    0000CE60  EB                JMP      

    LINE      8082

    0000CE61  B8 01000000       MOV      EAX,1
    0000CE66  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8083

    0000CE69  B8 01000000       MOV      EAX,1
    0000CE6E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8084

    0000CE71  B8 01000000       MOV      EAX,1
    0000CE76  8B C8             MOV      ECX,EAX
    0000CE78  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CE7B  48                DEC      EAX
    0000CE7C  BB 0E000000       MOV      EBX,14
    0000CE81  F7 E3             MUL      EBX
    0000CE83  50                PUSH     EAX
    0000CE84  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CE87  48                DEC      EAX
    0000CE88  BB 02000000       MOV      EBX,2
    0000CE8D  F7 E3             MUL      EBX
    0000CE8F  5B                POP      EBX
    0000CE90  03 C3             ADD      EAX,EBX
    0000CE92  8B F8             MOV      EDI,EAX
    0000CE94  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8085

    0000CE98  B8 01000000       MOV      EAX,1
    0000CE9D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8086

    0000CEA0  B8 01000000       MOV      EAX,1
    0000CEA5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8088

    0000CEA8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000CEAF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000CEB4  5B                POP      EBX

    LINE      8090

    0000CEB5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000CEBC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000CEC1  5B                POP      EBX

    LINE      8092

    0000CEC2  B8 0A000000       MOV      EAX,10
    0000CEC7  40                INC      EAX
    0000CEC8  50                PUSH     EAX
    0000CEC9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CECC  5B                POP      EBX
    0000CECD  3B C3             CMP      EAX,EBX
    0000CECF  0F 8503000000     JNE      3
    0000CED5  EB                JMP      

    LINE      8100

    0000CED6  B8 01000000       MOV      EAX,1
    0000CEDB  8B C8             MOV      ECX,EAX
    0000CEDD  B8 0A000000       MOV      EAX,10
    0000CEE2  50                PUSH     EAX
    0000CEE3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000CEE6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CEE9  5B                POP      EBX
    0000CEEA  53                PUSH     EBX
    0000CEEB  3B C3             CMP      EAX,EBX
    0000CEED  0F 8E03000000     JLE      3
    0000CEF3  EB                JMP      

    LINE      8102

    0000CEF4  B8 01000000       MOV      EAX,1
    0000CEF9  8B C8             MOV      ECX,EAX
    0000CEFB  B8 05000000       MOV      EAX,5
    0000CF00  50                PUSH     EAX
    0000CF01  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000CF04  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CF07  5B                POP      EBX
    0000CF08  53                PUSH     EBX
    0000CF09  3B C3             CMP      EAX,EBX
    0000CF0B  0F 8E03000000     JLE      3
    0000CF11  EB                JMP      

    LINE      8109

    0000CF12  B8 01000000       MOV      EAX,1
    0000CF17  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8110

    0000CF1D  B8 01000000       MOV      EAX,1
    0000CF22  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8111

    0000CF28  B8 01000000       MOV      EAX,1
    0000CF2D  8B C8             MOV      ECX,EAX
    0000CF2F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CF32  48                DEC      EAX
    0000CF33  BB 0E000000       MOV      EBX,14
    0000CF38  F7 E3             MUL      EBX
    0000CF3A  50                PUSH     EAX
    0000CF3B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000CF3E  48                DEC      EAX
    0000CF3F  BB 02000000       MOV      EBX,2
    0000CF44  F7 E3             MUL      EBX
    0000CF46  5B                POP      EBX
    0000CF47  03 C3             ADD      EAX,EBX
    0000CF49  8B F8             MOV      EDI,EAX
    0000CF4B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8112

    0000CF52  B8 01000000       MOV      EAX,1
    0000CF57  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8113

    0000CF5D  B8 01000000       MOV      EAX,1
    0000CF62  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8115

    0000CF68  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000CF6F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000CF74  5B                POP      EBX

    LINE      8117

    0000CF75  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000CF7C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000CF81  5B                POP      EBX

    LINE      8119

    0000CF82  B8 0A000000       MOV      EAX,10
    0000CF87  40                INC      EAX
    0000CF88  50                PUSH     EAX
    0000CF89  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000CF8C  5B                POP      EBX
    0000CF8D  3B C3             CMP      EAX,EBX
    0000CF8F  0F 8503000000     JNE      3
    0000CF95  EB                JMP      

    LINE      8126

    0000CF96  B8 01000000       MOV      EAX,1
    0000CF9B  8B C8             MOV      ECX,EAX
    0000CF9D  B8 0A000000       MOV      EAX,10
    0000CFA2  50                PUSH     EAX
    0000CFA3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000CFA6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CFA9  5B                POP      EBX
    0000CFAA  53                PUSH     EBX
    0000CFAB  3B C3             CMP      EAX,EBX
    0000CFAD  0F 8E03000000     JLE      3
    0000CFB3  EB                JMP      

    LINE      8128

    0000CFB4  B8 01000000       MOV      EAX,1
    0000CFB9  8B C8             MOV      ECX,EAX
    0000CFBB  B8 05000000       MOV      EAX,5
    0000CFC0  50                PUSH     EAX
    0000CFC1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000CFC4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CFC7  5B                POP      EBX
    0000CFC8  53                PUSH     EBX
    0000CFC9  3B C3             CMP      EAX,EBX
    0000CFCB  0F 8E03000000     JLE      3
    0000CFD1  EB                JMP      

    LINE      8135

    0000CFD2  B8 01000000       MOV      EAX,1
    0000CFD7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8136

    0000CFDD  B8 01000000       MOV      EAX,1
    0000CFE2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8137

    0000CFE8  B8 01000000       MOV      EAX,1
    0000CFED  8B C8             MOV      ECX,EAX
    0000CFEF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000CFF2  48                DEC      EAX
    0000CFF3  BB 0E000000       MOV      EBX,14
    0000CFF8  F7 E3             MUL      EBX
    0000CFFA  50                PUSH     EAX
    0000CFFB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000CFFE  48                DEC      EAX
    0000CFFF  BB 02000000       MOV      EBX,2
    0000D004  F7 E3             MUL      EBX
    0000D006  5B                POP      EBX
    0000D007  03 C3             ADD      EAX,EBX
    0000D009  8B F8             MOV      EDI,EAX
    0000D00B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8138

    0000D012  B8 01000000       MOV      EAX,1
    0000D017  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8139

    0000D01D  B8 01000000       MOV      EAX,1
    0000D022  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8141

    0000D028  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000D02F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000D034  5B                POP      EBX

    LINE      8143

    0000D035  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000D03C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000D041  5B                POP      EBX

    LINE      8145

    0000D042  B8 0A000000       MOV      EAX,10
    0000D047  40                INC      EAX
    0000D048  50                PUSH     EAX
    0000D049  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D04C  5B                POP      EBX
    0000D04D  3B C3             CMP      EAX,EBX
    0000D04F  0F 8503000000     JNE      3
    0000D055  EB                JMP      

    LINE      8159

    0000D056  56                PUSH     ESI
    0000D057  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000D05D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000D063  FF D1             CALL     ECX                       run_inner_proc
    0000D065  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8161

    0000D066  B8 01000000       MOV      EAX,1
    0000D06B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8163

    0000D06E  B8 01000000       MOV      EAX,1
    0000D073  8B C8             MOV      ECX,EAX
    0000D075  B8 0A000000       MOV      EAX,10
    0000D07A  50                PUSH     EAX
    0000D07B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000D07E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D081  5B                POP      EBX
    0000D082  53                PUSH     EBX
    0000D083  3B C3             CMP      EAX,EBX
    0000D085  0F 8E03000000     JLE      3
    0000D08B  EB                JMP      

    LINE      8165

    0000D08C  B8 01000000       MOV      EAX,1
    0000D091  8B C8             MOV      ECX,EAX
    0000D093  B8 05000000       MOV      EAX,5
    0000D098  50                PUSH     EAX
    0000D099  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000D09C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D09F  5B                POP      EBX
    0000D0A0  53                PUSH     EBX
    0000D0A1  3B C3             CMP      EAX,EBX
    0000D0A3  0F 8E03000000     JLE      3
    0000D0A9  EB                JMP      

    LINE      8172

    0000D0AA  B8 01000000       MOV      EAX,1
    0000D0AF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8173

    0000D0B2  B8 01000000       MOV      EAX,1
    0000D0B7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8174

    0000D0BA  B8 01000000       MOV      EAX,1
    0000D0BF  8B C8             MOV      ECX,EAX
    0000D0C1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D0C4  48                DEC      EAX
    0000D0C5  BB 0E000000       MOV      EBX,14
    0000D0CA  F7 E3             MUL      EBX
    0000D0CC  50                PUSH     EAX
    0000D0CD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D0D0  48                DEC      EAX
    0000D0D1  BB 02000000       MOV      EBX,2
    0000D0D6  F7 E3             MUL      EBX
    0000D0D8  5B                POP      EBX
    0000D0D9  03 C3             ADD      EAX,EBX
    0000D0DB  8B F8             MOV      EDI,EAX
    0000D0DD  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8175

    0000D0E1  B8 01000000       MOV      EAX,1
    0000D0E6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8176

    0000D0E9  B8 01000000       MOV      EAX,1
    0000D0EE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8178

    0000D0F1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000D0F8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000D0FD  5B                POP      EBX

    LINE      8180

    0000D0FE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000D105  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000D10A  5B                POP      EBX

    LINE      8182

    0000D10B  B8 0A000000       MOV      EAX,10
    0000D110  40                INC      EAX
    0000D111  50                PUSH     EAX
    0000D112  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D115  5B                POP      EBX
    0000D116  3B C3             CMP      EAX,EBX
    0000D118  0F 8503000000     JNE      3
    0000D11E  EB                JMP      

    LINE      8189

    0000D11F  B8 01000000       MOV      EAX,1
    0000D124  8B C8             MOV      ECX,EAX
    0000D126  B8 0A000000       MOV      EAX,10
    0000D12B  50                PUSH     EAX
    0000D12C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000D12F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D132  5B                POP      EBX
    0000D133  53                PUSH     EBX
    0000D134  3B C3             CMP      EAX,EBX
    0000D136  0F 8E03000000     JLE      3
    0000D13C  EB                JMP      

    LINE      8191

    0000D13D  B8 01000000       MOV      EAX,1
    0000D142  8B C8             MOV      ECX,EAX
    0000D144  B8 05000000       MOV      EAX,5
    0000D149  50                PUSH     EAX
    0000D14A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000D14D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D150  5B                POP      EBX
    0000D151  53                PUSH     EBX
    0000D152  3B C3             CMP      EAX,EBX
    0000D154  0F 8E03000000     JLE      3
    0000D15A  EB                JMP      

    LINE      8198

    0000D15B  B8 01000000       MOV      EAX,1
    0000D160  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8199

    0000D163  B8 01000000       MOV      EAX,1
    0000D168  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8200

    0000D16B  B8 01000000       MOV      EAX,1
    0000D170  8B C8             MOV      ECX,EAX
    0000D172  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D175  48                DEC      EAX
    0000D176  BB 0E000000       MOV      EBX,14
    0000D17B  F7 E3             MUL      EBX
    0000D17D  50                PUSH     EAX
    0000D17E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D181  48                DEC      EAX
    0000D182  BB 02000000       MOV      EBX,2
    0000D187  F7 E3             MUL      EBX
    0000D189  5B                POP      EBX
    0000D18A  03 C3             ADD      EAX,EBX
    0000D18C  8B F8             MOV      EDI,EAX
    0000D18E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8201

    0000D192  B8 01000000       MOV      EAX,1
    0000D197  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8202

    0000D19A  B8 01000000       MOV      EAX,1
    0000D19F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8204

    0000D1A2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000D1A9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000D1AE  5B                POP      EBX

    LINE      8206

    0000D1AF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000D1B6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000D1BB  5B                POP      EBX

    LINE      8208

    0000D1BC  B8 0A000000       MOV      EAX,10
    0000D1C1  40                INC      EAX
    0000D1C2  50                PUSH     EAX
    0000D1C3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D1C6  5B                POP      EBX
    0000D1C7  3B C3             CMP      EAX,EBX
    0000D1C9  0F 8503000000     JNE      3
    0000D1CF  EB                JMP      

    LINE      8216

    0000D1D0  B8 01000000       MOV      EAX,1
    0000D1D5  8B C8             MOV      ECX,EAX
    0000D1D7  B8 0A000000       MOV      EAX,10
    0000D1DC  50                PUSH     EAX
    0000D1DD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000D1E0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D1E3  5B                POP      EBX
    0000D1E4  53                PUSH     EBX
    0000D1E5  3B C3             CMP      EAX,EBX
    0000D1E7  0F 8E03000000     JLE      3
    0000D1ED  EB                JMP      

    LINE      8218

    0000D1EE  B8 01000000       MOV      EAX,1
    0000D1F3  8B C8             MOV      ECX,EAX
    0000D1F5  B8 05000000       MOV      EAX,5
    0000D1FA  50                PUSH     EAX
    0000D1FB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000D1FE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D201  5B                POP      EBX
    0000D202  53                PUSH     EBX
    0000D203  3B C3             CMP      EAX,EBX
    0000D205  0F 8E03000000     JLE      3
    0000D20B  EB                JMP      

    LINE      8225

    0000D20C  B8 01000000       MOV      EAX,1
    0000D211  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8226

    0000D217  B8 01000000       MOV      EAX,1
    0000D21C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8227

    0000D222  B8 01000000       MOV      EAX,1
    0000D227  8B C8             MOV      ECX,EAX
    0000D229  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D22C  48                DEC      EAX
    0000D22D  BB 0E000000       MOV      EBX,14
    0000D232  F7 E3             MUL      EBX
    0000D234  50                PUSH     EAX
    0000D235  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D238  48                DEC      EAX
    0000D239  BB 02000000       MOV      EBX,2
    0000D23E  F7 E3             MUL      EBX
    0000D240  5B                POP      EBX
    0000D241  03 C3             ADD      EAX,EBX
    0000D243  8B F8             MOV      EDI,EAX
    0000D245  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8228

    0000D24C  B8 01000000       MOV      EAX,1
    0000D251  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8229

    0000D257  B8 01000000       MOV      EAX,1
    0000D25C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8231

    0000D262  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000D269  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000D26E  5B                POP      EBX

    LINE      8233

    0000D26F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000D276  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000D27B  5B                POP      EBX

    LINE      8235

    0000D27C  B8 0A000000       MOV      EAX,10
    0000D281  40                INC      EAX
    0000D282  50                PUSH     EAX
    0000D283  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D286  5B                POP      EBX
    0000D287  3B C3             CMP      EAX,EBX
    0000D289  0F 8503000000     JNE      3
    0000D28F  EB                JMP      

    LINE      8242

    0000D290  B8 01000000       MOV      EAX,1
    0000D295  8B C8             MOV      ECX,EAX
    0000D297  B8 0A000000       MOV      EAX,10
    0000D29C  50                PUSH     EAX
    0000D29D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000D2A0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D2A3  5B                POP      EBX
    0000D2A4  53                PUSH     EBX
    0000D2A5  3B C3             CMP      EAX,EBX
    0000D2A7  0F 8E03000000     JLE      3
    0000D2AD  EB                JMP      

    LINE      8244

    0000D2AE  B8 01000000       MOV      EAX,1
    0000D2B3  8B C8             MOV      ECX,EAX
    0000D2B5  B8 05000000       MOV      EAX,5
    0000D2BA  50                PUSH     EAX
    0000D2BB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000D2BE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D2C1  5B                POP      EBX
    0000D2C2  53                PUSH     EBX
    0000D2C3  3B C3             CMP      EAX,EBX
    0000D2C5  0F 8E03000000     JLE      3
    0000D2CB  EB                JMP      

    LINE      8251

    0000D2CC  B8 01000000       MOV      EAX,1
    0000D2D1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8252

    0000D2D7  B8 01000000       MOV      EAX,1
    0000D2DC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8253

    0000D2E2  B8 01000000       MOV      EAX,1
    0000D2E7  8B C8             MOV      ECX,EAX
    0000D2E9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D2EC  48                DEC      EAX
    0000D2ED  BB 0E000000       MOV      EBX,14
    0000D2F2  F7 E3             MUL      EBX
    0000D2F4  50                PUSH     EAX
    0000D2F5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D2F8  48                DEC      EAX
    0000D2F9  BB 02000000       MOV      EBX,2
    0000D2FE  F7 E3             MUL      EBX
    0000D300  5B                POP      EBX
    0000D301  03 C3             ADD      EAX,EBX
    0000D303  8B F8             MOV      EDI,EAX
    0000D305  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8254

    0000D30C  B8 01000000       MOV      EAX,1
    0000D311  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8255

    0000D317  B8 01000000       MOV      EAX,1
    0000D31C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8257

    0000D322  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000D329  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000D32E  5B                POP      EBX

    LINE      8259

    0000D32F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000D336  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000D33B  5B                POP      EBX

    LINE      8261

    0000D33C  B8 0A000000       MOV      EAX,10
    0000D341  40                INC      EAX
    0000D342  50                PUSH     EAX
    0000D343  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D346  5B                POP      EBX
    0000D347  3B C3             CMP      EAX,EBX
    0000D349  0F 8503000000     JNE      3
    0000D34F  EB                JMP      

    LINE      8275

    0000D350  56                PUSH     ESI
    0000D351  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000D357  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000D35D  FF D1             CALL     ECX                       run_inner_proc
    0000D35F  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8277

    0000D360  B8 01000000       MOV      EAX,1
    0000D365  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8279

    0000D368  B8 01000000       MOV      EAX,1
    0000D36D  8B C8             MOV      ECX,EAX
    0000D36F  B8 0A000000       MOV      EAX,10
    0000D374  50                PUSH     EAX
    0000D375  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000D378  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D37B  5B                POP      EBX
    0000D37C  53                PUSH     EBX
    0000D37D  3B C3             CMP      EAX,EBX
    0000D37F  0F 8E03000000     JLE      3
    0000D385  EB                JMP      

    LINE      8281

    0000D386  B8 01000000       MOV      EAX,1
    0000D38B  8B C8             MOV      ECX,EAX
    0000D38D  B8 05000000       MOV      EAX,5
    0000D392  50                PUSH     EAX
    0000D393  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000D396  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D399  5B                POP      EBX
    0000D39A  53                PUSH     EBX
    0000D39B  3B C3             CMP      EAX,EBX
    0000D39D  0F 8E03000000     JLE      3
    0000D3A3  EB                JMP      

    LINE      8288

    0000D3A4  B8 01000000       MOV      EAX,1
    0000D3A9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8289

    0000D3AC  B8 01000000       MOV      EAX,1
    0000D3B1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8290

    0000D3B4  B8 01000000       MOV      EAX,1
    0000D3B9  8B C8             MOV      ECX,EAX
    0000D3BB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D3BE  48                DEC      EAX
    0000D3BF  BB 0E000000       MOV      EBX,14
    0000D3C4  F7 E3             MUL      EBX
    0000D3C6  50                PUSH     EAX
    0000D3C7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D3CA  48                DEC      EAX
    0000D3CB  BB 02000000       MOV      EBX,2
    0000D3D0  F7 E3             MUL      EBX
    0000D3D2  5B                POP      EBX
    0000D3D3  03 C3             ADD      EAX,EBX
    0000D3D5  8B F8             MOV      EDI,EAX
    0000D3D7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8291

    0000D3DB  B8 01000000       MOV      EAX,1
    0000D3E0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8292

    0000D3E3  B8 01000000       MOV      EAX,1
    0000D3E8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8294

    0000D3EB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000D3F2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000D3F7  5B                POP      EBX

    LINE      8296

    0000D3F8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000D3FF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000D404  5B                POP      EBX

    LINE      8298

    0000D405  B8 0A000000       MOV      EAX,10
    0000D40A  40                INC      EAX
    0000D40B  50                PUSH     EAX
    0000D40C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D40F  5B                POP      EBX
    0000D410  3B C3             CMP      EAX,EBX
    0000D412  0F 8503000000     JNE      3
    0000D418  EB                JMP      

    LINE      8305

    0000D419  B8 01000000       MOV      EAX,1
    0000D41E  8B C8             MOV      ECX,EAX
    0000D420  B8 0A000000       MOV      EAX,10
    0000D425  50                PUSH     EAX
    0000D426  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000D429  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D42C  5B                POP      EBX
    0000D42D  53                PUSH     EBX
    0000D42E  3B C3             CMP      EAX,EBX
    0000D430  0F 8E03000000     JLE      3
    0000D436  EB                JMP      

    LINE      8307

    0000D437  B8 01000000       MOV      EAX,1
    0000D43C  8B C8             MOV      ECX,EAX
    0000D43E  B8 05000000       MOV      EAX,5
    0000D443  50                PUSH     EAX
    0000D444  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000D447  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D44A  5B                POP      EBX
    0000D44B  53                PUSH     EBX
    0000D44C  3B C3             CMP      EAX,EBX
    0000D44E  0F 8E03000000     JLE      3
    0000D454  EB                JMP      

    LINE      8314

    0000D455  B8 01000000       MOV      EAX,1
    0000D45A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8315

    0000D45D  B8 01000000       MOV      EAX,1
    0000D462  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8316

    0000D465  B8 01000000       MOV      EAX,1
    0000D46A  8B C8             MOV      ECX,EAX
    0000D46C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D46F  48                DEC      EAX
    0000D470  BB 0E000000       MOV      EBX,14
    0000D475  F7 E3             MUL      EBX
    0000D477  50                PUSH     EAX
    0000D478  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D47B  48                DEC      EAX
    0000D47C  BB 02000000       MOV      EBX,2
    0000D481  F7 E3             MUL      EBX
    0000D483  5B                POP      EBX
    0000D484  03 C3             ADD      EAX,EBX
    0000D486  8B F8             MOV      EDI,EAX
    0000D488  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8317

    0000D48C  B8 01000000       MOV      EAX,1
    0000D491  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8318

    0000D494  B8 01000000       MOV      EAX,1
    0000D499  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8320

    0000D49C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000D4A3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000D4A8  5B                POP      EBX

    LINE      8322

    0000D4A9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000D4B0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000D4B5  5B                POP      EBX

    LINE      8324

    0000D4B6  B8 0A000000       MOV      EAX,10
    0000D4BB  40                INC      EAX
    0000D4BC  50                PUSH     EAX
    0000D4BD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D4C0  5B                POP      EBX
    0000D4C1  3B C3             CMP      EAX,EBX
    0000D4C3  0F 8503000000     JNE      3
    0000D4C9  EB                JMP      

    LINE      8332

    0000D4CA  B8 01000000       MOV      EAX,1
    0000D4CF  8B C8             MOV      ECX,EAX
    0000D4D1  B8 0A000000       MOV      EAX,10
    0000D4D6  50                PUSH     EAX
    0000D4D7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000D4DA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D4DD  5B                POP      EBX
    0000D4DE  53                PUSH     EBX
    0000D4DF  3B C3             CMP      EAX,EBX
    0000D4E1  0F 8E03000000     JLE      3
    0000D4E7  EB                JMP      

    LINE      8334

    0000D4E8  B8 01000000       MOV      EAX,1
    0000D4ED  8B C8             MOV      ECX,EAX
    0000D4EF  B8 05000000       MOV      EAX,5
    0000D4F4  50                PUSH     EAX
    0000D4F5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000D4F8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D4FB  5B                POP      EBX
    0000D4FC  53                PUSH     EBX
    0000D4FD  3B C3             CMP      EAX,EBX
    0000D4FF  0F 8E03000000     JLE      3
    0000D505  EB                JMP      

    LINE      8341

    0000D506  B8 01000000       MOV      EAX,1
    0000D50B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8342

    0000D511  B8 01000000       MOV      EAX,1
    0000D516  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8343

    0000D51C  B8 01000000       MOV      EAX,1
    0000D521  8B C8             MOV      ECX,EAX
    0000D523  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D526  48                DEC      EAX
    0000D527  BB 0E000000       MOV      EBX,14
    0000D52C  F7 E3             MUL      EBX
    0000D52E  50                PUSH     EAX
    0000D52F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D532  48                DEC      EAX
    0000D533  BB 02000000       MOV      EBX,2
    0000D538  F7 E3             MUL      EBX
    0000D53A  5B                POP      EBX
    0000D53B  03 C3             ADD      EAX,EBX
    0000D53D  8B F8             MOV      EDI,EAX
    0000D53F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8344

    0000D546  B8 01000000       MOV      EAX,1
    0000D54B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8345

    0000D551  B8 01000000       MOV      EAX,1
    0000D556  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8347

    0000D55C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000D563  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000D568  5B                POP      EBX

    LINE      8349

    0000D569  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000D570  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000D575  5B                POP      EBX

    LINE      8351

    0000D576  B8 0A000000       MOV      EAX,10
    0000D57B  40                INC      EAX
    0000D57C  50                PUSH     EAX
    0000D57D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D580  5B                POP      EBX
    0000D581  3B C3             CMP      EAX,EBX
    0000D583  0F 8503000000     JNE      3
    0000D589  EB                JMP      

    LINE      8358

    0000D58A  B8 01000000       MOV      EAX,1
    0000D58F  8B C8             MOV      ECX,EAX
    0000D591  B8 0A000000       MOV      EAX,10
    0000D596  50                PUSH     EAX
    0000D597  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000D59A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D59D  5B                POP      EBX
    0000D59E  53                PUSH     EBX
    0000D59F  3B C3             CMP      EAX,EBX
    0000D5A1  0F 8E03000000     JLE      3
    0000D5A7  EB                JMP      

    LINE      8360

    0000D5A8  B8 01000000       MOV      EAX,1
    0000D5AD  8B C8             MOV      ECX,EAX
    0000D5AF  B8 05000000       MOV      EAX,5
    0000D5B4  50                PUSH     EAX
    0000D5B5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000D5B8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D5BB  5B                POP      EBX
    0000D5BC  53                PUSH     EBX
    0000D5BD  3B C3             CMP      EAX,EBX
    0000D5BF  0F 8E03000000     JLE      3
    0000D5C5  EB                JMP      

    LINE      8367

    0000D5C6  B8 01000000       MOV      EAX,1
    0000D5CB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8368

    0000D5D1  B8 01000000       MOV      EAX,1
    0000D5D6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8369

    0000D5DC  B8 01000000       MOV      EAX,1
    0000D5E1  8B C8             MOV      ECX,EAX
    0000D5E3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D5E6  48                DEC      EAX
    0000D5E7  BB 0E000000       MOV      EBX,14
    0000D5EC  F7 E3             MUL      EBX
    0000D5EE  50                PUSH     EAX
    0000D5EF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D5F2  48                DEC      EAX
    0000D5F3  BB 02000000       MOV      EBX,2
    0000D5F8  F7 E3             MUL      EBX
    0000D5FA  5B                POP      EBX
    0000D5FB  03 C3             ADD      EAX,EBX
    0000D5FD  8B F8             MOV      EDI,EAX
    0000D5FF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8370

    0000D606  B8 01000000       MOV      EAX,1
    0000D60B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8371

    0000D611  B8 01000000       MOV      EAX,1
    0000D616  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8373

    0000D61C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000D623  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000D628  5B                POP      EBX

    LINE      8375

    0000D629  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000D630  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000D635  5B                POP      EBX

    LINE      8377

    0000D636  B8 0A000000       MOV      EAX,10
    0000D63B  40                INC      EAX
    0000D63C  50                PUSH     EAX
    0000D63D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D640  5B                POP      EBX
    0000D641  3B C3             CMP      EAX,EBX
    0000D643  0F 8503000000     JNE      3
    0000D649  EB                JMP      

    LINE      8391

    0000D64A  56                PUSH     ESI
    0000D64B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000D651  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000D657  FF D1             CALL     ECX                       run_inner_proc
    0000D659  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8393

    0000D65A  B8 01000000       MOV      EAX,1
    0000D65F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8395

    0000D662  B8 01000000       MOV      EAX,1
    0000D667  8B C8             MOV      ECX,EAX
    0000D669  B8 0A000000       MOV      EAX,10
    0000D66E  50                PUSH     EAX
    0000D66F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000D672  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D675  5B                POP      EBX
    0000D676  53                PUSH     EBX
    0000D677  3B C3             CMP      EAX,EBX
    0000D679  0F 8E03000000     JLE      3
    0000D67F  EB                JMP      

    LINE      8397

    0000D680  B8 01000000       MOV      EAX,1
    0000D685  8B C8             MOV      ECX,EAX
    0000D687  B8 05000000       MOV      EAX,5
    0000D68C  50                PUSH     EAX
    0000D68D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000D690  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D693  5B                POP      EBX
    0000D694  53                PUSH     EBX
    0000D695  3B C3             CMP      EAX,EBX
    0000D697  0F 8E03000000     JLE      3
    0000D69D  EB                JMP      

    LINE      8404

    0000D69E  B8 01000000       MOV      EAX,1
    0000D6A3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8405

    0000D6A6  B8 01000000       MOV      EAX,1
    0000D6AB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8406

    0000D6AE  B8 01000000       MOV      EAX,1
    0000D6B3  8B C8             MOV      ECX,EAX
    0000D6B5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D6B8  48                DEC      EAX
    0000D6B9  BB 0E000000       MOV      EBX,14
    0000D6BE  F7 E3             MUL      EBX
    0000D6C0  50                PUSH     EAX
    0000D6C1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D6C4  48                DEC      EAX
    0000D6C5  BB 02000000       MOV      EBX,2
    0000D6CA  F7 E3             MUL      EBX
    0000D6CC  5B                POP      EBX
    0000D6CD  03 C3             ADD      EAX,EBX
    0000D6CF  8B F8             MOV      EDI,EAX
    0000D6D1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8407

    0000D6D5  B8 01000000       MOV      EAX,1
    0000D6DA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8408

    0000D6DD  B8 01000000       MOV      EAX,1
    0000D6E2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8410

    0000D6E5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000D6EC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000D6F1  5B                POP      EBX

    LINE      8412

    0000D6F2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000D6F9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000D6FE  5B                POP      EBX

    LINE      8414

    0000D6FF  B8 0A000000       MOV      EAX,10
    0000D704  40                INC      EAX
    0000D705  50                PUSH     EAX
    0000D706  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D709  5B                POP      EBX
    0000D70A  3B C3             CMP      EAX,EBX
    0000D70C  0F 8503000000     JNE      3
    0000D712  EB                JMP      

    LINE      8421

    0000D713  B8 01000000       MOV      EAX,1
    0000D718  8B C8             MOV      ECX,EAX
    0000D71A  B8 0A000000       MOV      EAX,10
    0000D71F  50                PUSH     EAX
    0000D720  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000D723  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D726  5B                POP      EBX
    0000D727  53                PUSH     EBX
    0000D728  3B C3             CMP      EAX,EBX
    0000D72A  0F 8E03000000     JLE      3
    0000D730  EB                JMP      

    LINE      8423

    0000D731  B8 01000000       MOV      EAX,1
    0000D736  8B C8             MOV      ECX,EAX
    0000D738  B8 05000000       MOV      EAX,5
    0000D73D  50                PUSH     EAX
    0000D73E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000D741  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D744  5B                POP      EBX
    0000D745  53                PUSH     EBX
    0000D746  3B C3             CMP      EAX,EBX
    0000D748  0F 8E03000000     JLE      3
    0000D74E  EB                JMP      

    LINE      8430

    0000D74F  B8 01000000       MOV      EAX,1
    0000D754  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8431

    0000D757  B8 01000000       MOV      EAX,1
    0000D75C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8432

    0000D75F  B8 01000000       MOV      EAX,1
    0000D764  8B C8             MOV      ECX,EAX
    0000D766  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D769  48                DEC      EAX
    0000D76A  BB 0E000000       MOV      EBX,14
    0000D76F  F7 E3             MUL      EBX
    0000D771  50                PUSH     EAX
    0000D772  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D775  48                DEC      EAX
    0000D776  BB 02000000       MOV      EBX,2
    0000D77B  F7 E3             MUL      EBX
    0000D77D  5B                POP      EBX
    0000D77E  03 C3             ADD      EAX,EBX
    0000D780  8B F8             MOV      EDI,EAX
    0000D782  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8433

    0000D786  B8 01000000       MOV      EAX,1
    0000D78B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8434

    0000D78E  B8 01000000       MOV      EAX,1
    0000D793  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8436

    0000D796  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000D79D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000D7A2  5B                POP      EBX

    LINE      8438

    0000D7A3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000D7AA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000D7AF  5B                POP      EBX

    LINE      8440

    0000D7B0  B8 0A000000       MOV      EAX,10
    0000D7B5  40                INC      EAX
    0000D7B6  50                PUSH     EAX
    0000D7B7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D7BA  5B                POP      EBX
    0000D7BB  3B C3             CMP      EAX,EBX
    0000D7BD  0F 8503000000     JNE      3
    0000D7C3  EB                JMP      

    LINE      8448

    0000D7C4  B8 01000000       MOV      EAX,1
    0000D7C9  8B C8             MOV      ECX,EAX
    0000D7CB  B8 0A000000       MOV      EAX,10
    0000D7D0  50                PUSH     EAX
    0000D7D1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000D7D4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D7D7  5B                POP      EBX
    0000D7D8  53                PUSH     EBX
    0000D7D9  3B C3             CMP      EAX,EBX
    0000D7DB  0F 8E03000000     JLE      3
    0000D7E1  EB                JMP      

    LINE      8450

    0000D7E2  B8 01000000       MOV      EAX,1
    0000D7E7  8B C8             MOV      ECX,EAX
    0000D7E9  B8 05000000       MOV      EAX,5
    0000D7EE  50                PUSH     EAX
    0000D7EF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000D7F2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D7F5  5B                POP      EBX
    0000D7F6  53                PUSH     EBX
    0000D7F7  3B C3             CMP      EAX,EBX
    0000D7F9  0F 8E03000000     JLE      3
    0000D7FF  EB                JMP      

    LINE      8457

    0000D800  B8 01000000       MOV      EAX,1
    0000D805  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8458

    0000D80B  B8 01000000       MOV      EAX,1
    0000D810  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8459

    0000D816  B8 01000000       MOV      EAX,1
    0000D81B  8B C8             MOV      ECX,EAX
    0000D81D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D820  48                DEC      EAX
    0000D821  BB 0E000000       MOV      EBX,14
    0000D826  F7 E3             MUL      EBX
    0000D828  50                PUSH     EAX
    0000D829  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D82C  48                DEC      EAX
    0000D82D  BB 02000000       MOV      EBX,2
    0000D832  F7 E3             MUL      EBX
    0000D834  5B                POP      EBX
    0000D835  03 C3             ADD      EAX,EBX
    0000D837  8B F8             MOV      EDI,EAX
    0000D839  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8460

    0000D840  B8 01000000       MOV      EAX,1
    0000D845  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8461

    0000D84B  B8 01000000       MOV      EAX,1
    0000D850  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8463

    0000D856  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000D85D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000D862  5B                POP      EBX

    LINE      8465

    0000D863  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000D86A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000D86F  5B                POP      EBX

    LINE      8467

    0000D870  B8 0A000000       MOV      EAX,10
    0000D875  40                INC      EAX
    0000D876  50                PUSH     EAX
    0000D877  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D87A  5B                POP      EBX
    0000D87B  3B C3             CMP      EAX,EBX
    0000D87D  0F 8503000000     JNE      3
    0000D883  EB                JMP      

    LINE      8474

    0000D884  B8 01000000       MOV      EAX,1
    0000D889  8B C8             MOV      ECX,EAX
    0000D88B  B8 0A000000       MOV      EAX,10
    0000D890  50                PUSH     EAX
    0000D891  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000D894  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D897  5B                POP      EBX
    0000D898  53                PUSH     EBX
    0000D899  3B C3             CMP      EAX,EBX
    0000D89B  0F 8E03000000     JLE      3
    0000D8A1  EB                JMP      

    LINE      8476

    0000D8A2  B8 01000000       MOV      EAX,1
    0000D8A7  8B C8             MOV      ECX,EAX
    0000D8A9  B8 05000000       MOV      EAX,5
    0000D8AE  50                PUSH     EAX
    0000D8AF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000D8B2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D8B5  5B                POP      EBX
    0000D8B6  53                PUSH     EBX
    0000D8B7  3B C3             CMP      EAX,EBX
    0000D8B9  0F 8E03000000     JLE      3
    0000D8BF  EB                JMP      

    LINE      8483

    0000D8C0  B8 01000000       MOV      EAX,1
    0000D8C5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8484

    0000D8CB  B8 01000000       MOV      EAX,1
    0000D8D0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8485

    0000D8D6  B8 01000000       MOV      EAX,1
    0000D8DB  8B C8             MOV      ECX,EAX
    0000D8DD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000D8E0  48                DEC      EAX
    0000D8E1  BB 0E000000       MOV      EBX,14
    0000D8E6  F7 E3             MUL      EBX
    0000D8E8  50                PUSH     EAX
    0000D8E9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000D8EC  48                DEC      EAX
    0000D8ED  BB 02000000       MOV      EBX,2
    0000D8F2  F7 E3             MUL      EBX
    0000D8F4  5B                POP      EBX
    0000D8F5  03 C3             ADD      EAX,EBX
    0000D8F7  8B F8             MOV      EDI,EAX
    0000D8F9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8486

    0000D900  B8 01000000       MOV      EAX,1
    0000D905  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8487

    0000D90B  B8 01000000       MOV      EAX,1
    0000D910  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8489

    0000D916  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000D91D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000D922  5B                POP      EBX

    LINE      8491

    0000D923  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000D92A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000D92F  5B                POP      EBX

    LINE      8493

    0000D930  B8 0A000000       MOV      EAX,10
    0000D935  40                INC      EAX
    0000D936  50                PUSH     EAX
    0000D937  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D93A  5B                POP      EBX
    0000D93B  3B C3             CMP      EAX,EBX
    0000D93D  0F 8503000000     JNE      3
    0000D943  EB                JMP      

    LINE      8507

    0000D944  56                PUSH     ESI
    0000D945  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000D94B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000D951  FF D1             CALL     ECX                       run_inner_proc
    0000D953  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8509

    0000D954  B8 01000000       MOV      EAX,1
    0000D959  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8511

    0000D95C  B8 01000000       MOV      EAX,1
    0000D961  8B C8             MOV      ECX,EAX
    0000D963  B8 0A000000       MOV      EAX,10
    0000D968  50                PUSH     EAX
    0000D969  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000D96C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D96F  5B                POP      EBX
    0000D970  53                PUSH     EBX
    0000D971  3B C3             CMP      EAX,EBX
    0000D973  0F 8E03000000     JLE      3
    0000D979  EB                JMP      

    LINE      8513

    0000D97A  B8 01000000       MOV      EAX,1
    0000D97F  8B C8             MOV      ECX,EAX
    0000D981  B8 05000000       MOV      EAX,5
    0000D986  50                PUSH     EAX
    0000D987  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000D98A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D98D  5B                POP      EBX
    0000D98E  53                PUSH     EBX
    0000D98F  3B C3             CMP      EAX,EBX
    0000D991  0F 8E03000000     JLE      3
    0000D997  EB                JMP      

    LINE      8520

    0000D998  B8 01000000       MOV      EAX,1
    0000D99D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8521

    0000D9A0  B8 01000000       MOV      EAX,1
    0000D9A5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8522

    0000D9A8  B8 01000000       MOV      EAX,1
    0000D9AD  8B C8             MOV      ECX,EAX
    0000D9AF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000D9B2  48                DEC      EAX
    0000D9B3  BB 0E000000       MOV      EBX,14
    0000D9B8  F7 E3             MUL      EBX
    0000D9BA  50                PUSH     EAX
    0000D9BB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000D9BE  48                DEC      EAX
    0000D9BF  BB 02000000       MOV      EBX,2
    0000D9C4  F7 E3             MUL      EBX
    0000D9C6  5B                POP      EBX
    0000D9C7  03 C3             ADD      EAX,EBX
    0000D9C9  8B F8             MOV      EDI,EAX
    0000D9CB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8523

    0000D9CF  B8 01000000       MOV      EAX,1
    0000D9D4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8524

    0000D9D7  B8 01000000       MOV      EAX,1
    0000D9DC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8526

    0000D9DF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000D9E6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000D9EB  5B                POP      EBX

    LINE      8528

    0000D9EC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000D9F3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000D9F8  5B                POP      EBX

    LINE      8530

    0000D9F9  B8 0A000000       MOV      EAX,10
    0000D9FE  40                INC      EAX
    0000D9FF  50                PUSH     EAX
    0000DA00  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DA03  5B                POP      EBX
    0000DA04  3B C3             CMP      EAX,EBX
    0000DA06  0F 8503000000     JNE      3
    0000DA0C  EB                JMP      

    LINE      8537

    0000DA0D  B8 01000000       MOV      EAX,1
    0000DA12  8B C8             MOV      ECX,EAX
    0000DA14  B8 0A000000       MOV      EAX,10
    0000DA19  50                PUSH     EAX
    0000DA1A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000DA1D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DA20  5B                POP      EBX
    0000DA21  53                PUSH     EBX
    0000DA22  3B C3             CMP      EAX,EBX
    0000DA24  0F 8E03000000     JLE      3
    0000DA2A  EB                JMP      

    LINE      8539

    0000DA2B  B8 01000000       MOV      EAX,1
    0000DA30  8B C8             MOV      ECX,EAX
    0000DA32  B8 05000000       MOV      EAX,5
    0000DA37  50                PUSH     EAX
    0000DA38  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000DA3B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DA3E  5B                POP      EBX
    0000DA3F  53                PUSH     EBX
    0000DA40  3B C3             CMP      EAX,EBX
    0000DA42  0F 8E03000000     JLE      3
    0000DA48  EB                JMP      

    LINE      8546

    0000DA49  B8 01000000       MOV      EAX,1
    0000DA4E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8547

    0000DA51  B8 01000000       MOV      EAX,1
    0000DA56  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8548

    0000DA59  B8 01000000       MOV      EAX,1
    0000DA5E  8B C8             MOV      ECX,EAX
    0000DA60  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DA63  48                DEC      EAX
    0000DA64  BB 0E000000       MOV      EBX,14
    0000DA69  F7 E3             MUL      EBX
    0000DA6B  50                PUSH     EAX
    0000DA6C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DA6F  48                DEC      EAX
    0000DA70  BB 02000000       MOV      EBX,2
    0000DA75  F7 E3             MUL      EBX
    0000DA77  5B                POP      EBX
    0000DA78  03 C3             ADD      EAX,EBX
    0000DA7A  8B F8             MOV      EDI,EAX
    0000DA7C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8549

    0000DA80  B8 01000000       MOV      EAX,1
    0000DA85  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8550

    0000DA88  B8 01000000       MOV      EAX,1
    0000DA8D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8552

    0000DA90  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000DA97  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000DA9C  5B                POP      EBX

    LINE      8554

    0000DA9D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000DAA4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000DAA9  5B                POP      EBX

    LINE      8556

    0000DAAA  B8 0A000000       MOV      EAX,10
    0000DAAF  40                INC      EAX
    0000DAB0  50                PUSH     EAX
    0000DAB1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DAB4  5B                POP      EBX
    0000DAB5  3B C3             CMP      EAX,EBX
    0000DAB7  0F 8503000000     JNE      3
    0000DABD  EB                JMP      

    LINE      8564

    0000DABE  B8 01000000       MOV      EAX,1
    0000DAC3  8B C8             MOV      ECX,EAX
    0000DAC5  B8 0A000000       MOV      EAX,10
    0000DACA  50                PUSH     EAX
    0000DACB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000DACE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DAD1  5B                POP      EBX
    0000DAD2  53                PUSH     EBX
    0000DAD3  3B C3             CMP      EAX,EBX
    0000DAD5  0F 8E03000000     JLE      3
    0000DADB  EB                JMP      

    LINE      8566

    0000DADC  B8 01000000       MOV      EAX,1
    0000DAE1  8B C8             MOV      ECX,EAX
    0000DAE3  B8 05000000       MOV      EAX,5
    0000DAE8  50                PUSH     EAX
    0000DAE9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000DAEC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DAEF  5B                POP      EBX
    0000DAF0  53                PUSH     EBX
    0000DAF1  3B C3             CMP      EAX,EBX
    0000DAF3  0F 8E03000000     JLE      3
    0000DAF9  EB                JMP      

    LINE      8573

    0000DAFA  B8 01000000       MOV      EAX,1
    0000DAFF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8574

    0000DB05  B8 01000000       MOV      EAX,1
    0000DB0A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8575

    0000DB10  B8 01000000       MOV      EAX,1
    0000DB15  8B C8             MOV      ECX,EAX
    0000DB17  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DB1A  48                DEC      EAX
    0000DB1B  BB 0E000000       MOV      EBX,14
    0000DB20  F7 E3             MUL      EBX
    0000DB22  50                PUSH     EAX
    0000DB23  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DB26  48                DEC      EAX
    0000DB27  BB 02000000       MOV      EBX,2
    0000DB2C  F7 E3             MUL      EBX
    0000DB2E  5B                POP      EBX
    0000DB2F  03 C3             ADD      EAX,EBX
    0000DB31  8B F8             MOV      EDI,EAX
    0000DB33  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8576

    0000DB3A  B8 01000000       MOV      EAX,1
    0000DB3F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8577

    0000DB45  B8 01000000       MOV      EAX,1
    0000DB4A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8579

    0000DB50  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000DB57  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000DB5C  5B                POP      EBX

    LINE      8581

    0000DB5D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000DB64  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000DB69  5B                POP      EBX

    LINE      8583

    0000DB6A  B8 0A000000       MOV      EAX,10
    0000DB6F  40                INC      EAX
    0000DB70  50                PUSH     EAX
    0000DB71  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DB74  5B                POP      EBX
    0000DB75  3B C3             CMP      EAX,EBX
    0000DB77  0F 8503000000     JNE      3
    0000DB7D  EB                JMP      

    LINE      8590

    0000DB7E  B8 01000000       MOV      EAX,1
    0000DB83  8B C8             MOV      ECX,EAX
    0000DB85  B8 0A000000       MOV      EAX,10
    0000DB8A  50                PUSH     EAX
    0000DB8B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000DB8E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DB91  5B                POP      EBX
    0000DB92  53                PUSH     EBX
    0000DB93  3B C3             CMP      EAX,EBX
    0000DB95  0F 8E03000000     JLE      3
    0000DB9B  EB                JMP      

    LINE      8592

    0000DB9C  B8 01000000       MOV      EAX,1
    0000DBA1  8B C8             MOV      ECX,EAX
    0000DBA3  B8 05000000       MOV      EAX,5
    0000DBA8  50                PUSH     EAX
    0000DBA9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000DBAC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DBAF  5B                POP      EBX
    0000DBB0  53                PUSH     EBX
    0000DBB1  3B C3             CMP      EAX,EBX
    0000DBB3  0F 8E03000000     JLE      3
    0000DBB9  EB                JMP      

    LINE      8599

    0000DBBA  B8 01000000       MOV      EAX,1
    0000DBBF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8600

    0000DBC5  B8 01000000       MOV      EAX,1
    0000DBCA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8601

    0000DBD0  B8 01000000       MOV      EAX,1
    0000DBD5  8B C8             MOV      ECX,EAX
    0000DBD7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DBDA  48                DEC      EAX
    0000DBDB  BB 0E000000       MOV      EBX,14
    0000DBE0  F7 E3             MUL      EBX
    0000DBE2  50                PUSH     EAX
    0000DBE3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DBE6  48                DEC      EAX
    0000DBE7  BB 02000000       MOV      EBX,2
    0000DBEC  F7 E3             MUL      EBX
    0000DBEE  5B                POP      EBX
    0000DBEF  03 C3             ADD      EAX,EBX
    0000DBF1  8B F8             MOV      EDI,EAX
    0000DBF3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8602

    0000DBFA  B8 01000000       MOV      EAX,1
    0000DBFF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8603

    0000DC05  B8 01000000       MOV      EAX,1
    0000DC0A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8605

    0000DC10  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000DC17  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000DC1C  5B                POP      EBX

    LINE      8607

    0000DC1D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000DC24  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000DC29  5B                POP      EBX

    LINE      8609

    0000DC2A  B8 0A000000       MOV      EAX,10
    0000DC2F  40                INC      EAX
    0000DC30  50                PUSH     EAX
    0000DC31  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DC34  5B                POP      EBX
    0000DC35  3B C3             CMP      EAX,EBX
    0000DC37  0F 8503000000     JNE      3
    0000DC3D  EB                JMP      

    LINE      8623

    0000DC3E  56                PUSH     ESI
    0000DC3F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000DC45  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000DC4B  FF D1             CALL     ECX                       run_inner_proc
    0000DC4D  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8625

    0000DC4E  B8 01000000       MOV      EAX,1
    0000DC53  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8627

    0000DC56  B8 01000000       MOV      EAX,1
    0000DC5B  8B C8             MOV      ECX,EAX
    0000DC5D  B8 0A000000       MOV      EAX,10
    0000DC62  50                PUSH     EAX
    0000DC63  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000DC66  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DC69  5B                POP      EBX
    0000DC6A  53                PUSH     EBX
    0000DC6B  3B C3             CMP      EAX,EBX
    0000DC6D  0F 8E03000000     JLE      3
    0000DC73  EB                JMP      

    LINE      8629

    0000DC74  B8 01000000       MOV      EAX,1
    0000DC79  8B C8             MOV      ECX,EAX
    0000DC7B  B8 05000000       MOV      EAX,5
    0000DC80  50                PUSH     EAX
    0000DC81  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000DC84  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DC87  5B                POP      EBX
    0000DC88  53                PUSH     EBX
    0000DC89  3B C3             CMP      EAX,EBX
    0000DC8B  0F 8E03000000     JLE      3
    0000DC91  EB                JMP      

    LINE      8636

    0000DC92  B8 01000000       MOV      EAX,1
    0000DC97  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8637

    0000DC9A  B8 01000000       MOV      EAX,1
    0000DC9F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8638

    0000DCA2  B8 01000000       MOV      EAX,1
    0000DCA7  8B C8             MOV      ECX,EAX
    0000DCA9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DCAC  48                DEC      EAX
    0000DCAD  BB 0E000000       MOV      EBX,14
    0000DCB2  F7 E3             MUL      EBX
    0000DCB4  50                PUSH     EAX
    0000DCB5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DCB8  48                DEC      EAX
    0000DCB9  BB 02000000       MOV      EBX,2
    0000DCBE  F7 E3             MUL      EBX
    0000DCC0  5B                POP      EBX
    0000DCC1  03 C3             ADD      EAX,EBX
    0000DCC3  8B F8             MOV      EDI,EAX
    0000DCC5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8639

    0000DCC9  B8 01000000       MOV      EAX,1
    0000DCCE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8640

    0000DCD1  B8 01000000       MOV      EAX,1
    0000DCD6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8642

    0000DCD9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000DCE0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000DCE5  5B                POP      EBX

    LINE      8644

    0000DCE6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000DCED  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000DCF2  5B                POP      EBX

    LINE      8646

    0000DCF3  B8 0A000000       MOV      EAX,10
    0000DCF8  40                INC      EAX
    0000DCF9  50                PUSH     EAX
    0000DCFA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DCFD  5B                POP      EBX
    0000DCFE  3B C3             CMP      EAX,EBX
    0000DD00  0F 8503000000     JNE      3
    0000DD06  EB                JMP      

    LINE      8653

    0000DD07  B8 01000000       MOV      EAX,1
    0000DD0C  8B C8             MOV      ECX,EAX
    0000DD0E  B8 0A000000       MOV      EAX,10
    0000DD13  50                PUSH     EAX
    0000DD14  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000DD17  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DD1A  5B                POP      EBX
    0000DD1B  53                PUSH     EBX
    0000DD1C  3B C3             CMP      EAX,EBX
    0000DD1E  0F 8E03000000     JLE      3
    0000DD24  EB                JMP      

    LINE      8655

    0000DD25  B8 01000000       MOV      EAX,1
    0000DD2A  8B C8             MOV      ECX,EAX
    0000DD2C  B8 05000000       MOV      EAX,5
    0000DD31  50                PUSH     EAX
    0000DD32  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000DD35  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DD38  5B                POP      EBX
    0000DD39  53                PUSH     EBX
    0000DD3A  3B C3             CMP      EAX,EBX
    0000DD3C  0F 8E03000000     JLE      3
    0000DD42  EB                JMP      

    LINE      8662

    0000DD43  B8 01000000       MOV      EAX,1
    0000DD48  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8663

    0000DD4B  B8 01000000       MOV      EAX,1
    0000DD50  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8664

    0000DD53  B8 01000000       MOV      EAX,1
    0000DD58  8B C8             MOV      ECX,EAX
    0000DD5A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DD5D  48                DEC      EAX
    0000DD5E  BB 0E000000       MOV      EBX,14
    0000DD63  F7 E3             MUL      EBX
    0000DD65  50                PUSH     EAX
    0000DD66  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DD69  48                DEC      EAX
    0000DD6A  BB 02000000       MOV      EBX,2
    0000DD6F  F7 E3             MUL      EBX
    0000DD71  5B                POP      EBX
    0000DD72  03 C3             ADD      EAX,EBX
    0000DD74  8B F8             MOV      EDI,EAX
    0000DD76  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8665

    0000DD7A  B8 01000000       MOV      EAX,1
    0000DD7F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8666

    0000DD82  B8 01000000       MOV      EAX,1
    0000DD87  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8668

    0000DD8A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000DD91  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000DD96  5B                POP      EBX

    LINE      8670

    0000DD97  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000DD9E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000DDA3  5B                POP      EBX

    LINE      8672

    0000DDA4  B8 0A000000       MOV      EAX,10
    0000DDA9  40                INC      EAX
    0000DDAA  50                PUSH     EAX
    0000DDAB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DDAE  5B                POP      EBX
    0000DDAF  3B C3             CMP      EAX,EBX
    0000DDB1  0F 8503000000     JNE      3
    0000DDB7  EB                JMP      

    LINE      8680

    0000DDB8  B8 01000000       MOV      EAX,1
    0000DDBD  8B C8             MOV      ECX,EAX
    0000DDBF  B8 0A000000       MOV      EAX,10
    0000DDC4  50                PUSH     EAX
    0000DDC5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000DDC8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DDCB  5B                POP      EBX
    0000DDCC  53                PUSH     EBX
    0000DDCD  3B C3             CMP      EAX,EBX
    0000DDCF  0F 8E03000000     JLE      3
    0000DDD5  EB                JMP      

    LINE      8682

    0000DDD6  B8 01000000       MOV      EAX,1
    0000DDDB  8B C8             MOV      ECX,EAX
    0000DDDD  B8 05000000       MOV      EAX,5
    0000DDE2  50                PUSH     EAX
    0000DDE3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000DDE6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DDE9  5B                POP      EBX
    0000DDEA  53                PUSH     EBX
    0000DDEB  3B C3             CMP      EAX,EBX
    0000DDED  0F 8E03000000     JLE      3
    0000DDF3  EB                JMP      

    LINE      8689

    0000DDF4  B8 01000000       MOV      EAX,1
    0000DDF9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8690

    0000DDFF  B8 01000000       MOV      EAX,1
    0000DE04  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8691

    0000DE0A  B8 01000000       MOV      EAX,1
    0000DE0F  8B C8             MOV      ECX,EAX
    0000DE11  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DE14  48                DEC      EAX
    0000DE15  BB 0E000000       MOV      EBX,14
    0000DE1A  F7 E3             MUL      EBX
    0000DE1C  50                PUSH     EAX
    0000DE1D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DE20  48                DEC      EAX
    0000DE21  BB 02000000       MOV      EBX,2
    0000DE26  F7 E3             MUL      EBX
    0000DE28  5B                POP      EBX
    0000DE29  03 C3             ADD      EAX,EBX
    0000DE2B  8B F8             MOV      EDI,EAX
    0000DE2D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8692

    0000DE34  B8 01000000       MOV      EAX,1
    0000DE39  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8693

    0000DE3F  B8 01000000       MOV      EAX,1
    0000DE44  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8695

    0000DE4A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000DE51  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000DE56  5B                POP      EBX

    LINE      8697

    0000DE57  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000DE5E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000DE63  5B                POP      EBX

    LINE      8699

    0000DE64  B8 0A000000       MOV      EAX,10
    0000DE69  40                INC      EAX
    0000DE6A  50                PUSH     EAX
    0000DE6B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DE6E  5B                POP      EBX
    0000DE6F  3B C3             CMP      EAX,EBX
    0000DE71  0F 8503000000     JNE      3
    0000DE77  EB                JMP      

    LINE      8706

    0000DE78  B8 01000000       MOV      EAX,1
    0000DE7D  8B C8             MOV      ECX,EAX
    0000DE7F  B8 0A000000       MOV      EAX,10
    0000DE84  50                PUSH     EAX
    0000DE85  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000DE88  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DE8B  5B                POP      EBX
    0000DE8C  53                PUSH     EBX
    0000DE8D  3B C3             CMP      EAX,EBX
    0000DE8F  0F 8E03000000     JLE      3
    0000DE95  EB                JMP      

    LINE      8708

    0000DE96  B8 01000000       MOV      EAX,1
    0000DE9B  8B C8             MOV      ECX,EAX
    0000DE9D  B8 05000000       MOV      EAX,5
    0000DEA2  50                PUSH     EAX
    0000DEA3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000DEA6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DEA9  5B                POP      EBX
    0000DEAA  53                PUSH     EBX
    0000DEAB  3B C3             CMP      EAX,EBX
    0000DEAD  0F 8E03000000     JLE      3
    0000DEB3  EB                JMP      

    LINE      8715

    0000DEB4  B8 01000000       MOV      EAX,1
    0000DEB9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8716

    0000DEBF  B8 01000000       MOV      EAX,1
    0000DEC4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8717

    0000DECA  B8 01000000       MOV      EAX,1
    0000DECF  8B C8             MOV      ECX,EAX
    0000DED1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000DED4  48                DEC      EAX
    0000DED5  BB 0E000000       MOV      EBX,14
    0000DEDA  F7 E3             MUL      EBX
    0000DEDC  50                PUSH     EAX
    0000DEDD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000DEE0  48                DEC      EAX
    0000DEE1  BB 02000000       MOV      EBX,2
    0000DEE6  F7 E3             MUL      EBX
    0000DEE8  5B                POP      EBX
    0000DEE9  03 C3             ADD      EAX,EBX
    0000DEEB  8B F8             MOV      EDI,EAX
    0000DEED  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8718

    0000DEF4  B8 01000000       MOV      EAX,1
    0000DEF9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8719

    0000DEFF  B8 01000000       MOV      EAX,1
    0000DF04  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8721

    0000DF0A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000DF11  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000DF16  5B                POP      EBX

    LINE      8723

    0000DF17  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000DF1E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000DF23  5B                POP      EBX

    LINE      8725

    0000DF24  B8 0A000000       MOV      EAX,10
    0000DF29  40                INC      EAX
    0000DF2A  50                PUSH     EAX
    0000DF2B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DF2E  5B                POP      EBX
    0000DF2F  3B C3             CMP      EAX,EBX
    0000DF31  0F 8503000000     JNE      3
    0000DF37  EB                JMP      

    LINE      8739

    0000DF38  56                PUSH     ESI
    0000DF39  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000DF3F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000DF45  FF D1             CALL     ECX                       run_inner_proc
    0000DF47  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8741

    0000DF48  B8 01000000       MOV      EAX,1
    0000DF4D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8743

    0000DF50  B8 01000000       MOV      EAX,1
    0000DF55  8B C8             MOV      ECX,EAX
    0000DF57  B8 0A000000       MOV      EAX,10
    0000DF5C  50                PUSH     EAX
    0000DF5D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000DF60  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DF63  5B                POP      EBX
    0000DF64  53                PUSH     EBX
    0000DF65  3B C3             CMP      EAX,EBX
    0000DF67  0F 8E03000000     JLE      3
    0000DF6D  EB                JMP      

    LINE      8745

    0000DF6E  B8 01000000       MOV      EAX,1
    0000DF73  8B C8             MOV      ECX,EAX
    0000DF75  B8 05000000       MOV      EAX,5
    0000DF7A  50                PUSH     EAX
    0000DF7B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000DF7E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DF81  5B                POP      EBX
    0000DF82  53                PUSH     EBX
    0000DF83  3B C3             CMP      EAX,EBX
    0000DF85  0F 8E03000000     JLE      3
    0000DF8B  EB                JMP      

    LINE      8752

    0000DF8C  B8 01000000       MOV      EAX,1
    0000DF91  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8753

    0000DF94  B8 01000000       MOV      EAX,1
    0000DF99  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8754

    0000DF9C  B8 01000000       MOV      EAX,1
    0000DFA1  8B C8             MOV      ECX,EAX
    0000DFA3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DFA6  48                DEC      EAX
    0000DFA7  BB 0E000000       MOV      EBX,14
    0000DFAC  F7 E3             MUL      EBX
    0000DFAE  50                PUSH     EAX
    0000DFAF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000DFB2  48                DEC      EAX
    0000DFB3  BB 02000000       MOV      EBX,2
    0000DFB8  F7 E3             MUL      EBX
    0000DFBA  5B                POP      EBX
    0000DFBB  03 C3             ADD      EAX,EBX
    0000DFBD  8B F8             MOV      EDI,EAX
    0000DFBF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8755

    0000DFC3  B8 01000000       MOV      EAX,1
    0000DFC8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8756

    0000DFCB  B8 01000000       MOV      EAX,1
    0000DFD0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8758

    0000DFD3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000DFDA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000DFDF  5B                POP      EBX

    LINE      8760

    0000DFE0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000DFE7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000DFEC  5B                POP      EBX

    LINE      8762

    0000DFED  B8 0A000000       MOV      EAX,10
    0000DFF2  40                INC      EAX
    0000DFF3  50                PUSH     EAX
    0000DFF4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000DFF7  5B                POP      EBX
    0000DFF8  3B C3             CMP      EAX,EBX
    0000DFFA  0F 8503000000     JNE      3
    0000E000  EB                JMP      

    LINE      8769

    0000E001  B8 01000000       MOV      EAX,1
    0000E006  8B C8             MOV      ECX,EAX
    0000E008  B8 0A000000       MOV      EAX,10
    0000E00D  50                PUSH     EAX
    0000E00E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000E011  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E014  5B                POP      EBX
    0000E015  53                PUSH     EBX
    0000E016  3B C3             CMP      EAX,EBX
    0000E018  0F 8E03000000     JLE      3
    0000E01E  EB                JMP      

    LINE      8771

    0000E01F  B8 01000000       MOV      EAX,1
    0000E024  8B C8             MOV      ECX,EAX
    0000E026  B8 05000000       MOV      EAX,5
    0000E02B  50                PUSH     EAX
    0000E02C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000E02F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E032  5B                POP      EBX
    0000E033  53                PUSH     EBX
    0000E034  3B C3             CMP      EAX,EBX
    0000E036  0F 8E03000000     JLE      3
    0000E03C  EB                JMP      

    LINE      8778

    0000E03D  B8 01000000       MOV      EAX,1
    0000E042  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8779

    0000E045  B8 01000000       MOV      EAX,1
    0000E04A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8780

    0000E04D  B8 01000000       MOV      EAX,1
    0000E052  8B C8             MOV      ECX,EAX
    0000E054  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E057  48                DEC      EAX
    0000E058  BB 0E000000       MOV      EBX,14
    0000E05D  F7 E3             MUL      EBX
    0000E05F  50                PUSH     EAX
    0000E060  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E063  48                DEC      EAX
    0000E064  BB 02000000       MOV      EBX,2
    0000E069  F7 E3             MUL      EBX
    0000E06B  5B                POP      EBX
    0000E06C  03 C3             ADD      EAX,EBX
    0000E06E  8B F8             MOV      EDI,EAX
    0000E070  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8781

    0000E074  B8 01000000       MOV      EAX,1
    0000E079  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8782

    0000E07C  B8 01000000       MOV      EAX,1
    0000E081  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8784

    0000E084  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000E08B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000E090  5B                POP      EBX

    LINE      8786

    0000E091  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000E098  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000E09D  5B                POP      EBX

    LINE      8788

    0000E09E  B8 0A000000       MOV      EAX,10
    0000E0A3  40                INC      EAX
    0000E0A4  50                PUSH     EAX
    0000E0A5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E0A8  5B                POP      EBX
    0000E0A9  3B C3             CMP      EAX,EBX
    0000E0AB  0F 8503000000     JNE      3
    0000E0B1  EB                JMP      

    LINE      8796

    0000E0B2  B8 01000000       MOV      EAX,1
    0000E0B7  8B C8             MOV      ECX,EAX
    0000E0B9  B8 0A000000       MOV      EAX,10
    0000E0BE  50                PUSH     EAX
    0000E0BF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000E0C2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E0C5  5B                POP      EBX
    0000E0C6  53                PUSH     EBX
    0000E0C7  3B C3             CMP      EAX,EBX
    0000E0C9  0F 8E03000000     JLE      3
    0000E0CF  EB                JMP      

    LINE      8798

    0000E0D0  B8 01000000       MOV      EAX,1
    0000E0D5  8B C8             MOV      ECX,EAX
    0000E0D7  B8 05000000       MOV      EAX,5
    0000E0DC  50                PUSH     EAX
    0000E0DD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000E0E0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E0E3  5B                POP      EBX
    0000E0E4  53                PUSH     EBX
    0000E0E5  3B C3             CMP      EAX,EBX
    0000E0E7  0F 8E03000000     JLE      3
    0000E0ED  EB                JMP      

    LINE      8805

    0000E0EE  B8 01000000       MOV      EAX,1
    0000E0F3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8806

    0000E0F9  B8 01000000       MOV      EAX,1
    0000E0FE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8807

    0000E104  B8 01000000       MOV      EAX,1
    0000E109  8B C8             MOV      ECX,EAX
    0000E10B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E10E  48                DEC      EAX
    0000E10F  BB 0E000000       MOV      EBX,14
    0000E114  F7 E3             MUL      EBX
    0000E116  50                PUSH     EAX
    0000E117  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E11A  48                DEC      EAX
    0000E11B  BB 02000000       MOV      EBX,2
    0000E120  F7 E3             MUL      EBX
    0000E122  5B                POP      EBX
    0000E123  03 C3             ADD      EAX,EBX
    0000E125  8B F8             MOV      EDI,EAX
    0000E127  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8808

    0000E12E  B8 01000000       MOV      EAX,1
    0000E133  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8809

    0000E139  B8 01000000       MOV      EAX,1
    0000E13E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page   9



    LINE      8811

    0000E144  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000E14B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000E150  5B                POP      EBX

    LINE      8813

    0000E151  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000E158  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000E15D  5B                POP      EBX

    LINE      8815

    0000E15E  B8 0A000000       MOV      EAX,10
    0000E163  40                INC      EAX
    0000E164  50                PUSH     EAX
    0000E165  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E168  5B                POP      EBX
    0000E169  3B C3             CMP      EAX,EBX
    0000E16B  0F 8503000000     JNE      3
    0000E171  EB                JMP      

    LINE      8822

    0000E172  B8 01000000       MOV      EAX,1
    0000E177  8B C8             MOV      ECX,EAX
    0000E179  B8 0A000000       MOV      EAX,10
    0000E17E  50                PUSH     EAX
    0000E17F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000E182  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E185  5B                POP      EBX
    0000E186  53                PUSH     EBX
    0000E187  3B C3             CMP      EAX,EBX
    0000E189  0F 8E03000000     JLE      3
    0000E18F  EB                JMP      

    LINE      8824

    0000E190  B8 01000000       MOV      EAX,1
    0000E195  8B C8             MOV      ECX,EAX
    0000E197  B8 05000000       MOV      EAX,5
    0000E19C  50                PUSH     EAX
    0000E19D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000E1A0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E1A3  5B                POP      EBX
    0000E1A4  53                PUSH     EBX
    0000E1A5  3B C3             CMP      EAX,EBX
    0000E1A7  0F 8E03000000     JLE      3
    0000E1AD  EB                JMP      

    LINE      8831

    0000E1AE  B8 01000000       MOV      EAX,1
    0000E1B3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8832

    0000E1B9  B8 01000000       MOV      EAX,1
    0000E1BE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8833

    0000E1C4  B8 01000000       MOV      EAX,1
    0000E1C9  8B C8             MOV      ECX,EAX
    0000E1CB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E1CE  48                DEC      EAX
    0000E1CF  BB 0E000000       MOV      EBX,14
    0000E1D4  F7 E3             MUL      EBX
    0000E1D6  50                PUSH     EAX
    0000E1D7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E1DA  48                DEC      EAX
    0000E1DB  BB 02000000       MOV      EBX,2
    0000E1E0  F7 E3             MUL      EBX
    0000E1E2  5B                POP      EBX
    0000E1E3  03 C3             ADD      EAX,EBX
    0000E1E5  8B F8             MOV      EDI,EAX
    0000E1E7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8834

    0000E1EE  B8 01000000       MOV      EAX,1
    0000E1F3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8835

    0000E1F9  B8 01000000       MOV      EAX,1
    0000E1FE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8837

    0000E204  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000E20B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000E210  5B                POP      EBX

    LINE      8839

    0000E211  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000E218  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000E21D  5B                POP      EBX

    LINE      8841

    0000E21E  B8 0A000000       MOV      EAX,10
    0000E223  40                INC      EAX
    0000E224  50                PUSH     EAX
    0000E225  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E228  5B                POP      EBX
    0000E229  3B C3             CMP      EAX,EBX
    0000E22B  0F 8503000000     JNE      3
    0000E231  EB                JMP      

    LINE      8855

    0000E232  56                PUSH     ESI
    0000E233  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000E239  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000E23F  FF D1             CALL     ECX                       run_inner_proc
    0000E241  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8857

    0000E242  B8 01000000       MOV      EAX,1
    0000E247  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8859

    0000E24A  B8 01000000       MOV      EAX,1
    0000E24F  8B C8             MOV      ECX,EAX
    0000E251  B8 0A000000       MOV      EAX,10
    0000E256  50                PUSH     EAX
    0000E257  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000E25A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E25D  5B                POP      EBX
    0000E25E  53                PUSH     EBX
    0000E25F  3B C3             CMP      EAX,EBX
    0000E261  0F 8E03000000     JLE      3
    0000E267  EB                JMP      

    LINE      8861

    0000E268  B8 01000000       MOV      EAX,1
    0000E26D  8B C8             MOV      ECX,EAX
    0000E26F  B8 05000000       MOV      EAX,5
    0000E274  50                PUSH     EAX
    0000E275  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000E278  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E27B  5B                POP      EBX
    0000E27C  53                PUSH     EBX
    0000E27D  3B C3             CMP      EAX,EBX
    0000E27F  0F 8E03000000     JLE      3
    0000E285  EB                JMP      

    LINE      8868

    0000E286  B8 01000000       MOV      EAX,1
    0000E28B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8869

    0000E28E  B8 01000000       MOV      EAX,1
    0000E293  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8870

    0000E296  B8 01000000       MOV      EAX,1
    0000E29B  8B C8             MOV      ECX,EAX
    0000E29D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E2A0  48                DEC      EAX
    0000E2A1  BB 0E000000       MOV      EBX,14
    0000E2A6  F7 E3             MUL      EBX
    0000E2A8  50                PUSH     EAX
    0000E2A9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E2AC  48                DEC      EAX
    0000E2AD  BB 02000000       MOV      EBX,2
    0000E2B2  F7 E3             MUL      EBX
    0000E2B4  5B                POP      EBX
    0000E2B5  03 C3             ADD      EAX,EBX
    0000E2B7  8B F8             MOV      EDI,EAX
    0000E2B9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8871

    0000E2BD  B8 01000000       MOV      EAX,1
    0000E2C2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8872

    0000E2C5  B8 01000000       MOV      EAX,1
    0000E2CA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8874

    0000E2CD  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000E2D4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000E2D9  5B                POP      EBX

    LINE      8876

    0000E2DA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000E2E1  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000E2E6  5B                POP      EBX

    LINE      8878

    0000E2E7  B8 0A000000       MOV      EAX,10
    0000E2EC  40                INC      EAX
    0000E2ED  50                PUSH     EAX
    0000E2EE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E2F1  5B                POP      EBX
    0000E2F2  3B C3             CMP      EAX,EBX
    0000E2F4  0F 8503000000     JNE      3
    0000E2FA  EB                JMP      

    LINE      8885

    0000E2FB  B8 01000000       MOV      EAX,1
    0000E300  8B C8             MOV      ECX,EAX
    0000E302  B8 0A000000       MOV      EAX,10
    0000E307  50                PUSH     EAX
    0000E308  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000E30B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E30E  5B                POP      EBX
    0000E30F  53                PUSH     EBX
    0000E310  3B C3             CMP      EAX,EBX
    0000E312  0F 8E03000000     JLE      3
    0000E318  EB                JMP      

    LINE      8887

    0000E319  B8 01000000       MOV      EAX,1
    0000E31E  8B C8             MOV      ECX,EAX
    0000E320  B8 05000000       MOV      EAX,5
    0000E325  50                PUSH     EAX
    0000E326  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000E329  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E32C  5B                POP      EBX
    0000E32D  53                PUSH     EBX
    0000E32E  3B C3             CMP      EAX,EBX
    0000E330  0F 8E03000000     JLE      3
    0000E336  EB                JMP      

    LINE      8894

    0000E337  B8 01000000       MOV      EAX,1
    0000E33C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8895

    0000E33F  B8 01000000       MOV      EAX,1
    0000E344  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8896

    0000E347  B8 01000000       MOV      EAX,1
    0000E34C  8B C8             MOV      ECX,EAX
    0000E34E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E351  48                DEC      EAX
    0000E352  BB 0E000000       MOV      EBX,14
    0000E357  F7 E3             MUL      EBX
    0000E359  50                PUSH     EAX
    0000E35A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E35D  48                DEC      EAX
    0000E35E  BB 02000000       MOV      EBX,2
    0000E363  F7 E3             MUL      EBX
    0000E365  5B                POP      EBX
    0000E366  03 C3             ADD      EAX,EBX
    0000E368  8B F8             MOV      EDI,EAX
    0000E36A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8897

    0000E36E  B8 01000000       MOV      EAX,1
    0000E373  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8898

    0000E376  B8 01000000       MOV      EAX,1
    0000E37B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8900

    0000E37E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000E385  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000E38A  5B                POP      EBX

    LINE      8902

    0000E38B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000E392  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000E397  5B                POP      EBX

    LINE      8904

    0000E398  B8 0A000000       MOV      EAX,10
    0000E39D  40                INC      EAX
    0000E39E  50                PUSH     EAX
    0000E39F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E3A2  5B                POP      EBX
    0000E3A3  3B C3             CMP      EAX,EBX
    0000E3A5  0F 8503000000     JNE      3
    0000E3AB  EB                JMP      

    LINE      8912

    0000E3AC  B8 01000000       MOV      EAX,1
    0000E3B1  8B C8             MOV      ECX,EAX
    0000E3B3  B8 0A000000       MOV      EAX,10
    0000E3B8  50                PUSH     EAX
    0000E3B9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000E3BC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E3BF  5B                POP      EBX
    0000E3C0  53                PUSH     EBX
    0000E3C1  3B C3             CMP      EAX,EBX
    0000E3C3  0F 8E03000000     JLE      3
    0000E3C9  EB                JMP      

    LINE      8914

    0000E3CA  B8 01000000       MOV      EAX,1
    0000E3CF  8B C8             MOV      ECX,EAX
    0000E3D1  B8 05000000       MOV      EAX,5
    0000E3D6  50                PUSH     EAX
    0000E3D7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000E3DA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E3DD  5B                POP      EBX
    0000E3DE  53                PUSH     EBX
    0000E3DF  3B C3             CMP      EAX,EBX
    0000E3E1  0F 8E03000000     JLE      3
    0000E3E7  EB                JMP      

    LINE      8921

    0000E3E8  B8 01000000       MOV      EAX,1
    0000E3ED  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8922

    0000E3F3  B8 01000000       MOV      EAX,1
    0000E3F8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8923

    0000E3FE  B8 01000000       MOV      EAX,1
    0000E403  8B C8             MOV      ECX,EAX
    0000E405  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E408  48                DEC      EAX
    0000E409  BB 0E000000       MOV      EBX,14
    0000E40E  F7 E3             MUL      EBX
    0000E410  50                PUSH     EAX
    0000E411  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E414  48                DEC      EAX
    0000E415  BB 02000000       MOV      EBX,2
    0000E41A  F7 E3             MUL      EBX
    0000E41C  5B                POP      EBX
    0000E41D  03 C3             ADD      EAX,EBX
    0000E41F  8B F8             MOV      EDI,EAX
    0000E421  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8924

    0000E428  B8 01000000       MOV      EAX,1
    0000E42D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8925

    0000E433  B8 01000000       MOV      EAX,1
    0000E438  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8927

    0000E43E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000E445  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000E44A  5B                POP      EBX

    LINE      8929

    0000E44B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000E452  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000E457  5B                POP      EBX

    LINE      8931

    0000E458  B8 0A000000       MOV      EAX,10
    0000E45D  40                INC      EAX
    0000E45E  50                PUSH     EAX
    0000E45F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E462  5B                POP      EBX
    0000E463  3B C3             CMP      EAX,EBX
    0000E465  0F 8503000000     JNE      3
    0000E46B  EB                JMP      

    LINE      8938

    0000E46C  B8 01000000       MOV      EAX,1
    0000E471  8B C8             MOV      ECX,EAX
    0000E473  B8 0A000000       MOV      EAX,10
    0000E478  50                PUSH     EAX
    0000E479  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000E47C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E47F  5B                POP      EBX
    0000E480  53                PUSH     EBX
    0000E481  3B C3             CMP      EAX,EBX
    0000E483  0F 8E03000000     JLE      3
    0000E489  EB                JMP      

    LINE      8940

    0000E48A  B8 01000000       MOV      EAX,1
    0000E48F  8B C8             MOV      ECX,EAX
    0000E491  B8 05000000       MOV      EAX,5
    0000E496  50                PUSH     EAX
    0000E497  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000E49A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E49D  5B                POP      EBX
    0000E49E  53                PUSH     EBX
    0000E49F  3B C3             CMP      EAX,EBX
    0000E4A1  0F 8E03000000     JLE      3
    0000E4A7  EB                JMP      

    LINE      8947

    0000E4A8  B8 01000000       MOV      EAX,1
    0000E4AD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8948

    0000E4B3  B8 01000000       MOV      EAX,1
    0000E4B8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8949

    0000E4BE  B8 01000000       MOV      EAX,1
    0000E4C3  8B C8             MOV      ECX,EAX
    0000E4C5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E4C8  48                DEC      EAX
    0000E4C9  BB 0E000000       MOV      EBX,14
    0000E4CE  F7 E3             MUL      EBX
    0000E4D0  50                PUSH     EAX
    0000E4D1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E4D4  48                DEC      EAX
    0000E4D5  BB 02000000       MOV      EBX,2
    0000E4DA  F7 E3             MUL      EBX
    0000E4DC  5B                POP      EBX
    0000E4DD  03 C3             ADD      EAX,EBX
    0000E4DF  8B F8             MOV      EDI,EAX
    0000E4E1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      8950

    0000E4E8  B8 01000000       MOV      EAX,1
    0000E4ED  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8951

    0000E4F3  B8 01000000       MOV      EAX,1
    0000E4F8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      8953

    0000E4FE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000E505  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000E50A  5B                POP      EBX

    LINE      8955

    0000E50B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000E512  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000E517  5B                POP      EBX

    LINE      8957

    0000E518  B8 0A000000       MOV      EAX,10
    0000E51D  40                INC      EAX
    0000E51E  50                PUSH     EAX
    0000E51F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E522  5B                POP      EBX
    0000E523  3B C3             CMP      EAX,EBX
    0000E525  0F 8503000000     JNE      3
    0000E52B  EB                JMP      

    LINE      8971

    0000E52C  56                PUSH     ESI
    0000E52D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000E533  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000E539  FF D1             CALL     ECX                       run_inner_proc
    0000E53B  5E                POP      ESI                       /* restore callers static pointer */

    LINE      8973

    0000E53C  B8 01000000       MOV      EAX,1
    0000E541  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      8975

    0000E544  B8 01000000       MOV      EAX,1
    0000E549  8B C8             MOV      ECX,EAX
    0000E54B  B8 0A000000       MOV      EAX,10
    0000E550  50                PUSH     EAX
    0000E551  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000E554  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E557  5B                POP      EBX
    0000E558  53                PUSH     EBX
    0000E559  3B C3             CMP      EAX,EBX
    0000E55B  0F 8E03000000     JLE      3
    0000E561  EB                JMP      

    LINE      8977

    0000E562  B8 01000000       MOV      EAX,1
    0000E567  8B C8             MOV      ECX,EAX
    0000E569  B8 05000000       MOV      EAX,5
    0000E56E  50                PUSH     EAX
    0000E56F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000E572  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E575  5B                POP      EBX
    0000E576  53                PUSH     EBX
    0000E577  3B C3             CMP      EAX,EBX
    0000E579  0F 8E03000000     JLE      3
    0000E57F  EB                JMP      

    LINE      8984

    0000E580  B8 01000000       MOV      EAX,1
    0000E585  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8985

    0000E588  B8 01000000       MOV      EAX,1
    0000E58D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8986

    0000E590  B8 01000000       MOV      EAX,1
    0000E595  8B C8             MOV      ECX,EAX
    0000E597  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E59A  48                DEC      EAX
    0000E59B  BB 0E000000       MOV      EBX,14
    0000E5A0  F7 E3             MUL      EBX
    0000E5A2  50                PUSH     EAX
    0000E5A3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E5A6  48                DEC      EAX
    0000E5A7  BB 02000000       MOV      EBX,2
    0000E5AC  F7 E3             MUL      EBX
    0000E5AE  5B                POP      EBX
    0000E5AF  03 C3             ADD      EAX,EBX
    0000E5B1  8B F8             MOV      EDI,EAX
    0000E5B3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      8987

    0000E5B7  B8 01000000       MOV      EAX,1
    0000E5BC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8988

    0000E5BF  B8 01000000       MOV      EAX,1
    0000E5C4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      8990

    0000E5C7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000E5CE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000E5D3  5B                POP      EBX

    LINE      8992

    0000E5D4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000E5DB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000E5E0  5B                POP      EBX

    LINE      8994

    0000E5E1  B8 0A000000       MOV      EAX,10
    0000E5E6  40                INC      EAX
    0000E5E7  50                PUSH     EAX
    0000E5E8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E5EB  5B                POP      EBX
    0000E5EC  3B C3             CMP      EAX,EBX
    0000E5EE  0F 8503000000     JNE      3
    0000E5F4  EB                JMP      

    LINE      9001

    0000E5F5  B8 01000000       MOV      EAX,1
    0000E5FA  8B C8             MOV      ECX,EAX
    0000E5FC  B8 0A000000       MOV      EAX,10
    0000E601  50                PUSH     EAX
    0000E602  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000E605  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E608  5B                POP      EBX
    0000E609  53                PUSH     EBX
    0000E60A  3B C3             CMP      EAX,EBX
    0000E60C  0F 8E03000000     JLE      3
    0000E612  EB                JMP      

    LINE      9003

    0000E613  B8 01000000       MOV      EAX,1
    0000E618  8B C8             MOV      ECX,EAX
    0000E61A  B8 05000000       MOV      EAX,5
    0000E61F  50                PUSH     EAX
    0000E620  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000E623  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E626  5B                POP      EBX
    0000E627  53                PUSH     EBX
    0000E628  3B C3             CMP      EAX,EBX
    0000E62A  0F 8E03000000     JLE      3
    0000E630  EB                JMP      

    LINE      9010

    0000E631  B8 01000000       MOV      EAX,1
    0000E636  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9011

    0000E639  B8 01000000       MOV      EAX,1
    0000E63E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9012

    0000E641  B8 01000000       MOV      EAX,1
    0000E646  8B C8             MOV      ECX,EAX
    0000E648  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E64B  48                DEC      EAX
    0000E64C  BB 0E000000       MOV      EBX,14
    0000E651  F7 E3             MUL      EBX
    0000E653  50                PUSH     EAX
    0000E654  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E657  48                DEC      EAX
    0000E658  BB 02000000       MOV      EBX,2
    0000E65D  F7 E3             MUL      EBX
    0000E65F  5B                POP      EBX
    0000E660  03 C3             ADD      EAX,EBX
    0000E662  8B F8             MOV      EDI,EAX
    0000E664  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9013

    0000E668  B8 01000000       MOV      EAX,1
    0000E66D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9014

    0000E670  B8 01000000       MOV      EAX,1
    0000E675  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9016

    0000E678  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000E67F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000E684  5B                POP      EBX

    LINE      9018

    0000E685  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000E68C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000E691  5B                POP      EBX

    LINE      9020

    0000E692  B8 0A000000       MOV      EAX,10
    0000E697  40                INC      EAX
    0000E698  50                PUSH     EAX
    0000E699  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E69C  5B                POP      EBX
    0000E69D  3B C3             CMP      EAX,EBX
    0000E69F  0F 8503000000     JNE      3
    0000E6A5  EB                JMP      

    LINE      9028

    0000E6A6  B8 01000000       MOV      EAX,1
    0000E6AB  8B C8             MOV      ECX,EAX
    0000E6AD  B8 0A000000       MOV      EAX,10
    0000E6B2  50                PUSH     EAX
    0000E6B3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000E6B6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E6B9  5B                POP      EBX
    0000E6BA  53                PUSH     EBX
    0000E6BB  3B C3             CMP      EAX,EBX
    0000E6BD  0F 8E03000000     JLE      3
    0000E6C3  EB                JMP      

    LINE      9030

    0000E6C4  B8 01000000       MOV      EAX,1
    0000E6C9  8B C8             MOV      ECX,EAX
    0000E6CB  B8 05000000       MOV      EAX,5
    0000E6D0  50                PUSH     EAX
    0000E6D1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000E6D4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E6D7  5B                POP      EBX
    0000E6D8  53                PUSH     EBX
    0000E6D9  3B C3             CMP      EAX,EBX
    0000E6DB  0F 8E03000000     JLE      3
    0000E6E1  EB                JMP      

    LINE      9037

    0000E6E2  B8 01000000       MOV      EAX,1
    0000E6E7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9038

    0000E6ED  B8 01000000       MOV      EAX,1
    0000E6F2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9039

    0000E6F8  B8 01000000       MOV      EAX,1
    0000E6FD  8B C8             MOV      ECX,EAX
    0000E6FF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E702  48                DEC      EAX
    0000E703  BB 0E000000       MOV      EBX,14
    0000E708  F7 E3             MUL      EBX
    0000E70A  50                PUSH     EAX
    0000E70B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E70E  48                DEC      EAX
    0000E70F  BB 02000000       MOV      EBX,2
    0000E714  F7 E3             MUL      EBX
    0000E716  5B                POP      EBX
    0000E717  03 C3             ADD      EAX,EBX
    0000E719  8B F8             MOV      EDI,EAX
    0000E71B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9040

    0000E722  B8 01000000       MOV      EAX,1
    0000E727  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9041

    0000E72D  B8 01000000       MOV      EAX,1
    0000E732  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9043

    0000E738  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000E73F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000E744  5B                POP      EBX

    LINE      9045

    0000E745  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000E74C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000E751  5B                POP      EBX

    LINE      9047

    0000E752  B8 0A000000       MOV      EAX,10
    0000E757  40                INC      EAX
    0000E758  50                PUSH     EAX
    0000E759  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E75C  5B                POP      EBX
    0000E75D  3B C3             CMP      EAX,EBX
    0000E75F  0F 8503000000     JNE      3
    0000E765  EB                JMP      

    LINE      9054

    0000E766  B8 01000000       MOV      EAX,1
    0000E76B  8B C8             MOV      ECX,EAX
    0000E76D  B8 0A000000       MOV      EAX,10
    0000E772  50                PUSH     EAX
    0000E773  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000E776  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E779  5B                POP      EBX
    0000E77A  53                PUSH     EBX
    0000E77B  3B C3             CMP      EAX,EBX
    0000E77D  0F 8E03000000     JLE      3
    0000E783  EB                JMP      

    LINE      9056

    0000E784  B8 01000000       MOV      EAX,1
    0000E789  8B C8             MOV      ECX,EAX
    0000E78B  B8 05000000       MOV      EAX,5
    0000E790  50                PUSH     EAX
    0000E791  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000E794  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E797  5B                POP      EBX
    0000E798  53                PUSH     EBX
    0000E799  3B C3             CMP      EAX,EBX
    0000E79B  0F 8E03000000     JLE      3
    0000E7A1  EB                JMP      

    LINE      9063

    0000E7A2  B8 01000000       MOV      EAX,1
    0000E7A7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9064

    0000E7AD  B8 01000000       MOV      EAX,1
    0000E7B2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9065

    0000E7B8  B8 01000000       MOV      EAX,1
    0000E7BD  8B C8             MOV      ECX,EAX
    0000E7BF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E7C2  48                DEC      EAX
    0000E7C3  BB 0E000000       MOV      EBX,14
    0000E7C8  F7 E3             MUL      EBX
    0000E7CA  50                PUSH     EAX
    0000E7CB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E7CE  48                DEC      EAX
    0000E7CF  BB 02000000       MOV      EBX,2
    0000E7D4  F7 E3             MUL      EBX
    0000E7D6  5B                POP      EBX
    0000E7D7  03 C3             ADD      EAX,EBX
    0000E7D9  8B F8             MOV      EDI,EAX
    0000E7DB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9066

    0000E7E2  B8 01000000       MOV      EAX,1
    0000E7E7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9067

    0000E7ED  B8 01000000       MOV      EAX,1
    0000E7F2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9069

    0000E7F8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000E7FF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000E804  5B                POP      EBX

    LINE      9071

    0000E805  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000E80C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000E811  5B                POP      EBX

    LINE      9073

    0000E812  B8 0A000000       MOV      EAX,10
    0000E817  40                INC      EAX
    0000E818  50                PUSH     EAX
    0000E819  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E81C  5B                POP      EBX
    0000E81D  3B C3             CMP      EAX,EBX
    0000E81F  0F 8503000000     JNE      3
    0000E825  EB                JMP      

    LINE      9087

    0000E826  56                PUSH     ESI
    0000E827  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000E82D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000E833  FF D1             CALL     ECX                       run_inner_proc
    0000E835  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9089

    0000E836  B8 01000000       MOV      EAX,1
    0000E83B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9091

    0000E83E  B8 01000000       MOV      EAX,1
    0000E843  8B C8             MOV      ECX,EAX
    0000E845  B8 0A000000       MOV      EAX,10
    0000E84A  50                PUSH     EAX
    0000E84B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000E84E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E851  5B                POP      EBX
    0000E852  53                PUSH     EBX
    0000E853  3B C3             CMP      EAX,EBX
    0000E855  0F 8E03000000     JLE      3
    0000E85B  EB                JMP      

    LINE      9093

    0000E85C  B8 01000000       MOV      EAX,1
    0000E861  8B C8             MOV      ECX,EAX
    0000E863  B8 05000000       MOV      EAX,5
    0000E868  50                PUSH     EAX
    0000E869  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000E86C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E86F  5B                POP      EBX
    0000E870  53                PUSH     EBX
    0000E871  3B C3             CMP      EAX,EBX
    0000E873  0F 8E03000000     JLE      3
    0000E879  EB                JMP      

    LINE      9100

    0000E87A  B8 01000000       MOV      EAX,1
    0000E87F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9101

    0000E882  B8 01000000       MOV      EAX,1
    0000E887  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9102

    0000E88A  B8 01000000       MOV      EAX,1
    0000E88F  8B C8             MOV      ECX,EAX
    0000E891  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E894  48                DEC      EAX
    0000E895  BB 0E000000       MOV      EBX,14
    0000E89A  F7 E3             MUL      EBX
    0000E89C  50                PUSH     EAX
    0000E89D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E8A0  48                DEC      EAX
    0000E8A1  BB 02000000       MOV      EBX,2
    0000E8A6  F7 E3             MUL      EBX
    0000E8A8  5B                POP      EBX
    0000E8A9  03 C3             ADD      EAX,EBX
    0000E8AB  8B F8             MOV      EDI,EAX
    0000E8AD  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9103

    0000E8B1  B8 01000000       MOV      EAX,1
    0000E8B6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9104

    0000E8B9  B8 01000000       MOV      EAX,1
    0000E8BE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9106

    0000E8C1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000E8C8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000E8CD  5B                POP      EBX

    LINE      9108

    0000E8CE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000E8D5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000E8DA  5B                POP      EBX

    LINE      9110

    0000E8DB  B8 0A000000       MOV      EAX,10
    0000E8E0  40                INC      EAX
    0000E8E1  50                PUSH     EAX
    0000E8E2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E8E5  5B                POP      EBX
    0000E8E6  3B C3             CMP      EAX,EBX
    0000E8E8  0F 8503000000     JNE      3
    0000E8EE  EB                JMP      

    LINE      9117

    0000E8EF  B8 01000000       MOV      EAX,1
    0000E8F4  8B C8             MOV      ECX,EAX
    0000E8F6  B8 0A000000       MOV      EAX,10
    0000E8FB  50                PUSH     EAX
    0000E8FC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000E8FF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E902  5B                POP      EBX
    0000E903  53                PUSH     EBX
    0000E904  3B C3             CMP      EAX,EBX
    0000E906  0F 8E03000000     JLE      3
    0000E90C  EB                JMP      

    LINE      9119

    0000E90D  B8 01000000       MOV      EAX,1
    0000E912  8B C8             MOV      ECX,EAX
    0000E914  B8 05000000       MOV      EAX,5
    0000E919  50                PUSH     EAX
    0000E91A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000E91D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E920  5B                POP      EBX
    0000E921  53                PUSH     EBX
    0000E922  3B C3             CMP      EAX,EBX
    0000E924  0F 8E03000000     JLE      3
    0000E92A  EB                JMP      

    LINE      9126

    0000E92B  B8 01000000       MOV      EAX,1
    0000E930  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9127

    0000E933  B8 01000000       MOV      EAX,1
    0000E938  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9128

    0000E93B  B8 01000000       MOV      EAX,1
    0000E940  8B C8             MOV      ECX,EAX
    0000E942  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000E945  48                DEC      EAX
    0000E946  BB 0E000000       MOV      EBX,14
    0000E94B  F7 E3             MUL      EBX
    0000E94D  50                PUSH     EAX
    0000E94E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000E951  48                DEC      EAX
    0000E952  BB 02000000       MOV      EBX,2
    0000E957  F7 E3             MUL      EBX
    0000E959  5B                POP      EBX
    0000E95A  03 C3             ADD      EAX,EBX
    0000E95C  8B F8             MOV      EDI,EAX
    0000E95E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9129

    0000E962  B8 01000000       MOV      EAX,1
    0000E967  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9130

    0000E96A  B8 01000000       MOV      EAX,1
    0000E96F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9132

    0000E972  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000E979  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000E97E  5B                POP      EBX

    LINE      9134

    0000E97F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000E986  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000E98B  5B                POP      EBX

    LINE      9136

    0000E98C  B8 0A000000       MOV      EAX,10
    0000E991  40                INC      EAX
    0000E992  50                PUSH     EAX
    0000E993  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E996  5B                POP      EBX
    0000E997  3B C3             CMP      EAX,EBX
    0000E999  0F 8503000000     JNE      3
    0000E99F  EB                JMP      

    LINE      9144

    0000E9A0  B8 01000000       MOV      EAX,1
    0000E9A5  8B C8             MOV      ECX,EAX
    0000E9A7  B8 0A000000       MOV      EAX,10
    0000E9AC  50                PUSH     EAX
    0000E9AD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000E9B0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E9B3  5B                POP      EBX
    0000E9B4  53                PUSH     EBX
    0000E9B5  3B C3             CMP      EAX,EBX
    0000E9B7  0F 8E03000000     JLE      3
    0000E9BD  EB                JMP      

    LINE      9146

    0000E9BE  B8 01000000       MOV      EAX,1
    0000E9C3  8B C8             MOV      ECX,EAX
    0000E9C5  B8 05000000       MOV      EAX,5
    0000E9CA  50                PUSH     EAX
    0000E9CB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000E9CE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000E9D1  5B                POP      EBX
    0000E9D2  53                PUSH     EBX
    0000E9D3  3B C3             CMP      EAX,EBX
    0000E9D5  0F 8E03000000     JLE      3
    0000E9DB  EB                JMP      

    LINE      9153

    0000E9DC  B8 01000000       MOV      EAX,1
    0000E9E1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9154

    0000E9E7  B8 01000000       MOV      EAX,1
    0000E9EC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9155

    0000E9F2  B8 01000000       MOV      EAX,1
    0000E9F7  8B C8             MOV      ECX,EAX
    0000E9F9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000E9FC  48                DEC      EAX
    0000E9FD  BB 0E000000       MOV      EBX,14
    0000EA02  F7 E3             MUL      EBX
    0000EA04  50                PUSH     EAX
    0000EA05  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000EA08  48                DEC      EAX
    0000EA09  BB 02000000       MOV      EBX,2
    0000EA0E  F7 E3             MUL      EBX
    0000EA10  5B                POP      EBX
    0000EA11  03 C3             ADD      EAX,EBX
    0000EA13  8B F8             MOV      EDI,EAX
    0000EA15  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9156

    0000EA1C  B8 01000000       MOV      EAX,1
    0000EA21  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9157

    0000EA27  B8 01000000       MOV      EAX,1
    0000EA2C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9159

    0000EA32  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000EA39  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000EA3E  5B                POP      EBX

    LINE      9161

    0000EA3F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000EA46  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000EA4B  5B                POP      EBX

    LINE      9163

    0000EA4C  B8 0A000000       MOV      EAX,10
    0000EA51  40                INC      EAX
    0000EA52  50                PUSH     EAX
    0000EA53  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EA56  5B                POP      EBX
    0000EA57  3B C3             CMP      EAX,EBX
    0000EA59  0F 8503000000     JNE      3
    0000EA5F  EB                JMP      

    LINE      9170

    0000EA60  B8 01000000       MOV      EAX,1
    0000EA65  8B C8             MOV      ECX,EAX
    0000EA67  B8 0A000000       MOV      EAX,10
    0000EA6C  50                PUSH     EAX
    0000EA6D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000EA70  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000EA73  5B                POP      EBX
    0000EA74  53                PUSH     EBX
    0000EA75  3B C3             CMP      EAX,EBX
    0000EA77  0F 8E03000000     JLE      3
    0000EA7D  EB                JMP      

    LINE      9172

    0000EA7E  B8 01000000       MOV      EAX,1
    0000EA83  8B C8             MOV      ECX,EAX
    0000EA85  B8 05000000       MOV      EAX,5
    0000EA8A  50                PUSH     EAX
    0000EA8B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000EA8E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000EA91  5B                POP      EBX
    0000EA92  53                PUSH     EBX
    0000EA93  3B C3             CMP      EAX,EBX
    0000EA95  0F 8E03000000     JLE      3
    0000EA9B  EB                JMP      

    LINE      9179

    0000EA9C  B8 01000000       MOV      EAX,1
    0000EAA1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9180

    0000EAA7  B8 01000000       MOV      EAX,1
    0000EAAC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9181

    0000EAB2  B8 01000000       MOV      EAX,1
    0000EAB7  8B C8             MOV      ECX,EAX
    0000EAB9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000EABC  48                DEC      EAX
    0000EABD  BB 0E000000       MOV      EBX,14
    0000EAC2  F7 E3             MUL      EBX
    0000EAC4  50                PUSH     EAX
    0000EAC5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000EAC8  48                DEC      EAX
    0000EAC9  BB 02000000       MOV      EBX,2
    0000EACE  F7 E3             MUL      EBX
    0000EAD0  5B                POP      EBX
    0000EAD1  03 C3             ADD      EAX,EBX
    0000EAD3  8B F8             MOV      EDI,EAX
    0000EAD5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9182

    0000EADC  B8 01000000       MOV      EAX,1
    0000EAE1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9183

    0000EAE7  B8 01000000       MOV      EAX,1
    0000EAEC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9185

    0000EAF2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000EAF9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000EAFE  5B                POP      EBX

    LINE      9187

    0000EAFF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000EB06  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000EB0B  5B                POP      EBX

    LINE      9189

    0000EB0C  B8 0A000000       MOV      EAX,10
    0000EB11  40                INC      EAX
    0000EB12  50                PUSH     EAX
    0000EB13  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EB16  5B                POP      EBX
    0000EB17  3B C3             CMP      EAX,EBX
    0000EB19  0F 8503000000     JNE      3
    0000EB1F  EB                JMP      

    LINE      9203

    0000EB20  56                PUSH     ESI
    0000EB21  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000EB27  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000EB2D  FF D1             CALL     ECX                       run_inner_proc
    0000EB2F  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9205

    0000EB30  B8 01000000       MOV      EAX,1
    0000EB35  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9207

    0000EB38  B8 01000000       MOV      EAX,1
    0000EB3D  8B C8             MOV      ECX,EAX
    0000EB3F  B8 0A000000       MOV      EAX,10
    0000EB44  50                PUSH     EAX
    0000EB45  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000EB48  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EB4B  5B                POP      EBX
    0000EB4C  53                PUSH     EBX
    0000EB4D  3B C3             CMP      EAX,EBX
    0000EB4F  0F 8E03000000     JLE      3
    0000EB55  EB                JMP      

    LINE      9209

    0000EB56  B8 01000000       MOV      EAX,1
    0000EB5B  8B C8             MOV      ECX,EAX
    0000EB5D  B8 05000000       MOV      EAX,5
    0000EB62  50                PUSH     EAX
    0000EB63  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000EB66  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000EB69  5B                POP      EBX
    0000EB6A  53                PUSH     EBX
    0000EB6B  3B C3             CMP      EAX,EBX
    0000EB6D  0F 8E03000000     JLE      3
    0000EB73  EB                JMP      

    LINE      9216

    0000EB74  B8 01000000       MOV      EAX,1
    0000EB79  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9217

    0000EB7C  B8 01000000       MOV      EAX,1
    0000EB81  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9218

    0000EB84  B8 01000000       MOV      EAX,1
    0000EB89  8B C8             MOV      ECX,EAX
    0000EB8B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EB8E  48                DEC      EAX
    0000EB8F  BB 0E000000       MOV      EBX,14
    0000EB94  F7 E3             MUL      EBX
    0000EB96  50                PUSH     EAX
    0000EB97  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000EB9A  48                DEC      EAX
    0000EB9B  BB 02000000       MOV      EBX,2
    0000EBA0  F7 E3             MUL      EBX
    0000EBA2  5B                POP      EBX
    0000EBA3  03 C3             ADD      EAX,EBX
    0000EBA5  8B F8             MOV      EDI,EAX
    0000EBA7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9219

    0000EBAB  B8 01000000       MOV      EAX,1
    0000EBB0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9220

    0000EBB3  B8 01000000       MOV      EAX,1
    0000EBB8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9222

    0000EBBB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000EBC2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000EBC7  5B                POP      EBX

    LINE      9224

    0000EBC8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000EBCF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000EBD4  5B                POP      EBX

    LINE      9226

    0000EBD5  B8 0A000000       MOV      EAX,10
    0000EBDA  40                INC      EAX
    0000EBDB  50                PUSH     EAX
    0000EBDC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EBDF  5B                POP      EBX
    0000EBE0  3B C3             CMP      EAX,EBX
    0000EBE2  0F 8503000000     JNE      3
    0000EBE8  EB                JMP      

    LINE      9233

    0000EBE9  B8 01000000       MOV      EAX,1
    0000EBEE  8B C8             MOV      ECX,EAX
    0000EBF0  B8 0A000000       MOV      EAX,10
    0000EBF5  50                PUSH     EAX
    0000EBF6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000EBF9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000EBFC  5B                POP      EBX
    0000EBFD  53                PUSH     EBX
    0000EBFE  3B C3             CMP      EAX,EBX
    0000EC00  0F 8E03000000     JLE      3
    0000EC06  EB                JMP      

    LINE      9235

    0000EC07  B8 01000000       MOV      EAX,1
    0000EC0C  8B C8             MOV      ECX,EAX
    0000EC0E  B8 05000000       MOV      EAX,5
    0000EC13  50                PUSH     EAX
    0000EC14  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000EC17  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000EC1A  5B                POP      EBX
    0000EC1B  53                PUSH     EBX
    0000EC1C  3B C3             CMP      EAX,EBX
    0000EC1E  0F 8E03000000     JLE      3
    0000EC24  EB                JMP      

    LINE      9242

    0000EC25  B8 01000000       MOV      EAX,1
    0000EC2A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9243

    0000EC2D  B8 01000000       MOV      EAX,1
    0000EC32  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9244

    0000EC35  B8 01000000       MOV      EAX,1
    0000EC3A  8B C8             MOV      ECX,EAX
    0000EC3C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000EC3F  48                DEC      EAX
    0000EC40  BB 0E000000       MOV      EBX,14
    0000EC45  F7 E3             MUL      EBX
    0000EC47  50                PUSH     EAX
    0000EC48  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000EC4B  48                DEC      EAX
    0000EC4C  BB 02000000       MOV      EBX,2
    0000EC51  F7 E3             MUL      EBX
    0000EC53  5B                POP      EBX
    0000EC54  03 C3             ADD      EAX,EBX
    0000EC56  8B F8             MOV      EDI,EAX
    0000EC58  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9245

    0000EC5C  B8 01000000       MOV      EAX,1
    0000EC61  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9246

    0000EC64  B8 01000000       MOV      EAX,1
    0000EC69  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9248

    0000EC6C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000EC73  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000EC78  5B                POP      EBX

    LINE      9250

    0000EC79  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000EC80  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000EC85  5B                POP      EBX

    LINE      9252

    0000EC86  B8 0A000000       MOV      EAX,10
    0000EC8B  40                INC      EAX
    0000EC8C  50                PUSH     EAX
    0000EC8D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EC90  5B                POP      EBX
    0000EC91  3B C3             CMP      EAX,EBX
    0000EC93  0F 8503000000     JNE      3
    0000EC99  EB                JMP      

    LINE      9260

    0000EC9A  B8 01000000       MOV      EAX,1
    0000EC9F  8B C8             MOV      ECX,EAX
    0000ECA1  B8 0A000000       MOV      EAX,10
    0000ECA6  50                PUSH     EAX
    0000ECA7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000ECAA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000ECAD  5B                POP      EBX
    0000ECAE  53                PUSH     EBX
    0000ECAF  3B C3             CMP      EAX,EBX
    0000ECB1  0F 8E03000000     JLE      3
    0000ECB7  EB                JMP      

    LINE      9262

    0000ECB8  B8 01000000       MOV      EAX,1
    0000ECBD  8B C8             MOV      ECX,EAX
    0000ECBF  B8 05000000       MOV      EAX,5
    0000ECC4  50                PUSH     EAX
    0000ECC5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000ECC8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000ECCB  5B                POP      EBX
    0000ECCC  53                PUSH     EBX
    0000ECCD  3B C3             CMP      EAX,EBX
    0000ECCF  0F 8E03000000     JLE      3
    0000ECD5  EB                JMP      

    LINE      9269

    0000ECD6  B8 01000000       MOV      EAX,1
    0000ECDB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9270

    0000ECE1  B8 01000000       MOV      EAX,1
    0000ECE6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9271

    0000ECEC  B8 01000000       MOV      EAX,1
    0000ECF1  8B C8             MOV      ECX,EAX
    0000ECF3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000ECF6  48                DEC      EAX
    0000ECF7  BB 0E000000       MOV      EBX,14
    0000ECFC  F7 E3             MUL      EBX
    0000ECFE  50                PUSH     EAX
    0000ECFF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000ED02  48                DEC      EAX
    0000ED03  BB 02000000       MOV      EBX,2
    0000ED08  F7 E3             MUL      EBX
    0000ED0A  5B                POP      EBX
    0000ED0B  03 C3             ADD      EAX,EBX
    0000ED0D  8B F8             MOV      EDI,EAX
    0000ED0F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9272

    0000ED16  B8 01000000       MOV      EAX,1
    0000ED1B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9273

    0000ED21  B8 01000000       MOV      EAX,1
    0000ED26  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9275

    0000ED2C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000ED33  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000ED38  5B                POP      EBX

    LINE      9277

    0000ED39  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000ED40  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000ED45  5B                POP      EBX

    LINE      9279

    0000ED46  B8 0A000000       MOV      EAX,10
    0000ED4B  40                INC      EAX
    0000ED4C  50                PUSH     EAX
    0000ED4D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000ED50  5B                POP      EBX
    0000ED51  3B C3             CMP      EAX,EBX
    0000ED53  0F 8503000000     JNE      3
    0000ED59  EB                JMP      

    LINE      9286

    0000ED5A  B8 01000000       MOV      EAX,1
    0000ED5F  8B C8             MOV      ECX,EAX
    0000ED61  B8 0A000000       MOV      EAX,10
    0000ED66  50                PUSH     EAX
    0000ED67  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000ED6A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000ED6D  5B                POP      EBX
    0000ED6E  53                PUSH     EBX
    0000ED6F  3B C3             CMP      EAX,EBX
    0000ED71  0F 8E03000000     JLE      3
    0000ED77  EB                JMP      

    LINE      9288

    0000ED78  B8 01000000       MOV      EAX,1
    0000ED7D  8B C8             MOV      ECX,EAX
    0000ED7F  B8 05000000       MOV      EAX,5
    0000ED84  50                PUSH     EAX
    0000ED85  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000ED88  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000ED8B  5B                POP      EBX
    0000ED8C  53                PUSH     EBX
    0000ED8D  3B C3             CMP      EAX,EBX
    0000ED8F  0F 8E03000000     JLE      3
    0000ED95  EB                JMP      

    LINE      9295

    0000ED96  B8 01000000       MOV      EAX,1
    0000ED9B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9296

    0000EDA1  B8 01000000       MOV      EAX,1
    0000EDA6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9297

    0000EDAC  B8 01000000       MOV      EAX,1
    0000EDB1  8B C8             MOV      ECX,EAX
    0000EDB3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000EDB6  48                DEC      EAX
    0000EDB7  BB 0E000000       MOV      EBX,14
    0000EDBC  F7 E3             MUL      EBX
    0000EDBE  50                PUSH     EAX
    0000EDBF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000EDC2  48                DEC      EAX
    0000EDC3  BB 02000000       MOV      EBX,2
    0000EDC8  F7 E3             MUL      EBX
    0000EDCA  5B                POP      EBX
    0000EDCB  03 C3             ADD      EAX,EBX
    0000EDCD  8B F8             MOV      EDI,EAX
    0000EDCF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9298

    0000EDD6  B8 01000000       MOV      EAX,1
    0000EDDB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9299

    0000EDE1  B8 01000000       MOV      EAX,1
    0000EDE6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9301

    0000EDEC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000EDF3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000EDF8  5B                POP      EBX

    LINE      9303

    0000EDF9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000EE00  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000EE05  5B                POP      EBX

    LINE      9305

    0000EE06  B8 0A000000       MOV      EAX,10
    0000EE0B  40                INC      EAX
    0000EE0C  50                PUSH     EAX
    0000EE0D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EE10  5B                POP      EBX
    0000EE11  3B C3             CMP      EAX,EBX
    0000EE13  0F 8503000000     JNE      3
    0000EE19  EB                JMP      

    LINE      9319

    0000EE1A  56                PUSH     ESI
    0000EE1B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000EE21  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000EE27  FF D1             CALL     ECX                       run_inner_proc
    0000EE29  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9321

    0000EE2A  B8 01000000       MOV      EAX,1
    0000EE2F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9323

    0000EE32  B8 01000000       MOV      EAX,1
    0000EE37  8B C8             MOV      ECX,EAX
    0000EE39  B8 0A000000       MOV      EAX,10
    0000EE3E  50                PUSH     EAX
    0000EE3F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000EE42  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EE45  5B                POP      EBX
    0000EE46  53                PUSH     EBX
    0000EE47  3B C3             CMP      EAX,EBX
    0000EE49  0F 8E03000000     JLE      3
    0000EE4F  EB                JMP      

    LINE      9325

    0000EE50  B8 01000000       MOV      EAX,1
    0000EE55  8B C8             MOV      ECX,EAX
    0000EE57  B8 05000000       MOV      EAX,5
    0000EE5C  50                PUSH     EAX
    0000EE5D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000EE60  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000EE63  5B                POP      EBX
    0000EE64  53                PUSH     EBX
    0000EE65  3B C3             CMP      EAX,EBX
    0000EE67  0F 8E03000000     JLE      3
    0000EE6D  EB                JMP      

    LINE      9332

    0000EE6E  B8 01000000       MOV      EAX,1
    0000EE73  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9333

    0000EE76  B8 01000000       MOV      EAX,1
    0000EE7B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9334

    0000EE7E  B8 01000000       MOV      EAX,1
    0000EE83  8B C8             MOV      ECX,EAX
    0000EE85  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EE88  48                DEC      EAX
    0000EE89  BB 0E000000       MOV      EBX,14
    0000EE8E  F7 E3             MUL      EBX
    0000EE90  50                PUSH     EAX
    0000EE91  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000EE94  48                DEC      EAX
    0000EE95  BB 02000000       MOV      EBX,2
    0000EE9A  F7 E3             MUL      EBX
    0000EE9C  5B                POP      EBX
    0000EE9D  03 C3             ADD      EAX,EBX
    0000EE9F  8B F8             MOV      EDI,EAX
    0000EEA1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9335

    0000EEA5  B8 01000000       MOV      EAX,1
    0000EEAA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9336

    0000EEAD  B8 01000000       MOV      EAX,1
    0000EEB2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9338

    0000EEB5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000EEBC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000EEC1  5B                POP      EBX

    LINE      9340

    0000EEC2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000EEC9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000EECE  5B                POP      EBX

    LINE      9342

    0000EECF  B8 0A000000       MOV      EAX,10
    0000EED4  40                INC      EAX
    0000EED5  50                PUSH     EAX
    0000EED6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EED9  5B                POP      EBX
    0000EEDA  3B C3             CMP      EAX,EBX
    0000EEDC  0F 8503000000     JNE      3
    0000EEE2  EB                JMP      

    LINE      9349

    0000EEE3  B8 01000000       MOV      EAX,1
    0000EEE8  8B C8             MOV      ECX,EAX
    0000EEEA  B8 0A000000       MOV      EAX,10
    0000EEEF  50                PUSH     EAX
    0000EEF0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000EEF3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000EEF6  5B                POP      EBX
    0000EEF7  53                PUSH     EBX
    0000EEF8  3B C3             CMP      EAX,EBX
    0000EEFA  0F 8E03000000     JLE      3
    0000EF00  EB                JMP      

    LINE      9351

    0000EF01  B8 01000000       MOV      EAX,1
    0000EF06  8B C8             MOV      ECX,EAX
    0000EF08  B8 05000000       MOV      EAX,5
    0000EF0D  50                PUSH     EAX
    0000EF0E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000EF11  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000EF14  5B                POP      EBX
    0000EF15  53                PUSH     EBX
    0000EF16  3B C3             CMP      EAX,EBX
    0000EF18  0F 8E03000000     JLE      3
    0000EF1E  EB                JMP      

    LINE      9358

    0000EF1F  B8 01000000       MOV      EAX,1
    0000EF24  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9359

    0000EF27  B8 01000000       MOV      EAX,1
    0000EF2C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9360

    0000EF2F  B8 01000000       MOV      EAX,1
    0000EF34  8B C8             MOV      ECX,EAX
    0000EF36  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000EF39  48                DEC      EAX
    0000EF3A  BB 0E000000       MOV      EBX,14
    0000EF3F  F7 E3             MUL      EBX
    0000EF41  50                PUSH     EAX
    0000EF42  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000EF45  48                DEC      EAX
    0000EF46  BB 02000000       MOV      EBX,2
    0000EF4B  F7 E3             MUL      EBX
    0000EF4D  5B                POP      EBX
    0000EF4E  03 C3             ADD      EAX,EBX
    0000EF50  8B F8             MOV      EDI,EAX
    0000EF52  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9361

    0000EF56  B8 01000000       MOV      EAX,1
    0000EF5B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9362

    0000EF5E  B8 01000000       MOV      EAX,1
    0000EF63  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9364

    0000EF66  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000EF6D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000EF72  5B                POP      EBX

    LINE      9366

    0000EF73  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000EF7A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000EF7F  5B                POP      EBX

    LINE      9368

    0000EF80  B8 0A000000       MOV      EAX,10
    0000EF85  40                INC      EAX
    0000EF86  50                PUSH     EAX
    0000EF87  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EF8A  5B                POP      EBX
    0000EF8B  3B C3             CMP      EAX,EBX
    0000EF8D  0F 8503000000     JNE      3
    0000EF93  EB                JMP      

    LINE      9376

    0000EF94  B8 01000000       MOV      EAX,1
    0000EF99  8B C8             MOV      ECX,EAX
    0000EF9B  B8 0A000000       MOV      EAX,10
    0000EFA0  50                PUSH     EAX
    0000EFA1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000EFA4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EFA7  5B                POP      EBX
    0000EFA8  53                PUSH     EBX
    0000EFA9  3B C3             CMP      EAX,EBX
    0000EFAB  0F 8E03000000     JLE      3
    0000EFB1  EB                JMP      

    LINE      9378

    0000EFB2  B8 01000000       MOV      EAX,1
    0000EFB7  8B C8             MOV      ECX,EAX
    0000EFB9  B8 05000000       MOV      EAX,5
    0000EFBE  50                PUSH     EAX
    0000EFBF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000EFC2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000EFC5  5B                POP      EBX
    0000EFC6  53                PUSH     EBX
    0000EFC7  3B C3             CMP      EAX,EBX
    0000EFC9  0F 8E03000000     JLE      3
    0000EFCF  EB                JMP      

    LINE      9385

    0000EFD0  B8 01000000       MOV      EAX,1
    0000EFD5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9386

    0000EFDB  B8 01000000       MOV      EAX,1
    0000EFE0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9387

    0000EFE6  B8 01000000       MOV      EAX,1
    0000EFEB  8B C8             MOV      ECX,EAX
    0000EFED  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000EFF0  48                DEC      EAX
    0000EFF1  BB 0E000000       MOV      EBX,14
    0000EFF6  F7 E3             MUL      EBX
    0000EFF8  50                PUSH     EAX
    0000EFF9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000EFFC  48                DEC      EAX
    0000EFFD  BB 02000000       MOV      EBX,2
    0000F002  F7 E3             MUL      EBX
    0000F004  5B                POP      EBX
    0000F005  03 C3             ADD      EAX,EBX
    0000F007  8B F8             MOV      EDI,EAX
    0000F009  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9388

    0000F010  B8 01000000       MOV      EAX,1
    0000F015  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9389

    0000F01B  B8 01000000       MOV      EAX,1
    0000F020  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9391

    0000F026  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000F02D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F032  5B                POP      EBX

    LINE      9393

    0000F033  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000F03A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F03F  5B                POP      EBX

    LINE      9395

    0000F040  B8 0A000000       MOV      EAX,10
    0000F045  40                INC      EAX
    0000F046  50                PUSH     EAX
    0000F047  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F04A  5B                POP      EBX
    0000F04B  3B C3             CMP      EAX,EBX
    0000F04D  0F 8503000000     JNE      3
    0000F053  EB                JMP      

    LINE      9402

    0000F054  B8 01000000       MOV      EAX,1
    0000F059  8B C8             MOV      ECX,EAX
    0000F05B  B8 0A000000       MOV      EAX,10
    0000F060  50                PUSH     EAX
    0000F061  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000F064  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F067  5B                POP      EBX
    0000F068  53                PUSH     EBX
    0000F069  3B C3             CMP      EAX,EBX
    0000F06B  0F 8E03000000     JLE      3
    0000F071  EB                JMP      

    LINE      9404

    0000F072  B8 01000000       MOV      EAX,1
    0000F077  8B C8             MOV      ECX,EAX
    0000F079  B8 05000000       MOV      EAX,5
    0000F07E  50                PUSH     EAX
    0000F07F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000F082  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F085  5B                POP      EBX
    0000F086  53                PUSH     EBX
    0000F087  3B C3             CMP      EAX,EBX
    0000F089  0F 8E03000000     JLE      3
    0000F08F  EB                JMP      

    LINE      9411

    0000F090  B8 01000000       MOV      EAX,1
    0000F095  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9412

    0000F09B  B8 01000000       MOV      EAX,1
    0000F0A0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9413

    0000F0A6  B8 01000000       MOV      EAX,1
    0000F0AB  8B C8             MOV      ECX,EAX
    0000F0AD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F0B0  48                DEC      EAX
    0000F0B1  BB 0E000000       MOV      EBX,14
    0000F0B6  F7 E3             MUL      EBX
    0000F0B8  50                PUSH     EAX
    0000F0B9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F0BC  48                DEC      EAX
    0000F0BD  BB 02000000       MOV      EBX,2
    0000F0C2  F7 E3             MUL      EBX
    0000F0C4  5B                POP      EBX
    0000F0C5  03 C3             ADD      EAX,EBX
    0000F0C7  8B F8             MOV      EDI,EAX
    0000F0C9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9414

    0000F0D0  B8 01000000       MOV      EAX,1
    0000F0D5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9415

    0000F0DB  B8 01000000       MOV      EAX,1
    0000F0E0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9417

    0000F0E6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000F0ED  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F0F2  5B                POP      EBX

    LINE      9419

    0000F0F3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000F0FA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F0FF  5B                POP      EBX

    LINE      9421

    0000F100  B8 0A000000       MOV      EAX,10
    0000F105  40                INC      EAX
    0000F106  50                PUSH     EAX
    0000F107  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F10A  5B                POP      EBX
    0000F10B  3B C3             CMP      EAX,EBX
    0000F10D  0F 8503000000     JNE      3
    0000F113  EB                JMP      

    LINE      9435

    0000F114  56                PUSH     ESI
    0000F115  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000F11B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000F121  FF D1             CALL     ECX                       run_inner_proc
    0000F123  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9437

    0000F124  B8 01000000       MOV      EAX,1
    0000F129  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9439

    0000F12C  B8 01000000       MOV      EAX,1
    0000F131  8B C8             MOV      ECX,EAX
    0000F133  B8 0A000000       MOV      EAX,10
    0000F138  50                PUSH     EAX
    0000F139  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000F13C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F13F  5B                POP      EBX
    0000F140  53                PUSH     EBX
    0000F141  3B C3             CMP      EAX,EBX
    0000F143  0F 8E03000000     JLE      3
    0000F149  EB                JMP      

    LINE      9441

    0000F14A  B8 01000000       MOV      EAX,1
    0000F14F  8B C8             MOV      ECX,EAX
    0000F151  B8 05000000       MOV      EAX,5
    0000F156  50                PUSH     EAX
    0000F157  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000F15A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F15D  5B                POP      EBX
    0000F15E  53                PUSH     EBX
    0000F15F  3B C3             CMP      EAX,EBX
    0000F161  0F 8E03000000     JLE      3
    0000F167  EB                JMP      

    LINE      9448

    0000F168  B8 01000000       MOV      EAX,1
    0000F16D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9449

    0000F170  B8 01000000       MOV      EAX,1
    0000F175  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9450

    0000F178  B8 01000000       MOV      EAX,1
    0000F17D  8B C8             MOV      ECX,EAX
    0000F17F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F182  48                DEC      EAX
    0000F183  BB 0E000000       MOV      EBX,14
    0000F188  F7 E3             MUL      EBX
    0000F18A  50                PUSH     EAX
    0000F18B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F18E  48                DEC      EAX
    0000F18F  BB 02000000       MOV      EBX,2
    0000F194  F7 E3             MUL      EBX
    0000F196  5B                POP      EBX
    0000F197  03 C3             ADD      EAX,EBX
    0000F199  8B F8             MOV      EDI,EAX
    0000F19B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9451

    0000F19F  B8 01000000       MOV      EAX,1
    0000F1A4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9452

    0000F1A7  B8 01000000       MOV      EAX,1
    0000F1AC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9454

    0000F1AF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000F1B6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000F1BB  5B                POP      EBX

    LINE      9456

    0000F1BC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000F1C3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000F1C8  5B                POP      EBX

    LINE      9458

    0000F1C9  B8 0A000000       MOV      EAX,10
    0000F1CE  40                INC      EAX
    0000F1CF  50                PUSH     EAX
    0000F1D0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F1D3  5B                POP      EBX
    0000F1D4  3B C3             CMP      EAX,EBX
    0000F1D6  0F 8503000000     JNE      3
    0000F1DC  EB                JMP      

    LINE      9465

    0000F1DD  B8 01000000       MOV      EAX,1
    0000F1E2  8B C8             MOV      ECX,EAX
    0000F1E4  B8 0A000000       MOV      EAX,10
    0000F1E9  50                PUSH     EAX
    0000F1EA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000F1ED  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F1F0  5B                POP      EBX
    0000F1F1  53                PUSH     EBX
    0000F1F2  3B C3             CMP      EAX,EBX
    0000F1F4  0F 8E03000000     JLE      3
    0000F1FA  EB                JMP      

    LINE      9467

    0000F1FB  B8 01000000       MOV      EAX,1
    0000F200  8B C8             MOV      ECX,EAX
    0000F202  B8 05000000       MOV      EAX,5
    0000F207  50                PUSH     EAX
    0000F208  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000F20B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F20E  5B                POP      EBX
    0000F20F  53                PUSH     EBX
    0000F210  3B C3             CMP      EAX,EBX
    0000F212  0F 8E03000000     JLE      3
    0000F218  EB                JMP      

    LINE      9474

    0000F219  B8 01000000       MOV      EAX,1
    0000F21E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9475

    0000F221  B8 01000000       MOV      EAX,1
    0000F226  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9476

    0000F229  B8 01000000       MOV      EAX,1
    0000F22E  8B C8             MOV      ECX,EAX
    0000F230  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F233  48                DEC      EAX
    0000F234  BB 0E000000       MOV      EBX,14
    0000F239  F7 E3             MUL      EBX
    0000F23B  50                PUSH     EAX
    0000F23C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F23F  48                DEC      EAX
    0000F240  BB 02000000       MOV      EBX,2
    0000F245  F7 E3             MUL      EBX
    0000F247  5B                POP      EBX
    0000F248  03 C3             ADD      EAX,EBX
    0000F24A  8B F8             MOV      EDI,EAX
    0000F24C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9477

    0000F250  B8 01000000       MOV      EAX,1
    0000F255  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9478

    0000F258  B8 01000000       MOV      EAX,1
    0000F25D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9480

    0000F260  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000F267  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000F26C  5B                POP      EBX

    LINE      9482

    0000F26D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000F274  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000F279  5B                POP      EBX

    LINE      9484

    0000F27A  B8 0A000000       MOV      EAX,10
    0000F27F  40                INC      EAX
    0000F280  50                PUSH     EAX
    0000F281  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F284  5B                POP      EBX
    0000F285  3B C3             CMP      EAX,EBX
    0000F287  0F 8503000000     JNE      3
    0000F28D  EB                JMP      

    LINE      9492

    0000F28E  B8 01000000       MOV      EAX,1
    0000F293  8B C8             MOV      ECX,EAX
    0000F295  B8 0A000000       MOV      EAX,10
    0000F29A  50                PUSH     EAX
    0000F29B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000F29E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F2A1  5B                POP      EBX
    0000F2A2  53                PUSH     EBX
    0000F2A3  3B C3             CMP      EAX,EBX
    0000F2A5  0F 8E03000000     JLE      3
    0000F2AB  EB                JMP      

    LINE      9494

    0000F2AC  B8 01000000       MOV      EAX,1
    0000F2B1  8B C8             MOV      ECX,EAX
    0000F2B3  B8 05000000       MOV      EAX,5
    0000F2B8  50                PUSH     EAX
    0000F2B9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000F2BC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F2BF  5B                POP      EBX
    0000F2C0  53                PUSH     EBX
    0000F2C1  3B C3             CMP      EAX,EBX
    0000F2C3  0F 8E03000000     JLE      3
    0000F2C9  EB                JMP      

    LINE      9501

    0000F2CA  B8 01000000       MOV      EAX,1
    0000F2CF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9502

    0000F2D5  B8 01000000       MOV      EAX,1
    0000F2DA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9503

    0000F2E0  B8 01000000       MOV      EAX,1
    0000F2E5  8B C8             MOV      ECX,EAX
    0000F2E7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F2EA  48                DEC      EAX
    0000F2EB  BB 0E000000       MOV      EBX,14
    0000F2F0  F7 E3             MUL      EBX
    0000F2F2  50                PUSH     EAX
    0000F2F3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F2F6  48                DEC      EAX
    0000F2F7  BB 02000000       MOV      EBX,2
    0000F2FC  F7 E3             MUL      EBX
    0000F2FE  5B                POP      EBX
    0000F2FF  03 C3             ADD      EAX,EBX
    0000F301  8B F8             MOV      EDI,EAX
    0000F303  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9504

    0000F30A  B8 01000000       MOV      EAX,1
    0000F30F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9505

    0000F315  B8 01000000       MOV      EAX,1
    0000F31A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9507

    0000F320  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000F327  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F32C  5B                POP      EBX

    LINE      9509

    0000F32D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000F334  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F339  5B                POP      EBX

    LINE      9511

    0000F33A  B8 0A000000       MOV      EAX,10
    0000F33F  40                INC      EAX
    0000F340  50                PUSH     EAX
    0000F341  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F344  5B                POP      EBX
    0000F345  3B C3             CMP      EAX,EBX
    0000F347  0F 8503000000     JNE      3
    0000F34D  EB                JMP      

    LINE      9518

    0000F34E  B8 01000000       MOV      EAX,1
    0000F353  8B C8             MOV      ECX,EAX
    0000F355  B8 0A000000       MOV      EAX,10
    0000F35A  50                PUSH     EAX
    0000F35B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000F35E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F361  5B                POP      EBX
    0000F362  53                PUSH     EBX
    0000F363  3B C3             CMP      EAX,EBX
    0000F365  0F 8E03000000     JLE      3
    0000F36B  EB                JMP      

    LINE      9520

    0000F36C  B8 01000000       MOV      EAX,1
    0000F371  8B C8             MOV      ECX,EAX
    0000F373  B8 05000000       MOV      EAX,5
    0000F378  50                PUSH     EAX
    0000F379  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000F37C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F37F  5B                POP      EBX
    0000F380  53                PUSH     EBX
    0000F381  3B C3             CMP      EAX,EBX
    0000F383  0F 8E03000000     JLE      3
    0000F389  EB                JMP      

    LINE      9527

    0000F38A  B8 01000000       MOV      EAX,1
    0000F38F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9528

    0000F395  B8 01000000       MOV      EAX,1
    0000F39A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9529

    0000F3A0  B8 01000000       MOV      EAX,1
    0000F3A5  8B C8             MOV      ECX,EAX
    0000F3A7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F3AA  48                DEC      EAX
    0000F3AB  BB 0E000000       MOV      EBX,14
    0000F3B0  F7 E3             MUL      EBX
    0000F3B2  50                PUSH     EAX
    0000F3B3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F3B6  48                DEC      EAX
    0000F3B7  BB 02000000       MOV      EBX,2
    0000F3BC  F7 E3             MUL      EBX
    0000F3BE  5B                POP      EBX
    0000F3BF  03 C3             ADD      EAX,EBX
    0000F3C1  8B F8             MOV      EDI,EAX
    0000F3C3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9530

    0000F3CA  B8 01000000       MOV      EAX,1
    0000F3CF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9531

    0000F3D5  B8 01000000       MOV      EAX,1
    0000F3DA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9533

    0000F3E0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000F3E7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F3EC  5B                POP      EBX

    LINE      9535

    0000F3ED  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000F3F4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F3F9  5B                POP      EBX

    LINE      9537

    0000F3FA  B8 0A000000       MOV      EAX,10
    0000F3FF  40                INC      EAX
    0000F400  50                PUSH     EAX
    0000F401  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F404  5B                POP      EBX
    0000F405  3B C3             CMP      EAX,EBX
    0000F407  0F 8503000000     JNE      3
    0000F40D  EB                JMP      

    LINE      9551

    0000F40E  56                PUSH     ESI
    0000F40F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000F415  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000F41B  FF D1             CALL     ECX                       run_inner_proc
    0000F41D  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9553

    0000F41E  B8 01000000       MOV      EAX,1
    0000F423  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9555

    0000F426  B8 01000000       MOV      EAX,1
    0000F42B  8B C8             MOV      ECX,EAX
    0000F42D  B8 0A000000       MOV      EAX,10
    0000F432  50                PUSH     EAX
    0000F433  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000F436  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F439  5B                POP      EBX
    0000F43A  53                PUSH     EBX
    0000F43B  3B C3             CMP      EAX,EBX
    0000F43D  0F 8E03000000     JLE      3
    0000F443  EB                JMP      

    LINE      9557

    0000F444  B8 01000000       MOV      EAX,1
    0000F449  8B C8             MOV      ECX,EAX
    0000F44B  B8 05000000       MOV      EAX,5
    0000F450  50                PUSH     EAX
    0000F451  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000F454  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F457  5B                POP      EBX
    0000F458  53                PUSH     EBX
    0000F459  3B C3             CMP      EAX,EBX
    0000F45B  0F 8E03000000     JLE      3
    0000F461  EB                JMP      

    LINE      9564

    0000F462  B8 01000000       MOV      EAX,1
    0000F467  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9565

    0000F46A  B8 01000000       MOV      EAX,1
    0000F46F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9566

    0000F472  B8 01000000       MOV      EAX,1
    0000F477  8B C8             MOV      ECX,EAX
    0000F479  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F47C  48                DEC      EAX
    0000F47D  BB 0E000000       MOV      EBX,14
    0000F482  F7 E3             MUL      EBX
    0000F484  50                PUSH     EAX
    0000F485  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F488  48                DEC      EAX
    0000F489  BB 02000000       MOV      EBX,2
    0000F48E  F7 E3             MUL      EBX
    0000F490  5B                POP      EBX
    0000F491  03 C3             ADD      EAX,EBX
    0000F493  8B F8             MOV      EDI,EAX
    0000F495  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9567

    0000F499  B8 01000000       MOV      EAX,1
    0000F49E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9568

    0000F4A1  B8 01000000       MOV      EAX,1
    0000F4A6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9570

    0000F4A9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000F4B0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000F4B5  5B                POP      EBX

    LINE      9572

    0000F4B6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000F4BD  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000F4C2  5B                POP      EBX

    LINE      9574

    0000F4C3  B8 0A000000       MOV      EAX,10
    0000F4C8  40                INC      EAX
    0000F4C9  50                PUSH     EAX
    0000F4CA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F4CD  5B                POP      EBX
    0000F4CE  3B C3             CMP      EAX,EBX
    0000F4D0  0F 8503000000     JNE      3
    0000F4D6  EB                JMP      

    LINE      9581

    0000F4D7  B8 01000000       MOV      EAX,1
    0000F4DC  8B C8             MOV      ECX,EAX
    0000F4DE  B8 0A000000       MOV      EAX,10
    0000F4E3  50                PUSH     EAX
    0000F4E4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000F4E7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F4EA  5B                POP      EBX
    0000F4EB  53                PUSH     EBX
    0000F4EC  3B C3             CMP      EAX,EBX
    0000F4EE  0F 8E03000000     JLE      3
    0000F4F4  EB                JMP      

    LINE      9583

    0000F4F5  B8 01000000       MOV      EAX,1
    0000F4FA  8B C8             MOV      ECX,EAX
    0000F4FC  B8 05000000       MOV      EAX,5
    0000F501  50                PUSH     EAX
    0000F502  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000F505  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F508  5B                POP      EBX
    0000F509  53                PUSH     EBX
    0000F50A  3B C3             CMP      EAX,EBX
    0000F50C  0F 8E03000000     JLE      3
    0000F512  EB                JMP      

    LINE      9590

    0000F513  B8 01000000       MOV      EAX,1
    0000F518  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9591

    0000F51B  B8 01000000       MOV      EAX,1
    0000F520  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9592

    0000F523  B8 01000000       MOV      EAX,1
    0000F528  8B C8             MOV      ECX,EAX
    0000F52A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F52D  48                DEC      EAX
    0000F52E  BB 0E000000       MOV      EBX,14
    0000F533  F7 E3             MUL      EBX
    0000F535  50                PUSH     EAX
    0000F536  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F539  48                DEC      EAX
    0000F53A  BB 02000000       MOV      EBX,2
    0000F53F  F7 E3             MUL      EBX
    0000F541  5B                POP      EBX
    0000F542  03 C3             ADD      EAX,EBX
    0000F544  8B F8             MOV      EDI,EAX
    0000F546  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9593

    0000F54A  B8 01000000       MOV      EAX,1
    0000F54F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9594

    0000F552  B8 01000000       MOV      EAX,1
    0000F557  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9596

    0000F55A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000F561  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000F566  5B                POP      EBX

    LINE      9598

    0000F567  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000F56E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000F573  5B                POP      EBX

    LINE      9600

    0000F574  B8 0A000000       MOV      EAX,10
    0000F579  40                INC      EAX
    0000F57A  50                PUSH     EAX
    0000F57B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F57E  5B                POP      EBX
    0000F57F  3B C3             CMP      EAX,EBX
    0000F581  0F 8503000000     JNE      3
    0000F587  EB                JMP      

    LINE      9608

    0000F588  B8 01000000       MOV      EAX,1
    0000F58D  8B C8             MOV      ECX,EAX
    0000F58F  B8 0A000000       MOV      EAX,10
    0000F594  50                PUSH     EAX
    0000F595  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000F598  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F59B  5B                POP      EBX
    0000F59C  53                PUSH     EBX
    0000F59D  3B C3             CMP      EAX,EBX
    0000F59F  0F 8E03000000     JLE      3
    0000F5A5  EB                JMP      

    LINE      9610

    0000F5A6  B8 01000000       MOV      EAX,1
    0000F5AB  8B C8             MOV      ECX,EAX
    0000F5AD  B8 05000000       MOV      EAX,5
    0000F5B2  50                PUSH     EAX
    0000F5B3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000F5B6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F5B9  5B                POP      EBX
    0000F5BA  53                PUSH     EBX
    0000F5BB  3B C3             CMP      EAX,EBX
    0000F5BD  0F 8E03000000     JLE      3
    0000F5C3  EB                JMP      

    LINE      9617

    0000F5C4  B8 01000000       MOV      EAX,1
    0000F5C9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9618

    0000F5CF  B8 01000000       MOV      EAX,1
    0000F5D4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9619

    0000F5DA  B8 01000000       MOV      EAX,1
    0000F5DF  8B C8             MOV      ECX,EAX
    0000F5E1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F5E4  48                DEC      EAX
    0000F5E5  BB 0E000000       MOV      EBX,14
    0000F5EA  F7 E3             MUL      EBX
    0000F5EC  50                PUSH     EAX
    0000F5ED  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F5F0  48                DEC      EAX
    0000F5F1  BB 02000000       MOV      EBX,2
    0000F5F6  F7 E3             MUL      EBX
    0000F5F8  5B                POP      EBX
    0000F5F9  03 C3             ADD      EAX,EBX
    0000F5FB  8B F8             MOV      EDI,EAX
    0000F5FD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9620

    0000F604  B8 01000000       MOV      EAX,1
    0000F609  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9621

    0000F60F  B8 01000000       MOV      EAX,1
    0000F614  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9623

    0000F61A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000F621  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F626  5B                POP      EBX

    LINE      9625

    0000F627  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000F62E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F633  5B                POP      EBX

    LINE      9627

    0000F634  B8 0A000000       MOV      EAX,10
    0000F639  40                INC      EAX
    0000F63A  50                PUSH     EAX
    0000F63B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F63E  5B                POP      EBX
    0000F63F  3B C3             CMP      EAX,EBX
    0000F641  0F 8503000000     JNE      3
    0000F647  EB                JMP      

    LINE      9634

    0000F648  B8 01000000       MOV      EAX,1
    0000F64D  8B C8             MOV      ECX,EAX
    0000F64F  B8 0A000000       MOV      EAX,10
    0000F654  50                PUSH     EAX
    0000F655  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000F658  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F65B  5B                POP      EBX
    0000F65C  53                PUSH     EBX
    0000F65D  3B C3             CMP      EAX,EBX
    0000F65F  0F 8E03000000     JLE      3
    0000F665  EB                JMP      

    LINE      9636

    0000F666  B8 01000000       MOV      EAX,1
    0000F66B  8B C8             MOV      ECX,EAX
    0000F66D  B8 05000000       MOV      EAX,5
    0000F672  50                PUSH     EAX
    0000F673  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000F676  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F679  5B                POP      EBX
    0000F67A  53                PUSH     EBX
    0000F67B  3B C3             CMP      EAX,EBX
    0000F67D  0F 8E03000000     JLE      3
    0000F683  EB                JMP      

    LINE      9643

    0000F684  B8 01000000       MOV      EAX,1
    0000F689  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9644

    0000F68F  B8 01000000       MOV      EAX,1
    0000F694  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9645

    0000F69A  B8 01000000       MOV      EAX,1
    0000F69F  8B C8             MOV      ECX,EAX
    0000F6A1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F6A4  48                DEC      EAX
    0000F6A5  BB 0E000000       MOV      EBX,14
    0000F6AA  F7 E3             MUL      EBX
    0000F6AC  50                PUSH     EAX
    0000F6AD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F6B0  48                DEC      EAX
    0000F6B1  BB 02000000       MOV      EBX,2
    0000F6B6  F7 E3             MUL      EBX
    0000F6B8  5B                POP      EBX
    0000F6B9  03 C3             ADD      EAX,EBX
    0000F6BB  8B F8             MOV      EDI,EAX
    0000F6BD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9646

    0000F6C4  B8 01000000       MOV      EAX,1
    0000F6C9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9647

    0000F6CF  B8 01000000       MOV      EAX,1
    0000F6D4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9649

    0000F6DA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000F6E1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F6E6  5B                POP      EBX

    LINE      9651

    0000F6E7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000F6EE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F6F3  5B                POP      EBX

    LINE      9653

    0000F6F4  B8 0A000000       MOV      EAX,10
    0000F6F9  40                INC      EAX
    0000F6FA  50                PUSH     EAX
    0000F6FB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F6FE  5B                POP      EBX
    0000F6FF  3B C3             CMP      EAX,EBX
    0000F701  0F 8503000000     JNE      3
    0000F707  EB                JMP      

    LINE      9667

    0000F708  56                PUSH     ESI
    0000F709  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000F70F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000F715  FF D1             CALL     ECX                       run_inner_proc
    0000F717  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9669

    0000F718  B8 01000000       MOV      EAX,1
    0000F71D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9671

    0000F720  B8 01000000       MOV      EAX,1
    0000F725  8B C8             MOV      ECX,EAX
    0000F727  B8 0A000000       MOV      EAX,10
    0000F72C  50                PUSH     EAX
    0000F72D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000F730  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F733  5B                POP      EBX
    0000F734  53                PUSH     EBX
    0000F735  3B C3             CMP      EAX,EBX
    0000F737  0F 8E03000000     JLE      3
    0000F73D  EB                JMP      

    LINE      9673

    0000F73E  B8 01000000       MOV      EAX,1
    0000F743  8B C8             MOV      ECX,EAX
    0000F745  B8 05000000       MOV      EAX,5
    0000F74A  50                PUSH     EAX
    0000F74B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000F74E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F751  5B                POP      EBX
    0000F752  53                PUSH     EBX
    0000F753  3B C3             CMP      EAX,EBX
    0000F755  0F 8E03000000     JLE      3
    0000F75B  EB                JMP      

    LINE      9680

    0000F75C  B8 01000000       MOV      EAX,1
    0000F761  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9681

    0000F764  B8 01000000       MOV      EAX,1
    0000F769  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9682

    0000F76C  B8 01000000       MOV      EAX,1
    0000F771  8B C8             MOV      ECX,EAX
    0000F773  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F776  48                DEC      EAX
    0000F777  BB 0E000000       MOV      EBX,14
    0000F77C  F7 E3             MUL      EBX
    0000F77E  50                PUSH     EAX
    0000F77F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F782  48                DEC      EAX
    0000F783  BB 02000000       MOV      EBX,2
    0000F788  F7 E3             MUL      EBX
    0000F78A  5B                POP      EBX
    0000F78B  03 C3             ADD      EAX,EBX
    0000F78D  8B F8             MOV      EDI,EAX
    0000F78F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9683

    0000F793  B8 01000000       MOV      EAX,1
    0000F798  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9684

    0000F79B  B8 01000000       MOV      EAX,1
    0000F7A0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9686

    0000F7A3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000F7AA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000F7AF  5B                POP      EBX

    LINE      9688

    0000F7B0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000F7B7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000F7BC  5B                POP      EBX

    LINE      9690

    0000F7BD  B8 0A000000       MOV      EAX,10
    0000F7C2  40                INC      EAX
    0000F7C3  50                PUSH     EAX
    0000F7C4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F7C7  5B                POP      EBX
    0000F7C8  3B C3             CMP      EAX,EBX
    0000F7CA  0F 8503000000     JNE      3
    0000F7D0  EB                JMP      

    LINE      9697

    0000F7D1  B8 01000000       MOV      EAX,1
    0000F7D6  8B C8             MOV      ECX,EAX
    0000F7D8  B8 0A000000       MOV      EAX,10
    0000F7DD  50                PUSH     EAX
    0000F7DE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000F7E1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F7E4  5B                POP      EBX
    0000F7E5  53                PUSH     EBX
    0000F7E6  3B C3             CMP      EAX,EBX
    0000F7E8  0F 8E03000000     JLE      3
    0000F7EE  EB                JMP      

    LINE      9699

    0000F7EF  B8 01000000       MOV      EAX,1
    0000F7F4  8B C8             MOV      ECX,EAX
    0000F7F6  B8 05000000       MOV      EAX,5
    0000F7FB  50                PUSH     EAX
    0000F7FC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000F7FF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F802  5B                POP      EBX
    0000F803  53                PUSH     EBX
    0000F804  3B C3             CMP      EAX,EBX
    0000F806  0F 8E03000000     JLE      3
    0000F80C  EB                JMP      

    LINE      9706

    0000F80D  B8 01000000       MOV      EAX,1
    0000F812  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9707

    0000F815  B8 01000000       MOV      EAX,1
    0000F81A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9708

    0000F81D  B8 01000000       MOV      EAX,1
    0000F822  8B C8             MOV      ECX,EAX
    0000F824  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F827  48                DEC      EAX
    0000F828  BB 0E000000       MOV      EBX,14
    0000F82D  F7 E3             MUL      EBX
    0000F82F  50                PUSH     EAX
    0000F830  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F833  48                DEC      EAX
    0000F834  BB 02000000       MOV      EBX,2
    0000F839  F7 E3             MUL      EBX
    0000F83B  5B                POP      EBX
    0000F83C  03 C3             ADD      EAX,EBX
    0000F83E  8B F8             MOV      EDI,EAX
    0000F840  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9709

    0000F844  B8 01000000       MOV      EAX,1
    0000F849  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9710

    0000F84C  B8 01000000       MOV      EAX,1
    0000F851  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9712

    0000F854  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000F85B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000F860  5B                POP      EBX

    LINE      9714

    0000F861  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000F868  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000F86D  5B                POP      EBX

    LINE      9716

    0000F86E  B8 0A000000       MOV      EAX,10
    0000F873  40                INC      EAX
    0000F874  50                PUSH     EAX
    0000F875  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F878  5B                POP      EBX
    0000F879  3B C3             CMP      EAX,EBX
    0000F87B  0F 8503000000     JNE      3
    0000F881  EB                JMP      

    LINE      9724

    0000F882  B8 01000000       MOV      EAX,1
    0000F887  8B C8             MOV      ECX,EAX
    0000F889  B8 0A000000       MOV      EAX,10
    0000F88E  50                PUSH     EAX
    0000F88F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000F892  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F895  5B                POP      EBX
    0000F896  53                PUSH     EBX
    0000F897  3B C3             CMP      EAX,EBX
    0000F899  0F 8E03000000     JLE      3
    0000F89F  EB                JMP      

    LINE      9726

    0000F8A0  B8 01000000       MOV      EAX,1
    0000F8A5  8B C8             MOV      ECX,EAX
    0000F8A7  B8 05000000       MOV      EAX,5
    0000F8AC  50                PUSH     EAX
    0000F8AD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000F8B0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F8B3  5B                POP      EBX
    0000F8B4  53                PUSH     EBX
    0000F8B5  3B C3             CMP      EAX,EBX
    0000F8B7  0F 8E03000000     JLE      3
    0000F8BD  EB                JMP      

    LINE      9733

    0000F8BE  B8 01000000       MOV      EAX,1
    0000F8C3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9734

    0000F8C9  B8 01000000       MOV      EAX,1
    0000F8CE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9735

    0000F8D4  B8 01000000       MOV      EAX,1
    0000F8D9  8B C8             MOV      ECX,EAX
    0000F8DB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F8DE  48                DEC      EAX
    0000F8DF  BB 0E000000       MOV      EBX,14
    0000F8E4  F7 E3             MUL      EBX
    0000F8E6  50                PUSH     EAX
    0000F8E7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000F8EA  48                DEC      EAX
    0000F8EB  BB 02000000       MOV      EBX,2
    0000F8F0  F7 E3             MUL      EBX
    0000F8F2  5B                POP      EBX
    0000F8F3  03 C3             ADD      EAX,EBX
    0000F8F5  8B F8             MOV      EDI,EAX
    0000F8F7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9736

    0000F8FE  B8 01000000       MOV      EAX,1
    0000F903  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9737

    0000F909  B8 01000000       MOV      EAX,1
    0000F90E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9739

    0000F914  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000F91B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F920  5B                POP      EBX

    LINE      9741

    0000F921  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000F928  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F92D  5B                POP      EBX

    LINE      9743

    0000F92E  B8 0A000000       MOV      EAX,10
    0000F933  40                INC      EAX
    0000F934  50                PUSH     EAX
    0000F935  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F938  5B                POP      EBX
    0000F939  3B C3             CMP      EAX,EBX
    0000F93B  0F 8503000000     JNE      3
    0000F941  EB                JMP      

    LINE      9750

    0000F942  B8 01000000       MOV      EAX,1
    0000F947  8B C8             MOV      ECX,EAX
    0000F949  B8 0A000000       MOV      EAX,10
    0000F94E  50                PUSH     EAX
    0000F94F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000F952  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F955  5B                POP      EBX
    0000F956  53                PUSH     EBX
    0000F957  3B C3             CMP      EAX,EBX
    0000F959  0F 8E03000000     JLE      3
    0000F95F  EB                JMP      

    LINE      9752

    0000F960  B8 01000000       MOV      EAX,1
    0000F965  8B C8             MOV      ECX,EAX
    0000F967  B8 05000000       MOV      EAX,5
    0000F96C  50                PUSH     EAX
    0000F96D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000F970  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F973  5B                POP      EBX
    0000F974  53                PUSH     EBX
    0000F975  3B C3             CMP      EAX,EBX
    0000F977  0F 8E03000000     JLE      3
    0000F97D  EB                JMP      

    LINE      9759

    0000F97E  B8 01000000       MOV      EAX,1
    0000F983  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9760

    0000F989  B8 01000000       MOV      EAX,1
    0000F98E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9761

    0000F994  B8 01000000       MOV      EAX,1
    0000F999  8B C8             MOV      ECX,EAX
    0000F99B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000F99E  48                DEC      EAX
    0000F99F  BB 0E000000       MOV      EBX,14
    0000F9A4  F7 E3             MUL      EBX
    0000F9A6  50                PUSH     EAX
    0000F9A7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000F9AA  48                DEC      EAX
    0000F9AB  BB 02000000       MOV      EBX,2
    0000F9B0  F7 E3             MUL      EBX
    0000F9B2  5B                POP      EBX
    0000F9B3  03 C3             ADD      EAX,EBX
    0000F9B5  8B F8             MOV      EDI,EAX
    0000F9B7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9762

    0000F9BE  B8 01000000       MOV      EAX,1
    0000F9C3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9763

    0000F9C9  B8 01000000       MOV      EAX,1
    0000F9CE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9765

    0000F9D4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000F9DB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000F9E0  5B                POP      EBX

    LINE      9767

    0000F9E1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000F9E8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000F9ED  5B                POP      EBX

    LINE      9769

    0000F9EE  B8 0A000000       MOV      EAX,10
    0000F9F3  40                INC      EAX
    0000F9F4  50                PUSH     EAX
    0000F9F5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000F9F8  5B                POP      EBX
    0000F9F9  3B C3             CMP      EAX,EBX
    0000F9FB  0F 8503000000     JNE      3
    0000FA01  EB                JMP      

    LINE      9783

    0000FA02  56                PUSH     ESI
    0000FA03  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000FA09  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000FA0F  FF D1             CALL     ECX                       run_inner_proc
    0000FA11  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9785

    0000FA12  B8 01000000       MOV      EAX,1
    0000FA17  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9787

    0000FA1A  B8 01000000       MOV      EAX,1
    0000FA1F  8B C8             MOV      ECX,EAX
    0000FA21  B8 0A000000       MOV      EAX,10
    0000FA26  50                PUSH     EAX
    0000FA27  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000FA2A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FA2D  5B                POP      EBX
    0000FA2E  53                PUSH     EBX
    0000FA2F  3B C3             CMP      EAX,EBX
    0000FA31  0F 8E03000000     JLE      3
    0000FA37  EB                JMP      

    LINE      9789

    0000FA38  B8 01000000       MOV      EAX,1
    0000FA3D  8B C8             MOV      ECX,EAX
    0000FA3F  B8 05000000       MOV      EAX,5
    0000FA44  50                PUSH     EAX
    0000FA45  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000FA48  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FA4B  5B                POP      EBX
    0000FA4C  53                PUSH     EBX
    0000FA4D  3B C3             CMP      EAX,EBX
    0000FA4F  0F 8E03000000     JLE      3
    0000FA55  EB                JMP      

    LINE      9796

    0000FA56  B8 01000000       MOV      EAX,1
    0000FA5B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9797

    0000FA5E  B8 01000000       MOV      EAX,1
    0000FA63  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9798

    0000FA66  B8 01000000       MOV      EAX,1
    0000FA6B  8B C8             MOV      ECX,EAX
    0000FA6D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FA70  48                DEC      EAX
    0000FA71  BB 0E000000       MOV      EBX,14
    0000FA76  F7 E3             MUL      EBX
    0000FA78  50                PUSH     EAX
    0000FA79  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FA7C  48                DEC      EAX
    0000FA7D  BB 02000000       MOV      EBX,2
    0000FA82  F7 E3             MUL      EBX
    0000FA84  5B                POP      EBX
    0000FA85  03 C3             ADD      EAX,EBX
    0000FA87  8B F8             MOV      EDI,EAX
    0000FA89  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9799

    0000FA8D  B8 01000000       MOV      EAX,1
    0000FA92  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9800

    0000FA95  B8 01000000       MOV      EAX,1
    0000FA9A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9802

    0000FA9D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000FAA4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000FAA9  5B                POP      EBX

    LINE      9804

    0000FAAA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000FAB1  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000FAB6  5B                POP      EBX

    LINE      9806

    0000FAB7  B8 0A000000       MOV      EAX,10
    0000FABC  40                INC      EAX
    0000FABD  50                PUSH     EAX
    0000FABE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FAC1  5B                POP      EBX
    0000FAC2  3B C3             CMP      EAX,EBX
    0000FAC4  0F 8503000000     JNE      3
    0000FACA  EB                JMP      

    LINE      9813

    0000FACB  B8 01000000       MOV      EAX,1
    0000FAD0  8B C8             MOV      ECX,EAX
    0000FAD2  B8 0A000000       MOV      EAX,10
    0000FAD7  50                PUSH     EAX
    0000FAD8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000FADB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FADE  5B                POP      EBX
    0000FADF  53                PUSH     EBX
    0000FAE0  3B C3             CMP      EAX,EBX
    0000FAE2  0F 8E03000000     JLE      3
    0000FAE8  EB                JMP      

    LINE      9815

    0000FAE9  B8 01000000       MOV      EAX,1
    0000FAEE  8B C8             MOV      ECX,EAX
    0000FAF0  B8 05000000       MOV      EAX,5
    0000FAF5  50                PUSH     EAX
    0000FAF6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000FAF9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FAFC  5B                POP      EBX
    0000FAFD  53                PUSH     EBX
    0000FAFE  3B C3             CMP      EAX,EBX
    0000FB00  0F 8E03000000     JLE      3
    0000FB06  EB                JMP      

    LINE      9822

    0000FB07  B8 01000000       MOV      EAX,1
    0000FB0C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9823

    0000FB0F  B8 01000000       MOV      EAX,1
    0000FB14  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9824

    0000FB17  B8 01000000       MOV      EAX,1
    0000FB1C  8B C8             MOV      ECX,EAX
    0000FB1E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FB21  48                DEC      EAX
    0000FB22  BB 0E000000       MOV      EBX,14
    0000FB27  F7 E3             MUL      EBX
    0000FB29  50                PUSH     EAX
    0000FB2A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FB2D  48                DEC      EAX
    0000FB2E  BB 02000000       MOV      EBX,2
    0000FB33  F7 E3             MUL      EBX
    0000FB35  5B                POP      EBX
    0000FB36  03 C3             ADD      EAX,EBX
    0000FB38  8B F8             MOV      EDI,EAX
    0000FB3A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9825

    0000FB3E  B8 01000000       MOV      EAX,1
    0000FB43  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9826

    0000FB46  B8 01000000       MOV      EAX,1
    0000FB4B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9828

    0000FB4E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000FB55  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000FB5A  5B                POP      EBX

    LINE      9830

    0000FB5B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000FB62  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000FB67  5B                POP      EBX

    LINE      9832

    0000FB68  B8 0A000000       MOV      EAX,10
    0000FB6D  40                INC      EAX
    0000FB6E  50                PUSH     EAX
    0000FB6F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FB72  5B                POP      EBX
    0000FB73  3B C3             CMP      EAX,EBX
    0000FB75  0F 8503000000     JNE      3
    0000FB7B  EB                JMP      

    LINE      9840

    0000FB7C  B8 01000000       MOV      EAX,1
    0000FB81  8B C8             MOV      ECX,EAX
    0000FB83  B8 0A000000       MOV      EAX,10
    0000FB88  50                PUSH     EAX
    0000FB89  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000FB8C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FB8F  5B                POP      EBX
    0000FB90  53                PUSH     EBX
    0000FB91  3B C3             CMP      EAX,EBX
    0000FB93  0F 8E03000000     JLE      3
    0000FB99  EB                JMP      

    LINE      9842

    0000FB9A  B8 01000000       MOV      EAX,1
    0000FB9F  8B C8             MOV      ECX,EAX
    0000FBA1  B8 05000000       MOV      EAX,5
    0000FBA6  50                PUSH     EAX
    0000FBA7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000FBAA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FBAD  5B                POP      EBX
    0000FBAE  53                PUSH     EBX
    0000FBAF  3B C3             CMP      EAX,EBX
    0000FBB1  0F 8E03000000     JLE      3
    0000FBB7  EB                JMP      

    LINE      9849

    0000FBB8  B8 01000000       MOV      EAX,1
    0000FBBD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9850

    0000FBC3  B8 01000000       MOV      EAX,1
    0000FBC8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9851

    0000FBCE  B8 01000000       MOV      EAX,1
    0000FBD3  8B C8             MOV      ECX,EAX
    0000FBD5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FBD8  48                DEC      EAX
    0000FBD9  BB 0E000000       MOV      EBX,14
    0000FBDE  F7 E3             MUL      EBX
    0000FBE0  50                PUSH     EAX
    0000FBE1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FBE4  48                DEC      EAX
    0000FBE5  BB 02000000       MOV      EBX,2
    0000FBEA  F7 E3             MUL      EBX
    0000FBEC  5B                POP      EBX
    0000FBED  03 C3             ADD      EAX,EBX
    0000FBEF  8B F8             MOV      EDI,EAX
    0000FBF1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9852

    0000FBF8  B8 01000000       MOV      EAX,1
    0000FBFD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9853

    0000FC03  B8 01000000       MOV      EAX,1
    0000FC08  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9855

    0000FC0E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000FC15  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000FC1A  5B                POP      EBX

    LINE      9857

    0000FC1B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000FC22  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000FC27  5B                POP      EBX

    LINE      9859

    0000FC28  B8 0A000000       MOV      EAX,10
    0000FC2D  40                INC      EAX
    0000FC2E  50                PUSH     EAX
    0000FC2F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FC32  5B                POP      EBX
    0000FC33  3B C3             CMP      EAX,EBX
    0000FC35  0F 8503000000     JNE      3
    0000FC3B  EB                JMP      

    LINE      9866

    0000FC3C  B8 01000000       MOV      EAX,1
    0000FC41  8B C8             MOV      ECX,EAX
    0000FC43  B8 0A000000       MOV      EAX,10
    0000FC48  50                PUSH     EAX
    0000FC49  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000FC4C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FC4F  5B                POP      EBX
    0000FC50  53                PUSH     EBX
    0000FC51  3B C3             CMP      EAX,EBX
    0000FC53  0F 8E03000000     JLE      3
    0000FC59  EB                JMP      

    LINE      9868

    0000FC5A  B8 01000000       MOV      EAX,1
    0000FC5F  8B C8             MOV      ECX,EAX
    0000FC61  B8 05000000       MOV      EAX,5
    0000FC66  50                PUSH     EAX
    0000FC67  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000FC6A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FC6D  5B                POP      EBX
    0000FC6E  53                PUSH     EBX
    0000FC6F  3B C3             CMP      EAX,EBX
    0000FC71  0F 8E03000000     JLE      3
    0000FC77  EB                JMP      

    LINE      9875

    0000FC78  B8 01000000       MOV      EAX,1
    0000FC7D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9876

    0000FC83  B8 01000000       MOV      EAX,1
    0000FC88  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9877

    0000FC8E  B8 01000000       MOV      EAX,1
    0000FC93  8B C8             MOV      ECX,EAX
    0000FC95  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FC98  48                DEC      EAX
    0000FC99  BB 0E000000       MOV      EBX,14
    0000FC9E  F7 E3             MUL      EBX
    0000FCA0  50                PUSH     EAX
    0000FCA1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FCA4  48                DEC      EAX
    0000FCA5  BB 02000000       MOV      EBX,2
    0000FCAA  F7 E3             MUL      EBX
    0000FCAC  5B                POP      EBX
    0000FCAD  03 C3             ADD      EAX,EBX
    0000FCAF  8B F8             MOV      EDI,EAX
    0000FCB1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9878

    0000FCB8  B8 01000000       MOV      EAX,1
    0000FCBD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9879

    0000FCC3  B8 01000000       MOV      EAX,1
    0000FCC8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9881

    0000FCCE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000FCD5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000FCDA  5B                POP      EBX

    LINE      9883

    0000FCDB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000FCE2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000FCE7  5B                POP      EBX

    LINE      9885

    0000FCE8  B8 0A000000       MOV      EAX,10
    0000FCED  40                INC      EAX
    0000FCEE  50                PUSH     EAX
    0000FCEF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FCF2  5B                POP      EBX
    0000FCF3  3B C3             CMP      EAX,EBX
    0000FCF5  0F 8503000000     JNE      3
    0000FCFB  EB                JMP      

    LINE      9899

    0000FCFC  56                PUSH     ESI
    0000FCFD  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000FD03  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0000FD09  FF D1             CALL     ECX                       run_inner_proc
    0000FD0B  5E                POP      ESI                       /* restore callers static pointer */

    LINE      9901

    0000FD0C  B8 01000000       MOV      EAX,1
    0000FD11  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE      9903

    0000FD14  B8 01000000       MOV      EAX,1
    0000FD19  8B C8             MOV      ECX,EAX
    0000FD1B  B8 0A000000       MOV      EAX,10
    0000FD20  50                PUSH     EAX
    0000FD21  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000FD24  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FD27  5B                POP      EBX
    0000FD28  53                PUSH     EBX
    0000FD29  3B C3             CMP      EAX,EBX
    0000FD2B  0F 8E03000000     JLE      3
    0000FD31  EB                JMP      

    LINE      9905

    0000FD32  B8 01000000       MOV      EAX,1
    0000FD37  8B C8             MOV      ECX,EAX
    0000FD39  B8 05000000       MOV      EAX,5
    0000FD3E  50                PUSH     EAX
    0000FD3F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000FD42  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FD45  5B                POP      EBX
    0000FD46  53                PUSH     EBX
    0000FD47  3B C3             CMP      EAX,EBX
    0000FD49  0F 8E03000000     JLE      3
    0000FD4F  EB                JMP      

    LINE      9912

    0000FD50  B8 01000000       MOV      EAX,1
    0000FD55  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9913

    0000FD58  B8 01000000       MOV      EAX,1
    0000FD5D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9914

    0000FD60  B8 01000000       MOV      EAX,1
    0000FD65  8B C8             MOV      ECX,EAX
    0000FD67  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FD6A  48                DEC      EAX
    0000FD6B  BB 0E000000       MOV      EBX,14
    0000FD70  F7 E3             MUL      EBX
    0000FD72  50                PUSH     EAX
    0000FD73  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FD76  48                DEC      EAX
    0000FD77  BB 02000000       MOV      EBX,2
    0000FD7C  F7 E3             MUL      EBX
    0000FD7E  5B                POP      EBX
    0000FD7F  03 C3             ADD      EAX,EBX
    0000FD81  8B F8             MOV      EDI,EAX
    0000FD83  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9915

    0000FD87  B8 01000000       MOV      EAX,1
    0000FD8C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9916

    0000FD8F  B8 01000000       MOV      EAX,1
    0000FD94  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9918

    0000FD97  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000FD9E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000FDA3  5B                POP      EBX

    LINE      9920

    0000FDA4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000FDAB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000FDB0  5B                POP      EBX

    LINE      9922

    0000FDB1  B8 0A000000       MOV      EAX,10
    0000FDB6  40                INC      EAX
    0000FDB7  50                PUSH     EAX
    0000FDB8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FDBB  5B                POP      EBX
    0000FDBC  3B C3             CMP      EAX,EBX
    0000FDBE  0F 8503000000     JNE      3
    0000FDC4  EB                JMP      

    LINE      9929

    0000FDC5  B8 01000000       MOV      EAX,1
    0000FDCA  8B C8             MOV      ECX,EAX
    0000FDCC  B8 0A000000       MOV      EAX,10
    0000FDD1  50                PUSH     EAX
    0000FDD2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000FDD5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FDD8  5B                POP      EBX
    0000FDD9  53                PUSH     EBX
    0000FDDA  3B C3             CMP      EAX,EBX
    0000FDDC  0F 8E03000000     JLE      3
    0000FDE2  EB                JMP      

    LINE      9931

    0000FDE3  B8 01000000       MOV      EAX,1
    0000FDE8  8B C8             MOV      ECX,EAX
    0000FDEA  B8 05000000       MOV      EAX,5
    0000FDEF  50                PUSH     EAX
    0000FDF0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000FDF3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FDF6  5B                POP      EBX
    0000FDF7  53                PUSH     EBX
    0000FDF8  3B C3             CMP      EAX,EBX
    0000FDFA  0F 8E03000000     JLE      3
    0000FE00  EB                JMP      

    LINE      9938

    0000FE01  B8 01000000       MOV      EAX,1
    0000FE06  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9939

    0000FE09  B8 01000000       MOV      EAX,1
    0000FE0E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9940

    0000FE11  B8 01000000       MOV      EAX,1
    0000FE16  8B C8             MOV      ECX,EAX
    0000FE18  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FE1B  48                DEC      EAX
    0000FE1C  BB 0E000000       MOV      EBX,14
    0000FE21  F7 E3             MUL      EBX
    0000FE23  50                PUSH     EAX
    0000FE24  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FE27  48                DEC      EAX
    0000FE28  BB 02000000       MOV      EBX,2
    0000FE2D  F7 E3             MUL      EBX
    0000FE2F  5B                POP      EBX
    0000FE30  03 C3             ADD      EAX,EBX
    0000FE32  8B F8             MOV      EDI,EAX
    0000FE34  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE      9941

    0000FE38  B8 01000000       MOV      EAX,1
    0000FE3D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9942

    0000FE40  B8 01000000       MOV      EAX,1
    0000FE45  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE      9944

    0000FE48  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000FE4F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0000FE54  5B                POP      EBX

    LINE      9946

    0000FE55  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000FE5C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0000FE61  5B                POP      EBX

    LINE      9948

    0000FE62  B8 0A000000       MOV      EAX,10
    0000FE67  40                INC      EAX
    0000FE68  50                PUSH     EAX
    0000FE69  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FE6C  5B                POP      EBX
    0000FE6D  3B C3             CMP      EAX,EBX
    0000FE6F  0F 8503000000     JNE      3
    0000FE75  EB                JMP      

    LINE      9956

    0000FE76  B8 01000000       MOV      EAX,1
    0000FE7B  8B C8             MOV      ECX,EAX
    0000FE7D  B8 0A000000       MOV      EAX,10
    0000FE82  50                PUSH     EAX
    0000FE83  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0000FE86  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FE89  5B                POP      EBX
    0000FE8A  53                PUSH     EBX
    0000FE8B  3B C3             CMP      EAX,EBX
    0000FE8D  0F 8E03000000     JLE      3
    0000FE93  EB                JMP      

    LINE      9958

    0000FE94  B8 01000000       MOV      EAX,1
    0000FE99  8B C8             MOV      ECX,EAX
    0000FE9B  B8 05000000       MOV      EAX,5
    0000FEA0  50                PUSH     EAX
    0000FEA1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0000FEA4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FEA7  5B                POP      EBX
    0000FEA8  53                PUSH     EBX
    0000FEA9  3B C3             CMP      EAX,EBX
    0000FEAB  0F 8E03000000     JLE      3
    0000FEB1  EB                JMP      

    LINE      9965

    0000FEB2  B8 01000000       MOV      EAX,1
    0000FEB7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9966

    0000FEBD  B8 01000000       MOV      EAX,1
    0000FEC2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9967

    0000FEC8  B8 01000000       MOV      EAX,1
    0000FECD  8B C8             MOV      ECX,EAX
    0000FECF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FED2  48                DEC      EAX
    0000FED3  BB 0E000000       MOV      EBX,14
    0000FED8  F7 E3             MUL      EBX
    0000FEDA  50                PUSH     EAX
    0000FEDB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0000FEDE  48                DEC      EAX
    0000FEDF  BB 02000000       MOV      EBX,2
    0000FEE4  F7 E3             MUL      EBX
    0000FEE6  5B                POP      EBX
    0000FEE7  03 C3             ADD      EAX,EBX
    0000FEE9  8B F8             MOV      EDI,EAX
    0000FEEB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9968

    0000FEF2  B8 01000000       MOV      EAX,1
    0000FEF7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9969

    0000FEFD  B8 01000000       MOV      EAX,1
    0000FF02  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9971

    0000FF08  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0000FF0F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000FF14  5B                POP      EBX

    LINE      9973

    0000FF15  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0000FF1C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000FF21  5B                POP      EBX

    LINE      9975

    0000FF22  B8 0A000000       MOV      EAX,10
    0000FF27  40                INC      EAX
    0000FF28  50                PUSH     EAX
    0000FF29  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FF2C  5B                POP      EBX
    0000FF2D  3B C3             CMP      EAX,EBX
    0000FF2F  0F 8503000000     JNE      3
    0000FF35  EB                JMP      

    LINE      9982

    0000FF36  B8 01000000       MOV      EAX,1
    0000FF3B  8B C8             MOV      ECX,EAX
    0000FF3D  B8 0A000000       MOV      EAX,10
    0000FF42  50                PUSH     EAX
    0000FF43  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0000FF46  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FF49  5B                POP      EBX
    0000FF4A  53                PUSH     EBX
    0000FF4B  3B C3             CMP      EAX,EBX
    0000FF4D  0F 8E03000000     JLE      3
    0000FF53  EB                JMP      

    LINE      9984

    0000FF54  B8 01000000       MOV      EAX,1
    0000FF59  8B C8             MOV      ECX,EAX
    0000FF5B  B8 05000000       MOV      EAX,5
    0000FF60  50                PUSH     EAX
    0000FF61  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0000FF64  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FF67  5B                POP      EBX
    0000FF68  53                PUSH     EBX
    0000FF69  3B C3             CMP      EAX,EBX
    0000FF6B  0F 8E03000000     JLE      3
    0000FF71  EB                JMP      

    LINE      9991

    0000FF72  B8 01000000       MOV      EAX,1
    0000FF77  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9992

    0000FF7D  B8 01000000       MOV      EAX,1
    0000FF82  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9993

    0000FF88  B8 01000000       MOV      EAX,1
    0000FF8D  8B C8             MOV      ECX,EAX
    0000FF8F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0000FF92  48                DEC      EAX
    0000FF93  BB 0E000000       MOV      EBX,14
    0000FF98  F7 E3             MUL      EBX
    0000FF9A  50                PUSH     EAX
    0000FF9B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0000FF9E  48                DEC      EAX
    0000FF9F  BB 02000000       MOV      EBX,2
    0000FFA4  F7 E3             MUL      EBX
    0000FFA6  5B                POP      EBX
    0000FFA7  03 C3             ADD      EAX,EBX
    0000FFA9  8B F8             MOV      EDI,EAX
    0000FFAB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE      9994

    0000FFB2  B8 01000000       MOV      EAX,1
    0000FFB7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9995

    0000FFBD  B8 01000000       MOV      EAX,1
    0000FFC2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE      9997

    0000FFC8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0000FFCF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0000FFD4  5B                POP      EBX

    LINE      9999

    0000FFD5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0000FFDC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0000FFE1  5B                POP      EBX

    LINE     10001

    0000FFE2  B8 0A000000       MOV      EAX,10
    0000FFE7  40                INC      EAX
    0000FFE8  50                PUSH     EAX
    0000FFE9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0000FFEC  5B                POP      EBX
    0000FFED  3B C3             CMP      EAX,EBX
    0000FFEF  0F 8503000000     JNE      3
    0000FFF5  EB                JMP      

    LINE     10015

    0000FFF6  56                PUSH     ESI
    0000FFF7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0000FFFD  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00010003  FF D1             CALL     ECX                       run_inner_proc
    00010005  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10017

    00010006  B8 01000000       MOV      EAX,1
    0001000B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10019

    0001000E  B8 01000000       MOV      EAX,1
    00010013  8B C8             MOV      ECX,EAX
    00010015  B8 0A000000       MOV      EAX,10
    0001001A  50                PUSH     EAX
    0001001B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001001E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010021  5B                POP      EBX
    00010022  53                PUSH     EBX
    00010023  3B C3             CMP      EAX,EBX
    00010025  0F 8E03000000     JLE      3
    0001002B  EB                JMP      

    LINE     10021

    0001002C  B8 01000000       MOV      EAX,1
    00010031  8B C8             MOV      ECX,EAX
    00010033  B8 05000000       MOV      EAX,5
    00010038  50                PUSH     EAX
    00010039  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001003C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001003F  5B                POP      EBX
    00010040  53                PUSH     EBX
    00010041  3B C3             CMP      EAX,EBX
    00010043  0F 8E03000000     JLE      3
    00010049  EB                JMP      

    LINE     10028

    0001004A  B8 01000000       MOV      EAX,1
    0001004F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10029

    00010052  B8 01000000       MOV      EAX,1
    00010057  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10030

    0001005A  B8 01000000       MOV      EAX,1
    0001005F  8B C8             MOV      ECX,EAX
    00010061  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010064  48                DEC      EAX
    00010065  BB 0E000000       MOV      EBX,14
    0001006A  F7 E3             MUL      EBX
    0001006C  50                PUSH     EAX
    0001006D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010070  48                DEC      EAX
    00010071  BB 02000000       MOV      EBX,2
    00010076  F7 E3             MUL      EBX
    00010078  5B                POP      EBX
    00010079  03 C3             ADD      EAX,EBX
    0001007B  8B F8             MOV      EDI,EAX
    0001007D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10031

    00010081  B8 01000000       MOV      EAX,1
    00010086  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10032

    00010089  B8 01000000       MOV      EAX,1
    0001008E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10034

    00010091  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010098  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001009D  5B                POP      EBX

    LINE     10036

    0001009E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000100A5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000100AA  5B                POP      EBX

    LINE     10038

    000100AB  B8 0A000000       MOV      EAX,10
    000100B0  40                INC      EAX
    000100B1  50                PUSH     EAX
    000100B2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000100B5  5B                POP      EBX
    000100B6  3B C3             CMP      EAX,EBX
    000100B8  0F 8503000000     JNE      3
    000100BE  EB                JMP      

    LINE     10045

    000100BF  B8 01000000       MOV      EAX,1
    000100C4  8B C8             MOV      ECX,EAX
    000100C6  B8 0A000000       MOV      EAX,10
    000100CB  50                PUSH     EAX
    000100CC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000100CF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000100D2  5B                POP      EBX
    000100D3  53                PUSH     EBX
    000100D4  3B C3             CMP      EAX,EBX
    000100D6  0F 8E03000000     JLE      3
    000100DC  EB                JMP      

    LINE     10047

    000100DD  B8 01000000       MOV      EAX,1
    000100E2  8B C8             MOV      ECX,EAX
    000100E4  B8 05000000       MOV      EAX,5
    000100E9  50                PUSH     EAX
    000100EA  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000100ED  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000100F0  5B                POP      EBX
    000100F1  53                PUSH     EBX
    000100F2  3B C3             CMP      EAX,EBX
    000100F4  0F 8E03000000     JLE      3
    000100FA  EB                JMP      

    LINE     10054

    000100FB  B8 01000000       MOV      EAX,1
    00010100  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10055

    00010103  B8 01000000       MOV      EAX,1
    00010108  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10056

    0001010B  B8 01000000       MOV      EAX,1
    00010110  8B C8             MOV      ECX,EAX
    00010112  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010115  48                DEC      EAX
    00010116  BB 0E000000       MOV      EBX,14
    0001011B  F7 E3             MUL      EBX
    0001011D  50                PUSH     EAX
    0001011E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010121  48                DEC      EAX
    00010122  BB 02000000       MOV      EBX,2
    00010127  F7 E3             MUL      EBX
    00010129  5B                POP      EBX
    0001012A  03 C3             ADD      EAX,EBX
    0001012C  8B F8             MOV      EDI,EAX
    0001012E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10057

    00010132  B8 01000000       MOV      EAX,1
    00010137  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10058

    0001013A  B8 01000000       MOV      EAX,1
    0001013F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10060

    00010142  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00010149  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001014E  5B                POP      EBX

    LINE     10062

    0001014F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00010156  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001015B  5B                POP      EBX

    LINE     10064

    0001015C  B8 0A000000       MOV      EAX,10
    00010161  40                INC      EAX
    00010162  50                PUSH     EAX
    00010163  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010166  5B                POP      EBX
    00010167  3B C3             CMP      EAX,EBX
    00010169  0F 8503000000     JNE      3
    0001016F  EB                JMP      

    LINE     10072

    00010170  B8 01000000       MOV      EAX,1
    00010175  8B C8             MOV      ECX,EAX
    00010177  B8 0A000000       MOV      EAX,10
    0001017C  50                PUSH     EAX
    0001017D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010180  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010183  5B                POP      EBX
    00010184  53                PUSH     EBX
    00010185  3B C3             CMP      EAX,EBX
    00010187  0F 8E03000000     JLE      3
    0001018D  EB                JMP      

    LINE     10074

    0001018E  B8 01000000       MOV      EAX,1
    00010193  8B C8             MOV      ECX,EAX
    00010195  B8 05000000       MOV      EAX,5
    0001019A  50                PUSH     EAX
    0001019B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001019E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000101A1  5B                POP      EBX
    000101A2  53                PUSH     EBX
    000101A3  3B C3             CMP      EAX,EBX
    000101A5  0F 8E03000000     JLE      3
    000101AB  EB                JMP      

    LINE     10081

    000101AC  B8 01000000       MOV      EAX,1
    000101B1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10082

    000101B7  B8 01000000       MOV      EAX,1
    000101BC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10083

    000101C2  B8 01000000       MOV      EAX,1
    000101C7  8B C8             MOV      ECX,EAX
    000101C9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000101CC  48                DEC      EAX
    000101CD  BB 0E000000       MOV      EBX,14
    000101D2  F7 E3             MUL      EBX
    000101D4  50                PUSH     EAX
    000101D5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000101D8  48                DEC      EAX
    000101D9  BB 02000000       MOV      EBX,2
    000101DE  F7 E3             MUL      EBX
    000101E0  5B                POP      EBX
    000101E1  03 C3             ADD      EAX,EBX
    000101E3  8B F8             MOV      EDI,EAX
    000101E5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10084

    000101EC  B8 01000000       MOV      EAX,1
    000101F1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10085

    000101F7  B8 01000000       MOV      EAX,1
    000101FC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10087

    00010202  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010209  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001020E  5B                POP      EBX

    LINE     10089

    0001020F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010216  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001021B  5B                POP      EBX

    LINE     10091

    0001021C  B8 0A000000       MOV      EAX,10
    00010221  40                INC      EAX
    00010222  50                PUSH     EAX
    00010223  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010226  5B                POP      EBX
    00010227  3B C3             CMP      EAX,EBX
    00010229  0F 8503000000     JNE      3
    0001022F  EB                JMP      

    LINE     10098

    00010230  B8 01000000       MOV      EAX,1
    00010235  8B C8             MOV      ECX,EAX
    00010237  B8 0A000000       MOV      EAX,10
    0001023C  50                PUSH     EAX
    0001023D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00010240  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010243  5B                POP      EBX
    00010244  53                PUSH     EBX
    00010245  3B C3             CMP      EAX,EBX
    00010247  0F 8E03000000     JLE      3
    0001024D  EB                JMP      

    LINE     10100

    0001024E  B8 01000000       MOV      EAX,1
    00010253  8B C8             MOV      ECX,EAX
    00010255  B8 05000000       MOV      EAX,5
    0001025A  50                PUSH     EAX
    0001025B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001025E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010261  5B                POP      EBX
    00010262  53                PUSH     EBX
    00010263  3B C3             CMP      EAX,EBX
    00010265  0F 8E03000000     JLE      3
    0001026B  EB                JMP      

    LINE     10107

    0001026C  B8 01000000       MOV      EAX,1
    00010271  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10108

    00010277  B8 01000000       MOV      EAX,1
    0001027C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10109

    00010282  B8 01000000       MOV      EAX,1
    00010287  8B C8             MOV      ECX,EAX
    00010289  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001028C  48                DEC      EAX
    0001028D  BB 0E000000       MOV      EBX,14
    00010292  F7 E3             MUL      EBX
    00010294  50                PUSH     EAX
    00010295  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010298  48                DEC      EAX
    00010299  BB 02000000       MOV      EBX,2
    0001029E  F7 E3             MUL      EBX
    000102A0  5B                POP      EBX
    000102A1  03 C3             ADD      EAX,EBX
    000102A3  8B F8             MOV      EDI,EAX
    000102A5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10110

    000102AC  B8 01000000       MOV      EAX,1
    000102B1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10111

    000102B7  B8 01000000       MOV      EAX,1
    000102BC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10113

    000102C2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000102C9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000102CE  5B                POP      EBX

    LINE     10115

    000102CF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000102D6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000102DB  5B                POP      EBX

    LINE     10117

    000102DC  B8 0A000000       MOV      EAX,10
    000102E1  40                INC      EAX
    000102E2  50                PUSH     EAX
    000102E3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000102E6  5B                POP      EBX
    000102E7  3B C3             CMP      EAX,EBX
    000102E9  0F 8503000000     JNE      3
    000102EF  EB                JMP      

    LINE     10131

    000102F0  56                PUSH     ESI
    000102F1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000102F7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000102FD  FF D1             CALL     ECX                       run_inner_proc
    000102FF  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10133

    00010300  B8 01000000       MOV      EAX,1
    00010305  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10135

    00010308  B8 01000000       MOV      EAX,1
    0001030D  8B C8             MOV      ECX,EAX
    0001030F  B8 0A000000       MOV      EAX,10
    00010314  50                PUSH     EAX
    00010315  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010318  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001031B  5B                POP      EBX
    0001031C  53                PUSH     EBX
    0001031D  3B C3             CMP      EAX,EBX
    0001031F  0F 8E03000000     JLE      3
    00010325  EB                JMP      

    LINE     10137

    00010326  B8 01000000       MOV      EAX,1
    0001032B  8B C8             MOV      ECX,EAX
    0001032D  B8 05000000       MOV      EAX,5
    00010332  50                PUSH     EAX
    00010333  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010336  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010339  5B                POP      EBX
    0001033A  53                PUSH     EBX
    0001033B  3B C3             CMP      EAX,EBX
    0001033D  0F 8E03000000     JLE      3
    00010343  EB                JMP      

    LINE     10144

    00010344  B8 01000000       MOV      EAX,1
    00010349  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10145

    0001034C  B8 01000000       MOV      EAX,1
    00010351  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10146

    00010354  B8 01000000       MOV      EAX,1
    00010359  8B C8             MOV      ECX,EAX
    0001035B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001035E  48                DEC      EAX
    0001035F  BB 0E000000       MOV      EBX,14
    00010364  F7 E3             MUL      EBX
    00010366  50                PUSH     EAX
    00010367  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001036A  48                DEC      EAX
    0001036B  BB 02000000       MOV      EBX,2
    00010370  F7 E3             MUL      EBX
    00010372  5B                POP      EBX
    00010373  03 C3             ADD      EAX,EBX
    00010375  8B F8             MOV      EDI,EAX
    00010377  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10147

    0001037B  B8 01000000       MOV      EAX,1
    00010380  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10148

    00010383  B8 01000000       MOV      EAX,1
    00010388  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10150

    0001038B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010392  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010397  5B                POP      EBX

    LINE     10152

    00010398  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001039F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000103A4  5B                POP      EBX

    LINE     10154

    000103A5  B8 0A000000       MOV      EAX,10
    000103AA  40                INC      EAX
    000103AB  50                PUSH     EAX
    000103AC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000103AF  5B                POP      EBX
    000103B0  3B C3             CMP      EAX,EBX
    000103B2  0F 8503000000     JNE      3
    000103B8  EB                JMP      

    LINE     10161

    000103B9  B8 01000000       MOV      EAX,1
    000103BE  8B C8             MOV      ECX,EAX
    000103C0  B8 0A000000       MOV      EAX,10
    000103C5  50                PUSH     EAX
    000103C6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000103C9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000103CC  5B                POP      EBX
    000103CD  53                PUSH     EBX
    000103CE  3B C3             CMP      EAX,EBX
    000103D0  0F 8E03000000     JLE      3
    000103D6  EB                JMP      

    LINE     10163

    000103D7  B8 01000000       MOV      EAX,1
    000103DC  8B C8             MOV      ECX,EAX
    000103DE  B8 05000000       MOV      EAX,5
    000103E3  50                PUSH     EAX
    000103E4  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000103E7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000103EA  5B                POP      EBX
    000103EB  53                PUSH     EBX
    000103EC  3B C3             CMP      EAX,EBX
    000103EE  0F 8E03000000     JLE      3
    000103F4  EB                JMP      

    LINE     10170

    000103F5  B8 01000000       MOV      EAX,1
    000103FA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10171

    000103FD  B8 01000000       MOV      EAX,1
    00010402  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10172

    00010405  B8 01000000       MOV      EAX,1
    0001040A  8B C8             MOV      ECX,EAX
    0001040C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001040F  48                DEC      EAX
    00010410  BB 0E000000       MOV      EBX,14
    00010415  F7 E3             MUL      EBX
    00010417  50                PUSH     EAX
    00010418  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001041B  48                DEC      EAX
    0001041C  BB 02000000       MOV      EBX,2
    00010421  F7 E3             MUL      EBX
    00010423  5B                POP      EBX
    00010424  03 C3             ADD      EAX,EBX
    00010426  8B F8             MOV      EDI,EAX
    00010428  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10173

    0001042C  B8 01000000       MOV      EAX,1
    00010431  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10174

    00010434  B8 01000000       MOV      EAX,1
    00010439  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10176

    0001043C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00010443  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010448  5B                POP      EBX

    LINE     10178

    00010449  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00010450  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00010455  5B                POP      EBX

    LINE     10180

    00010456  B8 0A000000       MOV      EAX,10
    0001045B  40                INC      EAX
    0001045C  50                PUSH     EAX
    0001045D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010460  5B                POP      EBX
    00010461  3B C3             CMP      EAX,EBX
    00010463  0F 8503000000     JNE      3
    00010469  EB                JMP      

    LINE     10188

    0001046A  B8 01000000       MOV      EAX,1
    0001046F  8B C8             MOV      ECX,EAX
    00010471  B8 0A000000       MOV      EAX,10
    00010476  50                PUSH     EAX
    00010477  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001047A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001047D  5B                POP      EBX
    0001047E  53                PUSH     EBX
    0001047F  3B C3             CMP      EAX,EBX
    00010481  0F 8E03000000     JLE      3
    00010487  EB                JMP      

    LINE     10190

    00010488  B8 01000000       MOV      EAX,1
    0001048D  8B C8             MOV      ECX,EAX
    0001048F  B8 05000000       MOV      EAX,5
    00010494  50                PUSH     EAX
    00010495  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010498  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001049B  5B                POP      EBX
    0001049C  53                PUSH     EBX
    0001049D  3B C3             CMP      EAX,EBX
    0001049F  0F 8E03000000     JLE      3
    000104A5  EB                JMP      

    LINE     10197

    000104A6  B8 01000000       MOV      EAX,1
    000104AB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10198

    000104B1  B8 01000000       MOV      EAX,1
    000104B6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10199

    000104BC  B8 01000000       MOV      EAX,1
    000104C1  8B C8             MOV      ECX,EAX
    000104C3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000104C6  48                DEC      EAX
    000104C7  BB 0E000000       MOV      EBX,14
    000104CC  F7 E3             MUL      EBX
    000104CE  50                PUSH     EAX
    000104CF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000104D2  48                DEC      EAX
    000104D3  BB 02000000       MOV      EBX,2
    000104D8  F7 E3             MUL      EBX
    000104DA  5B                POP      EBX
    000104DB  03 C3             ADD      EAX,EBX
    000104DD  8B F8             MOV      EDI,EAX
    000104DF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10200

    000104E6  B8 01000000       MOV      EAX,1
    000104EB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10201

    000104F1  B8 01000000       MOV      EAX,1
    000104F6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10203

    000104FC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010503  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00010508  5B                POP      EBX

    LINE     10205

    00010509  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010510  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00010515  5B                POP      EBX

    LINE     10207

    00010516  B8 0A000000       MOV      EAX,10
    0001051B  40                INC      EAX
    0001051C  50                PUSH     EAX
    0001051D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010520  5B                POP      EBX
    00010521  3B C3             CMP      EAX,EBX
    00010523  0F 8503000000     JNE      3
    00010529  EB                JMP      

    LINE     10214

    0001052A  B8 01000000       MOV      EAX,1
    0001052F  8B C8             MOV      ECX,EAX
    00010531  B8 0A000000       MOV      EAX,10
    00010536  50                PUSH     EAX
    00010537  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001053A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001053D  5B                POP      EBX
    0001053E  53                PUSH     EBX
    0001053F  3B C3             CMP      EAX,EBX
    00010541  0F 8E03000000     JLE      3
    00010547  EB                JMP      

    LINE     10216

    00010548  B8 01000000       MOV      EAX,1
    0001054D  8B C8             MOV      ECX,EAX
    0001054F  B8 05000000       MOV      EAX,5
    00010554  50                PUSH     EAX
    00010555  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00010558  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001055B  5B                POP      EBX
    0001055C  53                PUSH     EBX
    0001055D  3B C3             CMP      EAX,EBX
    0001055F  0F 8E03000000     JLE      3
    00010565  EB                JMP      

    LINE     10223

    00010566  B8 01000000       MOV      EAX,1
    0001056B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10224

    00010571  B8 01000000       MOV      EAX,1
    00010576  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10225

    0001057C  B8 01000000       MOV      EAX,1
    00010581  8B C8             MOV      ECX,EAX
    00010583  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010586  48                DEC      EAX
    00010587  BB 0E000000       MOV      EBX,14
    0001058C  F7 E3             MUL      EBX
    0001058E  50                PUSH     EAX
    0001058F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010592  48                DEC      EAX
    00010593  BB 02000000       MOV      EBX,2
    00010598  F7 E3             MUL      EBX
    0001059A  5B                POP      EBX
    0001059B  03 C3             ADD      EAX,EBX
    0001059D  8B F8             MOV      EDI,EAX
    0001059F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10226

    000105A6  B8 01000000       MOV      EAX,1
    000105AB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10227

    000105B1  B8 01000000       MOV      EAX,1
    000105B6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10229

    000105BC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000105C3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000105C8  5B                POP      EBX

    LINE     10231

    000105C9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000105D0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000105D5  5B                POP      EBX

    LINE     10233

    000105D6  B8 0A000000       MOV      EAX,10
    000105DB  40                INC      EAX
    000105DC  50                PUSH     EAX
    000105DD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000105E0  5B                POP      EBX
    000105E1  3B C3             CMP      EAX,EBX
    000105E3  0F 8503000000     JNE      3
    000105E9  EB                JMP      

    LINE     10247

    000105EA  56                PUSH     ESI
    000105EB  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000105F1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000105F7  FF D1             CALL     ECX                       run_inner_proc
    000105F9  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10249

    000105FA  B8 01000000       MOV      EAX,1
    000105FF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10251

    00010602  B8 01000000       MOV      EAX,1
    00010607  8B C8             MOV      ECX,EAX
    00010609  B8 0A000000       MOV      EAX,10
    0001060E  50                PUSH     EAX
    0001060F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010612  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010615  5B                POP      EBX
    00010616  53                PUSH     EBX
    00010617  3B C3             CMP      EAX,EBX
    00010619  0F 8E03000000     JLE      3
    0001061F  EB                JMP      

    LINE     10253

    00010620  B8 01000000       MOV      EAX,1
    00010625  8B C8             MOV      ECX,EAX
    00010627  B8 05000000       MOV      EAX,5
    0001062C  50                PUSH     EAX
    0001062D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010630  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010633  5B                POP      EBX
    00010634  53                PUSH     EBX
    00010635  3B C3             CMP      EAX,EBX
    00010637  0F 8E03000000     JLE      3
    0001063D  EB                JMP      

    LINE     10260

    0001063E  B8 01000000       MOV      EAX,1
    00010643  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10261

    00010646  B8 01000000       MOV      EAX,1
    0001064B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10262

    0001064E  B8 01000000       MOV      EAX,1
    00010653  8B C8             MOV      ECX,EAX
    00010655  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010658  48                DEC      EAX
    00010659  BB 0E000000       MOV      EBX,14
    0001065E  F7 E3             MUL      EBX
    00010660  50                PUSH     EAX
    00010661  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010664  48                DEC      EAX
    00010665  BB 02000000       MOV      EBX,2
    0001066A  F7 E3             MUL      EBX
    0001066C  5B                POP      EBX
    0001066D  03 C3             ADD      EAX,EBX
    0001066F  8B F8             MOV      EDI,EAX
    00010671  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10263

    00010675  B8 01000000       MOV      EAX,1
    0001067A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10264

    0001067D  B8 01000000       MOV      EAX,1
    00010682  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10266

    00010685  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001068C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010691  5B                POP      EBX

    LINE     10268

    00010692  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010699  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001069E  5B                POP      EBX

    LINE     10270

    0001069F  B8 0A000000       MOV      EAX,10
    000106A4  40                INC      EAX
    000106A5  50                PUSH     EAX
    000106A6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000106A9  5B                POP      EBX
    000106AA  3B C3             CMP      EAX,EBX
    000106AC  0F 8503000000     JNE      3
    000106B2  EB                JMP      

    LINE     10277

    000106B3  B8 01000000       MOV      EAX,1
    000106B8  8B C8             MOV      ECX,EAX
    000106BA  B8 0A000000       MOV      EAX,10
    000106BF  50                PUSH     EAX
    000106C0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000106C3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000106C6  5B                POP      EBX
    000106C7  53                PUSH     EBX
    000106C8  3B C3             CMP      EAX,EBX
    000106CA  0F 8E03000000     JLE      3
    000106D0  EB                JMP      

    LINE     10279

    000106D1  B8 01000000       MOV      EAX,1
    000106D6  8B C8             MOV      ECX,EAX
    000106D8  B8 05000000       MOV      EAX,5
    000106DD  50                PUSH     EAX
    000106DE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000106E1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000106E4  5B                POP      EBX
    000106E5  53                PUSH     EBX
    000106E6  3B C3             CMP      EAX,EBX
    000106E8  0F 8E03000000     JLE      3
    000106EE  EB                JMP      

    LINE     10286

    000106EF  B8 01000000       MOV      EAX,1
    000106F4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10287

    000106F7  B8 01000000       MOV      EAX,1
    000106FC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10288

    000106FF  B8 01000000       MOV      EAX,1
    00010704  8B C8             MOV      ECX,EAX
    00010706  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010709  48                DEC      EAX
    0001070A  BB 0E000000       MOV      EBX,14
    0001070F  F7 E3             MUL      EBX
    00010711  50                PUSH     EAX
    00010712  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010715  48                DEC      EAX
    00010716  BB 02000000       MOV      EBX,2
    0001071B  F7 E3             MUL      EBX
    0001071D  5B                POP      EBX
    0001071E  03 C3             ADD      EAX,EBX
    00010720  8B F8             MOV      EDI,EAX
    00010722  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10289

    00010726  B8 01000000       MOV      EAX,1
    0001072B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10290

    0001072E  B8 01000000       MOV      EAX,1
    00010733  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10292

    00010736  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001073D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010742  5B                POP      EBX

    LINE     10294

    00010743  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001074A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001074F  5B                POP      EBX

    LINE     10296

    00010750  B8 0A000000       MOV      EAX,10
    00010755  40                INC      EAX
    00010756  50                PUSH     EAX
    00010757  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001075A  5B                POP      EBX
    0001075B  3B C3             CMP      EAX,EBX
    0001075D  0F 8503000000     JNE      3
    00010763  EB                JMP      

    LINE     10304

    00010764  B8 01000000       MOV      EAX,1
    00010769  8B C8             MOV      ECX,EAX
    0001076B  B8 0A000000       MOV      EAX,10
    00010770  50                PUSH     EAX
    00010771  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010774  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010777  5B                POP      EBX
    00010778  53                PUSH     EBX
    00010779  3B C3             CMP      EAX,EBX
    0001077B  0F 8E03000000     JLE      3
    00010781  EB                JMP      

    LINE     10306

    00010782  B8 01000000       MOV      EAX,1
    00010787  8B C8             MOV      ECX,EAX
    00010789  B8 05000000       MOV      EAX,5
    0001078E  50                PUSH     EAX
    0001078F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010792  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010795  5B                POP      EBX
    00010796  53                PUSH     EBX
    00010797  3B C3             CMP      EAX,EBX
    00010799  0F 8E03000000     JLE      3
    0001079F  EB                JMP      

    LINE     10313

    000107A0  B8 01000000       MOV      EAX,1
    000107A5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10314

    000107AB  B8 01000000       MOV      EAX,1
    000107B0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10315

    000107B6  B8 01000000       MOV      EAX,1
    000107BB  8B C8             MOV      ECX,EAX
    000107BD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000107C0  48                DEC      EAX
    000107C1  BB 0E000000       MOV      EBX,14
    000107C6  F7 E3             MUL      EBX
    000107C8  50                PUSH     EAX
    000107C9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000107CC  48                DEC      EAX
    000107CD  BB 02000000       MOV      EBX,2
    000107D2  F7 E3             MUL      EBX
    000107D4  5B                POP      EBX
    000107D5  03 C3             ADD      EAX,EBX
    000107D7  8B F8             MOV      EDI,EAX
    000107D9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10316

    000107E0  B8 01000000       MOV      EAX,1
    000107E5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10317

    000107EB  B8 01000000       MOV      EAX,1
    000107F0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10319

    000107F6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000107FD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00010802  5B                POP      EBX

    LINE     10321

    00010803  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001080A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001080F  5B                POP      EBX

    LINE     10323

    00010810  B8 0A000000       MOV      EAX,10
    00010815  40                INC      EAX
    00010816  50                PUSH     EAX
    00010817  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001081A  5B                POP      EBX
    0001081B  3B C3             CMP      EAX,EBX
    0001081D  0F 8503000000     JNE      3
    00010823  EB                JMP      

    LINE     10330

    00010824  B8 01000000       MOV      EAX,1
    00010829  8B C8             MOV      ECX,EAX
    0001082B  B8 0A000000       MOV      EAX,10
    00010830  50                PUSH     EAX
    00010831  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00010834  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010837  5B                POP      EBX
    00010838  53                PUSH     EBX
    00010839  3B C3             CMP      EAX,EBX
    0001083B  0F 8E03000000     JLE      3
    00010841  EB                JMP      

    LINE     10332

    00010842  B8 01000000       MOV      EAX,1
    00010847  8B C8             MOV      ECX,EAX
    00010849  B8 05000000       MOV      EAX,5
    0001084E  50                PUSH     EAX
    0001084F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00010852  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010855  5B                POP      EBX
    00010856  53                PUSH     EBX
    00010857  3B C3             CMP      EAX,EBX
    00010859  0F 8E03000000     JLE      3
    0001085F  EB                JMP      

    LINE     10339

    00010860  B8 01000000       MOV      EAX,1
    00010865  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10340

    0001086B  B8 01000000       MOV      EAX,1
    00010870  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10341

    00010876  B8 01000000       MOV      EAX,1
    0001087B  8B C8             MOV      ECX,EAX
    0001087D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010880  48                DEC      EAX
    00010881  BB 0E000000       MOV      EBX,14
    00010886  F7 E3             MUL      EBX
    00010888  50                PUSH     EAX
    00010889  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001088C  48                DEC      EAX
    0001088D  BB 02000000       MOV      EBX,2
    00010892  F7 E3             MUL      EBX
    00010894  5B                POP      EBX
    00010895  03 C3             ADD      EAX,EBX
    00010897  8B F8             MOV      EDI,EAX
    00010899  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10342

    000108A0  B8 01000000       MOV      EAX,1
    000108A5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10343

    000108AB  B8 01000000       MOV      EAX,1
    000108B0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10345

    000108B6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000108BD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000108C2  5B                POP      EBX

    LINE     10347

    000108C3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000108CA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000108CF  5B                POP      EBX

    LINE     10349

    000108D0  B8 0A000000       MOV      EAX,10
    000108D5  40                INC      EAX
    000108D6  50                PUSH     EAX
    000108D7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000108DA  5B                POP      EBX
    000108DB  3B C3             CMP      EAX,EBX
    000108DD  0F 8503000000     JNE      3
    000108E3  EB                JMP      

    LINE     10363

    000108E4  56                PUSH     ESI
    000108E5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000108EB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000108F1  FF D1             CALL     ECX                       run_inner_proc
    000108F3  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10365

    000108F4  B8 01000000       MOV      EAX,1
    000108F9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10367

    000108FC  B8 01000000       MOV      EAX,1
    00010901  8B C8             MOV      ECX,EAX
    00010903  B8 0A000000       MOV      EAX,10
    00010908  50                PUSH     EAX
    00010909  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001090C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001090F  5B                POP      EBX
    00010910  53                PUSH     EBX
    00010911  3B C3             CMP      EAX,EBX
    00010913  0F 8E03000000     JLE      3
    00010919  EB                JMP      

    LINE     10369

    0001091A  B8 01000000       MOV      EAX,1
    0001091F  8B C8             MOV      ECX,EAX
    00010921  B8 05000000       MOV      EAX,5
    00010926  50                PUSH     EAX
    00010927  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001092A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001092D  5B                POP      EBX
    0001092E  53                PUSH     EBX
    0001092F  3B C3             CMP      EAX,EBX
    00010931  0F 8E03000000     JLE      3
    00010937  EB                JMP      

    LINE     10376

    00010938  B8 01000000       MOV      EAX,1
    0001093D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10377

    00010940  B8 01000000       MOV      EAX,1
    00010945  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10378

    00010948  B8 01000000       MOV      EAX,1
    0001094D  8B C8             MOV      ECX,EAX
    0001094F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010952  48                DEC      EAX
    00010953  BB 0E000000       MOV      EBX,14
    00010958  F7 E3             MUL      EBX
    0001095A  50                PUSH     EAX
    0001095B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001095E  48                DEC      EAX
    0001095F  BB 02000000       MOV      EBX,2
    00010964  F7 E3             MUL      EBX
    00010966  5B                POP      EBX
    00010967  03 C3             ADD      EAX,EBX
    00010969  8B F8             MOV      EDI,EAX
    0001096B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10379

    0001096F  B8 01000000       MOV      EAX,1
    00010974  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10380

    00010977  B8 01000000       MOV      EAX,1
    0001097C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10382

    0001097F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010986  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001098B  5B                POP      EBX

    LINE     10384

    0001098C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010993  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00010998  5B                POP      EBX

    LINE     10386

    00010999  B8 0A000000       MOV      EAX,10
    0001099E  40                INC      EAX
    0001099F  50                PUSH     EAX
    000109A0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000109A3  5B                POP      EBX
    000109A4  3B C3             CMP      EAX,EBX
    000109A6  0F 8503000000     JNE      3
    000109AC  EB                JMP      

    LINE     10393

    000109AD  B8 01000000       MOV      EAX,1
    000109B2  8B C8             MOV      ECX,EAX
    000109B4  B8 0A000000       MOV      EAX,10
    000109B9  50                PUSH     EAX
    000109BA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000109BD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000109C0  5B                POP      EBX
    000109C1  53                PUSH     EBX
    000109C2  3B C3             CMP      EAX,EBX
    000109C4  0F 8E03000000     JLE      3
    000109CA  EB                JMP      

    LINE     10395

    000109CB  B8 01000000       MOV      EAX,1
    000109D0  8B C8             MOV      ECX,EAX
    000109D2  B8 05000000       MOV      EAX,5
    000109D7  50                PUSH     EAX
    000109D8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000109DB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000109DE  5B                POP      EBX
    000109DF  53                PUSH     EBX
    000109E0  3B C3             CMP      EAX,EBX
    000109E2  0F 8E03000000     JLE      3
    000109E8  EB                JMP      

    LINE     10402

    000109E9  B8 01000000       MOV      EAX,1
    000109EE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10403

    000109F1  B8 01000000       MOV      EAX,1
    000109F6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10404

    000109F9  B8 01000000       MOV      EAX,1
    000109FE  8B C8             MOV      ECX,EAX
    00010A00  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010A03  48                DEC      EAX
    00010A04  BB 0E000000       MOV      EBX,14
    00010A09  F7 E3             MUL      EBX
    00010A0B  50                PUSH     EAX
    00010A0C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010A0F  48                DEC      EAX
    00010A10  BB 02000000       MOV      EBX,2
    00010A15  F7 E3             MUL      EBX
    00010A17  5B                POP      EBX
    00010A18  03 C3             ADD      EAX,EBX
    00010A1A  8B F8             MOV      EDI,EAX
    00010A1C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10405

    00010A20  B8 01000000       MOV      EAX,1
    00010A25  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10406

    00010A28  B8 01000000       MOV      EAX,1
    00010A2D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10408

    00010A30  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00010A37  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010A3C  5B                POP      EBX

    LINE     10410

    00010A3D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00010A44  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00010A49  5B                POP      EBX

    LINE     10412

    00010A4A  B8 0A000000       MOV      EAX,10
    00010A4F  40                INC      EAX
    00010A50  50                PUSH     EAX
    00010A51  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010A54  5B                POP      EBX
    00010A55  3B C3             CMP      EAX,EBX
    00010A57  0F 8503000000     JNE      3
    00010A5D  EB                JMP      

    LINE     10420

    00010A5E  B8 01000000       MOV      EAX,1
    00010A63  8B C8             MOV      ECX,EAX
    00010A65  B8 0A000000       MOV      EAX,10
    00010A6A  50                PUSH     EAX
    00010A6B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010A6E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010A71  5B                POP      EBX
    00010A72  53                PUSH     EBX
    00010A73  3B C3             CMP      EAX,EBX
    00010A75  0F 8E03000000     JLE      3
    00010A7B  EB                JMP      

    LINE     10422

    00010A7C  B8 01000000       MOV      EAX,1
    00010A81  8B C8             MOV      ECX,EAX
    00010A83  B8 05000000       MOV      EAX,5
    00010A88  50                PUSH     EAX
    00010A89  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010A8C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010A8F  5B                POP      EBX
    00010A90  53                PUSH     EBX
    00010A91  3B C3             CMP      EAX,EBX
    00010A93  0F 8E03000000     JLE      3
    00010A99  EB                JMP      

    LINE     10429

    00010A9A  B8 01000000       MOV      EAX,1
    00010A9F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10430

    00010AA5  B8 01000000       MOV      EAX,1
    00010AAA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10431

    00010AB0  B8 01000000       MOV      EAX,1
    00010AB5  8B C8             MOV      ECX,EAX
    00010AB7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010ABA  48                DEC      EAX
    00010ABB  BB 0E000000       MOV      EBX,14
    00010AC0  F7 E3             MUL      EBX
    00010AC2  50                PUSH     EAX
    00010AC3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010AC6  48                DEC      EAX
    00010AC7  BB 02000000       MOV      EBX,2
    00010ACC  F7 E3             MUL      EBX
    00010ACE  5B                POP      EBX
    00010ACF  03 C3             ADD      EAX,EBX
    00010AD1  8B F8             MOV      EDI,EAX
    00010AD3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10432

    00010ADA  B8 01000000       MOV      EAX,1
    00010ADF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10433

    00010AE5  B8 01000000       MOV      EAX,1
    00010AEA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10435

    00010AF0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010AF7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00010AFC  5B                POP      EBX

    LINE     10437

    00010AFD  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010B04  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00010B09  5B                POP      EBX

    LINE     10439

    00010B0A  B8 0A000000       MOV      EAX,10
    00010B0F  40                INC      EAX
    00010B10  50                PUSH     EAX
    00010B11  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010B14  5B                POP      EBX
    00010B15  3B C3             CMP      EAX,EBX
    00010B17  0F 8503000000     JNE      3
    00010B1D  EB                JMP      

    LINE     10446

    00010B1E  B8 01000000       MOV      EAX,1
    00010B23  8B C8             MOV      ECX,EAX
    00010B25  B8 0A000000       MOV      EAX,10
    00010B2A  50                PUSH     EAX
    00010B2B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00010B2E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010B31  5B                POP      EBX
    00010B32  53                PUSH     EBX
    00010B33  3B C3             CMP      EAX,EBX
    00010B35  0F 8E03000000     JLE      3
    00010B3B  EB                JMP      

    LINE     10448

    00010B3C  B8 01000000       MOV      EAX,1
    00010B41  8B C8             MOV      ECX,EAX
    00010B43  B8 05000000       MOV      EAX,5
    00010B48  50                PUSH     EAX
    00010B49  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00010B4C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010B4F  5B                POP      EBX
    00010B50  53                PUSH     EBX
    00010B51  3B C3             CMP      EAX,EBX
    00010B53  0F 8E03000000     JLE      3
    00010B59  EB                JMP      

    LINE     10455

    00010B5A  B8 01000000       MOV      EAX,1
    00010B5F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10456

    00010B65  B8 01000000       MOV      EAX,1
    00010B6A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10457

    00010B70  B8 01000000       MOV      EAX,1
    00010B75  8B C8             MOV      ECX,EAX
    00010B77  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010B7A  48                DEC      EAX
    00010B7B  BB 0E000000       MOV      EBX,14
    00010B80  F7 E3             MUL      EBX
    00010B82  50                PUSH     EAX
    00010B83  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010B86  48                DEC      EAX
    00010B87  BB 02000000       MOV      EBX,2
    00010B8C  F7 E3             MUL      EBX
    00010B8E  5B                POP      EBX
    00010B8F  03 C3             ADD      EAX,EBX
    00010B91  8B F8             MOV      EDI,EAX
    00010B93  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10458

    00010B9A  B8 01000000       MOV      EAX,1
    00010B9F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10459

    00010BA5  B8 01000000       MOV      EAX,1
    00010BAA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10461

    00010BB0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00010BB7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00010BBC  5B                POP      EBX

    LINE     10463

    00010BBD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00010BC4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00010BC9  5B                POP      EBX

    LINE     10465

    00010BCA  B8 0A000000       MOV      EAX,10
    00010BCF  40                INC      EAX
    00010BD0  50                PUSH     EAX
    00010BD1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010BD4  5B                POP      EBX
    00010BD5  3B C3             CMP      EAX,EBX
    00010BD7  0F 8503000000     JNE      3
    00010BDD  EB                JMP      

    LINE     10479

    00010BDE  56                PUSH     ESI
    00010BDF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00010BE5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00010BEB  FF D1             CALL     ECX                       run_inner_proc
    00010BED  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10481

    00010BEE  B8 01000000       MOV      EAX,1
    00010BF3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10483

    00010BF6  B8 01000000       MOV      EAX,1
    00010BFB  8B C8             MOV      ECX,EAX
    00010BFD  B8 0A000000       MOV      EAX,10
    00010C02  50                PUSH     EAX
    00010C03  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010C06  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010C09  5B                POP      EBX
    00010C0A  53                PUSH     EBX
    00010C0B  3B C3             CMP      EAX,EBX
    00010C0D  0F 8E03000000     JLE      3
    00010C13  EB                JMP      

    LINE     10485

    00010C14  B8 01000000       MOV      EAX,1
    00010C19  8B C8             MOV      ECX,EAX
    00010C1B  B8 05000000       MOV      EAX,5
    00010C20  50                PUSH     EAX
    00010C21  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010C24  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010C27  5B                POP      EBX
    00010C28  53                PUSH     EBX
    00010C29  3B C3             CMP      EAX,EBX
    00010C2B  0F 8E03000000     JLE      3
    00010C31  EB                JMP      

    LINE     10492

    00010C32  B8 01000000       MOV      EAX,1
    00010C37  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10493

    00010C3A  B8 01000000       MOV      EAX,1
    00010C3F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10494

    00010C42  B8 01000000       MOV      EAX,1
    00010C47  8B C8             MOV      ECX,EAX
    00010C49  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010C4C  48                DEC      EAX
    00010C4D  BB 0E000000       MOV      EBX,14
    00010C52  F7 E3             MUL      EBX
    00010C54  50                PUSH     EAX
    00010C55  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010C58  48                DEC      EAX
    00010C59  BB 02000000       MOV      EBX,2
    00010C5E  F7 E3             MUL      EBX
    00010C60  5B                POP      EBX
    00010C61  03 C3             ADD      EAX,EBX
    00010C63  8B F8             MOV      EDI,EAX
    00010C65  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10495

    00010C69  B8 01000000       MOV      EAX,1
    00010C6E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10496

    00010C71  B8 01000000       MOV      EAX,1
    00010C76  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10498

    00010C79  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010C80  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010C85  5B                POP      EBX

    LINE     10500

    00010C86  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010C8D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00010C92  5B                POP      EBX

    LINE     10502

    00010C93  B8 0A000000       MOV      EAX,10
    00010C98  40                INC      EAX
    00010C99  50                PUSH     EAX
    00010C9A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010C9D  5B                POP      EBX
    00010C9E  3B C3             CMP      EAX,EBX
    00010CA0  0F 8503000000     JNE      3
    00010CA6  EB                JMP      

    LINE     10509

    00010CA7  B8 01000000       MOV      EAX,1
    00010CAC  8B C8             MOV      ECX,EAX
    00010CAE  B8 0A000000       MOV      EAX,10
    00010CB3  50                PUSH     EAX
    00010CB4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00010CB7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010CBA  5B                POP      EBX
    00010CBB  53                PUSH     EBX
    00010CBC  3B C3             CMP      EAX,EBX
    00010CBE  0F 8E03000000     JLE      3
    00010CC4  EB                JMP      

    LINE     10511

    00010CC5  B8 01000000       MOV      EAX,1
    00010CCA  8B C8             MOV      ECX,EAX
    00010CCC  B8 05000000       MOV      EAX,5
    00010CD1  50                PUSH     EAX
    00010CD2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00010CD5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010CD8  5B                POP      EBX
    00010CD9  53                PUSH     EBX
    00010CDA  3B C3             CMP      EAX,EBX
    00010CDC  0F 8E03000000     JLE      3
    00010CE2  EB                JMP      

    LINE     10518

    00010CE3  B8 01000000       MOV      EAX,1
    00010CE8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10519

    00010CEB  B8 01000000       MOV      EAX,1
    00010CF0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10520

    00010CF3  B8 01000000       MOV      EAX,1
    00010CF8  8B C8             MOV      ECX,EAX
    00010CFA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010CFD  48                DEC      EAX
    00010CFE  BB 0E000000       MOV      EBX,14
    00010D03  F7 E3             MUL      EBX
    00010D05  50                PUSH     EAX
    00010D06  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010D09  48                DEC      EAX
    00010D0A  BB 02000000       MOV      EBX,2
    00010D0F  F7 E3             MUL      EBX
    00010D11  5B                POP      EBX
    00010D12  03 C3             ADD      EAX,EBX
    00010D14  8B F8             MOV      EDI,EAX
    00010D16  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10521

    00010D1A  B8 01000000       MOV      EAX,1
    00010D1F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10522

    00010D22  B8 01000000       MOV      EAX,1
    00010D27  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10524

    00010D2A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00010D31  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010D36  5B                POP      EBX

    LINE     10526

    00010D37  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00010D3E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00010D43  5B                POP      EBX

    LINE     10528

    00010D44  B8 0A000000       MOV      EAX,10
    00010D49  40                INC      EAX
    00010D4A  50                PUSH     EAX
    00010D4B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010D4E  5B                POP      EBX
    00010D4F  3B C3             CMP      EAX,EBX
    00010D51  0F 8503000000     JNE      3
    00010D57  EB                JMP      

    LINE     10536

    00010D58  B8 01000000       MOV      EAX,1
    00010D5D  8B C8             MOV      ECX,EAX
    00010D5F  B8 0A000000       MOV      EAX,10
    00010D64  50                PUSH     EAX
    00010D65  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010D68  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010D6B  5B                POP      EBX
    00010D6C  53                PUSH     EBX
    00010D6D  3B C3             CMP      EAX,EBX
    00010D6F  0F 8E03000000     JLE      3
    00010D75  EB                JMP      

    LINE     10538

    00010D76  B8 01000000       MOV      EAX,1
    00010D7B  8B C8             MOV      ECX,EAX
    00010D7D  B8 05000000       MOV      EAX,5
    00010D82  50                PUSH     EAX
    00010D83  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010D86  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010D89  5B                POP      EBX
    00010D8A  53                PUSH     EBX
    00010D8B  3B C3             CMP      EAX,EBX
    00010D8D  0F 8E03000000     JLE      3
    00010D93  EB                JMP      

    LINE     10545

    00010D94  B8 01000000       MOV      EAX,1
    00010D99  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10546

    00010D9F  B8 01000000       MOV      EAX,1
    00010DA4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10547

    00010DAA  B8 01000000       MOV      EAX,1
    00010DAF  8B C8             MOV      ECX,EAX
    00010DB1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010DB4  48                DEC      EAX
    00010DB5  BB 0E000000       MOV      EBX,14
    00010DBA  F7 E3             MUL      EBX
    00010DBC  50                PUSH     EAX
    00010DBD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010DC0  48                DEC      EAX
    00010DC1  BB 02000000       MOV      EBX,2
    00010DC6  F7 E3             MUL      EBX
    00010DC8  5B                POP      EBX
    00010DC9  03 C3             ADD      EAX,EBX
    00010DCB  8B F8             MOV      EDI,EAX
    00010DCD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10548

    00010DD4  B8 01000000       MOV      EAX,1
    00010DD9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10549

    00010DDF  B8 01000000       MOV      EAX,1
    00010DE4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10551

    00010DEA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010DF1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00010DF6  5B                POP      EBX

    LINE     10553

    00010DF7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010DFE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00010E03  5B                POP      EBX

    LINE     10555

    00010E04  B8 0A000000       MOV      EAX,10
    00010E09  40                INC      EAX
    00010E0A  50                PUSH     EAX
    00010E0B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010E0E  5B                POP      EBX
    00010E0F  3B C3             CMP      EAX,EBX
    00010E11  0F 8503000000     JNE      3
    00010E17  EB                JMP      

    LINE     10562

    00010E18  B8 01000000       MOV      EAX,1
    00010E1D  8B C8             MOV      ECX,EAX
    00010E1F  B8 0A000000       MOV      EAX,10
    00010E24  50                PUSH     EAX
    00010E25  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00010E28  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010E2B  5B                POP      EBX
    00010E2C  53                PUSH     EBX
    00010E2D  3B C3             CMP      EAX,EBX
    00010E2F  0F 8E03000000     JLE      3
    00010E35  EB                JMP      

    LINE     10564

    00010E36  B8 01000000       MOV      EAX,1
    00010E3B  8B C8             MOV      ECX,EAX
    00010E3D  B8 05000000       MOV      EAX,5
    00010E42  50                PUSH     EAX
    00010E43  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00010E46  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010E49  5B                POP      EBX
    00010E4A  53                PUSH     EBX
    00010E4B  3B C3             CMP      EAX,EBX
    00010E4D  0F 8E03000000     JLE      3
    00010E53  EB                JMP      

    LINE     10571

    00010E54  B8 01000000       MOV      EAX,1
    00010E59  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10572

    00010E5F  B8 01000000       MOV      EAX,1
    00010E64  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10573

    00010E6A  B8 01000000       MOV      EAX,1
    00010E6F  8B C8             MOV      ECX,EAX
    00010E71  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page  10


    00010E74  48                DEC      EAX
    00010E75  BB 0E000000       MOV      EBX,14
    00010E7A  F7 E3             MUL      EBX
    00010E7C  50                PUSH     EAX
    00010E7D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010E80  48                DEC      EAX
    00010E81  BB 02000000       MOV      EBX,2
    00010E86  F7 E3             MUL      EBX
    00010E88  5B                POP      EBX
    00010E89  03 C3             ADD      EAX,EBX
    00010E8B  8B F8             MOV      EDI,EAX
    00010E8D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10574

    00010E94  B8 01000000       MOV      EAX,1
    00010E99  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10575

    00010E9F  B8 01000000       MOV      EAX,1
    00010EA4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10577

    00010EAA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00010EB1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00010EB6  5B                POP      EBX

    LINE     10579

    00010EB7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00010EBE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00010EC3  5B                POP      EBX

    LINE     10581

    00010EC4  B8 0A000000       MOV      EAX,10
    00010EC9  40                INC      EAX
    00010ECA  50                PUSH     EAX
    00010ECB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010ECE  5B                POP      EBX
    00010ECF  3B C3             CMP      EAX,EBX
    00010ED1  0F 8503000000     JNE      3
    00010ED7  EB                JMP      

    LINE     10595

    00010ED8  56                PUSH     ESI
    00010ED9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00010EDF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00010EE5  FF D1             CALL     ECX                       run_inner_proc
    00010EE7  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10597

    00010EE8  B8 01000000       MOV      EAX,1
    00010EED  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10599

    00010EF0  B8 01000000       MOV      EAX,1
    00010EF5  8B C8             MOV      ECX,EAX
    00010EF7  B8 0A000000       MOV      EAX,10
    00010EFC  50                PUSH     EAX
    00010EFD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00010F00  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010F03  5B                POP      EBX
    00010F04  53                PUSH     EBX
    00010F05  3B C3             CMP      EAX,EBX
    00010F07  0F 8E03000000     JLE      3
    00010F0D  EB                JMP      

    LINE     10601

    00010F0E  B8 01000000       MOV      EAX,1
    00010F13  8B C8             MOV      ECX,EAX
    00010F15  B8 05000000       MOV      EAX,5
    00010F1A  50                PUSH     EAX
    00010F1B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00010F1E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010F21  5B                POP      EBX
    00010F22  53                PUSH     EBX
    00010F23  3B C3             CMP      EAX,EBX
    00010F25  0F 8E03000000     JLE      3
    00010F2B  EB                JMP      

    LINE     10608

    00010F2C  B8 01000000       MOV      EAX,1
    00010F31  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10609

    00010F34  B8 01000000       MOV      EAX,1
    00010F39  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10610

    00010F3C  B8 01000000       MOV      EAX,1
    00010F41  8B C8             MOV      ECX,EAX
    00010F43  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010F46  48                DEC      EAX
    00010F47  BB 0E000000       MOV      EBX,14
    00010F4C  F7 E3             MUL      EBX
    00010F4E  50                PUSH     EAX
    00010F4F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00010F52  48                DEC      EAX
    00010F53  BB 02000000       MOV      EBX,2
    00010F58  F7 E3             MUL      EBX
    00010F5A  5B                POP      EBX
    00010F5B  03 C3             ADD      EAX,EBX
    00010F5D  8B F8             MOV      EDI,EAX
    00010F5F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10611

    00010F63  B8 01000000       MOV      EAX,1
    00010F68  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10612

    00010F6B  B8 01000000       MOV      EAX,1
    00010F70  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10614

    00010F73  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00010F7A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00010F7F  5B                POP      EBX

    LINE     10616

    00010F80  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00010F87  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00010F8C  5B                POP      EBX

    LINE     10618

    00010F8D  B8 0A000000       MOV      EAX,10
    00010F92  40                INC      EAX
    00010F93  50                PUSH     EAX
    00010F94  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00010F97  5B                POP      EBX
    00010F98  3B C3             CMP      EAX,EBX
    00010F9A  0F 8503000000     JNE      3
    00010FA0  EB                JMP      

    LINE     10625

    00010FA1  B8 01000000       MOV      EAX,1
    00010FA6  8B C8             MOV      ECX,EAX
    00010FA8  B8 0A000000       MOV      EAX,10
    00010FAD  50                PUSH     EAX
    00010FAE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00010FB1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010FB4  5B                POP      EBX
    00010FB5  53                PUSH     EBX
    00010FB6  3B C3             CMP      EAX,EBX
    00010FB8  0F 8E03000000     JLE      3
    00010FBE  EB                JMP      

    LINE     10627

    00010FBF  B8 01000000       MOV      EAX,1
    00010FC4  8B C8             MOV      ECX,EAX
    00010FC6  B8 05000000       MOV      EAX,5
    00010FCB  50                PUSH     EAX
    00010FCC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00010FCF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00010FD2  5B                POP      EBX
    00010FD3  53                PUSH     EBX
    00010FD4  3B C3             CMP      EAX,EBX
    00010FD6  0F 8E03000000     JLE      3
    00010FDC  EB                JMP      

    LINE     10634

    00010FDD  B8 01000000       MOV      EAX,1
    00010FE2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10635

    00010FE5  B8 01000000       MOV      EAX,1
    00010FEA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10636

    00010FED  B8 01000000       MOV      EAX,1
    00010FF2  8B C8             MOV      ECX,EAX
    00010FF4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00010FF7  48                DEC      EAX
    00010FF8  BB 0E000000       MOV      EBX,14
    00010FFD  F7 E3             MUL      EBX
    00010FFF  50                PUSH     EAX
    00011000  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011003  48                DEC      EAX
    00011004  BB 02000000       MOV      EBX,2
    00011009  F7 E3             MUL      EBX
    0001100B  5B                POP      EBX
    0001100C  03 C3             ADD      EAX,EBX
    0001100E  8B F8             MOV      EDI,EAX
    00011010  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10637

    00011014  B8 01000000       MOV      EAX,1
    00011019  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10638

    0001101C  B8 01000000       MOV      EAX,1
    00011021  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10640

    00011024  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001102B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011030  5B                POP      EBX

    LINE     10642

    00011031  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00011038  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001103D  5B                POP      EBX

    LINE     10644

    0001103E  B8 0A000000       MOV      EAX,10
    00011043  40                INC      EAX
    00011044  50                PUSH     EAX
    00011045  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011048  5B                POP      EBX
    00011049  3B C3             CMP      EAX,EBX
    0001104B  0F 8503000000     JNE      3
    00011051  EB                JMP      

    LINE     10652

    00011052  B8 01000000       MOV      EAX,1
    00011057  8B C8             MOV      ECX,EAX
    00011059  B8 0A000000       MOV      EAX,10
    0001105E  50                PUSH     EAX
    0001105F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00011062  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011065  5B                POP      EBX
    00011066  53                PUSH     EBX
    00011067  3B C3             CMP      EAX,EBX
    00011069  0F 8E03000000     JLE      3
    0001106F  EB                JMP      

    LINE     10654

    00011070  B8 01000000       MOV      EAX,1
    00011075  8B C8             MOV      ECX,EAX
    00011077  B8 05000000       MOV      EAX,5
    0001107C  50                PUSH     EAX
    0001107D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011080  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011083  5B                POP      EBX
    00011084  53                PUSH     EBX
    00011085  3B C3             CMP      EAX,EBX
    00011087  0F 8E03000000     JLE      3
    0001108D  EB                JMP      

    LINE     10661

    0001108E  B8 01000000       MOV      EAX,1
    00011093  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10662

    00011099  B8 01000000       MOV      EAX,1
    0001109E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10663

    000110A4  B8 01000000       MOV      EAX,1
    000110A9  8B C8             MOV      ECX,EAX
    000110AB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000110AE  48                DEC      EAX
    000110AF  BB 0E000000       MOV      EBX,14
    000110B4  F7 E3             MUL      EBX
    000110B6  50                PUSH     EAX
    000110B7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000110BA  48                DEC      EAX
    000110BB  BB 02000000       MOV      EBX,2
    000110C0  F7 E3             MUL      EBX
    000110C2  5B                POP      EBX
    000110C3  03 C3             ADD      EAX,EBX
    000110C5  8B F8             MOV      EDI,EAX
    000110C7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10664

    000110CE  B8 01000000       MOV      EAX,1
    000110D3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10665

    000110D9  B8 01000000       MOV      EAX,1
    000110DE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10667

    000110E4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000110EB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000110F0  5B                POP      EBX

    LINE     10669

    000110F1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000110F8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000110FD  5B                POP      EBX

    LINE     10671

    000110FE  B8 0A000000       MOV      EAX,10
    00011103  40                INC      EAX
    00011104  50                PUSH     EAX
    00011105  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011108  5B                POP      EBX
    00011109  3B C3             CMP      EAX,EBX
    0001110B  0F 8503000000     JNE      3
    00011111  EB                JMP      

    LINE     10678

    00011112  B8 01000000       MOV      EAX,1
    00011117  8B C8             MOV      ECX,EAX
    00011119  B8 0A000000       MOV      EAX,10
    0001111E  50                PUSH     EAX
    0001111F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00011122  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011125  5B                POP      EBX
    00011126  53                PUSH     EBX
    00011127  3B C3             CMP      EAX,EBX
    00011129  0F 8E03000000     JLE      3
    0001112F  EB                JMP      

    LINE     10680

    00011130  B8 01000000       MOV      EAX,1
    00011135  8B C8             MOV      ECX,EAX
    00011137  B8 05000000       MOV      EAX,5
    0001113C  50                PUSH     EAX
    0001113D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00011140  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011143  5B                POP      EBX
    00011144  53                PUSH     EBX
    00011145  3B C3             CMP      EAX,EBX
    00011147  0F 8E03000000     JLE      3
    0001114D  EB                JMP      

    LINE     10687

    0001114E  B8 01000000       MOV      EAX,1
    00011153  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10688

    00011159  B8 01000000       MOV      EAX,1
    0001115E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10689

    00011164  B8 01000000       MOV      EAX,1
    00011169  8B C8             MOV      ECX,EAX
    0001116B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001116E  48                DEC      EAX
    0001116F  BB 0E000000       MOV      EBX,14
    00011174  F7 E3             MUL      EBX
    00011176  50                PUSH     EAX
    00011177  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001117A  48                DEC      EAX
    0001117B  BB 02000000       MOV      EBX,2
    00011180  F7 E3             MUL      EBX
    00011182  5B                POP      EBX
    00011183  03 C3             ADD      EAX,EBX
    00011185  8B F8             MOV      EDI,EAX
    00011187  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10690

    0001118E  B8 01000000       MOV      EAX,1
    00011193  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10691

    00011199  B8 01000000       MOV      EAX,1
    0001119E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10693

    000111A4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000111AB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000111B0  5B                POP      EBX

    LINE     10695

    000111B1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000111B8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000111BD  5B                POP      EBX

    LINE     10697

    000111BE  B8 0A000000       MOV      EAX,10
    000111C3  40                INC      EAX
    000111C4  50                PUSH     EAX
    000111C5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000111C8  5B                POP      EBX
    000111C9  3B C3             CMP      EAX,EBX
    000111CB  0F 8503000000     JNE      3
    000111D1  EB                JMP      

    LINE     10711

    000111D2  56                PUSH     ESI
    000111D3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000111D9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000111DF  FF D1             CALL     ECX                       run_inner_proc
    000111E1  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10713

    000111E2  B8 01000000       MOV      EAX,1
    000111E7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10715

    000111EA  B8 01000000       MOV      EAX,1
    000111EF  8B C8             MOV      ECX,EAX
    000111F1  B8 0A000000       MOV      EAX,10
    000111F6  50                PUSH     EAX
    000111F7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000111FA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000111FD  5B                POP      EBX
    000111FE  53                PUSH     EBX
    000111FF  3B C3             CMP      EAX,EBX
    00011201  0F 8E03000000     JLE      3
    00011207  EB                JMP      

    LINE     10717

    00011208  B8 01000000       MOV      EAX,1
    0001120D  8B C8             MOV      ECX,EAX
    0001120F  B8 05000000       MOV      EAX,5
    00011214  50                PUSH     EAX
    00011215  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011218  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001121B  5B                POP      EBX
    0001121C  53                PUSH     EBX
    0001121D  3B C3             CMP      EAX,EBX
    0001121F  0F 8E03000000     JLE      3
    00011225  EB                JMP      

    LINE     10724

    00011226  B8 01000000       MOV      EAX,1
    0001122B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10725

    0001122E  B8 01000000       MOV      EAX,1
    00011233  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10726

    00011236  B8 01000000       MOV      EAX,1
    0001123B  8B C8             MOV      ECX,EAX
    0001123D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011240  48                DEC      EAX
    00011241  BB 0E000000       MOV      EBX,14
    00011246  F7 E3             MUL      EBX
    00011248  50                PUSH     EAX
    00011249  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001124C  48                DEC      EAX
    0001124D  BB 02000000       MOV      EBX,2
    00011252  F7 E3             MUL      EBX
    00011254  5B                POP      EBX
    00011255  03 C3             ADD      EAX,EBX
    00011257  8B F8             MOV      EDI,EAX
    00011259  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10727

    0001125D  B8 01000000       MOV      EAX,1
    00011262  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10728

    00011265  B8 01000000       MOV      EAX,1
    0001126A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10730

    0001126D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00011274  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011279  5B                POP      EBX

    LINE     10732

    0001127A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00011281  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011286  5B                POP      EBX

    LINE     10734

    00011287  B8 0A000000       MOV      EAX,10
    0001128C  40                INC      EAX
    0001128D  50                PUSH     EAX
    0001128E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011291  5B                POP      EBX
    00011292  3B C3             CMP      EAX,EBX
    00011294  0F 8503000000     JNE      3
    0001129A  EB                JMP      

    LINE     10741

    0001129B  B8 01000000       MOV      EAX,1
    000112A0  8B C8             MOV      ECX,EAX
    000112A2  B8 0A000000       MOV      EAX,10
    000112A7  50                PUSH     EAX
    000112A8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000112AB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000112AE  5B                POP      EBX
    000112AF  53                PUSH     EBX
    000112B0  3B C3             CMP      EAX,EBX
    000112B2  0F 8E03000000     JLE      3
    000112B8  EB                JMP      

    LINE     10743

    000112B9  B8 01000000       MOV      EAX,1
    000112BE  8B C8             MOV      ECX,EAX
    000112C0  B8 05000000       MOV      EAX,5
    000112C5  50                PUSH     EAX
    000112C6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000112C9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000112CC  5B                POP      EBX
    000112CD  53                PUSH     EBX
    000112CE  3B C3             CMP      EAX,EBX
    000112D0  0F 8E03000000     JLE      3
    000112D6  EB                JMP      

    LINE     10750

    000112D7  B8 01000000       MOV      EAX,1
    000112DC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10751

    000112DF  B8 01000000       MOV      EAX,1
    000112E4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10752

    000112E7  B8 01000000       MOV      EAX,1
    000112EC  8B C8             MOV      ECX,EAX
    000112EE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000112F1  48                DEC      EAX
    000112F2  BB 0E000000       MOV      EBX,14
    000112F7  F7 E3             MUL      EBX
    000112F9  50                PUSH     EAX
    000112FA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000112FD  48                DEC      EAX
    000112FE  BB 02000000       MOV      EBX,2
    00011303  F7 E3             MUL      EBX
    00011305  5B                POP      EBX
    00011306  03 C3             ADD      EAX,EBX
    00011308  8B F8             MOV      EDI,EAX
    0001130A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10753

    0001130E  B8 01000000       MOV      EAX,1
    00011313  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10754

    00011316  B8 01000000       MOV      EAX,1
    0001131B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10756

    0001131E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00011325  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001132A  5B                POP      EBX

    LINE     10758

    0001132B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00011332  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011337  5B                POP      EBX

    LINE     10760

    00011338  B8 0A000000       MOV      EAX,10
    0001133D  40                INC      EAX
    0001133E  50                PUSH     EAX
    0001133F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011342  5B                POP      EBX
    00011343  3B C3             CMP      EAX,EBX
    00011345  0F 8503000000     JNE      3
    0001134B  EB                JMP      

    LINE     10768

    0001134C  B8 01000000       MOV      EAX,1
    00011351  8B C8             MOV      ECX,EAX
    00011353  B8 0A000000       MOV      EAX,10
    00011358  50                PUSH     EAX
    00011359  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001135C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001135F  5B                POP      EBX
    00011360  53                PUSH     EBX
    00011361  3B C3             CMP      EAX,EBX
    00011363  0F 8E03000000     JLE      3
    00011369  EB                JMP      

    LINE     10770

    0001136A  B8 01000000       MOV      EAX,1
    0001136F  8B C8             MOV      ECX,EAX
    00011371  B8 05000000       MOV      EAX,5
    00011376  50                PUSH     EAX
    00011377  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001137A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001137D  5B                POP      EBX
    0001137E  53                PUSH     EBX
    0001137F  3B C3             CMP      EAX,EBX
    00011381  0F 8E03000000     JLE      3
    00011387  EB                JMP      

    LINE     10777

    00011388  B8 01000000       MOV      EAX,1
    0001138D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10778

    00011393  B8 01000000       MOV      EAX,1
    00011398  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10779

    0001139E  B8 01000000       MOV      EAX,1
    000113A3  8B C8             MOV      ECX,EAX
    000113A5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000113A8  48                DEC      EAX
    000113A9  BB 0E000000       MOV      EBX,14
    000113AE  F7 E3             MUL      EBX
    000113B0  50                PUSH     EAX
    000113B1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000113B4  48                DEC      EAX
    000113B5  BB 02000000       MOV      EBX,2
    000113BA  F7 E3             MUL      EBX
    000113BC  5B                POP      EBX
    000113BD  03 C3             ADD      EAX,EBX
    000113BF  8B F8             MOV      EDI,EAX
    000113C1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10780

    000113C8  B8 01000000       MOV      EAX,1
    000113CD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10781

    000113D3  B8 01000000       MOV      EAX,1
    000113D8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10783

    000113DE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000113E5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000113EA  5B                POP      EBX

    LINE     10785

    000113EB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000113F2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000113F7  5B                POP      EBX

    LINE     10787

    000113F8  B8 0A000000       MOV      EAX,10
    000113FD  40                INC      EAX
    000113FE  50                PUSH     EAX
    000113FF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011402  5B                POP      EBX
    00011403  3B C3             CMP      EAX,EBX
    00011405  0F 8503000000     JNE      3
    0001140B  EB                JMP      

    LINE     10794

    0001140C  B8 01000000       MOV      EAX,1
    00011411  8B C8             MOV      ECX,EAX
    00011413  B8 0A000000       MOV      EAX,10
    00011418  50                PUSH     EAX
    00011419  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001141C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001141F  5B                POP      EBX
    00011420  53                PUSH     EBX
    00011421  3B C3             CMP      EAX,EBX
    00011423  0F 8E03000000     JLE      3
    00011429  EB                JMP      

    LINE     10796

    0001142A  B8 01000000       MOV      EAX,1
    0001142F  8B C8             MOV      ECX,EAX
    00011431  B8 05000000       MOV      EAX,5
    00011436  50                PUSH     EAX
    00011437  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001143A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001143D  5B                POP      EBX
    0001143E  53                PUSH     EBX
    0001143F  3B C3             CMP      EAX,EBX
    00011441  0F 8E03000000     JLE      3
    00011447  EB                JMP      

    LINE     10803

    00011448  B8 01000000       MOV      EAX,1
    0001144D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10804

    00011453  B8 01000000       MOV      EAX,1
    00011458  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10805

    0001145E  B8 01000000       MOV      EAX,1
    00011463  8B C8             MOV      ECX,EAX
    00011465  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011468  48                DEC      EAX
    00011469  BB 0E000000       MOV      EBX,14
    0001146E  F7 E3             MUL      EBX
    00011470  50                PUSH     EAX
    00011471  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011474  48                DEC      EAX
    00011475  BB 02000000       MOV      EBX,2
    0001147A  F7 E3             MUL      EBX
    0001147C  5B                POP      EBX
    0001147D  03 C3             ADD      EAX,EBX
    0001147F  8B F8             MOV      EDI,EAX
    00011481  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10806

    00011488  B8 01000000       MOV      EAX,1
    0001148D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10807

    00011493  B8 01000000       MOV      EAX,1
    00011498  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10809

    0001149E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000114A5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000114AA  5B                POP      EBX

    LINE     10811

    000114AB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000114B2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000114B7  5B                POP      EBX

    LINE     10813

    000114B8  B8 0A000000       MOV      EAX,10
    000114BD  40                INC      EAX
    000114BE  50                PUSH     EAX
    000114BF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000114C2  5B                POP      EBX
    000114C3  3B C3             CMP      EAX,EBX
    000114C5  0F 8503000000     JNE      3
    000114CB  EB                JMP      

    LINE     10827

    000114CC  56                PUSH     ESI
    000114CD  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000114D3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000114D9  FF D1             CALL     ECX                       run_inner_proc
    000114DB  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10829

    000114DC  B8 01000000       MOV      EAX,1
    000114E1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10831

    000114E4  B8 01000000       MOV      EAX,1
    000114E9  8B C8             MOV      ECX,EAX
    000114EB  B8 0A000000       MOV      EAX,10
    000114F0  50                PUSH     EAX
    000114F1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000114F4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000114F7  5B                POP      EBX
    000114F8  53                PUSH     EBX
    000114F9  3B C3             CMP      EAX,EBX
    000114FB  0F 8E03000000     JLE      3
    00011501  EB                JMP      

    LINE     10833

    00011502  B8 01000000       MOV      EAX,1
    00011507  8B C8             MOV      ECX,EAX
    00011509  B8 05000000       MOV      EAX,5
    0001150E  50                PUSH     EAX
    0001150F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011512  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011515  5B                POP      EBX
    00011516  53                PUSH     EBX
    00011517  3B C3             CMP      EAX,EBX
    00011519  0F 8E03000000     JLE      3
    0001151F  EB                JMP      

    LINE     10840

    00011520  B8 01000000       MOV      EAX,1
    00011525  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10841

    00011528  B8 01000000       MOV      EAX,1
    0001152D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10842

    00011530  B8 01000000       MOV      EAX,1
    00011535  8B C8             MOV      ECX,EAX
    00011537  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001153A  48                DEC      EAX
    0001153B  BB 0E000000       MOV      EBX,14
    00011540  F7 E3             MUL      EBX
    00011542  50                PUSH     EAX
    00011543  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011546  48                DEC      EAX
    00011547  BB 02000000       MOV      EBX,2
    0001154C  F7 E3             MUL      EBX
    0001154E  5B                POP      EBX
    0001154F  03 C3             ADD      EAX,EBX
    00011551  8B F8             MOV      EDI,EAX
    00011553  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10843

    00011557  B8 01000000       MOV      EAX,1
    0001155C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10844

    0001155F  B8 01000000       MOV      EAX,1
    00011564  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10846

    00011567  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001156E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011573  5B                POP      EBX

    LINE     10848

    00011574  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001157B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011580  5B                POP      EBX

    LINE     10850

    00011581  B8 0A000000       MOV      EAX,10
    00011586  40                INC      EAX
    00011587  50                PUSH     EAX
    00011588  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001158B  5B                POP      EBX
    0001158C  3B C3             CMP      EAX,EBX
    0001158E  0F 8503000000     JNE      3
    00011594  EB                JMP      

    LINE     10857

    00011595  B8 01000000       MOV      EAX,1
    0001159A  8B C8             MOV      ECX,EAX
    0001159C  B8 0A000000       MOV      EAX,10
    000115A1  50                PUSH     EAX
    000115A2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000115A5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000115A8  5B                POP      EBX
    000115A9  53                PUSH     EBX
    000115AA  3B C3             CMP      EAX,EBX
    000115AC  0F 8E03000000     JLE      3
    000115B2  EB                JMP      

    LINE     10859

    000115B3  B8 01000000       MOV      EAX,1
    000115B8  8B C8             MOV      ECX,EAX
    000115BA  B8 05000000       MOV      EAX,5
    000115BF  50                PUSH     EAX
    000115C0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000115C3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000115C6  5B                POP      EBX
    000115C7  53                PUSH     EBX
    000115C8  3B C3             CMP      EAX,EBX
    000115CA  0F 8E03000000     JLE      3
    000115D0  EB                JMP      

    LINE     10866

    000115D1  B8 01000000       MOV      EAX,1
    000115D6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10867

    000115D9  B8 01000000       MOV      EAX,1
    000115DE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10868

    000115E1  B8 01000000       MOV      EAX,1
    000115E6  8B C8             MOV      ECX,EAX
    000115E8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000115EB  48                DEC      EAX
    000115EC  BB 0E000000       MOV      EBX,14
    000115F1  F7 E3             MUL      EBX
    000115F3  50                PUSH     EAX
    000115F4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000115F7  48                DEC      EAX
    000115F8  BB 02000000       MOV      EBX,2
    000115FD  F7 E3             MUL      EBX
    000115FF  5B                POP      EBX
    00011600  03 C3             ADD      EAX,EBX
    00011602  8B F8             MOV      EDI,EAX
    00011604  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10869

    00011608  B8 01000000       MOV      EAX,1
    0001160D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10870

    00011610  B8 01000000       MOV      EAX,1
    00011615  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10872

    00011618  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001161F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011624  5B                POP      EBX

    LINE     10874

    00011625  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001162C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011631  5B                POP      EBX

    LINE     10876

    00011632  B8 0A000000       MOV      EAX,10
    00011637  40                INC      EAX
    00011638  50                PUSH     EAX
    00011639  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001163C  5B                POP      EBX
    0001163D  3B C3             CMP      EAX,EBX
    0001163F  0F 8503000000     JNE      3
    00011645  EB                JMP      

    LINE     10884

    00011646  B8 01000000       MOV      EAX,1
    0001164B  8B C8             MOV      ECX,EAX
    0001164D  B8 0A000000       MOV      EAX,10
    00011652  50                PUSH     EAX
    00011653  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00011656  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011659  5B                POP      EBX
    0001165A  53                PUSH     EBX
    0001165B  3B C3             CMP      EAX,EBX
    0001165D  0F 8E03000000     JLE      3
    00011663  EB                JMP      

    LINE     10886

    00011664  B8 01000000       MOV      EAX,1
    00011669  8B C8             MOV      ECX,EAX
    0001166B  B8 05000000       MOV      EAX,5
    00011670  50                PUSH     EAX
    00011671  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011674  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011677  5B                POP      EBX
    00011678  53                PUSH     EBX
    00011679  3B C3             CMP      EAX,EBX
    0001167B  0F 8E03000000     JLE      3
    00011681  EB                JMP      

    LINE     10893

    00011682  B8 01000000       MOV      EAX,1
    00011687  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10894

    0001168D  B8 01000000       MOV      EAX,1
    00011692  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10895

    00011698  B8 01000000       MOV      EAX,1
    0001169D  8B C8             MOV      ECX,EAX
    0001169F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000116A2  48                DEC      EAX
    000116A3  BB 0E000000       MOV      EBX,14
    000116A8  F7 E3             MUL      EBX
    000116AA  50                PUSH     EAX
    000116AB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000116AE  48                DEC      EAX
    000116AF  BB 02000000       MOV      EBX,2
    000116B4  F7 E3             MUL      EBX
    000116B6  5B                POP      EBX
    000116B7  03 C3             ADD      EAX,EBX
    000116B9  8B F8             MOV      EDI,EAX
    000116BB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10896

    000116C2  B8 01000000       MOV      EAX,1
    000116C7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10897

    000116CD  B8 01000000       MOV      EAX,1
    000116D2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10899

    000116D8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000116DF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000116E4  5B                POP      EBX

    LINE     10901

    000116E5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000116EC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000116F1  5B                POP      EBX

    LINE     10903

    000116F2  B8 0A000000       MOV      EAX,10
    000116F7  40                INC      EAX
    000116F8  50                PUSH     EAX
    000116F9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000116FC  5B                POP      EBX
    000116FD  3B C3             CMP      EAX,EBX
    000116FF  0F 8503000000     JNE      3
    00011705  EB                JMP      

    LINE     10910

    00011706  B8 01000000       MOV      EAX,1
    0001170B  8B C8             MOV      ECX,EAX
    0001170D  B8 0A000000       MOV      EAX,10
    00011712  50                PUSH     EAX
    00011713  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00011716  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011719  5B                POP      EBX
    0001171A  53                PUSH     EBX
    0001171B  3B C3             CMP      EAX,EBX
    0001171D  0F 8E03000000     JLE      3
    00011723  EB                JMP      

    LINE     10912

    00011724  B8 01000000       MOV      EAX,1
    00011729  8B C8             MOV      ECX,EAX
    0001172B  B8 05000000       MOV      EAX,5
    00011730  50                PUSH     EAX
    00011731  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00011734  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011737  5B                POP      EBX
    00011738  53                PUSH     EBX
    00011739  3B C3             CMP      EAX,EBX
    0001173B  0F 8E03000000     JLE      3
    00011741  EB                JMP      

    LINE     10919

    00011742  B8 01000000       MOV      EAX,1
    00011747  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10920

    0001174D  B8 01000000       MOV      EAX,1
    00011752  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10921

    00011758  B8 01000000       MOV      EAX,1
    0001175D  8B C8             MOV      ECX,EAX
    0001175F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011762  48                DEC      EAX
    00011763  BB 0E000000       MOV      EBX,14
    00011768  F7 E3             MUL      EBX
    0001176A  50                PUSH     EAX
    0001176B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001176E  48                DEC      EAX
    0001176F  BB 02000000       MOV      EBX,2
    00011774  F7 E3             MUL      EBX
    00011776  5B                POP      EBX
    00011777  03 C3             ADD      EAX,EBX
    00011779  8B F8             MOV      EDI,EAX
    0001177B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     10922

    00011782  B8 01000000       MOV      EAX,1
    00011787  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10923

    0001178D  B8 01000000       MOV      EAX,1
    00011792  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     10925

    00011798  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001179F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000117A4  5B                POP      EBX

    LINE     10927

    000117A5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000117AC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000117B1  5B                POP      EBX

    LINE     10929

    000117B2  B8 0A000000       MOV      EAX,10
    000117B7  40                INC      EAX
    000117B8  50                PUSH     EAX
    000117B9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000117BC  5B                POP      EBX
    000117BD  3B C3             CMP      EAX,EBX
    000117BF  0F 8503000000     JNE      3
    000117C5  EB                JMP      

    LINE     10943

    000117C6  56                PUSH     ESI
    000117C7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000117CD  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000117D3  FF D1             CALL     ECX                       run_inner_proc
    000117D5  5E                POP      ESI                       /* restore callers static pointer */

    LINE     10945

    000117D6  B8 01000000       MOV      EAX,1
    000117DB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     10947

    000117DE  B8 01000000       MOV      EAX,1
    000117E3  8B C8             MOV      ECX,EAX
    000117E5  B8 0A000000       MOV      EAX,10
    000117EA  50                PUSH     EAX
    000117EB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000117EE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000117F1  5B                POP      EBX
    000117F2  53                PUSH     EBX
    000117F3  3B C3             CMP      EAX,EBX
    000117F5  0F 8E03000000     JLE      3
    000117FB  EB                JMP      

    LINE     10949

    000117FC  B8 01000000       MOV      EAX,1
    00011801  8B C8             MOV      ECX,EAX
    00011803  B8 05000000       MOV      EAX,5
    00011808  50                PUSH     EAX
    00011809  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001180C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001180F  5B                POP      EBX
    00011810  53                PUSH     EBX
    00011811  3B C3             CMP      EAX,EBX
    00011813  0F 8E03000000     JLE      3
    00011819  EB                JMP      

    LINE     10956

    0001181A  B8 01000000       MOV      EAX,1
    0001181F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10957

    00011822  B8 01000000       MOV      EAX,1
    00011827  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10958

    0001182A  B8 01000000       MOV      EAX,1
    0001182F  8B C8             MOV      ECX,EAX
    00011831  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011834  48                DEC      EAX
    00011835  BB 0E000000       MOV      EBX,14
    0001183A  F7 E3             MUL      EBX
    0001183C  50                PUSH     EAX
    0001183D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011840  48                DEC      EAX
    00011841  BB 02000000       MOV      EBX,2
    00011846  F7 E3             MUL      EBX
    00011848  5B                POP      EBX
    00011849  03 C3             ADD      EAX,EBX
    0001184B  8B F8             MOV      EDI,EAX
    0001184D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10959

    00011851  B8 01000000       MOV      EAX,1
    00011856  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10960

    00011859  B8 01000000       MOV      EAX,1
    0001185E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10962

    00011861  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00011868  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001186D  5B                POP      EBX

    LINE     10964

    0001186E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00011875  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001187A  5B                POP      EBX

    LINE     10966

    0001187B  B8 0A000000       MOV      EAX,10
    00011880  40                INC      EAX
    00011881  50                PUSH     EAX
    00011882  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011885  5B                POP      EBX
    00011886  3B C3             CMP      EAX,EBX
    00011888  0F 8503000000     JNE      3
    0001188E  EB                JMP      

    LINE     10973

    0001188F  B8 01000000       MOV      EAX,1
    00011894  8B C8             MOV      ECX,EAX
    00011896  B8 0A000000       MOV      EAX,10
    0001189B  50                PUSH     EAX
    0001189C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001189F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000118A2  5B                POP      EBX
    000118A3  53                PUSH     EBX
    000118A4  3B C3             CMP      EAX,EBX
    000118A6  0F 8E03000000     JLE      3
    000118AC  EB                JMP      

    LINE     10975

    000118AD  B8 01000000       MOV      EAX,1
    000118B2  8B C8             MOV      ECX,EAX
    000118B4  B8 05000000       MOV      EAX,5
    000118B9  50                PUSH     EAX
    000118BA  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000118BD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000118C0  5B                POP      EBX
    000118C1  53                PUSH     EBX
    000118C2  3B C3             CMP      EAX,EBX
    000118C4  0F 8E03000000     JLE      3
    000118CA  EB                JMP      

    LINE     10982

    000118CB  B8 01000000       MOV      EAX,1
    000118D0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10983

    000118D3  B8 01000000       MOV      EAX,1
    000118D8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10984

    000118DB  B8 01000000       MOV      EAX,1
    000118E0  8B C8             MOV      ECX,EAX
    000118E2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000118E5  48                DEC      EAX
    000118E6  BB 0E000000       MOV      EBX,14
    000118EB  F7 E3             MUL      EBX
    000118ED  50                PUSH     EAX
    000118EE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000118F1  48                DEC      EAX
    000118F2  BB 02000000       MOV      EBX,2
    000118F7  F7 E3             MUL      EBX
    000118F9  5B                POP      EBX
    000118FA  03 C3             ADD      EAX,EBX
    000118FC  8B F8             MOV      EDI,EAX
    000118FE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     10985

    00011902  B8 01000000       MOV      EAX,1
    00011907  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10986

    0001190A  B8 01000000       MOV      EAX,1
    0001190F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     10988

    00011912  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00011919  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001191E  5B                POP      EBX

    LINE     10990

    0001191F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00011926  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001192B  5B                POP      EBX

    LINE     10992

    0001192C  B8 0A000000       MOV      EAX,10
    00011931  40                INC      EAX
    00011932  50                PUSH     EAX
    00011933  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011936  5B                POP      EBX
    00011937  3B C3             CMP      EAX,EBX
    00011939  0F 8503000000     JNE      3
    0001193F  EB                JMP      

    LINE     11000

    00011940  B8 01000000       MOV      EAX,1
    00011945  8B C8             MOV      ECX,EAX
    00011947  B8 0A000000       MOV      EAX,10
    0001194C  50                PUSH     EAX
    0001194D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00011950  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011953  5B                POP      EBX
    00011954  53                PUSH     EBX
    00011955  3B C3             CMP      EAX,EBX
    00011957  0F 8E03000000     JLE      3
    0001195D  EB                JMP      

    LINE     11002

    0001195E  B8 01000000       MOV      EAX,1
    00011963  8B C8             MOV      ECX,EAX
    00011965  B8 05000000       MOV      EAX,5
    0001196A  50                PUSH     EAX
    0001196B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001196E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011971  5B                POP      EBX
    00011972  53                PUSH     EBX
    00011973  3B C3             CMP      EAX,EBX
    00011975  0F 8E03000000     JLE      3
    0001197B  EB                JMP      

    LINE     11009

    0001197C  B8 01000000       MOV      EAX,1
    00011981  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11010

    00011987  B8 01000000       MOV      EAX,1
    0001198C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11011

    00011992  B8 01000000       MOV      EAX,1
    00011997  8B C8             MOV      ECX,EAX
    00011999  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001199C  48                DEC      EAX
    0001199D  BB 0E000000       MOV      EBX,14
    000119A2  F7 E3             MUL      EBX
    000119A4  50                PUSH     EAX
    000119A5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000119A8  48                DEC      EAX
    000119A9  BB 02000000       MOV      EBX,2
    000119AE  F7 E3             MUL      EBX
    000119B0  5B                POP      EBX
    000119B1  03 C3             ADD      EAX,EBX
    000119B3  8B F8             MOV      EDI,EAX
    000119B5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11012

    000119BC  B8 01000000       MOV      EAX,1
    000119C1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11013

    000119C7  B8 01000000       MOV      EAX,1
    000119CC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11015

    000119D2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000119D9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000119DE  5B                POP      EBX

    LINE     11017

    000119DF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000119E6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000119EB  5B                POP      EBX

    LINE     11019

    000119EC  B8 0A000000       MOV      EAX,10
    000119F1  40                INC      EAX
    000119F2  50                PUSH     EAX
    000119F3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000119F6  5B                POP      EBX
    000119F7  3B C3             CMP      EAX,EBX
    000119F9  0F 8503000000     JNE      3
    000119FF  EB                JMP      

    LINE     11026

    00011A00  B8 01000000       MOV      EAX,1
    00011A05  8B C8             MOV      ECX,EAX
    00011A07  B8 0A000000       MOV      EAX,10
    00011A0C  50                PUSH     EAX
    00011A0D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00011A10  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011A13  5B                POP      EBX
    00011A14  53                PUSH     EBX
    00011A15  3B C3             CMP      EAX,EBX
    00011A17  0F 8E03000000     JLE      3
    00011A1D  EB                JMP      

    LINE     11028

    00011A1E  B8 01000000       MOV      EAX,1
    00011A23  8B C8             MOV      ECX,EAX
    00011A25  B8 05000000       MOV      EAX,5
    00011A2A  50                PUSH     EAX
    00011A2B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00011A2E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011A31  5B                POP      EBX
    00011A32  53                PUSH     EBX
    00011A33  3B C3             CMP      EAX,EBX
    00011A35  0F 8E03000000     JLE      3
    00011A3B  EB                JMP      

    LINE     11035

    00011A3C  B8 01000000       MOV      EAX,1
    00011A41  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11036

    00011A47  B8 01000000       MOV      EAX,1
    00011A4C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11037

    00011A52  B8 01000000       MOV      EAX,1
    00011A57  8B C8             MOV      ECX,EAX
    00011A59  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011A5C  48                DEC      EAX
    00011A5D  BB 0E000000       MOV      EBX,14
    00011A62  F7 E3             MUL      EBX
    00011A64  50                PUSH     EAX
    00011A65  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011A68  48                DEC      EAX
    00011A69  BB 02000000       MOV      EBX,2
    00011A6E  F7 E3             MUL      EBX
    00011A70  5B                POP      EBX
    00011A71  03 C3             ADD      EAX,EBX
    00011A73  8B F8             MOV      EDI,EAX
    00011A75  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11038

    00011A7C  B8 01000000       MOV      EAX,1
    00011A81  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11039

    00011A87  B8 01000000       MOV      EAX,1
    00011A8C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11041

    00011A92  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00011A99  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00011A9E  5B                POP      EBX

    LINE     11043

    00011A9F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00011AA6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00011AAB  5B                POP      EBX

    LINE     11045

    00011AAC  B8 0A000000       MOV      EAX,10
    00011AB1  40                INC      EAX
    00011AB2  50                PUSH     EAX
    00011AB3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011AB6  5B                POP      EBX
    00011AB7  3B C3             CMP      EAX,EBX
    00011AB9  0F 8503000000     JNE      3
    00011ABF  EB                JMP      

    LINE     11059

    00011AC0  56                PUSH     ESI
    00011AC1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00011AC7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00011ACD  FF D1             CALL     ECX                       run_inner_proc
    00011ACF  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11061

    00011AD0  B8 01000000       MOV      EAX,1
    00011AD5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11063

    00011AD8  B8 01000000       MOV      EAX,1
    00011ADD  8B C8             MOV      ECX,EAX
    00011ADF  B8 0A000000       MOV      EAX,10
    00011AE4  50                PUSH     EAX
    00011AE5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00011AE8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011AEB  5B                POP      EBX
    00011AEC  53                PUSH     EBX
    00011AED  3B C3             CMP      EAX,EBX
    00011AEF  0F 8E03000000     JLE      3
    00011AF5  EB                JMP      

    LINE     11065

    00011AF6  B8 01000000       MOV      EAX,1
    00011AFB  8B C8             MOV      ECX,EAX
    00011AFD  B8 05000000       MOV      EAX,5
    00011B02  50                PUSH     EAX
    00011B03  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011B06  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011B09  5B                POP      EBX
    00011B0A  53                PUSH     EBX
    00011B0B  3B C3             CMP      EAX,EBX
    00011B0D  0F 8E03000000     JLE      3
    00011B13  EB                JMP      

    LINE     11072

    00011B14  B8 01000000       MOV      EAX,1
    00011B19  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11073

    00011B1C  B8 01000000       MOV      EAX,1
    00011B21  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11074

    00011B24  B8 01000000       MOV      EAX,1
    00011B29  8B C8             MOV      ECX,EAX
    00011B2B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011B2E  48                DEC      EAX
    00011B2F  BB 0E000000       MOV      EBX,14
    00011B34  F7 E3             MUL      EBX
    00011B36  50                PUSH     EAX
    00011B37  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011B3A  48                DEC      EAX
    00011B3B  BB 02000000       MOV      EBX,2
    00011B40  F7 E3             MUL      EBX
    00011B42  5B                POP      EBX
    00011B43  03 C3             ADD      EAX,EBX
    00011B45  8B F8             MOV      EDI,EAX
    00011B47  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11075

    00011B4B  B8 01000000       MOV      EAX,1
    00011B50  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11076

    00011B53  B8 01000000       MOV      EAX,1
    00011B58  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11078

    00011B5B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00011B62  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011B67  5B                POP      EBX

    LINE     11080

    00011B68  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00011B6F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011B74  5B                POP      EBX

    LINE     11082

    00011B75  B8 0A000000       MOV      EAX,10
    00011B7A  40                INC      EAX
    00011B7B  50                PUSH     EAX
    00011B7C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011B7F  5B                POP      EBX
    00011B80  3B C3             CMP      EAX,EBX
    00011B82  0F 8503000000     JNE      3
    00011B88  EB                JMP      

    LINE     11089

    00011B89  B8 01000000       MOV      EAX,1
    00011B8E  8B C8             MOV      ECX,EAX
    00011B90  B8 0A000000       MOV      EAX,10
    00011B95  50                PUSH     EAX
    00011B96  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00011B99  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011B9C  5B                POP      EBX
    00011B9D  53                PUSH     EBX
    00011B9E  3B C3             CMP      EAX,EBX
    00011BA0  0F 8E03000000     JLE      3
    00011BA6  EB                JMP      

    LINE     11091

    00011BA7  B8 01000000       MOV      EAX,1
    00011BAC  8B C8             MOV      ECX,EAX
    00011BAE  B8 05000000       MOV      EAX,5
    00011BB3  50                PUSH     EAX
    00011BB4  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00011BB7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011BBA  5B                POP      EBX
    00011BBB  53                PUSH     EBX
    00011BBC  3B C3             CMP      EAX,EBX
    00011BBE  0F 8E03000000     JLE      3
    00011BC4  EB                JMP      

    LINE     11098

    00011BC5  B8 01000000       MOV      EAX,1
    00011BCA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11099

    00011BCD  B8 01000000       MOV      EAX,1
    00011BD2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11100

    00011BD5  B8 01000000       MOV      EAX,1
    00011BDA  8B C8             MOV      ECX,EAX
    00011BDC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011BDF  48                DEC      EAX
    00011BE0  BB 0E000000       MOV      EBX,14
    00011BE5  F7 E3             MUL      EBX
    00011BE7  50                PUSH     EAX
    00011BE8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011BEB  48                DEC      EAX
    00011BEC  BB 02000000       MOV      EBX,2
    00011BF1  F7 E3             MUL      EBX
    00011BF3  5B                POP      EBX
    00011BF4  03 C3             ADD      EAX,EBX
    00011BF6  8B F8             MOV      EDI,EAX
    00011BF8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11101

    00011BFC  B8 01000000       MOV      EAX,1
    00011C01  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11102

    00011C04  B8 01000000       MOV      EAX,1
    00011C09  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11104

    00011C0C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00011C13  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011C18  5B                POP      EBX

    LINE     11106

    00011C19  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00011C20  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011C25  5B                POP      EBX

    LINE     11108

    00011C26  B8 0A000000       MOV      EAX,10
    00011C2B  40                INC      EAX
    00011C2C  50                PUSH     EAX
    00011C2D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011C30  5B                POP      EBX
    00011C31  3B C3             CMP      EAX,EBX
    00011C33  0F 8503000000     JNE      3
    00011C39  EB                JMP      

    LINE     11116

    00011C3A  B8 01000000       MOV      EAX,1
    00011C3F  8B C8             MOV      ECX,EAX
    00011C41  B8 0A000000       MOV      EAX,10
    00011C46  50                PUSH     EAX
    00011C47  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00011C4A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011C4D  5B                POP      EBX
    00011C4E  53                PUSH     EBX
    00011C4F  3B C3             CMP      EAX,EBX
    00011C51  0F 8E03000000     JLE      3
    00011C57  EB                JMP      

    LINE     11118

    00011C58  B8 01000000       MOV      EAX,1
    00011C5D  8B C8             MOV      ECX,EAX
    00011C5F  B8 05000000       MOV      EAX,5
    00011C64  50                PUSH     EAX
    00011C65  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011C68  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011C6B  5B                POP      EBX
    00011C6C  53                PUSH     EBX
    00011C6D  3B C3             CMP      EAX,EBX
    00011C6F  0F 8E03000000     JLE      3
    00011C75  EB                JMP      

    LINE     11125

    00011C76  B8 01000000       MOV      EAX,1
    00011C7B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11126

    00011C81  B8 01000000       MOV      EAX,1
    00011C86  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11127

    00011C8C  B8 01000000       MOV      EAX,1
    00011C91  8B C8             MOV      ECX,EAX
    00011C93  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011C96  48                DEC      EAX
    00011C97  BB 0E000000       MOV      EBX,14
    00011C9C  F7 E3             MUL      EBX
    00011C9E  50                PUSH     EAX
    00011C9F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011CA2  48                DEC      EAX
    00011CA3  BB 02000000       MOV      EBX,2
    00011CA8  F7 E3             MUL      EBX
    00011CAA  5B                POP      EBX
    00011CAB  03 C3             ADD      EAX,EBX
    00011CAD  8B F8             MOV      EDI,EAX
    00011CAF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11128

    00011CB6  B8 01000000       MOV      EAX,1
    00011CBB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11129

    00011CC1  B8 01000000       MOV      EAX,1
    00011CC6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11131

    00011CCC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00011CD3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00011CD8  5B                POP      EBX

    LINE     11133

    00011CD9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00011CE0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00011CE5  5B                POP      EBX

    LINE     11135

    00011CE6  B8 0A000000       MOV      EAX,10
    00011CEB  40                INC      EAX
    00011CEC  50                PUSH     EAX
    00011CED  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011CF0  5B                POP      EBX
    00011CF1  3B C3             CMP      EAX,EBX
    00011CF3  0F 8503000000     JNE      3
    00011CF9  EB                JMP      

    LINE     11142

    00011CFA  B8 01000000       MOV      EAX,1
    00011CFF  8B C8             MOV      ECX,EAX
    00011D01  B8 0A000000       MOV      EAX,10
    00011D06  50                PUSH     EAX
    00011D07  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00011D0A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011D0D  5B                POP      EBX
    00011D0E  53                PUSH     EBX
    00011D0F  3B C3             CMP      EAX,EBX
    00011D11  0F 8E03000000     JLE      3
    00011D17  EB                JMP      

    LINE     11144

    00011D18  B8 01000000       MOV      EAX,1
    00011D1D  8B C8             MOV      ECX,EAX
    00011D1F  B8 05000000       MOV      EAX,5
    00011D24  50                PUSH     EAX
    00011D25  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00011D28  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011D2B  5B                POP      EBX
    00011D2C  53                PUSH     EBX
    00011D2D  3B C3             CMP      EAX,EBX
    00011D2F  0F 8E03000000     JLE      3
    00011D35  EB                JMP      

    LINE     11151

    00011D36  B8 01000000       MOV      EAX,1
    00011D3B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11152

    00011D41  B8 01000000       MOV      EAX,1
    00011D46  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11153

    00011D4C  B8 01000000       MOV      EAX,1
    00011D51  8B C8             MOV      ECX,EAX
    00011D53  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011D56  48                DEC      EAX
    00011D57  BB 0E000000       MOV      EBX,14
    00011D5C  F7 E3             MUL      EBX
    00011D5E  50                PUSH     EAX
    00011D5F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011D62  48                DEC      EAX
    00011D63  BB 02000000       MOV      EBX,2
    00011D68  F7 E3             MUL      EBX
    00011D6A  5B                POP      EBX
    00011D6B  03 C3             ADD      EAX,EBX
    00011D6D  8B F8             MOV      EDI,EAX
    00011D6F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11154

    00011D76  B8 01000000       MOV      EAX,1
    00011D7B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11155

    00011D81  B8 01000000       MOV      EAX,1
    00011D86  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11157

    00011D8C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00011D93  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00011D98  5B                POP      EBX

    LINE     11159

    00011D99  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00011DA0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00011DA5  5B                POP      EBX

    LINE     11161

    00011DA6  B8 0A000000       MOV      EAX,10
    00011DAB  40                INC      EAX
    00011DAC  50                PUSH     EAX
    00011DAD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011DB0  5B                POP      EBX
    00011DB1  3B C3             CMP      EAX,EBX
    00011DB3  0F 8503000000     JNE      3
    00011DB9  EB                JMP      

    LINE     11175

    00011DBA  56                PUSH     ESI
    00011DBB  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00011DC1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00011DC7  FF D1             CALL     ECX                       run_inner_proc
    00011DC9  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11177

    00011DCA  B8 01000000       MOV      EAX,1
    00011DCF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11179

    00011DD2  B8 01000000       MOV      EAX,1
    00011DD7  8B C8             MOV      ECX,EAX
    00011DD9  B8 0A000000       MOV      EAX,10
    00011DDE  50                PUSH     EAX
    00011DDF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00011DE2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011DE5  5B                POP      EBX
    00011DE6  53                PUSH     EBX
    00011DE7  3B C3             CMP      EAX,EBX
    00011DE9  0F 8E03000000     JLE      3
    00011DEF  EB                JMP      

    LINE     11181

    00011DF0  B8 01000000       MOV      EAX,1
    00011DF5  8B C8             MOV      ECX,EAX
    00011DF7  B8 05000000       MOV      EAX,5
    00011DFC  50                PUSH     EAX
    00011DFD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011E00  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011E03  5B                POP      EBX
    00011E04  53                PUSH     EBX
    00011E05  3B C3             CMP      EAX,EBX
    00011E07  0F 8E03000000     JLE      3
    00011E0D  EB                JMP      

    LINE     11188

    00011E0E  B8 01000000       MOV      EAX,1
    00011E13  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11189

    00011E16  B8 01000000       MOV      EAX,1
    00011E1B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11190

    00011E1E  B8 01000000       MOV      EAX,1
    00011E23  8B C8             MOV      ECX,EAX
    00011E25  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011E28  48                DEC      EAX
    00011E29  BB 0E000000       MOV      EBX,14
    00011E2E  F7 E3             MUL      EBX
    00011E30  50                PUSH     EAX
    00011E31  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011E34  48                DEC      EAX
    00011E35  BB 02000000       MOV      EBX,2
    00011E3A  F7 E3             MUL      EBX
    00011E3C  5B                POP      EBX
    00011E3D  03 C3             ADD      EAX,EBX
    00011E3F  8B F8             MOV      EDI,EAX
    00011E41  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11191

    00011E45  B8 01000000       MOV      EAX,1
    00011E4A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11192

    00011E4D  B8 01000000       MOV      EAX,1
    00011E52  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11194

    00011E55  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00011E5C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011E61  5B                POP      EBX

    LINE     11196

    00011E62  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00011E69  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011E6E  5B                POP      EBX

    LINE     11198

    00011E6F  B8 0A000000       MOV      EAX,10
    00011E74  40                INC      EAX
    00011E75  50                PUSH     EAX
    00011E76  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011E79  5B                POP      EBX
    00011E7A  3B C3             CMP      EAX,EBX
    00011E7C  0F 8503000000     JNE      3
    00011E82  EB                JMP      

    LINE     11205

    00011E83  B8 01000000       MOV      EAX,1
    00011E88  8B C8             MOV      ECX,EAX
    00011E8A  B8 0A000000       MOV      EAX,10
    00011E8F  50                PUSH     EAX
    00011E90  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00011E93  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011E96  5B                POP      EBX
    00011E97  53                PUSH     EBX
    00011E98  3B C3             CMP      EAX,EBX
    00011E9A  0F 8E03000000     JLE      3
    00011EA0  EB                JMP      

    LINE     11207

    00011EA1  B8 01000000       MOV      EAX,1
    00011EA6  8B C8             MOV      ECX,EAX
    00011EA8  B8 05000000       MOV      EAX,5
    00011EAD  50                PUSH     EAX
    00011EAE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00011EB1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011EB4  5B                POP      EBX
    00011EB5  53                PUSH     EBX
    00011EB6  3B C3             CMP      EAX,EBX
    00011EB8  0F 8E03000000     JLE      3
    00011EBE  EB                JMP      

    LINE     11214

    00011EBF  B8 01000000       MOV      EAX,1
    00011EC4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11215

    00011EC7  B8 01000000       MOV      EAX,1
    00011ECC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11216

    00011ECF  B8 01000000       MOV      EAX,1
    00011ED4  8B C8             MOV      ECX,EAX
    00011ED6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00011ED9  48                DEC      EAX
    00011EDA  BB 0E000000       MOV      EBX,14
    00011EDF  F7 E3             MUL      EBX
    00011EE1  50                PUSH     EAX
    00011EE2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00011EE5  48                DEC      EAX
    00011EE6  BB 02000000       MOV      EBX,2
    00011EEB  F7 E3             MUL      EBX
    00011EED  5B                POP      EBX
    00011EEE  03 C3             ADD      EAX,EBX
    00011EF0  8B F8             MOV      EDI,EAX
    00011EF2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11217

    00011EF6  B8 01000000       MOV      EAX,1
    00011EFB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11218

    00011EFE  B8 01000000       MOV      EAX,1
    00011F03  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11220

    00011F06  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00011F0D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00011F12  5B                POP      EBX

    LINE     11222

    00011F13  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00011F1A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00011F1F  5B                POP      EBX

    LINE     11224

    00011F20  B8 0A000000       MOV      EAX,10
    00011F25  40                INC      EAX
    00011F26  50                PUSH     EAX
    00011F27  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011F2A  5B                POP      EBX
    00011F2B  3B C3             CMP      EAX,EBX
    00011F2D  0F 8503000000     JNE      3
    00011F33  EB                JMP      

    LINE     11232

    00011F34  B8 01000000       MOV      EAX,1
    00011F39  8B C8             MOV      ECX,EAX
    00011F3B  B8 0A000000       MOV      EAX,10
    00011F40  50                PUSH     EAX
    00011F41  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00011F44  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011F47  5B                POP      EBX
    00011F48  53                PUSH     EBX
    00011F49  3B C3             CMP      EAX,EBX
    00011F4B  0F 8E03000000     JLE      3
    00011F51  EB                JMP      

    LINE     11234

    00011F52  B8 01000000       MOV      EAX,1
    00011F57  8B C8             MOV      ECX,EAX
    00011F59  B8 05000000       MOV      EAX,5
    00011F5E  50                PUSH     EAX
    00011F5F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00011F62  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011F65  5B                POP      EBX
    00011F66  53                PUSH     EBX
    00011F67  3B C3             CMP      EAX,EBX
    00011F69  0F 8E03000000     JLE      3
    00011F6F  EB                JMP      

    LINE     11241

    00011F70  B8 01000000       MOV      EAX,1
    00011F75  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11242

    00011F7B  B8 01000000       MOV      EAX,1
    00011F80  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11243

    00011F86  B8 01000000       MOV      EAX,1
    00011F8B  8B C8             MOV      ECX,EAX
    00011F8D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011F90  48                DEC      EAX
    00011F91  BB 0E000000       MOV      EBX,14
    00011F96  F7 E3             MUL      EBX
    00011F98  50                PUSH     EAX
    00011F99  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00011F9C  48                DEC      EAX
    00011F9D  BB 02000000       MOV      EBX,2
    00011FA2  F7 E3             MUL      EBX
    00011FA4  5B                POP      EBX
    00011FA5  03 C3             ADD      EAX,EBX
    00011FA7  8B F8             MOV      EDI,EAX
    00011FA9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11244

    00011FB0  B8 01000000       MOV      EAX,1
    00011FB5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11245

    00011FBB  B8 01000000       MOV      EAX,1
    00011FC0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11247

    00011FC6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00011FCD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00011FD2  5B                POP      EBX

    LINE     11249

    00011FD3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00011FDA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00011FDF  5B                POP      EBX

    LINE     11251

    00011FE0  B8 0A000000       MOV      EAX,10
    00011FE5  40                INC      EAX
    00011FE6  50                PUSH     EAX
    00011FE7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00011FEA  5B                POP      EBX
    00011FEB  3B C3             CMP      EAX,EBX
    00011FED  0F 8503000000     JNE      3
    00011FF3  EB                JMP      

    LINE     11258

    00011FF4  B8 01000000       MOV      EAX,1
    00011FF9  8B C8             MOV      ECX,EAX
    00011FFB  B8 0A000000       MOV      EAX,10
    00012000  50                PUSH     EAX
    00012001  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00012004  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012007  5B                POP      EBX
    00012008  53                PUSH     EBX
    00012009  3B C3             CMP      EAX,EBX
    0001200B  0F 8E03000000     JLE      3
    00012011  EB                JMP      

    LINE     11260

    00012012  B8 01000000       MOV      EAX,1
    00012017  8B C8             MOV      ECX,EAX
    00012019  B8 05000000       MOV      EAX,5
    0001201E  50                PUSH     EAX
    0001201F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00012022  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012025  5B                POP      EBX
    00012026  53                PUSH     EBX
    00012027  3B C3             CMP      EAX,EBX
    00012029  0F 8E03000000     JLE      3
    0001202F  EB                JMP      

    LINE     11267

    00012030  B8 01000000       MOV      EAX,1
    00012035  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11268

    0001203B  B8 01000000       MOV      EAX,1
    00012040  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11269

    00012046  B8 01000000       MOV      EAX,1
    0001204B  8B C8             MOV      ECX,EAX
    0001204D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012050  48                DEC      EAX
    00012051  BB 0E000000       MOV      EBX,14
    00012056  F7 E3             MUL      EBX
    00012058  50                PUSH     EAX
    00012059  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001205C  48                DEC      EAX
    0001205D  BB 02000000       MOV      EBX,2
    00012062  F7 E3             MUL      EBX
    00012064  5B                POP      EBX
    00012065  03 C3             ADD      EAX,EBX
    00012067  8B F8             MOV      EDI,EAX
    00012069  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11270

    00012070  B8 01000000       MOV      EAX,1
    00012075  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11271

    0001207B  B8 01000000       MOV      EAX,1
    00012080  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11273

    00012086  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001208D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00012092  5B                POP      EBX

    LINE     11275

    00012093  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001209A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001209F  5B                POP      EBX

    LINE     11277

    000120A0  B8 0A000000       MOV      EAX,10
    000120A5  40                INC      EAX
    000120A6  50                PUSH     EAX
    000120A7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000120AA  5B                POP      EBX
    000120AB  3B C3             CMP      EAX,EBX
    000120AD  0F 8503000000     JNE      3
    000120B3  EB                JMP      

    LINE     11291

    000120B4  56                PUSH     ESI
    000120B5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000120BB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000120C1  FF D1             CALL     ECX                       run_inner_proc
    000120C3  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11293

    000120C4  B8 01000000       MOV      EAX,1
    000120C9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11295

    000120CC  B8 01000000       MOV      EAX,1
    000120D1  8B C8             MOV      ECX,EAX
    000120D3  B8 0A000000       MOV      EAX,10
    000120D8  50                PUSH     EAX
    000120D9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000120DC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000120DF  5B                POP      EBX
    000120E0  53                PUSH     EBX
    000120E1  3B C3             CMP      EAX,EBX
    000120E3  0F 8E03000000     JLE      3
    000120E9  EB                JMP      

    LINE     11297

    000120EA  B8 01000000       MOV      EAX,1
    000120EF  8B C8             MOV      ECX,EAX
    000120F1  B8 05000000       MOV      EAX,5
    000120F6  50                PUSH     EAX
    000120F7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000120FA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000120FD  5B                POP      EBX
    000120FE  53                PUSH     EBX
    000120FF  3B C3             CMP      EAX,EBX
    00012101  0F 8E03000000     JLE      3
    00012107  EB                JMP      

    LINE     11304

    00012108  B8 01000000       MOV      EAX,1
    0001210D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11305

    00012110  B8 01000000       MOV      EAX,1
    00012115  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11306

    00012118  B8 01000000       MOV      EAX,1
    0001211D  8B C8             MOV      ECX,EAX
    0001211F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012122  48                DEC      EAX
    00012123  BB 0E000000       MOV      EBX,14
    00012128  F7 E3             MUL      EBX
    0001212A  50                PUSH     EAX
    0001212B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001212E  48                DEC      EAX
    0001212F  BB 02000000       MOV      EBX,2
    00012134  F7 E3             MUL      EBX
    00012136  5B                POP      EBX
    00012137  03 C3             ADD      EAX,EBX
    00012139  8B F8             MOV      EDI,EAX
    0001213B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11307

    0001213F  B8 01000000       MOV      EAX,1
    00012144  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11308

    00012147  B8 01000000       MOV      EAX,1
    0001214C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11310

    0001214F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00012156  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001215B  5B                POP      EBX

    LINE     11312

    0001215C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00012163  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012168  5B                POP      EBX

    LINE     11314

    00012169  B8 0A000000       MOV      EAX,10
    0001216E  40                INC      EAX
    0001216F  50                PUSH     EAX
    00012170  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012173  5B                POP      EBX
    00012174  3B C3             CMP      EAX,EBX
    00012176  0F 8503000000     JNE      3
    0001217C  EB                JMP      

    LINE     11321

    0001217D  B8 01000000       MOV      EAX,1
    00012182  8B C8             MOV      ECX,EAX
    00012184  B8 0A000000       MOV      EAX,10
    00012189  50                PUSH     EAX
    0001218A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001218D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012190  5B                POP      EBX
    00012191  53                PUSH     EBX
    00012192  3B C3             CMP      EAX,EBX
    00012194  0F 8E03000000     JLE      3
    0001219A  EB                JMP      

    LINE     11323

    0001219B  B8 01000000       MOV      EAX,1
    000121A0  8B C8             MOV      ECX,EAX
    000121A2  B8 05000000       MOV      EAX,5
    000121A7  50                PUSH     EAX
    000121A8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000121AB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000121AE  5B                POP      EBX
    000121AF  53                PUSH     EBX
    000121B0  3B C3             CMP      EAX,EBX
    000121B2  0F 8E03000000     JLE      3
    000121B8  EB                JMP      

    LINE     11330

    000121B9  B8 01000000       MOV      EAX,1
    000121BE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11331

    000121C1  B8 01000000       MOV      EAX,1
    000121C6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11332

    000121C9  B8 01000000       MOV      EAX,1
    000121CE  8B C8             MOV      ECX,EAX
    000121D0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000121D3  48                DEC      EAX
    000121D4  BB 0E000000       MOV      EBX,14
    000121D9  F7 E3             MUL      EBX
    000121DB  50                PUSH     EAX
    000121DC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000121DF  48                DEC      EAX
    000121E0  BB 02000000       MOV      EBX,2
    000121E5  F7 E3             MUL      EBX
    000121E7  5B                POP      EBX
    000121E8  03 C3             ADD      EAX,EBX
    000121EA  8B F8             MOV      EDI,EAX
    000121EC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11333

    000121F0  B8 01000000       MOV      EAX,1
    000121F5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11334

    000121F8  B8 01000000       MOV      EAX,1
    000121FD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11336

    00012200  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012207  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001220C  5B                POP      EBX

    LINE     11338

    0001220D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012214  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012219  5B                POP      EBX

    LINE     11340

    0001221A  B8 0A000000       MOV      EAX,10
    0001221F  40                INC      EAX
    00012220  50                PUSH     EAX
    00012221  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012224  5B                POP      EBX
    00012225  3B C3             CMP      EAX,EBX
    00012227  0F 8503000000     JNE      3
    0001222D  EB                JMP      

    LINE     11348

    0001222E  B8 01000000       MOV      EAX,1
    00012233  8B C8             MOV      ECX,EAX
    00012235  B8 0A000000       MOV      EAX,10
    0001223A  50                PUSH     EAX
    0001223B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001223E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012241  5B                POP      EBX
    00012242  53                PUSH     EBX
    00012243  3B C3             CMP      EAX,EBX
    00012245  0F 8E03000000     JLE      3
    0001224B  EB                JMP      

    LINE     11350

    0001224C  B8 01000000       MOV      EAX,1
    00012251  8B C8             MOV      ECX,EAX
    00012253  B8 05000000       MOV      EAX,5
    00012258  50                PUSH     EAX
    00012259  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001225C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001225F  5B                POP      EBX
    00012260  53                PUSH     EBX
    00012261  3B C3             CMP      EAX,EBX
    00012263  0F 8E03000000     JLE      3
    00012269  EB                JMP      

    LINE     11357

    0001226A  B8 01000000       MOV      EAX,1
    0001226F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11358

    00012275  B8 01000000       MOV      EAX,1
    0001227A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11359

    00012280  B8 01000000       MOV      EAX,1
    00012285  8B C8             MOV      ECX,EAX
    00012287  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001228A  48                DEC      EAX
    0001228B  BB 0E000000       MOV      EBX,14
    00012290  F7 E3             MUL      EBX
    00012292  50                PUSH     EAX
    00012293  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012296  48                DEC      EAX
    00012297  BB 02000000       MOV      EBX,2
    0001229C  F7 E3             MUL      EBX
    0001229E  5B                POP      EBX
    0001229F  03 C3             ADD      EAX,EBX
    000122A1  8B F8             MOV      EDI,EAX
    000122A3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11360

    000122AA  B8 01000000       MOV      EAX,1
    000122AF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11361

    000122B5  B8 01000000       MOV      EAX,1
    000122BA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11363

    000122C0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000122C7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000122CC  5B                POP      EBX

    LINE     11365

    000122CD  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000122D4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000122D9  5B                POP      EBX

    LINE     11367

    000122DA  B8 0A000000       MOV      EAX,10
    000122DF  40                INC      EAX
    000122E0  50                PUSH     EAX
    000122E1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000122E4  5B                POP      EBX
    000122E5  3B C3             CMP      EAX,EBX
    000122E7  0F 8503000000     JNE      3
    000122ED  EB                JMP      

    LINE     11374

    000122EE  B8 01000000       MOV      EAX,1
    000122F3  8B C8             MOV      ECX,EAX
    000122F5  B8 0A000000       MOV      EAX,10
    000122FA  50                PUSH     EAX
    000122FB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000122FE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012301  5B                POP      EBX
    00012302  53                PUSH     EBX
    00012303  3B C3             CMP      EAX,EBX
    00012305  0F 8E03000000     JLE      3
    0001230B  EB                JMP      

    LINE     11376

    0001230C  B8 01000000       MOV      EAX,1
    00012311  8B C8             MOV      ECX,EAX
    00012313  B8 05000000       MOV      EAX,5
    00012318  50                PUSH     EAX
    00012319  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001231C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001231F  5B                POP      EBX
    00012320  53                PUSH     EBX
    00012321  3B C3             CMP      EAX,EBX
    00012323  0F 8E03000000     JLE      3
    00012329  EB                JMP      

    LINE     11383

    0001232A  B8 01000000       MOV      EAX,1
    0001232F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11384

    00012335  B8 01000000       MOV      EAX,1
    0001233A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11385

    00012340  B8 01000000       MOV      EAX,1
    00012345  8B C8             MOV      ECX,EAX
    00012347  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001234A  48                DEC      EAX
    0001234B  BB 0E000000       MOV      EBX,14
    00012350  F7 E3             MUL      EBX
    00012352  50                PUSH     EAX
    00012353  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012356  48                DEC      EAX
    00012357  BB 02000000       MOV      EBX,2
    0001235C  F7 E3             MUL      EBX
    0001235E  5B                POP      EBX
    0001235F  03 C3             ADD      EAX,EBX
    00012361  8B F8             MOV      EDI,EAX
    00012363  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11386

    0001236A  B8 01000000       MOV      EAX,1
    0001236F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11387

    00012375  B8 01000000       MOV      EAX,1
    0001237A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11389

    00012380  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012387  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001238C  5B                POP      EBX

    LINE     11391

    0001238D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012394  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00012399  5B                POP      EBX

    LINE     11393

    0001239A  B8 0A000000       MOV      EAX,10
    0001239F  40                INC      EAX
    000123A0  50                PUSH     EAX
    000123A1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000123A4  5B                POP      EBX
    000123A5  3B C3             CMP      EAX,EBX
    000123A7  0F 8503000000     JNE      3
    000123AD  EB                JMP      

    LINE     11407

    000123AE  56                PUSH     ESI
    000123AF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000123B5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000123BB  FF D1             CALL     ECX                       run_inner_proc
    000123BD  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11409

    000123BE  B8 01000000       MOV      EAX,1
    000123C3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11411

    000123C6  B8 01000000       MOV      EAX,1
    000123CB  8B C8             MOV      ECX,EAX
    000123CD  B8 0A000000       MOV      EAX,10
    000123D2  50                PUSH     EAX
    000123D3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000123D6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000123D9  5B                POP      EBX
    000123DA  53                PUSH     EBX
    000123DB  3B C3             CMP      EAX,EBX
    000123DD  0F 8E03000000     JLE      3
    000123E3  EB                JMP      

    LINE     11413

    000123E4  B8 01000000       MOV      EAX,1
    000123E9  8B C8             MOV      ECX,EAX
    000123EB  B8 05000000       MOV      EAX,5
    000123F0  50                PUSH     EAX
    000123F1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000123F4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000123F7  5B                POP      EBX
    000123F8  53                PUSH     EBX
    000123F9  3B C3             CMP      EAX,EBX
    000123FB  0F 8E03000000     JLE      3
    00012401  EB                JMP      

    LINE     11420

    00012402  B8 01000000       MOV      EAX,1
    00012407  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11421

    0001240A  B8 01000000       MOV      EAX,1
    0001240F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11422

    00012412  B8 01000000       MOV      EAX,1
    00012417  8B C8             MOV      ECX,EAX
    00012419  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001241C  48                DEC      EAX
    0001241D  BB 0E000000       MOV      EBX,14
    00012422  F7 E3             MUL      EBX
    00012424  50                PUSH     EAX
    00012425  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012428  48                DEC      EAX
    00012429  BB 02000000       MOV      EBX,2
    0001242E  F7 E3             MUL      EBX
    00012430  5B                POP      EBX
    00012431  03 C3             ADD      EAX,EBX
    00012433  8B F8             MOV      EDI,EAX
    00012435  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11423

    00012439  B8 01000000       MOV      EAX,1
    0001243E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11424

    00012441  B8 01000000       MOV      EAX,1
    00012446  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11426

    00012449  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00012450  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00012455  5B                POP      EBX

    LINE     11428

    00012456  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001245D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012462  5B                POP      EBX

    LINE     11430

    00012463  B8 0A000000       MOV      EAX,10
    00012468  40                INC      EAX
    00012469  50                PUSH     EAX
    0001246A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001246D  5B                POP      EBX
    0001246E  3B C3             CMP      EAX,EBX
    00012470  0F 8503000000     JNE      3
    00012476  EB                JMP      

    LINE     11437

    00012477  B8 01000000       MOV      EAX,1
    0001247C  8B C8             MOV      ECX,EAX
    0001247E  B8 0A000000       MOV      EAX,10
    00012483  50                PUSH     EAX
    00012484  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00012487  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001248A  5B                POP      EBX
    0001248B  53                PUSH     EBX
    0001248C  3B C3             CMP      EAX,EBX
    0001248E  0F 8E03000000     JLE      3
    00012494  EB                JMP      

    LINE     11439

    00012495  B8 01000000       MOV      EAX,1
    0001249A  8B C8             MOV      ECX,EAX
    0001249C  B8 05000000       MOV      EAX,5
    000124A1  50                PUSH     EAX
    000124A2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000124A5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000124A8  5B                POP      EBX
    000124A9  53                PUSH     EBX
    000124AA  3B C3             CMP      EAX,EBX
    000124AC  0F 8E03000000     JLE      3
    000124B2  EB                JMP      

    LINE     11446

    000124B3  B8 01000000       MOV      EAX,1
    000124B8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11447

    000124BB  B8 01000000       MOV      EAX,1
    000124C0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11448

    000124C3  B8 01000000       MOV      EAX,1
    000124C8  8B C8             MOV      ECX,EAX
    000124CA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000124CD  48                DEC      EAX
    000124CE  BB 0E000000       MOV      EBX,14
    000124D3  F7 E3             MUL      EBX
    000124D5  50                PUSH     EAX
    000124D6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000124D9  48                DEC      EAX
    000124DA  BB 02000000       MOV      EBX,2
    000124DF  F7 E3             MUL      EBX
    000124E1  5B                POP      EBX
    000124E2  03 C3             ADD      EAX,EBX
    000124E4  8B F8             MOV      EDI,EAX
    000124E6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11449

    000124EA  B8 01000000       MOV      EAX,1
    000124EF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11450

    000124F2  B8 01000000       MOV      EAX,1
    000124F7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11452

    000124FA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012501  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00012506  5B                POP      EBX

    LINE     11454

    00012507  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001250E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012513  5B                POP      EBX

    LINE     11456

    00012514  B8 0A000000       MOV      EAX,10
    00012519  40                INC      EAX
    0001251A  50                PUSH     EAX
    0001251B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001251E  5B                POP      EBX
    0001251F  3B C3             CMP      EAX,EBX
    00012521  0F 8503000000     JNE      3
    00012527  EB                JMP      

    LINE     11464

    00012528  B8 01000000       MOV      EAX,1
    0001252D  8B C8             MOV      ECX,EAX
    0001252F  B8 0A000000       MOV      EAX,10
    00012534  50                PUSH     EAX
    00012535  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00012538  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001253B  5B                POP      EBX
    0001253C  53                PUSH     EBX
    0001253D  3B C3             CMP      EAX,EBX
    0001253F  0F 8E03000000     JLE      3
    00012545  EB                JMP      

    LINE     11466

    00012546  B8 01000000       MOV      EAX,1
    0001254B  8B C8             MOV      ECX,EAX
    0001254D  B8 05000000       MOV      EAX,5
    00012552  50                PUSH     EAX
    00012553  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00012556  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012559  5B                POP      EBX
    0001255A  53                PUSH     EBX
    0001255B  3B C3             CMP      EAX,EBX
    0001255D  0F 8E03000000     JLE      3
    00012563  EB                JMP      

    LINE     11473

    00012564  B8 01000000       MOV      EAX,1
    00012569  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11474

    0001256F  B8 01000000       MOV      EAX,1
    00012574  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11475

    0001257A  B8 01000000       MOV      EAX,1
    0001257F  8B C8             MOV      ECX,EAX
    00012581  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012584  48                DEC      EAX
    00012585  BB 0E000000       MOV      EBX,14
    0001258A  F7 E3             MUL      EBX
    0001258C  50                PUSH     EAX
    0001258D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012590  48                DEC      EAX
    00012591  BB 02000000       MOV      EBX,2
    00012596  F7 E3             MUL      EBX
    00012598  5B                POP      EBX
    00012599  03 C3             ADD      EAX,EBX
    0001259B  8B F8             MOV      EDI,EAX
    0001259D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11476

    000125A4  B8 01000000       MOV      EAX,1
    000125A9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11477

    000125AF  B8 01000000       MOV      EAX,1
    000125B4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11479

    000125BA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000125C1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000125C6  5B                POP      EBX

    LINE     11481

    000125C7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000125CE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000125D3  5B                POP      EBX

    LINE     11483

    000125D4  B8 0A000000       MOV      EAX,10
    000125D9  40                INC      EAX
    000125DA  50                PUSH     EAX
    000125DB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000125DE  5B                POP      EBX
    000125DF  3B C3             CMP      EAX,EBX
    000125E1  0F 8503000000     JNE      3
    000125E7  EB                JMP      

    LINE     11490

    000125E8  B8 01000000       MOV      EAX,1
    000125ED  8B C8             MOV      ECX,EAX
    000125EF  B8 0A000000       MOV      EAX,10
    000125F4  50                PUSH     EAX
    000125F5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000125F8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000125FB  5B                POP      EBX
    000125FC  53                PUSH     EBX
    000125FD  3B C3             CMP      EAX,EBX
    000125FF  0F 8E03000000     JLE      3
    00012605  EB                JMP      

    LINE     11492

    00012606  B8 01000000       MOV      EAX,1
    0001260B  8B C8             MOV      ECX,EAX
    0001260D  B8 05000000       MOV      EAX,5
    00012612  50                PUSH     EAX
    00012613  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00012616  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012619  5B                POP      EBX
    0001261A  53                PUSH     EBX
    0001261B  3B C3             CMP      EAX,EBX
    0001261D  0F 8E03000000     JLE      3
    00012623  EB                JMP      

    LINE     11499

    00012624  B8 01000000       MOV      EAX,1
    00012629  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11500

    0001262F  B8 01000000       MOV      EAX,1
    00012634  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11501

    0001263A  B8 01000000       MOV      EAX,1
    0001263F  8B C8             MOV      ECX,EAX
    00012641  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012644  48                DEC      EAX
    00012645  BB 0E000000       MOV      EBX,14
    0001264A  F7 E3             MUL      EBX
    0001264C  50                PUSH     EAX
    0001264D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012650  48                DEC      EAX
    00012651  BB 02000000       MOV      EBX,2
    00012656  F7 E3             MUL      EBX
    00012658  5B                POP      EBX
    00012659  03 C3             ADD      EAX,EBX
    0001265B  8B F8             MOV      EDI,EAX
    0001265D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11502

    00012664  B8 01000000       MOV      EAX,1
    00012669  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11503

    0001266F  B8 01000000       MOV      EAX,1
    00012674  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11505

    0001267A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012681  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00012686  5B                POP      EBX

    LINE     11507

    00012687  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001268E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00012693  5B                POP      EBX

    LINE     11509

    00012694  B8 0A000000       MOV      EAX,10
    00012699  40                INC      EAX
    0001269A  50                PUSH     EAX
    0001269B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001269E  5B                POP      EBX
    0001269F  3B C3             CMP      EAX,EBX
    000126A1  0F 8503000000     JNE      3
    000126A7  EB                JMP      

    LINE     11523

    000126A8  56                PUSH     ESI
    000126A9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000126AF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000126B5  FF D1             CALL     ECX                       run_inner_proc
    000126B7  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11525

    000126B8  B8 01000000       MOV      EAX,1
    000126BD  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11527

    000126C0  B8 01000000       MOV      EAX,1
    000126C5  8B C8             MOV      ECX,EAX
    000126C7  B8 0A000000       MOV      EAX,10
    000126CC  50                PUSH     EAX
    000126CD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000126D0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000126D3  5B                POP      EBX
    000126D4  53                PUSH     EBX
    000126D5  3B C3             CMP      EAX,EBX
    000126D7  0F 8E03000000     JLE      3
    000126DD  EB                JMP      

    LINE     11529

    000126DE  B8 01000000       MOV      EAX,1
    000126E3  8B C8             MOV      ECX,EAX
    000126E5  B8 05000000       MOV      EAX,5
    000126EA  50                PUSH     EAX
    000126EB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000126EE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000126F1  5B                POP      EBX
    000126F2  53                PUSH     EBX
    000126F3  3B C3             CMP      EAX,EBX
    000126F5  0F 8E03000000     JLE      3
    000126FB  EB                JMP      

    LINE     11536

    000126FC  B8 01000000       MOV      EAX,1
    00012701  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11537

    00012704  B8 01000000       MOV      EAX,1
    00012709  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11538

    0001270C  B8 01000000       MOV      EAX,1
    00012711  8B C8             MOV      ECX,EAX
    00012713  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012716  48                DEC      EAX
    00012717  BB 0E000000       MOV      EBX,14
    0001271C  F7 E3             MUL      EBX
    0001271E  50                PUSH     EAX
    0001271F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012722  48                DEC      EAX
    00012723  BB 02000000       MOV      EBX,2
    00012728  F7 E3             MUL      EBX
    0001272A  5B                POP      EBX
    0001272B  03 C3             ADD      EAX,EBX
    0001272D  8B F8             MOV      EDI,EAX
    0001272F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11539

    00012733  B8 01000000       MOV      EAX,1
    00012738  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11540

    0001273B  B8 01000000       MOV      EAX,1
    00012740  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11542

    00012743  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001274A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001274F  5B                POP      EBX

    LINE     11544

    00012750  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00012757  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001275C  5B                POP      EBX

    LINE     11546

    0001275D  B8 0A000000       MOV      EAX,10
    00012762  40                INC      EAX
    00012763  50                PUSH     EAX
    00012764  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012767  5B                POP      EBX
    00012768  3B C3             CMP      EAX,EBX
    0001276A  0F 8503000000     JNE      3
    00012770  EB                JMP      

    LINE     11553

    00012771  B8 01000000       MOV      EAX,1
    00012776  8B C8             MOV      ECX,EAX
    00012778  B8 0A000000       MOV      EAX,10
    0001277D  50                PUSH     EAX
    0001277E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00012781  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012784  5B                POP      EBX
    00012785  53                PUSH     EBX
    00012786  3B C3             CMP      EAX,EBX
    00012788  0F 8E03000000     JLE      3
    0001278E  EB                JMP      

    LINE     11555

    0001278F  B8 01000000       MOV      EAX,1
    00012794  8B C8             MOV      ECX,EAX
    00012796  B8 05000000       MOV      EAX,5
    0001279B  50                PUSH     EAX
    0001279C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001279F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000127A2  5B                POP      EBX
    000127A3  53                PUSH     EBX
    000127A4  3B C3             CMP      EAX,EBX
    000127A6  0F 8E03000000     JLE      3
    000127AC  EB                JMP      

    LINE     11562

    000127AD  B8 01000000       MOV      EAX,1
    000127B2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11563

    000127B5  B8 01000000       MOV      EAX,1
    000127BA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11564

    000127BD  B8 01000000       MOV      EAX,1
    000127C2  8B C8             MOV      ECX,EAX
    000127C4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000127C7  48                DEC      EAX
    000127C8  BB 0E000000       MOV      EBX,14
    000127CD  F7 E3             MUL      EBX
    000127CF  50                PUSH     EAX
    000127D0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000127D3  48                DEC      EAX
    000127D4  BB 02000000       MOV      EBX,2
    000127D9  F7 E3             MUL      EBX
    000127DB  5B                POP      EBX
    000127DC  03 C3             ADD      EAX,EBX
    000127DE  8B F8             MOV      EDI,EAX
    000127E0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11565

    000127E4  B8 01000000       MOV      EAX,1
    000127E9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11566

    000127EC  B8 01000000       MOV      EAX,1
    000127F1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11568

    000127F4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000127FB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00012800  5B                POP      EBX

    LINE     11570

    00012801  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012808  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001280D  5B                POP      EBX

    LINE     11572

    0001280E  B8 0A000000       MOV      EAX,10
    00012813  40                INC      EAX
    00012814  50                PUSH     EAX
    00012815  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012818  5B                POP      EBX
    00012819  3B C3             CMP      EAX,EBX
    0001281B  0F 8503000000     JNE      3
    00012821  EB                JMP      

    LINE     11580

    00012822  B8 01000000       MOV      EAX,1
    00012827  8B C8             MOV      ECX,EAX
    00012829  B8 0A000000       MOV      EAX,10
    0001282E  50                PUSH     EAX
    0001282F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00012832  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012835  5B                POP      EBX
    00012836  53                PUSH     EBX
    00012837  3B C3             CMP      EAX,EBX
    00012839  0F 8E03000000     JLE      3
    0001283F  EB                JMP      

    LINE     11582

    00012840  B8 01000000       MOV      EAX,1
    00012845  8B C8             MOV      ECX,EAX
    00012847  B8 05000000       MOV      EAX,5
    0001284C  50                PUSH     EAX
    0001284D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00012850  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012853  5B                POP      EBX
    00012854  53                PUSH     EBX
    00012855  3B C3             CMP      EAX,EBX
    00012857  0F 8E03000000     JLE      3
    0001285D  EB                JMP      

    LINE     11589

    0001285E  B8 01000000       MOV      EAX,1
    00012863  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11590

    00012869  B8 01000000       MOV      EAX,1
    0001286E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11591

    00012874  B8 01000000       MOV      EAX,1
    00012879  8B C8             MOV      ECX,EAX
    0001287B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001287E  48                DEC      EAX
    0001287F  BB 0E000000       MOV      EBX,14
    00012884  F7 E3             MUL      EBX
    00012886  50                PUSH     EAX
    00012887  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001288A  48                DEC      EAX
    0001288B  BB 02000000       MOV      EBX,2
    00012890  F7 E3             MUL      EBX
    00012892  5B                POP      EBX
    00012893  03 C3             ADD      EAX,EBX
    00012895  8B F8             MOV      EDI,EAX
    00012897  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11592

    0001289E  B8 01000000       MOV      EAX,1
    000128A3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11593

    000128A9  B8 01000000       MOV      EAX,1
    000128AE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11595

    000128B4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000128BB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000128C0  5B                POP      EBX

    LINE     11597

    000128C1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000128C8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000128CD  5B                POP      EBX

    LINE     11599

    000128CE  B8 0A000000       MOV      EAX,10
    000128D3  40                INC      EAX
    000128D4  50                PUSH     EAX
    000128D5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000128D8  5B                POP      EBX
    000128D9  3B C3             CMP      EAX,EBX
    000128DB  0F 8503000000     JNE      3
    000128E1  EB                JMP      

    LINE     11606

    000128E2  B8 01000000       MOV      EAX,1
    000128E7  8B C8             MOV      ECX,EAX
    000128E9  B8 0A000000       MOV      EAX,10
    000128EE  50                PUSH     EAX
    000128EF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000128F2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000128F5  5B                POP      EBX
    000128F6  53                PUSH     EBX
    000128F7  3B C3             CMP      EAX,EBX
    000128F9  0F 8E03000000     JLE      3
    000128FF  EB                JMP      

    LINE     11608

    00012900  B8 01000000       MOV      EAX,1
    00012905  8B C8             MOV      ECX,EAX
    00012907  B8 05000000       MOV      EAX,5
    0001290C  50                PUSH     EAX
    0001290D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00012910  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012913  5B                POP      EBX
    00012914  53                PUSH     EBX
    00012915  3B C3             CMP      EAX,EBX
    00012917  0F 8E03000000     JLE      3
    0001291D  EB                JMP      

    LINE     11615

    0001291E  B8 01000000       MOV      EAX,1
    00012923  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11616

    00012929  B8 01000000       MOV      EAX,1
    0001292E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11617

    00012934  B8 01000000       MOV      EAX,1
    00012939  8B C8             MOV      ECX,EAX
    0001293B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001293E  48                DEC      EAX
    0001293F  BB 0E000000       MOV      EBX,14
    00012944  F7 E3             MUL      EBX
    00012946  50                PUSH     EAX
    00012947  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001294A  48                DEC      EAX
    0001294B  BB 02000000       MOV      EBX,2
    00012950  F7 E3             MUL      EBX
    00012952  5B                POP      EBX
    00012953  03 C3             ADD      EAX,EBX
    00012955  8B F8             MOV      EDI,EAX
    00012957  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11618

    0001295E  B8 01000000       MOV      EAX,1
    00012963  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11619

    00012969  B8 01000000       MOV      EAX,1
    0001296E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11621

    00012974  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001297B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00012980  5B                POP      EBX

    LINE     11623

    00012981  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012988  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001298D  5B                POP      EBX

    LINE     11625

    0001298E  B8 0A000000       MOV      EAX,10
    00012993  40                INC      EAX
    00012994  50                PUSH     EAX
    00012995  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012998  5B                POP      EBX
    00012999  3B C3             CMP      EAX,EBX
    0001299B  0F 8503000000     JNE      3
    000129A1  EB                JMP      

    LINE     11639

    000129A2  56                PUSH     ESI
    000129A3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000129A9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000129AF  FF D1             CALL     ECX                       run_inner_proc
    000129B1  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11641

    000129B2  B8 01000000       MOV      EAX,1
    000129B7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11643

    000129BA  B8 01000000       MOV      EAX,1
    000129BF  8B C8             MOV      ECX,EAX
    000129C1  B8 0A000000       MOV      EAX,10
    000129C6  50                PUSH     EAX
    000129C7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000129CA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000129CD  5B                POP      EBX
    000129CE  53                PUSH     EBX
    000129CF  3B C3             CMP      EAX,EBX
    000129D1  0F 8E03000000     JLE      3
    000129D7  EB                JMP      

    LINE     11645

    000129D8  B8 01000000       MOV      EAX,1
    000129DD  8B C8             MOV      ECX,EAX
    000129DF  B8 05000000       MOV      EAX,5
    000129E4  50                PUSH     EAX
    000129E5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000129E8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000129EB  5B                POP      EBX
    000129EC  53                PUSH     EBX
    000129ED  3B C3             CMP      EAX,EBX
    000129EF  0F 8E03000000     JLE      3
    000129F5  EB                JMP      

    LINE     11652

    000129F6  B8 01000000       MOV      EAX,1
    000129FB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11653

    000129FE  B8 01000000       MOV      EAX,1
    00012A03  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11654

    00012A06  B8 01000000       MOV      EAX,1
    00012A0B  8B C8             MOV      ECX,EAX
    00012A0D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012A10  48                DEC      EAX
    00012A11  BB 0E000000       MOV      EBX,14
    00012A16  F7 E3             MUL      EBX
    00012A18  50                PUSH     EAX
    00012A19  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012A1C  48                DEC      EAX
    00012A1D  BB 02000000       MOV      EBX,2
    00012A22  F7 E3             MUL      EBX
    00012A24  5B                POP      EBX
    00012A25  03 C3             ADD      EAX,EBX
    00012A27  8B F8             MOV      EDI,EAX
    00012A29  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11655

    00012A2D  B8 01000000       MOV      EAX,1
    00012A32  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11656

    00012A35  B8 01000000       MOV      EAX,1
    00012A3A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11658

    00012A3D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00012A44  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00012A49  5B                POP      EBX

    LINE     11660

    00012A4A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00012A51  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012A56  5B                POP      EBX

    LINE     11662

    00012A57  B8 0A000000       MOV      EAX,10
    00012A5C  40                INC      EAX
    00012A5D  50                PUSH     EAX
    00012A5E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012A61  5B                POP      EBX
    00012A62  3B C3             CMP      EAX,EBX
    00012A64  0F 8503000000     JNE      3
    00012A6A  EB                JMP      

    LINE     11669

    00012A6B  B8 01000000       MOV      EAX,1
    00012A70  8B C8             MOV      ECX,EAX
    00012A72  B8 0A000000       MOV      EAX,10
    00012A77  50                PUSH     EAX
    00012A78  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00012A7B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012A7E  5B                POP      EBX
    00012A7F  53                PUSH     EBX
    00012A80  3B C3             CMP      EAX,EBX
    00012A82  0F 8E03000000     JLE      3
    00012A88  EB                JMP      

    LINE     11671

    00012A89  B8 01000000       MOV      EAX,1
    00012A8E  8B C8             MOV      ECX,EAX
    00012A90  B8 05000000       MOV      EAX,5
    00012A95  50                PUSH     EAX
    00012A96  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00012A99  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012A9C  5B                POP      EBX
    00012A9D  53                PUSH     EBX
    00012A9E  3B C3             CMP      EAX,EBX
    00012AA0  0F 8E03000000     JLE      3
    00012AA6  EB                JMP      

    LINE     11678

    00012AA7  B8 01000000       MOV      EAX,1
    00012AAC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11679

    00012AAF  B8 01000000       MOV      EAX,1
    00012AB4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11680

    00012AB7  B8 01000000       MOV      EAX,1
    00012ABC  8B C8             MOV      ECX,EAX
    00012ABE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012AC1  48                DEC      EAX
    00012AC2  BB 0E000000       MOV      EBX,14
    00012AC7  F7 E3             MUL      EBX
    00012AC9  50                PUSH     EAX
    00012ACA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012ACD  48                DEC      EAX
    00012ACE  BB 02000000       MOV      EBX,2
    00012AD3  F7 E3             MUL      EBX
    00012AD5  5B                POP      EBX
    00012AD6  03 C3             ADD      EAX,EBX
    00012AD8  8B F8             MOV      EDI,EAX
    00012ADA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11681

    00012ADE  B8 01000000       MOV      EAX,1
    00012AE3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11682

    00012AE6  B8 01000000       MOV      EAX,1
    00012AEB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11684

    00012AEE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012AF5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00012AFA  5B                POP      EBX

    LINE     11686

    00012AFB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012B02  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012B07  5B                POP      EBX

    LINE     11688

    00012B08  B8 0A000000       MOV      EAX,10
    00012B0D  40                INC      EAX
    00012B0E  50                PUSH     EAX
    00012B0F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012B12  5B                POP      EBX
    00012B13  3B C3             CMP      EAX,EBX
    00012B15  0F 8503000000     JNE      3
    00012B1B  EB                JMP      

    LINE     11696

    00012B1C  B8 01000000       MOV      EAX,1
    00012B21  8B C8             MOV      ECX,EAX
    00012B23  B8 0A000000       MOV      EAX,10
    00012B28  50                PUSH     EAX
    00012B29  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00012B2C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012B2F  5B                POP      EBX
    00012B30  53                PUSH     EBX
    00012B31  3B C3             CMP      EAX,EBX
    00012B33  0F 8E03000000     JLE      3
    00012B39  EB                JMP      

    LINE     11698

    00012B3A  B8 01000000       MOV      EAX,1
    00012B3F  8B C8             MOV      ECX,EAX
    00012B41  B8 05000000       MOV      EAX,5
    00012B46  50                PUSH     EAX
    00012B47  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00012B4A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012B4D  5B                POP      EBX
    00012B4E  53                PUSH     EBX
    00012B4F  3B C3             CMP      EAX,EBX
    00012B51  0F 8E03000000     JLE      3
    00012B57  EB                JMP      

    LINE     11705

    00012B58  B8 01000000       MOV      EAX,1
    00012B5D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11706

    00012B63  B8 01000000       MOV      EAX,1
    00012B68  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11707

    00012B6E  B8 01000000       MOV      EAX,1
    00012B73  8B C8             MOV      ECX,EAX
    00012B75  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012B78  48                DEC      EAX
    00012B79  BB 0E000000       MOV      EBX,14
    00012B7E  F7 E3             MUL      EBX
    00012B80  50                PUSH     EAX
    00012B81  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012B84  48                DEC      EAX
    00012B85  BB 02000000       MOV      EBX,2
    00012B8A  F7 E3             MUL      EBX
    00012B8C  5B                POP      EBX
    00012B8D  03 C3             ADD      EAX,EBX
    00012B8F  8B F8             MOV      EDI,EAX
    00012B91  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11708

    00012B98  B8 01000000       MOV      EAX,1
    00012B9D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11709

    00012BA3  B8 01000000       MOV      EAX,1
    00012BA8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11711

    00012BAE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00012BB5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00012BBA  5B                POP      EBX

    LINE     11713

    00012BBB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00012BC2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00012BC7  5B                POP      EBX

    LINE     11715

    00012BC8  B8 0A000000       MOV      EAX,10
    00012BCD  40                INC      EAX
    00012BCE  50                PUSH     EAX
    00012BCF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012BD2  5B                POP      EBX
    00012BD3  3B C3             CMP      EAX,EBX
    00012BD5  0F 8503000000     JNE      3
    00012BDB  EB                JMP      

    LINE     11722

    00012BDC  B8 01000000       MOV      EAX,1
    00012BE1  8B C8             MOV      ECX,EAX
    00012BE3  B8 0A000000       MOV      EAX,10
    00012BE8  50                PUSH     EAX
    00012BE9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00012BEC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012BEF  5B                POP      EBX
    00012BF0  53                PUSH     EBX
    00012BF1  3B C3             CMP      EAX,EBX
    00012BF3  0F 8E03000000     JLE      3
    00012BF9  EB                JMP      

    LINE     11724

    00012BFA  B8 01000000       MOV      EAX,1
    00012BFF  8B C8             MOV      ECX,EAX
    00012C01  B8 05000000       MOV      EAX,5
    00012C06  50                PUSH     EAX
    00012C07  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00012C0A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012C0D  5B                POP      EBX
    00012C0E  53                PUSH     EBX
    00012C0F  3B C3             CMP      EAX,EBX
    00012C11  0F 8E03000000     JLE      3
    00012C17  EB                JMP      

    LINE     11731

    00012C18  B8 01000000       MOV      EAX,1
    00012C1D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11732

    00012C23  B8 01000000       MOV      EAX,1
    00012C28  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11733

    00012C2E  B8 01000000       MOV      EAX,1
    00012C33  8B C8             MOV      ECX,EAX
    00012C35  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012C38  48                DEC      EAX
    00012C39  BB 0E000000       MOV      EBX,14
    00012C3E  F7 E3             MUL      EBX
    00012C40  50                PUSH     EAX
    00012C41  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012C44  48                DEC      EAX
    00012C45  BB 02000000       MOV      EBX,2
    00012C4A  F7 E3             MUL      EBX
    00012C4C  5B                POP      EBX
    00012C4D  03 C3             ADD      EAX,EBX
    00012C4F  8B F8             MOV      EDI,EAX
    00012C51  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11734

    00012C58  B8 01000000       MOV      EAX,1
    00012C5D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11735

    00012C63  B8 01000000       MOV      EAX,1
    00012C68  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11737

    00012C6E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012C75  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00012C7A  5B                POP      EBX

    LINE     11739

    00012C7B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012C82  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00012C87  5B                POP      EBX

    LINE     11741

    00012C88  B8 0A000000       MOV      EAX,10
    00012C8D  40                INC      EAX
    00012C8E  50                PUSH     EAX
    00012C8F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012C92  5B                POP      EBX
    00012C93  3B C3             CMP      EAX,EBX
    00012C95  0F 8503000000     JNE      3
    00012C9B  EB                JMP      

    LINE     11755

    00012C9C  56                PUSH     ESI
    00012C9D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00012CA3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00012CA9  FF D1             CALL     ECX                       run_inner_proc
    00012CAB  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11757

    00012CAC  B8 01000000       MOV      EAX,1
    00012CB1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11759

    00012CB4  B8 01000000       MOV      EAX,1
    00012CB9  8B C8             MOV      ECX,EAX
    00012CBB  B8 0A000000       MOV      EAX,10
    00012CC0  50                PUSH     EAX
    00012CC1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00012CC4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012CC7  5B                POP      EBX
    00012CC8  53                PUSH     EBX
    00012CC9  3B C3             CMP      EAX,EBX
    00012CCB  0F 8E03000000     JLE      3
    00012CD1  EB                JMP      

    LINE     11761

    00012CD2  B8 01000000       MOV      EAX,1
    00012CD7  8B C8             MOV      ECX,EAX
    00012CD9  B8 05000000       MOV      EAX,5
    00012CDE  50                PUSH     EAX
    00012CDF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00012CE2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012CE5  5B                POP      EBX
    00012CE6  53                PUSH     EBX
    00012CE7  3B C3             CMP      EAX,EBX
    00012CE9  0F 8E03000000     JLE      3
    00012CEF  EB                JMP      

    LINE     11768

    00012CF0  B8 01000000       MOV      EAX,1
    00012CF5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11769

    00012CF8  B8 01000000       MOV      EAX,1
    00012CFD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11770

    00012D00  B8 01000000       MOV      EAX,1
    00012D05  8B C8             MOV      ECX,EAX
    00012D07  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012D0A  48                DEC      EAX
    00012D0B  BB 0E000000       MOV      EBX,14
    00012D10  F7 E3             MUL      EBX
    00012D12  50                PUSH     EAX
    00012D13  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012D16  48                DEC      EAX
    00012D17  BB 02000000       MOV      EBX,2
    00012D1C  F7 E3             MUL      EBX
    00012D1E  5B                POP      EBX
    00012D1F  03 C3             ADD      EAX,EBX
    00012D21  8B F8             MOV      EDI,EAX
    00012D23  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11771

    00012D27  B8 01000000       MOV      EAX,1
    00012D2C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11772

    00012D2F  B8 01000000       MOV      EAX,1
    00012D34  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11774

    00012D37  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00012D3E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00012D43  5B                POP      EBX

    LINE     11776

    00012D44  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00012D4B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012D50  5B                POP      EBX

    LINE     11778

    00012D51  B8 0A000000       MOV      EAX,10
    00012D56  40                INC      EAX
    00012D57  50                PUSH     EAX
    00012D58  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012D5B  5B                POP      EBX
    00012D5C  3B C3             CMP      EAX,EBX
    00012D5E  0F 8503000000     JNE      3
    00012D64  EB                JMP      

    LINE     11785

    00012D65  B8 01000000       MOV      EAX,1
    00012D6A  8B C8             MOV      ECX,EAX
    00012D6C  B8 0A000000       MOV      EAX,10
    00012D71  50                PUSH     EAX
    00012D72  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00012D75  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012D78  5B                POP      EBX
    00012D79  53                PUSH     EBX
    00012D7A  3B C3             CMP      EAX,EBX
    00012D7C  0F 8E03000000     JLE      3
    00012D82  EB                JMP      

    LINE     11787

    00012D83  B8 01000000       MOV      EAX,1
    00012D88  8B C8             MOV      ECX,EAX
    00012D8A  B8 05000000       MOV      EAX,5
    00012D8F  50                PUSH     EAX
    00012D90  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00012D93  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012D96  5B                POP      EBX
    00012D97  53                PUSH     EBX
    00012D98  3B C3             CMP      EAX,EBX
    00012D9A  0F 8E03000000     JLE      3
    00012DA0  EB                JMP      

    LINE     11794

    00012DA1  B8 01000000       MOV      EAX,1
    00012DA6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11795

    00012DA9  B8 01000000       MOV      EAX,1
    00012DAE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11796

    00012DB1  B8 01000000       MOV      EAX,1
    00012DB6  8B C8             MOV      ECX,EAX
    00012DB8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012DBB  48                DEC      EAX
    00012DBC  BB 0E000000       MOV      EBX,14
    00012DC1  F7 E3             MUL      EBX
    00012DC3  50                PUSH     EAX
    00012DC4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012DC7  48                DEC      EAX
    00012DC8  BB 02000000       MOV      EBX,2
    00012DCD  F7 E3             MUL      EBX
    00012DCF  5B                POP      EBX
    00012DD0  03 C3             ADD      EAX,EBX
    00012DD2  8B F8             MOV      EDI,EAX
    00012DD4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11797

    00012DD8  B8 01000000       MOV      EAX,1
    00012DDD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11798

    00012DE0  B8 01000000       MOV      EAX,1
    00012DE5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11800

    00012DE8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012DEF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00012DF4  5B                POP      EBX

    LINE     11802

    00012DF5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012DFC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00012E01  5B                POP      EBX

    LINE     11804

    00012E02  B8 0A000000       MOV      EAX,10
    00012E07  40                INC      EAX
    00012E08  50                PUSH     EAX
    00012E09  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012E0C  5B                POP      EBX
    00012E0D  3B C3             CMP      EAX,EBX
    00012E0F  0F 8503000000     JNE      3
    00012E15  EB                JMP      

    LINE     11812

    00012E16  B8 01000000       MOV      EAX,1
    00012E1B  8B C8             MOV      ECX,EAX
    00012E1D  B8 0A000000       MOV      EAX,10
    00012E22  50                PUSH     EAX
    00012E23  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00012E26  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012E29  5B                POP      EBX
    00012E2A  53                PUSH     EBX
    00012E2B  3B C3             CMP      EAX,EBX
    00012E2D  0F 8E03000000     JLE      3
    00012E33  EB                JMP      

    LINE     11814

    00012E34  B8 01000000       MOV      EAX,1
    00012E39  8B C8             MOV      ECX,EAX
    00012E3B  B8 05000000       MOV      EAX,5
    00012E40  50                PUSH     EAX
    00012E41  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00012E44  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012E47  5B                POP      EBX
    00012E48  53                PUSH     EBX
    00012E49  3B C3             CMP      EAX,EBX
    00012E4B  0F 8E03000000     JLE      3
    00012E51  EB                JMP      

    LINE     11821

    00012E52  B8 01000000       MOV      EAX,1
    00012E57  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11822

    00012E5D  B8 01000000       MOV      EAX,1
    00012E62  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11823

    00012E68  B8 01000000       MOV      EAX,1
    00012E6D  8B C8             MOV      ECX,EAX
    00012E6F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012E72  48                DEC      EAX
    00012E73  BB 0E000000       MOV      EBX,14
    00012E78  F7 E3             MUL      EBX
    00012E7A  50                PUSH     EAX
    00012E7B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012E7E  48                DEC      EAX
    00012E7F  BB 02000000       MOV      EBX,2
    00012E84  F7 E3             MUL      EBX
    00012E86  5B                POP      EBX
    00012E87  03 C3             ADD      EAX,EBX
    00012E89  8B F8             MOV      EDI,EAX
    00012E8B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11824

    00012E92  B8 01000000       MOV      EAX,1
    00012E97  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11825

    00012E9D  B8 01000000       MOV      EAX,1
    00012EA2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11827

    00012EA8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00012EAF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00012EB4  5B                POP      EBX

    LINE     11829

    00012EB5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00012EBC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00012EC1  5B                POP      EBX

    LINE     11831

    00012EC2  B8 0A000000       MOV      EAX,10
    00012EC7  40                INC      EAX
    00012EC8  50                PUSH     EAX
    00012EC9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012ECC  5B                POP      EBX
    00012ECD  3B C3             CMP      EAX,EBX
    00012ECF  0F 8503000000     JNE      3
    00012ED5  EB                JMP      

    LINE     11838

    00012ED6  B8 01000000       MOV      EAX,1
    00012EDB  8B C8             MOV      ECX,EAX
    00012EDD  B8 0A000000       MOV      EAX,10
    00012EE2  50                PUSH     EAX
    00012EE3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00012EE6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012EE9  5B                POP      EBX
    00012EEA  53                PUSH     EBX
    00012EEB  3B C3             CMP      EAX,EBX
    00012EED  0F 8E03000000     JLE      3
    00012EF3  EB                JMP      

    LINE     11840

    00012EF4  B8 01000000       MOV      EAX,1
    00012EF9  8B C8             MOV      ECX,EAX
    00012EFB  B8 05000000       MOV      EAX,5
    00012F00  50                PUSH     EAX
    00012F01  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00012F04  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012F07  5B                POP      EBX
    00012F08  53                PUSH     EBX
    00012F09  3B C3             CMP      EAX,EBX
    00012F0B  0F 8E03000000     JLE      3
    00012F11  EB                JMP      

    LINE     11847

    00012F12  B8 01000000       MOV      EAX,1
    00012F17  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11848

    00012F1D  B8 01000000       MOV      EAX,1
    00012F22  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11849

    00012F28  B8 01000000       MOV      EAX,1
    00012F2D  8B C8             MOV      ECX,EAX
    00012F2F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00012F32  48                DEC      EAX
    00012F33  BB 0E000000       MOV      EBX,14
    00012F38  F7 E3             MUL      EBX
    00012F3A  50                PUSH     EAX
    00012F3B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00012F3E  48                DEC      EAX
    00012F3F  BB 02000000       MOV      EBX,2
    00012F44  F7 E3             MUL      EBX
    00012F46  5B                POP      EBX
    00012F47  03 C3             ADD      EAX,EBX
    00012F49  8B F8             MOV      EDI,EAX
    00012F4B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11850

    00012F52  B8 01000000       MOV      EAX,1
    00012F57  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11851

    00012F5D  B8 01000000       MOV      EAX,1
    00012F62  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11853

    00012F68  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00012F6F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00012F74  5B                POP      EBX

    LINE     11855

    00012F75  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00012F7C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00012F81  5B                POP      EBX

    LINE     11857

    00012F82  B8 0A000000       MOV      EAX,10
    00012F87  40                INC      EAX
    00012F88  50                PUSH     EAX
    00012F89  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012F8C  5B                POP      EBX
    00012F8D  3B C3             CMP      EAX,EBX
    00012F8F  0F 8503000000     JNE      3
    00012F95  EB                JMP      

    LINE     11871

    00012F96  56                PUSH     ESI
    00012F97  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00012F9D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00012FA3  FF D1             CALL     ECX                       run_inner_proc
    00012FA5  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11873

    00012FA6  B8 01000000       MOV      EAX,1
    00012FAB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11875

    00012FAE  B8 01000000       MOV      EAX,1
    00012FB3  8B C8             MOV      ECX,EAX
    00012FB5  B8 0A000000       MOV      EAX,10
    00012FBA  50                PUSH     EAX
    00012FBB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00012FBE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00012FC1  5B                POP      EBX
    00012FC2  53                PUSH     EBX
    00012FC3  3B C3             CMP      EAX,EBX
    00012FC5  0F 8E03000000     JLE      3
    00012FCB  EB                JMP      

    LINE     11877

    00012FCC  B8 01000000       MOV      EAX,1
    00012FD1  8B C8             MOV      ECX,EAX
    00012FD3  B8 05000000       MOV      EAX,5
    00012FD8  50                PUSH     EAX
    00012FD9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00012FDC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00012FDF  5B                POP      EBX
    00012FE0  53                PUSH     EBX
    00012FE1  3B C3             CMP      EAX,EBX
    00012FE3  0F 8E03000000     JLE      3
    00012FE9  EB                JMP      

    LINE     11884

    00012FEA  B8 01000000       MOV      EAX,1
    00012FEF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11885

    00012FF2  B8 01000000       MOV      EAX,1
    00012FF7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11886

    00012FFA  B8 01000000       MOV      EAX,1
    00012FFF  8B C8             MOV      ECX,EAX
    00013001  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013004  48                DEC      EAX
    00013005  BB 0E000000       MOV      EBX,14
    0001300A  F7 E3             MUL      EBX
    0001300C  50                PUSH     EAX
    0001300D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013010  48                DEC      EAX
    00013011  BB 02000000       MOV      EBX,2
    00013016  F7 E3             MUL      EBX
    00013018  5B                POP      EBX
    00013019  03 C3             ADD      EAX,EBX
    0001301B  8B F8             MOV      EDI,EAX
    0001301D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11887

    00013021  B8 01000000       MOV      EAX,1
    00013026  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11888

    00013029  B8 01000000       MOV      EAX,1
    0001302E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11890

    00013031  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00013038  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001303D  5B                POP      EBX

    LINE     11892

    0001303E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00013045  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001304A  5B                POP      EBX

    LINE     11894

    0001304B  B8 0A000000       MOV      EAX,10
    00013050  40                INC      EAX
    00013051  50                PUSH     EAX
    00013052  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013055  5B                POP      EBX
    00013056  3B C3             CMP      EAX,EBX
    00013058  0F 8503000000     JNE      3
    0001305E  EB                JMP      

    LINE     11901

    0001305F  B8 01000000       MOV      EAX,1
    00013064  8B C8             MOV      ECX,EAX
    00013066  B8 0A000000       MOV      EAX,10
    0001306B  50                PUSH     EAX
    0001306C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001306F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013072  5B                POP      EBX
    00013073  53                PUSH     EBX
    00013074  3B C3             CMP      EAX,EBX
    00013076  0F 8E03000000     JLE      3
    0001307C  EB                JMP      

    LINE     11903

    0001307D  B8 01000000       MOV      EAX,1
    00013082  8B C8             MOV      ECX,EAX
    00013084  B8 05000000       MOV      EAX,5
    00013089  50                PUSH     EAX
    0001308A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001308D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013090  5B                POP      EBX
    00013091  53                PUSH     EBX
    00013092  3B C3             CMP      EAX,EBX
    00013094  0F 8E03000000     JLE      3
    0001309A  EB                JMP      

    LINE     11910

    0001309B  B8 01000000       MOV      EAX,1
    000130A0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11911

    000130A3  B8 01000000       MOV      EAX,1
    000130A8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11912

    000130AB  B8 01000000       MOV      EAX,1
    000130B0  8B C8             MOV      ECX,EAX
    000130B2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000130B5  48                DEC      EAX
    000130B6  BB 0E000000       MOV      EBX,14
    000130BB  F7 E3             MUL      EBX
    000130BD  50                PUSH     EAX
    000130BE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000130C1  48                DEC      EAX
    000130C2  BB 02000000       MOV      EBX,2
    000130C7  F7 E3             MUL      EBX
    000130C9  5B                POP      EBX
    000130CA  03 C3             ADD      EAX,EBX
    000130CC  8B F8             MOV      EDI,EAX
    000130CE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     11913

    000130D2  B8 01000000       MOV      EAX,1
    000130D7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11914

    000130DA  B8 01000000       MOV      EAX,1
    000130DF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     11916

    000130E2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000130E9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000130EE  5B                POP      EBX

    LINE     11918

    000130EF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000130F6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000130FB  5B                POP      EBX

    LINE     11920

    000130FC  B8 0A000000       MOV      EAX,10
    00013101  40                INC      EAX
    00013102  50                PUSH     EAX
    00013103  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013106  5B                POP      EBX
    00013107  3B C3             CMP      EAX,EBX
    00013109  0F 8503000000     JNE      3
    0001310F  EB                JMP      

    LINE     11928

    00013110  B8 01000000       MOV      EAX,1
    00013115  8B C8             MOV      ECX,EAX
    00013117  B8 0A000000       MOV      EAX,10
    0001311C  50                PUSH     EAX
    0001311D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00013120  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013123  5B                POP      EBX
    00013124  53                PUSH     EBX
    00013125  3B C3             CMP      EAX,EBX
    00013127  0F 8E03000000     JLE      3
    0001312D  EB                JMP      

    LINE     11930

    0001312E  B8 01000000       MOV      EAX,1
    00013133  8B C8             MOV      ECX,EAX
    00013135  B8 05000000       MOV      EAX,5
    0001313A  50                PUSH     EAX
    0001313B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001313E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013141  5B                POP      EBX
    00013142  53                PUSH     EBX
    00013143  3B C3             CMP      EAX,EBX
    00013145  0F 8E03000000     JLE      3
    0001314B  EB                JMP      

    LINE     11937

    0001314C  B8 01000000       MOV      EAX,1
    00013151  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11938

    00013157  B8 01000000       MOV      EAX,1
    0001315C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11939

    00013162  B8 01000000       MOV      EAX,1
    00013167  8B C8             MOV      ECX,EAX
    00013169  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001316C  48                DEC      EAX
    0001316D  BB 0E000000       MOV      EBX,14
    00013172  F7 E3             MUL      EBX
    00013174  50                PUSH     EAX
    00013175  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013178  48                DEC      EAX
    00013179  BB 02000000       MOV      EBX,2
    0001317E  F7 E3             MUL      EBX
    00013180  5B                POP      EBX
    00013181  03 C3             ADD      EAX,EBX
    00013183  8B F8             MOV      EDI,EAX
    00013185  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11940

    0001318C  B8 01000000       MOV      EAX,1
    00013191  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11941

    00013197  B8 01000000       MOV      EAX,1
    0001319C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11943

    000131A2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000131A9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000131AE  5B                POP      EBX

    LINE     11945

    000131AF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000131B6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000131BB  5B                POP      EBX

    LINE     11947

    000131BC  B8 0A000000       MOV      EAX,10
    000131C1  40                INC      EAX
    000131C2  50                PUSH     EAX
    000131C3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000131C6  5B                POP      EBX
    000131C7  3B C3             CMP      EAX,EBX
    000131C9  0F 8503000000     JNE      3
    000131CF  EB                JMP      

    LINE     11954

    000131D0  B8 01000000       MOV      EAX,1
    000131D5  8B C8             MOV      ECX,EAX
    000131D7  B8 0A000000       MOV      EAX,10
    000131DC  50                PUSH     EAX
    000131DD  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000131E0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000131E3  5B                POP      EBX
    000131E4  53                PUSH     EBX
    000131E5  3B C3             CMP      EAX,EBX
    000131E7  0F 8E03000000     JLE      3
    000131ED  EB                JMP      

    LINE     11956

    000131EE  B8 01000000       MOV      EAX,1
    000131F3  8B C8             MOV      ECX,EAX
    000131F5  B8 05000000       MOV      EAX,5
    000131FA  50                PUSH     EAX
    000131FB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000131FE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013201  5B                POP      EBX
    00013202  53                PUSH     EBX
    00013203  3B C3             CMP      EAX,EBX
    00013205  0F 8E03000000     JLE      3
    0001320B  EB                JMP      

    LINE     11963

    0001320C  B8 01000000       MOV      EAX,1
    00013211  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11964

    00013217  B8 01000000       MOV      EAX,1
    0001321C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11965

    00013222  B8 01000000       MOV      EAX,1
    00013227  8B C8             MOV      ECX,EAX
    00013229  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001322C  48                DEC      EAX
    0001322D  BB 0E000000       MOV      EBX,14
    00013232  F7 E3             MUL      EBX
    00013234  50                PUSH     EAX
    00013235  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013238  48                DEC      EAX
    00013239  BB 02000000       MOV      EBX,2
    0001323E  F7 E3             MUL      EBX
    00013240  5B                POP      EBX
    00013241  03 C3             ADD      EAX,EBX
    00013243  8B F8             MOV      EDI,EAX
    00013245  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     11966

    0001324C  B8 01000000       MOV      EAX,1
    00013251  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11967

    00013257  B8 01000000       MOV      EAX,1
    0001325C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     11969

    00013262  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00013269  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001326E  5B                POP      EBX

    LINE     11971

    0001326F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00013276  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001327B  5B                POP      EBX

    LINE     11973

    0001327C  B8 0A000000       MOV      EAX,10
    00013281  40                INC      EAX
    00013282  50                PUSH     EAX
    00013283  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013286  5B                POP      EBX
    00013287  3B C3             CMP      EAX,EBX
    00013289  0F 8503000000     JNE      3
    0001328F  EB                JMP      

    LINE     11987

    00013290  56                PUSH     ESI
    00013291  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00013297  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001329D  FF D1             CALL     ECX                       run_inner_proc
    0001329F  5E                POP      ESI                       /* restore callers static pointer */

    LINE     11989

    000132A0  B8 01000000       MOV      EAX,1
    000132A5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     11991

    000132A8  B8 01000000       MOV      EAX,1
    000132AD  8B C8             MOV      ECX,EAX
    000132AF  B8 0A000000       MOV      EAX,10
    000132B4  50                PUSH     EAX
    000132B5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000132B8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000132BB  5B                POP      EBX
    000132BC  53                PUSH     EBX
    000132BD  3B C3             CMP      EAX,EBX
    000132BF  0F 8E03000000     JLE      3
    000132C5  EB                JMP      

    LINE     11993

    000132C6  B8 01000000       MOV      EAX,1
    000132CB  8B C8             MOV      ECX,EAX
    000132CD  B8 05000000       MOV      EAX,5
    000132D2  50                PUSH     EAX
    000132D3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000132D6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000132D9  5B                POP      EBX
    000132DA  53                PUSH     EBX
    000132DB  3B C3             CMP      EAX,EBX
    000132DD  0F 8E03000000     JLE      3
    000132E3  EB                JMP      

    LINE     12000

    000132E4  B8 01000000       MOV      EAX,1
    000132E9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12001

    000132EC  B8 01000000       MOV      EAX,1
    000132F1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12002

    000132F4  B8 01000000       MOV      EAX,1
    000132F9  8B C8             MOV      ECX,EAX
    000132FB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000132FE  48                DEC      EAX
    000132FF  BB 0E000000       MOV      EBX,14
    00013304  F7 E3             MUL      EBX
    00013306  50                PUSH     EAX
    00013307  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001330A  48                DEC      EAX
    0001330B  BB 02000000       MOV      EBX,2
    00013310  F7 E3             MUL      EBX
    00013312  5B                POP      EBX
    00013313  03 C3             ADD      EAX,EBX
    00013315  8B F8             MOV      EDI,EAX
    00013317  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12003

    0001331B  B8 01000000       MOV      EAX,1
    00013320  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12004

    00013323  B8 01000000       MOV      EAX,1
    00013328  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12006

    0001332B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00013332  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00013337  5B                POP      EBX

    LINE     12008

    00013338  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001333F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00013344  5B                POP      EBX

    LINE     12010

    00013345  B8 0A000000       MOV      EAX,10
    0001334A  40                INC      EAX
    0001334B  50                PUSH     EAX
    0001334C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001334F  5B                POP      EBX
    00013350  3B C3             CMP      EAX,EBX
    00013352  0F 8503000000     JNE      3
    00013358  EB                JMP      

    LINE     12017

    00013359  B8 01000000       MOV      EAX,1
    0001335E  8B C8             MOV      ECX,EAX
    00013360  B8 0A000000       MOV      EAX,10
    00013365  50                PUSH     EAX
    00013366  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00013369  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001336C  5B                POP      EBX
    0001336D  53                PUSH     EBX
    0001336E  3B C3             CMP      EAX,EBX
    00013370  0F 8E03000000     JLE      3
    00013376  EB                JMP      

    LINE     12019

    00013377  B8 01000000       MOV      EAX,1
    0001337C  8B C8             MOV      ECX,EAX
    0001337E  B8 05000000       MOV      EAX,5
    00013383  50                PUSH     EAX
    00013384  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00013387  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001338A  5B                POP      EBX
    0001338B  53                PUSH     EBX
    0001338C  3B C3             CMP      EAX,EBX
    0001338E  0F 8E03000000     JLE      3
    00013394  EB                JMP      

    LINE     12026

    00013395  B8 01000000       MOV      EAX,1
    0001339A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12027

    0001339D  B8 01000000       MOV      EAX,1
    000133A2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12028

    000133A5  B8 01000000       MOV      EAX,1
    000133AA  8B C8             MOV      ECX,EAX
    000133AC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000133AF  48                DEC      EAX
    000133B0  BB 0E000000       MOV      EBX,14
    000133B5  F7 E3             MUL      EBX
    000133B7  50                PUSH     EAX
    000133B8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000133BB  48                DEC      EAX
    000133BC  BB 02000000       MOV      EBX,2
    000133C1  F7 E3             MUL      EBX
    000133C3  5B                POP      EBX
    000133C4  03 C3             ADD      EAX,EBX
    000133C6  8B F8             MOV      EDI,EAX
    000133C8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12029

    000133CC  B8 01000000       MOV      EAX,1
    000133D1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12030

    000133D4  B8 01000000       MOV      EAX,1
    000133D9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12032

    000133DC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000133E3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000133E8  5B                POP      EBX

    LINE     12034

    000133E9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000133F0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000133F5  5B                POP      EBX

    LINE     12036

    000133F6  B8 0A000000       MOV      EAX,10
    000133FB  40                INC      EAX
    000133FC  50                PUSH     EAX
    000133FD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013400  5B                POP      EBX
    00013401  3B C3             CMP      EAX,EBX
    00013403  0F 8503000000     JNE      3
    00013409  EB                JMP      

    LINE     12044

    0001340A  B8 01000000       MOV      EAX,1
    0001340F  8B C8             MOV      ECX,EAX
    00013411  B8 0A000000       MOV      EAX,10
    00013416  50                PUSH     EAX
    00013417  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001341A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001341D  5B                POP      EBX
    0001341E  53                PUSH     EBX
    0001341F  3B C3             CMP      EAX,EBX
    00013421  0F 8E03000000     JLE      3
    00013427  EB                JMP      

    LINE     12046

    00013428  B8 01000000       MOV      EAX,1
    0001342D  8B C8             MOV      ECX,EAX
    0001342F  B8 05000000       MOV      EAX,5
    00013434  50                PUSH     EAX
    00013435  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00013438  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001343B  5B                POP      EBX
    0001343C  53                PUSH     EBX
    0001343D  3B C3             CMP      EAX,EBX
    0001343F  0F 8E03000000     JLE      3
    00013445  EB                JMP      

    LINE     12053

    00013446  B8 01000000       MOV      EAX,1
    0001344B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12054

    00013451  B8 01000000       MOV      EAX,1
    00013456  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12055

    0001345C  B8 01000000       MOV      EAX,1
    00013461  8B C8             MOV      ECX,EAX
    00013463  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013466  48                DEC      EAX
    00013467  BB 0E000000       MOV      EBX,14
    0001346C  F7 E3             MUL      EBX
    0001346E  50                PUSH     EAX
    0001346F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013472  48                DEC      EAX
    00013473  BB 02000000       MOV      EBX,2
    00013478  F7 E3             MUL      EBX
    0001347A  5B                POP      EBX
    0001347B  03 C3             ADD      EAX,EBX
    0001347D  8B F8             MOV      EDI,EAX
    0001347F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12056

    00013486  B8 01000000       MOV      EAX,1
    0001348B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12057

    00013491  B8 01000000       MOV      EAX,1
    00013496  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12059

    0001349C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000134A3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000134A8  5B                POP      EBX

    LINE     12061

    000134A9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000134B0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000134B5  5B                POP      EBX

    LINE     12063

    000134B6  B8 0A000000       MOV      EAX,10
    000134BB  40                INC      EAX
    000134BC  50                PUSH     EAX
    000134BD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000134C0  5B                POP      EBX
    000134C1  3B C3             CMP      EAX,EBX
    000134C3  0F 8503000000     JNE      3
    000134C9  EB                JMP      

    LINE     12070

    000134CA  B8 01000000       MOV      EAX,1
    000134CF  8B C8             MOV      ECX,EAX
    000134D1  B8 0A000000       MOV      EAX,10
    000134D6  50                PUSH     EAX
    000134D7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000134DA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000134DD  5B                POP      EBX
    000134DE  53                PUSH     EBX
    000134DF  3B C3             CMP      EAX,EBX
    000134E1  0F 8E03000000     JLE      3
    000134E7  EB                JMP      

    LINE     12072

    000134E8  B8 01000000       MOV      EAX,1
    000134ED  8B C8             MOV      ECX,EAX
    000134EF  B8 05000000       MOV      EAX,5
    000134F4  50                PUSH     EAX
    000134F5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000134F8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000134FB  5B                POP      EBX
    000134FC  53                PUSH     EBX
    000134FD  3B C3             CMP      EAX,EBX
    000134FF  0F 8E03000000     JLE      3
    00013505  EB                JMP      

    LINE     12079

    00013506  B8 01000000       MOV      EAX,1
    0001350B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12080

    00013511  B8 01000000       MOV      EAX,1
    00013516  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12081

    0001351C  B8 01000000       MOV      EAX,1
    00013521  8B C8             MOV      ECX,EAX
    00013523  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013526  48                DEC      EAX
    00013527  BB 0E000000       MOV      EBX,14
    0001352C  F7 E3             MUL      EBX
    0001352E  50                PUSH     EAX
    0001352F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013532  48                DEC      EAX
    00013533  BB 02000000       MOV      EBX,2
    00013538  F7 E3             MUL      EBX
    0001353A  5B                POP      EBX
    0001353B  03 C3             ADD      EAX,EBX
    0001353D  8B F8             MOV      EDI,EAX
    0001353F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12082

    00013546  B8 01000000       MOV      EAX,1
    0001354B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12083

    00013551  B8 01000000       MOV      EAX,1
    00013556  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12085

    0001355C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00013563  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00013568  5B                POP      EBX

    LINE     12087

    00013569  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00013570  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00013575  5B                POP      EBX

    LINE     12089

    00013576  B8 0A000000       MOV      EAX,10
    0001357B  40                INC      EAX
    0001357C  50                PUSH     EAX
    0001357D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013580  5B                POP      EBX
    00013581  3B C3             CMP      EAX,EBX
    00013583  0F 8503000000     JNE      3
    00013589  EB                JMP      

    LINE     12103

    0001358A  56                PUSH     ESI
    0001358B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00013591  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00013597  FF D1             CALL     ECX                       run_inner_proc
    00013599  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12105

    0001359A  B8 01000000       MOV      EAX,1
    0001359F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12107

    000135A2  B8 01000000       MOV      EAX,1
    000135A7  8B C8             MOV      ECX,EAX
    000135A9  B8 0A000000       MOV      EAX,10
    000135AE  50                PUSH     EAX
    000135AF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000135B2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000135B5  5B                POP      EBX
    000135B6  53                PUSH     EBX
    000135B7  3B C3             CMP      EAX,EBX
    000135B9  0F 8E03000000     JLE      3
    000135BF  EB                JMP      

    LINE     12109

    000135C0  B8 01000000       MOV      EAX,1
    000135C5  8B C8             MOV      ECX,EAX
    000135C7  B8 05000000       MOV      EAX,5
    000135CC  50                PUSH     EAX
    000135CD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000135D0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000135D3  5B                POP      EBX
    000135D4  53                PUSH     EBX
    000135D5  3B C3             CMP      EAX,EBX
    000135D7  0F 8E03000000     JLE      3
    000135DD  EB                JMP      

    LINE     12116

    000135DE  B8 01000000       MOV      EAX,1
    000135E3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12117

    000135E6  B8 01000000       MOV      EAX,1
    000135EB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12118

    000135EE  B8 01000000       MOV      EAX,1
    000135F3  8B C8             MOV      ECX,EAX
    000135F5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000135F8  48                DEC      EAX
    000135F9  BB 0E000000       MOV      EBX,14
    000135FE  F7 E3             MUL      EBX
    00013600  50                PUSH     EAX
    00013601  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013604  48                DEC      EAX
    00013605  BB 02000000       MOV      EBX,2
    0001360A  F7 E3             MUL      EBX
    0001360C  5B                POP      EBX
    0001360D  03 C3             ADD      EAX,EBX
    0001360F  8B F8             MOV      EDI,EAX
    00013611  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12119

    00013615  B8 01000000       MOV      EAX,1
    0001361A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12120

    0001361D  B8 01000000       MOV      EAX,1
    00013622  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12122

    00013625  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001362C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00013631  5B                POP      EBX

    LINE     12124

    00013632  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00013639  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001363E  5B                POP      EBX

    LINE     12126

    0001363F  B8 0A000000       MOV      EAX,10
    00013644  40                INC      EAX
    00013645  50                PUSH     EAX
    00013646  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013649  5B                POP      EBX
    0001364A  3B C3             CMP      EAX,EBX
    0001364C  0F 8503000000     JNE      3
    00013652  EB                JMP      

    LINE     12133

    00013653  B8 01000000       MOV      EAX,1
    00013658  8B C8             MOV      ECX,EAX
    0001365A  B8 0A000000       MOV      EAX,10
    0001365F  50                PUSH     EAX
    00013660  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00013663  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013666  5B                POP      EBX
    00013667  53                PUSH     EBX
    00013668  3B C3             CMP      EAX,EBX
    0001366A  0F 8E03000000     JLE      3
    00013670  EB                JMP      

    LINE     12135

    00013671  B8 01000000       MOV      EAX,1
    00013676  8B C8             MOV      ECX,EAX
    00013678  B8 05000000       MOV      EAX,5
    0001367D  50                PUSH     EAX
    0001367E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00013681  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013684  5B                POP      EBX
    00013685  53                PUSH     EBX
    00013686  3B C3             CMP      EAX,EBX
    00013688  0F 8E03000000     JLE      3
    0001368E  EB                JMP      

    LINE     12142

    0001368F  B8 01000000       MOV      EAX,1
    00013694  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12143

    00013697  B8 01000000       MOV      EAX,1
    0001369C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12144

    0001369F  B8 01000000       MOV      EAX,1
    000136A4  8B C8             MOV      ECX,EAX
    000136A6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000136A9  48                DEC      EAX
    000136AA  BB 0E000000       MOV      EBX,14
    000136AF  F7 E3             MUL      EBX
    000136B1  50                PUSH     EAX
    000136B2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000136B5  48                DEC      EAX
    000136B6  BB 02000000       MOV      EBX,2
    000136BB  F7 E3             MUL      EBX
    000136BD  5B                POP      EBX
    000136BE  03 C3             ADD      EAX,EBX
    000136C0  8B F8             MOV      EDI,EAX
    000136C2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12145

    000136C6  B8 01000000       MOV      EAX,1
    000136CB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12146

    000136CE  B8 01000000       MOV      EAX,1
    000136D3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12148

    000136D6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000136DD  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000136E2  5B                POP      EBX

    LINE     12150

    000136E3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000136EA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000136EF  5B                POP      EBX

    LINE     12152

    000136F0  B8 0A000000       MOV      EAX,10
    000136F5  40                INC      EAX
    000136F6  50                PUSH     EAX
    000136F7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000136FA  5B                POP      EBX
    000136FB  3B C3             CMP      EAX,EBX
    000136FD  0F 8503000000     JNE      3
    00013703  EB                JMP      

    LINE     12160

    00013704  B8 01000000       MOV      EAX,1
    00013709  8B C8             MOV      ECX,EAX
    0001370B  B8 0A000000       MOV      EAX,10
    00013710  50                PUSH     EAX
    00013711  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00013714  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013717  5B                POP      EBX
    00013718  53                PUSH     EBX
    00013719  3B C3             CMP      EAX,EBX
    0001371B  0F 8E03000000     JLE      3
    00013721  EB                JMP      

    LINE     12162

    00013722  B8 01000000       MOV      EAX,1
    00013727  8B C8             MOV      ECX,EAX
    00013729  B8 05000000       MOV      EAX,5
    0001372E  50                PUSH     EAX
    0001372F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00013732  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013735  5B                POP      EBX
    00013736  53                PUSH     EBX
    00013737  3B C3             CMP      EAX,EBX
    00013739  0F 8E03000000     JLE      3
    0001373F  EB                JMP      

    LINE     12169

    00013740  B8 01000000       MOV      EAX,1
    00013745  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12170

    0001374B  B8 01000000       MOV      EAX,1
    00013750  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12171

    00013756  B8 01000000       MOV      EAX,1
    0001375B  8B C8             MOV      ECX,EAX
    0001375D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013760  48                DEC      EAX
    00013761  BB 0E000000       MOV      EBX,14
    00013766  F7 E3             MUL      EBX
    00013768  50                PUSH     EAX
    00013769  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001376C  48                DEC      EAX
    0001376D  BB 02000000       MOV      EBX,2
    00013772  F7 E3             MUL      EBX
    00013774  5B                POP      EBX
    00013775  03 C3             ADD      EAX,EBX
    00013777  8B F8             MOV      EDI,EAX
    00013779  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12172

    00013780  B8 01000000       MOV      EAX,1
    00013785  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12173

    0001378B  B8 01000000       MOV      EAX,1
    00013790  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12175

    00013796  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001379D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000137A2  5B                POP      EBX

    LINE     12177

    000137A3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000137AA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000137AF  5B                POP      EBX

    LINE     12179

    000137B0  B8 0A000000       MOV      EAX,10
    000137B5  40                INC      EAX
    000137B6  50                PUSH     EAX
    000137B7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000137BA  5B                POP      EBX
    000137BB  3B C3             CMP      EAX,EBX
    000137BD  0F 8503000000     JNE      3
    000137C3  EB                JMP      

    LINE     12186

    000137C4  B8 01000000       MOV      EAX,1
    000137C9  8B C8             MOV      ECX,EAX
    000137CB  B8 0A000000       MOV      EAX,10
    000137D0  50                PUSH     EAX
    000137D1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000137D4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000137D7  5B                POP      EBX
    000137D8  53                PUSH     EBX
    000137D9  3B C3             CMP      EAX,EBX
    000137DB  0F 8E03000000     JLE      3
    000137E1  EB                JMP      

    LINE     12188

    000137E2  B8 01000000       MOV      EAX,1
    000137E7  8B C8             MOV      ECX,EAX
    000137E9  B8 05000000       MOV      EAX,5
    000137EE  50                PUSH     EAX
    000137EF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000137F2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000137F5  5B                POP      EBX
    000137F6  53                PUSH     EBX
    000137F7  3B C3             CMP      EAX,EBX
    000137F9  0F 8E03000000     JLE      3
    000137FF  EB                JMP      

    LINE     12195

    00013800  B8 01000000       MOV      EAX,1
    00013805  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12196

    0001380B  B8 01000000       MOV      EAX,1
    00013810  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12197

    00013816  B8 01000000       MOV      EAX,1
    0001381B  8B C8             MOV      ECX,EAX
    0001381D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013820  48                DEC      EAX
    00013821  BB 0E000000       MOV      EBX,14
    00013826  F7 E3             MUL      EBX
    00013828  50                PUSH     EAX
    00013829  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001382C  48                DEC      EAX
    0001382D  BB 02000000       MOV      EBX,2
    00013832  F7 E3             MUL      EBX
    00013834  5B                POP      EBX
    00013835  03 C3             ADD      EAX,EBX
    00013837  8B F8             MOV      EDI,EAX
    00013839  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12198

    00013840  B8 01000000       MOV      EAX,1
    00013845  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12199

    0001384B  B8 01000000       MOV      EAX,1
    00013850  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12201

    00013856  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001385D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00013862  5B                POP      EBX

    LINE     12203

    00013863  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001386A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001386F  5B                POP      EBX

    LINE     12205

    00013870  B8 0A000000       MOV      EAX,10
    00013875  40                INC      EAX
    00013876  50                PUSH     EAX
    00013877  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001387A  5B                POP      EBX
    0001387B  3B C3             CMP      EAX,EBX
    0001387D  0F 8503000000     JNE      3
    00013883  EB                JMP      

    LINE     12219

    00013884  56                PUSH     ESI
    00013885  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001388B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00013891  FF D1             CALL     ECX                       run_inner_proc
    00013893  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12221

    00013894  B8 01000000       MOV      EAX,1
    00013899  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12223

    0001389C  B8 01000000       MOV      EAX,1
    000138A1  8B C8             MOV      ECX,EAX
    000138A3  B8 0A000000       MOV      EAX,10
    000138A8  50                PUSH     EAX
    000138A9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000138AC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000138AF  5B                POP      EBX
    000138B0  53                PUSH     EBX
    000138B1  3B C3             CMP      EAX,EBX
    000138B3  0F 8E03000000     JLE      3
    000138B9  EB                JMP      

    LINE     12225

    000138BA  B8 01000000       MOV      EAX,1
    000138BF  8B C8             MOV      ECX,EAX
    000138C1  B8 05000000       MOV      EAX,5
    000138C6  50                PUSH     EAX
    000138C7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000138CA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000138CD  5B                POP      EBX
    000138CE  53                PUSH     EBX
    000138CF  3B C3             CMP      EAX,EBX
    000138D1  0F 8E03000000     JLE      3
    000138D7  EB                JMP      

    LINE     12232

    000138D8  B8 01000000       MOV      EAX,1
    000138DD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12233

    000138E0  B8 01000000       MOV      EAX,1
    000138E5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12234

    000138E8  B8 01000000       MOV      EAX,1
    000138ED  8B C8             MOV      ECX,EAX
    000138EF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000138F2  48                DEC      EAX
    000138F3  BB 0E000000       MOV      EBX,14
    000138F8  F7 E3             MUL      EBX
    000138FA  50                PUSH     EAX
    000138FB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000138FE  48                DEC      EAX
    000138FF  BB 02000000       MOV      EBX,2
    00013904  F7 E3             MUL      EBX
    00013906  5B                POP      EBX
    00013907  03 C3             ADD      EAX,EBX
    00013909  8B F8             MOV      EDI,EAX
    0001390B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12235

    0001390F  B8 01000000       MOV      EAX,1
    00013914  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12236

    00013917  B8 01000000       MOV      EAX,1
    0001391C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12238

    0001391F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00013926  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001392B  5B                POP      EBX

    LINE     12240

    0001392C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00013933  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00013938  5B                POP      EBX

    LINE     12242

    00013939  B8 0A000000       MOV      EAX,10
    0001393E  40                INC      EAX
    0001393F  50                PUSH     EAX
    00013940  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013943  5B                POP      EBX
    00013944  3B C3             CMP      EAX,EBX
    00013946  0F 8503000000     JNE      3
    0001394C  EB                JMP      

    LINE     12249

    0001394D  B8 01000000       MOV      EAX,1
    00013952  8B C8             MOV      ECX,EAX
    00013954  B8 0A000000       MOV      EAX,10
    00013959  50                PUSH     EAX
    0001395A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001395D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013960  5B                POP      EBX
    00013961  53                PUSH     EBX
    00013962  3B C3             CMP      EAX,EBX
    00013964  0F 8E03000000     JLE      3
    0001396A  EB                JMP      

    LINE     12251

    0001396B  B8 01000000       MOV      EAX,1
    00013970  8B C8             MOV      ECX,EAX
    00013972  B8 05000000       MOV      EAX,5
    00013977  50                PUSH     EAX
    00013978  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001397B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001397E  5B                POP      EBX
    0001397F  53                PUSH     EBX
    00013980  3B C3             CMP      EAX,EBX
    00013982  0F 8E03000000     JLE      3
    00013988  EB                JMP      

    LINE     12258

    00013989  B8 01000000       MOV      EAX,1
    0001398E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12259

    00013991  B8 01000000       MOV      EAX,1
    00013996  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12260

    00013999  B8 01000000       MOV      EAX,1
    0001399E  8B C8             MOV      ECX,EAX
    000139A0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000139A3  48                DEC      EAX
    000139A4  BB 0E000000       MOV      EBX,14
    000139A9  F7 E3             MUL      EBX
    000139AB  50                PUSH     EAX
    000139AC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000139AF  48                DEC      EAX
    000139B0  BB 02000000       MOV      EBX,2
    000139B5  F7 E3             MUL      EBX
    000139B7  5B                POP      EBX
    000139B8  03 C3             ADD      EAX,EBX
    000139BA  8B F8             MOV      EDI,EAX
    000139BC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12261

    000139C0  B8 01000000       MOV      EAX,1
    000139C5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12262

    000139C8  B8 01000000       MOV      EAX,1
    000139CD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12264

    000139D0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000139D7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000139DC  5B                POP      EBX

    LINE     12266

    000139DD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000139E4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000139E9  5B                POP      EBX

    LINE     12268

    000139EA  B8 0A000000       MOV      EAX,10
    000139EF  40                INC      EAX
    000139F0  50                PUSH     EAX
    000139F1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000139F4  5B                POP      EBX
    000139F5  3B C3             CMP      EAX,EBX
    000139F7  0F 8503000000     JNE      3
    000139FD  EB                JMP      

    LINE     12276

    000139FE  B8 01000000       MOV      EAX,1
    00013A03  8B C8             MOV      ECX,EAX
    00013A05  B8 0A000000       MOV      EAX,10
    00013A0A  50                PUSH     EAX
    00013A0B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00013A0E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013A11  5B                POP      EBX
    00013A12  53                PUSH     EBX
    00013A13  3B C3             CMP      EAX,EBX
    00013A15  0F 8E03000000     JLE      3
    00013A1B  EB                JMP      

    LINE     12278

    00013A1C  B8 01000000       MOV      EAX,1
    00013A21  8B C8             MOV      ECX,EAX
    00013A23  B8 05000000       MOV      EAX,5
    00013A28  50                PUSH     EAX
    00013A29  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00013A2C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013A2F  5B                POP      EBX
    00013A30  53                PUSH     EBX
    00013A31  3B C3             CMP      EAX,EBX
    00013A33  0F 8E03000000     JLE      3
    00013A39  EB                JMP      

    LINE     12285

    00013A3A  B8 01000000       MOV      EAX,1
    00013A3F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12286

    00013A45  B8 01000000       MOV      EAX,1
    00013A4A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12287

    00013A50  B8 01000000       MOV      EAX,1
    00013A55  8B C8             MOV      ECX,EAX
    00013A57  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013A5A  48                DEC      EAX
    00013A5B  BB 0E000000       MOV      EBX,14
    00013A60  F7 E3             MUL      EBX
    00013A62  50                PUSH     EAX
    00013A63  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013A66  48                DEC      EAX
    00013A67  BB 02000000       MOV      EBX,2
    00013A6C  F7 E3             MUL      EBX
    00013A6E  5B                POP      EBX
    00013A6F  03 C3             ADD      EAX,EBX
    00013A71  8B F8             MOV      EDI,EAX
    00013A73  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12288

    00013A7A  B8 01000000       MOV      EAX,1
    00013A7F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12289

    00013A85  B8 01000000       MOV      EAX,1
    00013A8A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12291

    00013A90  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00013A97  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00013A9C  5B                POP      EBX

    LINE     12293

    00013A9D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00013AA4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00013AA9  5B                POP      EBX

    LINE     12295

    00013AAA  B8 0A000000       MOV      EAX,10
    00013AAF  40                INC      EAX
    00013AB0  50                PUSH     EAX
    00013AB1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013AB4  5B                POP      EBX
    00013AB5  3B C3             CMP      EAX,EBX
    00013AB7  0F 8503000000     JNE      3
    00013ABD  EB                JMP      

    LINE     12302

    00013ABE  B8 01000000       MOV      EAX,1
    00013AC3  8B C8             MOV      ECX,EAX
    00013AC5  B8 0A000000       MOV      EAX,10
    00013ACA  50                PUSH     EAX
    00013ACB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00013ACE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013AD1  5B                POP      EBX
    00013AD2  53                PUSH     EBX
    00013AD3  3B C3             CMP      EAX,EBX
    00013AD5  0F 8E03000000     JLE      3
    00013ADB  EB                JMP      

    LINE     12304

    00013ADC  B8 01000000       MOV      EAX,1
    00013AE1  8B C8             MOV      ECX,EAX
    00013AE3  B8 05000000       MOV      EAX,5
    00013AE8  50                PUSH     EAX
    00013AE9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00013AEC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013AEF  5B                POP      EBX
    00013AF0  53                PUSH     EBX
    00013AF1  3B C3             CMP      EAX,EBX
    00013AF3  0F 8E03000000     JLE      3
    00013AF9  EB                JMP      

    LINE     12311

    00013AFA  B8 01000000       MOV      EAX,1
    00013AFF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12312

    00013B05  B8 01000000       MOV      EAX,1
    00013B0A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12313

    00013B10  B8 01000000       MOV      EAX,1
    00013B15  8B C8             MOV      ECX,EAX
    00013B17  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013B1A  48                DEC      EAX
    00013B1B  BB 0E000000       MOV      EBX,14
    00013B20  F7 E3             MUL      EBX
    00013B22  50                PUSH     EAX
    00013B23  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013B26  48                DEC      EAX
    00013B27  BB 02000000       MOV      EBX,2
    00013B2C  F7 E3             MUL      EBX
    00013B2E  5B                POP      EBX
    00013B2F  03 C3             ADD      EAX,EBX
    00013B31  8B F8             MOV      EDI,EAX
    00013B33  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12314

    00013B3A  B8 01000000       MOV      EAX,1
    00013B3F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12315

    00013B45  B8 01000000       MOV      EAX,1
    00013B4A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12317

    00013B50  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00013B57  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00013B5C  5B                POP      EBX

    LINE     12319

    00013B5D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00013B64  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00013B69  5B                POP      EBX

    LINE     12321

    00013B6A  B8 0A000000       MOV      EAX,10
    00013B6F  40                INC      EAX
    00013B70  50                PUSH     EAX
    00013B71  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013B74  5B                POP      EBX
    00013B75  3B C3             CMP      EAX,EBX
    00013B77  0F 8503000000     JNE      3
    00013B7D  EB                JMP      

    LINE     12335

    00013B7E  56                PUSH     ESI
    00013B7F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00013B85  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00013B8B  FF D1             CALL     ECX                       run_inner_proc
    00013B8D  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12337

    00013B8E  B8 01000000       MOV      EAX,1
    00013B93  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12339

    00013B96  B8 01000000       MOV      EAX,1
    00013B9B  8B C8             MOV      ECX,EAX
    00013B9D  B8 0A000000       MOV      EAX,10
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page  11


    00013BA2  50                PUSH     EAX
    00013BA3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00013BA6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013BA9  5B                POP      EBX
    00013BAA  53                PUSH     EBX
    00013BAB  3B C3             CMP      EAX,EBX
    00013BAD  0F 8E03000000     JLE      3
    00013BB3  EB                JMP      

    LINE     12341

    00013BB4  B8 01000000       MOV      EAX,1
    00013BB9  8B C8             MOV      ECX,EAX
    00013BBB  B8 05000000       MOV      EAX,5
    00013BC0  50                PUSH     EAX
    00013BC1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00013BC4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013BC7  5B                POP      EBX
    00013BC8  53                PUSH     EBX
    00013BC9  3B C3             CMP      EAX,EBX
    00013BCB  0F 8E03000000     JLE      3
    00013BD1  EB                JMP      

    LINE     12348

    00013BD2  B8 01000000       MOV      EAX,1
    00013BD7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12349

    00013BDA  B8 01000000       MOV      EAX,1
    00013BDF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12350

    00013BE2  B8 01000000       MOV      EAX,1
    00013BE7  8B C8             MOV      ECX,EAX
    00013BE9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013BEC  48                DEC      EAX
    00013BED  BB 0E000000       MOV      EBX,14
    00013BF2  F7 E3             MUL      EBX
    00013BF4  50                PUSH     EAX
    00013BF5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013BF8  48                DEC      EAX
    00013BF9  BB 02000000       MOV      EBX,2
    00013BFE  F7 E3             MUL      EBX
    00013C00  5B                POP      EBX
    00013C01  03 C3             ADD      EAX,EBX
    00013C03  8B F8             MOV      EDI,EAX
    00013C05  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12351

    00013C09  B8 01000000       MOV      EAX,1
    00013C0E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12352

    00013C11  B8 01000000       MOV      EAX,1
    00013C16  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12354

    00013C19  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00013C20  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00013C25  5B                POP      EBX

    LINE     12356

    00013C26  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00013C2D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00013C32  5B                POP      EBX

    LINE     12358

    00013C33  B8 0A000000       MOV      EAX,10
    00013C38  40                INC      EAX
    00013C39  50                PUSH     EAX
    00013C3A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013C3D  5B                POP      EBX
    00013C3E  3B C3             CMP      EAX,EBX
    00013C40  0F 8503000000     JNE      3
    00013C46  EB                JMP      

    LINE     12365

    00013C47  B8 01000000       MOV      EAX,1
    00013C4C  8B C8             MOV      ECX,EAX
    00013C4E  B8 0A000000       MOV      EAX,10
    00013C53  50                PUSH     EAX
    00013C54  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00013C57  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013C5A  5B                POP      EBX
    00013C5B  53                PUSH     EBX
    00013C5C  3B C3             CMP      EAX,EBX
    00013C5E  0F 8E03000000     JLE      3
    00013C64  EB                JMP      

    LINE     12367

    00013C65  B8 01000000       MOV      EAX,1
    00013C6A  8B C8             MOV      ECX,EAX
    00013C6C  B8 05000000       MOV      EAX,5
    00013C71  50                PUSH     EAX
    00013C72  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00013C75  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013C78  5B                POP      EBX
    00013C79  53                PUSH     EBX
    00013C7A  3B C3             CMP      EAX,EBX
    00013C7C  0F 8E03000000     JLE      3
    00013C82  EB                JMP      

    LINE     12374

    00013C83  B8 01000000       MOV      EAX,1
    00013C88  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12375

    00013C8B  B8 01000000       MOV      EAX,1
    00013C90  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12376

    00013C93  B8 01000000       MOV      EAX,1
    00013C98  8B C8             MOV      ECX,EAX
    00013C9A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013C9D  48                DEC      EAX
    00013C9E  BB 0E000000       MOV      EBX,14
    00013CA3  F7 E3             MUL      EBX
    00013CA5  50                PUSH     EAX
    00013CA6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013CA9  48                DEC      EAX
    00013CAA  BB 02000000       MOV      EBX,2
    00013CAF  F7 E3             MUL      EBX
    00013CB1  5B                POP      EBX
    00013CB2  03 C3             ADD      EAX,EBX
    00013CB4  8B F8             MOV      EDI,EAX
    00013CB6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12377

    00013CBA  B8 01000000       MOV      EAX,1
    00013CBF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12378

    00013CC2  B8 01000000       MOV      EAX,1
    00013CC7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12380

    00013CCA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00013CD1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00013CD6  5B                POP      EBX

    LINE     12382

    00013CD7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00013CDE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00013CE3  5B                POP      EBX

    LINE     12384

    00013CE4  B8 0A000000       MOV      EAX,10
    00013CE9  40                INC      EAX
    00013CEA  50                PUSH     EAX
    00013CEB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013CEE  5B                POP      EBX
    00013CEF  3B C3             CMP      EAX,EBX
    00013CF1  0F 8503000000     JNE      3
    00013CF7  EB                JMP      

    LINE     12392

    00013CF8  B8 01000000       MOV      EAX,1
    00013CFD  8B C8             MOV      ECX,EAX
    00013CFF  B8 0A000000       MOV      EAX,10
    00013D04  50                PUSH     EAX
    00013D05  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00013D08  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013D0B  5B                POP      EBX
    00013D0C  53                PUSH     EBX
    00013D0D  3B C3             CMP      EAX,EBX
    00013D0F  0F 8E03000000     JLE      3
    00013D15  EB                JMP      

    LINE     12394

    00013D16  B8 01000000       MOV      EAX,1
    00013D1B  8B C8             MOV      ECX,EAX
    00013D1D  B8 05000000       MOV      EAX,5
    00013D22  50                PUSH     EAX
    00013D23  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00013D26  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013D29  5B                POP      EBX
    00013D2A  53                PUSH     EBX
    00013D2B  3B C3             CMP      EAX,EBX
    00013D2D  0F 8E03000000     JLE      3
    00013D33  EB                JMP      

    LINE     12401

    00013D34  B8 01000000       MOV      EAX,1
    00013D39  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12402

    00013D3F  B8 01000000       MOV      EAX,1
    00013D44  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12403

    00013D4A  B8 01000000       MOV      EAX,1
    00013D4F  8B C8             MOV      ECX,EAX
    00013D51  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013D54  48                DEC      EAX
    00013D55  BB 0E000000       MOV      EBX,14
    00013D5A  F7 E3             MUL      EBX
    00013D5C  50                PUSH     EAX
    00013D5D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013D60  48                DEC      EAX
    00013D61  BB 02000000       MOV      EBX,2
    00013D66  F7 E3             MUL      EBX
    00013D68  5B                POP      EBX
    00013D69  03 C3             ADD      EAX,EBX
    00013D6B  8B F8             MOV      EDI,EAX
    00013D6D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12404

    00013D74  B8 01000000       MOV      EAX,1
    00013D79  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12405

    00013D7F  B8 01000000       MOV      EAX,1
    00013D84  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12407

    00013D8A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00013D91  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00013D96  5B                POP      EBX

    LINE     12409

    00013D97  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00013D9E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00013DA3  5B                POP      EBX

    LINE     12411

    00013DA4  B8 0A000000       MOV      EAX,10
    00013DA9  40                INC      EAX
    00013DAA  50                PUSH     EAX
    00013DAB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013DAE  5B                POP      EBX
    00013DAF  3B C3             CMP      EAX,EBX
    00013DB1  0F 8503000000     JNE      3
    00013DB7  EB                JMP      

    LINE     12418

    00013DB8  B8 01000000       MOV      EAX,1
    00013DBD  8B C8             MOV      ECX,EAX
    00013DBF  B8 0A000000       MOV      EAX,10
    00013DC4  50                PUSH     EAX
    00013DC5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00013DC8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013DCB  5B                POP      EBX
    00013DCC  53                PUSH     EBX
    00013DCD  3B C3             CMP      EAX,EBX
    00013DCF  0F 8E03000000     JLE      3
    00013DD5  EB                JMP      

    LINE     12420

    00013DD6  B8 01000000       MOV      EAX,1
    00013DDB  8B C8             MOV      ECX,EAX
    00013DDD  B8 05000000       MOV      EAX,5
    00013DE2  50                PUSH     EAX
    00013DE3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00013DE6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013DE9  5B                POP      EBX
    00013DEA  53                PUSH     EBX
    00013DEB  3B C3             CMP      EAX,EBX
    00013DED  0F 8E03000000     JLE      3
    00013DF3  EB                JMP      

    LINE     12427

    00013DF4  B8 01000000       MOV      EAX,1
    00013DF9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12428

    00013DFF  B8 01000000       MOV      EAX,1
    00013E04  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12429

    00013E0A  B8 01000000       MOV      EAX,1
    00013E0F  8B C8             MOV      ECX,EAX
    00013E11  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013E14  48                DEC      EAX
    00013E15  BB 0E000000       MOV      EBX,14
    00013E1A  F7 E3             MUL      EBX
    00013E1C  50                PUSH     EAX
    00013E1D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013E20  48                DEC      EAX
    00013E21  BB 02000000       MOV      EBX,2
    00013E26  F7 E3             MUL      EBX
    00013E28  5B                POP      EBX
    00013E29  03 C3             ADD      EAX,EBX
    00013E2B  8B F8             MOV      EDI,EAX
    00013E2D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12430

    00013E34  B8 01000000       MOV      EAX,1
    00013E39  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12431

    00013E3F  B8 01000000       MOV      EAX,1
    00013E44  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12433

    00013E4A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00013E51  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00013E56  5B                POP      EBX

    LINE     12435

    00013E57  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00013E5E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00013E63  5B                POP      EBX

    LINE     12437

    00013E64  B8 0A000000       MOV      EAX,10
    00013E69  40                INC      EAX
    00013E6A  50                PUSH     EAX
    00013E6B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013E6E  5B                POP      EBX
    00013E6F  3B C3             CMP      EAX,EBX
    00013E71  0F 8503000000     JNE      3
    00013E77  EB                JMP      

    LINE     12451

    00013E78  56                PUSH     ESI
    00013E79  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00013E7F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00013E85  FF D1             CALL     ECX                       run_inner_proc
    00013E87  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12453

    00013E88  B8 01000000       MOV      EAX,1
    00013E8D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12455

    00013E90  B8 01000000       MOV      EAX,1
    00013E95  8B C8             MOV      ECX,EAX
    00013E97  B8 0A000000       MOV      EAX,10
    00013E9C  50                PUSH     EAX
    00013E9D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00013EA0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013EA3  5B                POP      EBX
    00013EA4  53                PUSH     EBX
    00013EA5  3B C3             CMP      EAX,EBX
    00013EA7  0F 8E03000000     JLE      3
    00013EAD  EB                JMP      

    LINE     12457

    00013EAE  B8 01000000       MOV      EAX,1
    00013EB3  8B C8             MOV      ECX,EAX
    00013EB5  B8 05000000       MOV      EAX,5
    00013EBA  50                PUSH     EAX
    00013EBB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00013EBE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013EC1  5B                POP      EBX
    00013EC2  53                PUSH     EBX
    00013EC3  3B C3             CMP      EAX,EBX
    00013EC5  0F 8E03000000     JLE      3
    00013ECB  EB                JMP      

    LINE     12464

    00013ECC  B8 01000000       MOV      EAX,1
    00013ED1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12465

    00013ED4  B8 01000000       MOV      EAX,1
    00013ED9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12466

    00013EDC  B8 01000000       MOV      EAX,1
    00013EE1  8B C8             MOV      ECX,EAX
    00013EE3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013EE6  48                DEC      EAX
    00013EE7  BB 0E000000       MOV      EBX,14
    00013EEC  F7 E3             MUL      EBX
    00013EEE  50                PUSH     EAX
    00013EEF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00013EF2  48                DEC      EAX
    00013EF3  BB 02000000       MOV      EBX,2
    00013EF8  F7 E3             MUL      EBX
    00013EFA  5B                POP      EBX
    00013EFB  03 C3             ADD      EAX,EBX
    00013EFD  8B F8             MOV      EDI,EAX
    00013EFF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12467

    00013F03  B8 01000000       MOV      EAX,1
    00013F08  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12468

    00013F0B  B8 01000000       MOV      EAX,1
    00013F10  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12470

    00013F13  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00013F1A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00013F1F  5B                POP      EBX

    LINE     12472

    00013F20  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00013F27  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00013F2C  5B                POP      EBX

    LINE     12474

    00013F2D  B8 0A000000       MOV      EAX,10
    00013F32  40                INC      EAX
    00013F33  50                PUSH     EAX
    00013F34  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013F37  5B                POP      EBX
    00013F38  3B C3             CMP      EAX,EBX
    00013F3A  0F 8503000000     JNE      3
    00013F40  EB                JMP      

    LINE     12481

    00013F41  B8 01000000       MOV      EAX,1
    00013F46  8B C8             MOV      ECX,EAX
    00013F48  B8 0A000000       MOV      EAX,10
    00013F4D  50                PUSH     EAX
    00013F4E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00013F51  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013F54  5B                POP      EBX
    00013F55  53                PUSH     EBX
    00013F56  3B C3             CMP      EAX,EBX
    00013F58  0F 8E03000000     JLE      3
    00013F5E  EB                JMP      

    LINE     12483

    00013F5F  B8 01000000       MOV      EAX,1
    00013F64  8B C8             MOV      ECX,EAX
    00013F66  B8 05000000       MOV      EAX,5
    00013F6B  50                PUSH     EAX
    00013F6C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00013F6F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013F72  5B                POP      EBX
    00013F73  53                PUSH     EBX
    00013F74  3B C3             CMP      EAX,EBX
    00013F76  0F 8E03000000     JLE      3
    00013F7C  EB                JMP      

    LINE     12490

    00013F7D  B8 01000000       MOV      EAX,1
    00013F82  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12491

    00013F85  B8 01000000       MOV      EAX,1
    00013F8A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12492

    00013F8D  B8 01000000       MOV      EAX,1
    00013F92  8B C8             MOV      ECX,EAX
    00013F94  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00013F97  48                DEC      EAX
    00013F98  BB 0E000000       MOV      EBX,14
    00013F9D  F7 E3             MUL      EBX
    00013F9F  50                PUSH     EAX
    00013FA0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00013FA3  48                DEC      EAX
    00013FA4  BB 02000000       MOV      EBX,2
    00013FA9  F7 E3             MUL      EBX
    00013FAB  5B                POP      EBX
    00013FAC  03 C3             ADD      EAX,EBX
    00013FAE  8B F8             MOV      EDI,EAX
    00013FB0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12493

    00013FB4  B8 01000000       MOV      EAX,1
    00013FB9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12494

    00013FBC  B8 01000000       MOV      EAX,1
    00013FC1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12496

    00013FC4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00013FCB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00013FD0  5B                POP      EBX

    LINE     12498

    00013FD1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00013FD8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00013FDD  5B                POP      EBX

    LINE     12500

    00013FDE  B8 0A000000       MOV      EAX,10
    00013FE3  40                INC      EAX
    00013FE4  50                PUSH     EAX
    00013FE5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00013FE8  5B                POP      EBX
    00013FE9  3B C3             CMP      EAX,EBX
    00013FEB  0F 8503000000     JNE      3
    00013FF1  EB                JMP      

    LINE     12508

    00013FF2  B8 01000000       MOV      EAX,1
    00013FF7  8B C8             MOV      ECX,EAX
    00013FF9  B8 0A000000       MOV      EAX,10
    00013FFE  50                PUSH     EAX
    00013FFF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00014002  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014005  5B                POP      EBX
    00014006  53                PUSH     EBX
    00014007  3B C3             CMP      EAX,EBX
    00014009  0F 8E03000000     JLE      3
    0001400F  EB                JMP      

    LINE     12510

    00014010  B8 01000000       MOV      EAX,1
    00014015  8B C8             MOV      ECX,EAX
    00014017  B8 05000000       MOV      EAX,5
    0001401C  50                PUSH     EAX
    0001401D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00014020  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014023  5B                POP      EBX
    00014024  53                PUSH     EBX
    00014025  3B C3             CMP      EAX,EBX
    00014027  0F 8E03000000     JLE      3
    0001402D  EB                JMP      

    LINE     12517

    0001402E  B8 01000000       MOV      EAX,1
    00014033  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12518

    00014039  B8 01000000       MOV      EAX,1
    0001403E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12519

    00014044  B8 01000000       MOV      EAX,1
    00014049  8B C8             MOV      ECX,EAX
    0001404B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001404E  48                DEC      EAX
    0001404F  BB 0E000000       MOV      EBX,14
    00014054  F7 E3             MUL      EBX
    00014056  50                PUSH     EAX
    00014057  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001405A  48                DEC      EAX
    0001405B  BB 02000000       MOV      EBX,2
    00014060  F7 E3             MUL      EBX
    00014062  5B                POP      EBX
    00014063  03 C3             ADD      EAX,EBX
    00014065  8B F8             MOV      EDI,EAX
    00014067  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12520

    0001406E  B8 01000000       MOV      EAX,1
    00014073  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12521

    00014079  B8 01000000       MOV      EAX,1
    0001407E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12523

    00014084  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001408B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014090  5B                POP      EBX

    LINE     12525

    00014091  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014098  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001409D  5B                POP      EBX

    LINE     12527

    0001409E  B8 0A000000       MOV      EAX,10
    000140A3  40                INC      EAX
    000140A4  50                PUSH     EAX
    000140A5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000140A8  5B                POP      EBX
    000140A9  3B C3             CMP      EAX,EBX
    000140AB  0F 8503000000     JNE      3
    000140B1  EB                JMP      

    LINE     12534

    000140B2  B8 01000000       MOV      EAX,1
    000140B7  8B C8             MOV      ECX,EAX
    000140B9  B8 0A000000       MOV      EAX,10
    000140BE  50                PUSH     EAX
    000140BF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000140C2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000140C5  5B                POP      EBX
    000140C6  53                PUSH     EBX
    000140C7  3B C3             CMP      EAX,EBX
    000140C9  0F 8E03000000     JLE      3
    000140CF  EB                JMP      

    LINE     12536

    000140D0  B8 01000000       MOV      EAX,1
    000140D5  8B C8             MOV      ECX,EAX
    000140D7  B8 05000000       MOV      EAX,5
    000140DC  50                PUSH     EAX
    000140DD  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000140E0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000140E3  5B                POP      EBX
    000140E4  53                PUSH     EBX
    000140E5  3B C3             CMP      EAX,EBX
    000140E7  0F 8E03000000     JLE      3
    000140ED  EB                JMP      

    LINE     12543

    000140EE  B8 01000000       MOV      EAX,1
    000140F3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12544

    000140F9  B8 01000000       MOV      EAX,1
    000140FE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12545

    00014104  B8 01000000       MOV      EAX,1
    00014109  8B C8             MOV      ECX,EAX
    0001410B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001410E  48                DEC      EAX
    0001410F  BB 0E000000       MOV      EBX,14
    00014114  F7 E3             MUL      EBX
    00014116  50                PUSH     EAX
    00014117  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001411A  48                DEC      EAX
    0001411B  BB 02000000       MOV      EBX,2
    00014120  F7 E3             MUL      EBX
    00014122  5B                POP      EBX
    00014123  03 C3             ADD      EAX,EBX
    00014125  8B F8             MOV      EDI,EAX
    00014127  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12546

    0001412E  B8 01000000       MOV      EAX,1
    00014133  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12547

    00014139  B8 01000000       MOV      EAX,1
    0001413E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12549

    00014144  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001414B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014150  5B                POP      EBX

    LINE     12551

    00014151  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00014158  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001415D  5B                POP      EBX

    LINE     12553

    0001415E  B8 0A000000       MOV      EAX,10
    00014163  40                INC      EAX
    00014164  50                PUSH     EAX
    00014165  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014168  5B                POP      EBX
    00014169  3B C3             CMP      EAX,EBX
    0001416B  0F 8503000000     JNE      3
    00014171  EB                JMP      

    LINE     12567

    00014172  56                PUSH     ESI
    00014173  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00014179  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001417F  FF D1             CALL     ECX                       run_inner_proc
    00014181  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12569

    00014182  B8 01000000       MOV      EAX,1
    00014187  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12571

    0001418A  B8 01000000       MOV      EAX,1
    0001418F  8B C8             MOV      ECX,EAX
    00014191  B8 0A000000       MOV      EAX,10
    00014196  50                PUSH     EAX
    00014197  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001419A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001419D  5B                POP      EBX
    0001419E  53                PUSH     EBX
    0001419F  3B C3             CMP      EAX,EBX
    000141A1  0F 8E03000000     JLE      3
    000141A7  EB                JMP      

    LINE     12573

    000141A8  B8 01000000       MOV      EAX,1
    000141AD  8B C8             MOV      ECX,EAX
    000141AF  B8 05000000       MOV      EAX,5
    000141B4  50                PUSH     EAX
    000141B5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000141B8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000141BB  5B                POP      EBX
    000141BC  53                PUSH     EBX
    000141BD  3B C3             CMP      EAX,EBX
    000141BF  0F 8E03000000     JLE      3
    000141C5  EB                JMP      

    LINE     12580

    000141C6  B8 01000000       MOV      EAX,1
    000141CB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12581

    000141CE  B8 01000000       MOV      EAX,1
    000141D3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12582

    000141D6  B8 01000000       MOV      EAX,1
    000141DB  8B C8             MOV      ECX,EAX
    000141DD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000141E0  48                DEC      EAX
    000141E1  BB 0E000000       MOV      EBX,14
    000141E6  F7 E3             MUL      EBX
    000141E8  50                PUSH     EAX
    000141E9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000141EC  48                DEC      EAX
    000141ED  BB 02000000       MOV      EBX,2
    000141F2  F7 E3             MUL      EBX
    000141F4  5B                POP      EBX
    000141F5  03 C3             ADD      EAX,EBX
    000141F7  8B F8             MOV      EDI,EAX
    000141F9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12583

    000141FD  B8 01000000       MOV      EAX,1
    00014202  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12584

    00014205  B8 01000000       MOV      EAX,1
    0001420A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12586

    0001420D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014214  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00014219  5B                POP      EBX

    LINE     12588

    0001421A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014221  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00014226  5B                POP      EBX

    LINE     12590

    00014227  B8 0A000000       MOV      EAX,10
    0001422C  40                INC      EAX
    0001422D  50                PUSH     EAX
    0001422E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014231  5B                POP      EBX
    00014232  3B C3             CMP      EAX,EBX
    00014234  0F 8503000000     JNE      3
    0001423A  EB                JMP      

    LINE     12597

    0001423B  B8 01000000       MOV      EAX,1
    00014240  8B C8             MOV      ECX,EAX
    00014242  B8 0A000000       MOV      EAX,10
    00014247  50                PUSH     EAX
    00014248  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001424B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001424E  5B                POP      EBX
    0001424F  53                PUSH     EBX
    00014250  3B C3             CMP      EAX,EBX
    00014252  0F 8E03000000     JLE      3
    00014258  EB                JMP      

    LINE     12599

    00014259  B8 01000000       MOV      EAX,1
    0001425E  8B C8             MOV      ECX,EAX
    00014260  B8 05000000       MOV      EAX,5
    00014265  50                PUSH     EAX
    00014266  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00014269  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001426C  5B                POP      EBX
    0001426D  53                PUSH     EBX
    0001426E  3B C3             CMP      EAX,EBX
    00014270  0F 8E03000000     JLE      3
    00014276  EB                JMP      

    LINE     12606

    00014277  B8 01000000       MOV      EAX,1
    0001427C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12607

    0001427F  B8 01000000       MOV      EAX,1
    00014284  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12608

    00014287  B8 01000000       MOV      EAX,1
    0001428C  8B C8             MOV      ECX,EAX
    0001428E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014291  48                DEC      EAX
    00014292  BB 0E000000       MOV      EBX,14
    00014297  F7 E3             MUL      EBX
    00014299  50                PUSH     EAX
    0001429A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001429D  48                DEC      EAX
    0001429E  BB 02000000       MOV      EBX,2
    000142A3  F7 E3             MUL      EBX
    000142A5  5B                POP      EBX
    000142A6  03 C3             ADD      EAX,EBX
    000142A8  8B F8             MOV      EDI,EAX
    000142AA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12609

    000142AE  B8 01000000       MOV      EAX,1
    000142B3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12610

    000142B6  B8 01000000       MOV      EAX,1
    000142BB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12612

    000142BE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000142C5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000142CA  5B                POP      EBX

    LINE     12614

    000142CB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000142D2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000142D7  5B                POP      EBX

    LINE     12616

    000142D8  B8 0A000000       MOV      EAX,10
    000142DD  40                INC      EAX
    000142DE  50                PUSH     EAX
    000142DF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000142E2  5B                POP      EBX
    000142E3  3B C3             CMP      EAX,EBX
    000142E5  0F 8503000000     JNE      3
    000142EB  EB                JMP      

    LINE     12624

    000142EC  B8 01000000       MOV      EAX,1
    000142F1  8B C8             MOV      ECX,EAX
    000142F3  B8 0A000000       MOV      EAX,10
    000142F8  50                PUSH     EAX
    000142F9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000142FC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000142FF  5B                POP      EBX
    00014300  53                PUSH     EBX
    00014301  3B C3             CMP      EAX,EBX
    00014303  0F 8E03000000     JLE      3
    00014309  EB                JMP      

    LINE     12626

    0001430A  B8 01000000       MOV      EAX,1
    0001430F  8B C8             MOV      ECX,EAX
    00014311  B8 05000000       MOV      EAX,5
    00014316  50                PUSH     EAX
    00014317  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001431A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001431D  5B                POP      EBX
    0001431E  53                PUSH     EBX
    0001431F  3B C3             CMP      EAX,EBX
    00014321  0F 8E03000000     JLE      3
    00014327  EB                JMP      

    LINE     12633

    00014328  B8 01000000       MOV      EAX,1
    0001432D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12634

    00014333  B8 01000000       MOV      EAX,1
    00014338  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12635

    0001433E  B8 01000000       MOV      EAX,1
    00014343  8B C8             MOV      ECX,EAX
    00014345  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014348  48                DEC      EAX
    00014349  BB 0E000000       MOV      EBX,14
    0001434E  F7 E3             MUL      EBX
    00014350  50                PUSH     EAX
    00014351  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014354  48                DEC      EAX
    00014355  BB 02000000       MOV      EBX,2
    0001435A  F7 E3             MUL      EBX
    0001435C  5B                POP      EBX
    0001435D  03 C3             ADD      EAX,EBX
    0001435F  8B F8             MOV      EDI,EAX
    00014361  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12636

    00014368  B8 01000000       MOV      EAX,1
    0001436D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12637

    00014373  B8 01000000       MOV      EAX,1
    00014378  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12639

    0001437E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014385  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001438A  5B                POP      EBX

    LINE     12641

    0001438B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014392  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014397  5B                POP      EBX

    LINE     12643

    00014398  B8 0A000000       MOV      EAX,10
    0001439D  40                INC      EAX
    0001439E  50                PUSH     EAX
    0001439F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000143A2  5B                POP      EBX
    000143A3  3B C3             CMP      EAX,EBX
    000143A5  0F 8503000000     JNE      3
    000143AB  EB                JMP      

    LINE     12650

    000143AC  B8 01000000       MOV      EAX,1
    000143B1  8B C8             MOV      ECX,EAX
    000143B3  B8 0A000000       MOV      EAX,10
    000143B8  50                PUSH     EAX
    000143B9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000143BC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000143BF  5B                POP      EBX
    000143C0  53                PUSH     EBX
    000143C1  3B C3             CMP      EAX,EBX
    000143C3  0F 8E03000000     JLE      3
    000143C9  EB                JMP      

    LINE     12652

    000143CA  B8 01000000       MOV      EAX,1
    000143CF  8B C8             MOV      ECX,EAX
    000143D1  B8 05000000       MOV      EAX,5
    000143D6  50                PUSH     EAX
    000143D7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000143DA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000143DD  5B                POP      EBX
    000143DE  53                PUSH     EBX
    000143DF  3B C3             CMP      EAX,EBX
    000143E1  0F 8E03000000     JLE      3
    000143E7  EB                JMP      

    LINE     12659

    000143E8  B8 01000000       MOV      EAX,1
    000143ED  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12660

    000143F3  B8 01000000       MOV      EAX,1
    000143F8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12661

    000143FE  B8 01000000       MOV      EAX,1
    00014403  8B C8             MOV      ECX,EAX
    00014405  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014408  48                DEC      EAX
    00014409  BB 0E000000       MOV      EBX,14
    0001440E  F7 E3             MUL      EBX
    00014410  50                PUSH     EAX
    00014411  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014414  48                DEC      EAX
    00014415  BB 02000000       MOV      EBX,2
    0001441A  F7 E3             MUL      EBX
    0001441C  5B                POP      EBX
    0001441D  03 C3             ADD      EAX,EBX
    0001441F  8B F8             MOV      EDI,EAX
    00014421  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12662

    00014428  B8 01000000       MOV      EAX,1
    0001442D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12663

    00014433  B8 01000000       MOV      EAX,1
    00014438  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12665

    0001443E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00014445  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001444A  5B                POP      EBX

    LINE     12667

    0001444B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00014452  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014457  5B                POP      EBX

    LINE     12669

    00014458  B8 0A000000       MOV      EAX,10
    0001445D  40                INC      EAX
    0001445E  50                PUSH     EAX
    0001445F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014462  5B                POP      EBX
    00014463  3B C3             CMP      EAX,EBX
    00014465  0F 8503000000     JNE      3
    0001446B  EB                JMP      

    LINE     12683

    0001446C  56                PUSH     ESI
    0001446D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00014473  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00014479  FF D1             CALL     ECX                       run_inner_proc
    0001447B  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12685

    0001447C  B8 01000000       MOV      EAX,1
    00014481  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12687

    00014484  B8 01000000       MOV      EAX,1
    00014489  8B C8             MOV      ECX,EAX
    0001448B  B8 0A000000       MOV      EAX,10
    00014490  50                PUSH     EAX
    00014491  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00014494  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014497  5B                POP      EBX
    00014498  53                PUSH     EBX
    00014499  3B C3             CMP      EAX,EBX
    0001449B  0F 8E03000000     JLE      3
    000144A1  EB                JMP      

    LINE     12689

    000144A2  B8 01000000       MOV      EAX,1
    000144A7  8B C8             MOV      ECX,EAX
    000144A9  B8 05000000       MOV      EAX,5
    000144AE  50                PUSH     EAX
    000144AF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000144B2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000144B5  5B                POP      EBX
    000144B6  53                PUSH     EBX
    000144B7  3B C3             CMP      EAX,EBX
    000144B9  0F 8E03000000     JLE      3
    000144BF  EB                JMP      

    LINE     12696

    000144C0  B8 01000000       MOV      EAX,1
    000144C5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12697

    000144C8  B8 01000000       MOV      EAX,1
    000144CD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12698

    000144D0  B8 01000000       MOV      EAX,1
    000144D5  8B C8             MOV      ECX,EAX
    000144D7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000144DA  48                DEC      EAX
    000144DB  BB 0E000000       MOV      EBX,14
    000144E0  F7 E3             MUL      EBX
    000144E2  50                PUSH     EAX
    000144E3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000144E6  48                DEC      EAX
    000144E7  BB 02000000       MOV      EBX,2
    000144EC  F7 E3             MUL      EBX
    000144EE  5B                POP      EBX
    000144EF  03 C3             ADD      EAX,EBX
    000144F1  8B F8             MOV      EDI,EAX
    000144F3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12699

    000144F7  B8 01000000       MOV      EAX,1
    000144FC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12700

    000144FF  B8 01000000       MOV      EAX,1
    00014504  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12702

    00014507  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001450E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00014513  5B                POP      EBX

    LINE     12704

    00014514  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001451B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00014520  5B                POP      EBX

    LINE     12706

    00014521  B8 0A000000       MOV      EAX,10
    00014526  40                INC      EAX
    00014527  50                PUSH     EAX
    00014528  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001452B  5B                POP      EBX
    0001452C  3B C3             CMP      EAX,EBX
    0001452E  0F 8503000000     JNE      3
    00014534  EB                JMP      

    LINE     12713

    00014535  B8 01000000       MOV      EAX,1
    0001453A  8B C8             MOV      ECX,EAX
    0001453C  B8 0A000000       MOV      EAX,10
    00014541  50                PUSH     EAX
    00014542  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00014545  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014548  5B                POP      EBX
    00014549  53                PUSH     EBX
    0001454A  3B C3             CMP      EAX,EBX
    0001454C  0F 8E03000000     JLE      3
    00014552  EB                JMP      

    LINE     12715

    00014553  B8 01000000       MOV      EAX,1
    00014558  8B C8             MOV      ECX,EAX
    0001455A  B8 05000000       MOV      EAX,5
    0001455F  50                PUSH     EAX
    00014560  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00014563  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014566  5B                POP      EBX
    00014567  53                PUSH     EBX
    00014568  3B C3             CMP      EAX,EBX
    0001456A  0F 8E03000000     JLE      3
    00014570  EB                JMP      

    LINE     12722

    00014571  B8 01000000       MOV      EAX,1
    00014576  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12723

    00014579  B8 01000000       MOV      EAX,1
    0001457E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12724

    00014581  B8 01000000       MOV      EAX,1
    00014586  8B C8             MOV      ECX,EAX
    00014588  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001458B  48                DEC      EAX
    0001458C  BB 0E000000       MOV      EBX,14
    00014591  F7 E3             MUL      EBX
    00014593  50                PUSH     EAX
    00014594  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014597  48                DEC      EAX
    00014598  BB 02000000       MOV      EBX,2
    0001459D  F7 E3             MUL      EBX
    0001459F  5B                POP      EBX
    000145A0  03 C3             ADD      EAX,EBX
    000145A2  8B F8             MOV      EDI,EAX
    000145A4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12725

    000145A8  B8 01000000       MOV      EAX,1
    000145AD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12726

    000145B0  B8 01000000       MOV      EAX,1
    000145B5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12728

    000145B8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000145BF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000145C4  5B                POP      EBX

    LINE     12730

    000145C5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000145CC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000145D1  5B                POP      EBX

    LINE     12732

    000145D2  B8 0A000000       MOV      EAX,10
    000145D7  40                INC      EAX
    000145D8  50                PUSH     EAX
    000145D9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000145DC  5B                POP      EBX
    000145DD  3B C3             CMP      EAX,EBX
    000145DF  0F 8503000000     JNE      3
    000145E5  EB                JMP      

    LINE     12740

    000145E6  B8 01000000       MOV      EAX,1
    000145EB  8B C8             MOV      ECX,EAX
    000145ED  B8 0A000000       MOV      EAX,10
    000145F2  50                PUSH     EAX
    000145F3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000145F6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000145F9  5B                POP      EBX
    000145FA  53                PUSH     EBX
    000145FB  3B C3             CMP      EAX,EBX
    000145FD  0F 8E03000000     JLE      3
    00014603  EB                JMP      

    LINE     12742

    00014604  B8 01000000       MOV      EAX,1
    00014609  8B C8             MOV      ECX,EAX
    0001460B  B8 05000000       MOV      EAX,5
    00014610  50                PUSH     EAX
    00014611  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00014614  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014617  5B                POP      EBX
    00014618  53                PUSH     EBX
    00014619  3B C3             CMP      EAX,EBX
    0001461B  0F 8E03000000     JLE      3
    00014621  EB                JMP      

    LINE     12749

    00014622  B8 01000000       MOV      EAX,1
    00014627  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12750

    0001462D  B8 01000000       MOV      EAX,1
    00014632  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12751

    00014638  B8 01000000       MOV      EAX,1
    0001463D  8B C8             MOV      ECX,EAX
    0001463F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014642  48                DEC      EAX
    00014643  BB 0E000000       MOV      EBX,14
    00014648  F7 E3             MUL      EBX
    0001464A  50                PUSH     EAX
    0001464B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001464E  48                DEC      EAX
    0001464F  BB 02000000       MOV      EBX,2
    00014654  F7 E3             MUL      EBX
    00014656  5B                POP      EBX
    00014657  03 C3             ADD      EAX,EBX
    00014659  8B F8             MOV      EDI,EAX
    0001465B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12752

    00014662  B8 01000000       MOV      EAX,1
    00014667  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12753

    0001466D  B8 01000000       MOV      EAX,1
    00014672  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12755

    00014678  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001467F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014684  5B                POP      EBX

    LINE     12757

    00014685  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001468C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014691  5B                POP      EBX

    LINE     12759

    00014692  B8 0A000000       MOV      EAX,10
    00014697  40                INC      EAX
    00014698  50                PUSH     EAX
    00014699  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001469C  5B                POP      EBX
    0001469D  3B C3             CMP      EAX,EBX
    0001469F  0F 8503000000     JNE      3
    000146A5  EB                JMP      

    LINE     12766

    000146A6  B8 01000000       MOV      EAX,1
    000146AB  8B C8             MOV      ECX,EAX
    000146AD  B8 0A000000       MOV      EAX,10
    000146B2  50                PUSH     EAX
    000146B3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000146B6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000146B9  5B                POP      EBX
    000146BA  53                PUSH     EBX
    000146BB  3B C3             CMP      EAX,EBX
    000146BD  0F 8E03000000     JLE      3
    000146C3  EB                JMP      

    LINE     12768

    000146C4  B8 01000000       MOV      EAX,1
    000146C9  8B C8             MOV      ECX,EAX
    000146CB  B8 05000000       MOV      EAX,5
    000146D0  50                PUSH     EAX
    000146D1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000146D4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000146D7  5B                POP      EBX
    000146D8  53                PUSH     EBX
    000146D9  3B C3             CMP      EAX,EBX
    000146DB  0F 8E03000000     JLE      3
    000146E1  EB                JMP      

    LINE     12775

    000146E2  B8 01000000       MOV      EAX,1
    000146E7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12776

    000146ED  B8 01000000       MOV      EAX,1
    000146F2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12777

    000146F8  B8 01000000       MOV      EAX,1
    000146FD  8B C8             MOV      ECX,EAX
    000146FF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014702  48                DEC      EAX
    00014703  BB 0E000000       MOV      EBX,14
    00014708  F7 E3             MUL      EBX
    0001470A  50                PUSH     EAX
    0001470B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001470E  48                DEC      EAX
    0001470F  BB 02000000       MOV      EBX,2
    00014714  F7 E3             MUL      EBX
    00014716  5B                POP      EBX
    00014717  03 C3             ADD      EAX,EBX
    00014719  8B F8             MOV      EDI,EAX
    0001471B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12778

    00014722  B8 01000000       MOV      EAX,1
    00014727  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12779

    0001472D  B8 01000000       MOV      EAX,1
    00014732  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12781

    00014738  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001473F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014744  5B                POP      EBX

    LINE     12783

    00014745  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001474C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014751  5B                POP      EBX

    LINE     12785

    00014752  B8 0A000000       MOV      EAX,10
    00014757  40                INC      EAX
    00014758  50                PUSH     EAX
    00014759  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001475C  5B                POP      EBX
    0001475D  3B C3             CMP      EAX,EBX
    0001475F  0F 8503000000     JNE      3
    00014765  EB                JMP      

    LINE     12799

    00014766  56                PUSH     ESI
    00014767  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001476D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00014773  FF D1             CALL     ECX                       run_inner_proc
    00014775  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12801

    00014776  B8 01000000       MOV      EAX,1
    0001477B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12803

    0001477E  B8 01000000       MOV      EAX,1
    00014783  8B C8             MOV      ECX,EAX
    00014785  B8 0A000000       MOV      EAX,10
    0001478A  50                PUSH     EAX
    0001478B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001478E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014791  5B                POP      EBX
    00014792  53                PUSH     EBX
    00014793  3B C3             CMP      EAX,EBX
    00014795  0F 8E03000000     JLE      3
    0001479B  EB                JMP      

    LINE     12805

    0001479C  B8 01000000       MOV      EAX,1
    000147A1  8B C8             MOV      ECX,EAX
    000147A3  B8 05000000       MOV      EAX,5
    000147A8  50                PUSH     EAX
    000147A9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000147AC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000147AF  5B                POP      EBX
    000147B0  53                PUSH     EBX
    000147B1  3B C3             CMP      EAX,EBX
    000147B3  0F 8E03000000     JLE      3
    000147B9  EB                JMP      

    LINE     12812

    000147BA  B8 01000000       MOV      EAX,1
    000147BF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12813

    000147C2  B8 01000000       MOV      EAX,1
    000147C7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12814

    000147CA  B8 01000000       MOV      EAX,1
    000147CF  8B C8             MOV      ECX,EAX
    000147D1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000147D4  48                DEC      EAX
    000147D5  BB 0E000000       MOV      EBX,14
    000147DA  F7 E3             MUL      EBX
    000147DC  50                PUSH     EAX
    000147DD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000147E0  48                DEC      EAX
    000147E1  BB 02000000       MOV      EBX,2
    000147E6  F7 E3             MUL      EBX
    000147E8  5B                POP      EBX
    000147E9  03 C3             ADD      EAX,EBX
    000147EB  8B F8             MOV      EDI,EAX
    000147ED  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12815

    000147F1  B8 01000000       MOV      EAX,1
    000147F6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12816

    000147F9  B8 01000000       MOV      EAX,1
    000147FE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12818

    00014801  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014808  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001480D  5B                POP      EBX

    LINE     12820

    0001480E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014815  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001481A  5B                POP      EBX

    LINE     12822

    0001481B  B8 0A000000       MOV      EAX,10
    00014820  40                INC      EAX
    00014821  50                PUSH     EAX
    00014822  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014825  5B                POP      EBX
    00014826  3B C3             CMP      EAX,EBX
    00014828  0F 8503000000     JNE      3
    0001482E  EB                JMP      

    LINE     12829

    0001482F  B8 01000000       MOV      EAX,1
    00014834  8B C8             MOV      ECX,EAX
    00014836  B8 0A000000       MOV      EAX,10
    0001483B  50                PUSH     EAX
    0001483C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001483F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014842  5B                POP      EBX
    00014843  53                PUSH     EBX
    00014844  3B C3             CMP      EAX,EBX
    00014846  0F 8E03000000     JLE      3
    0001484C  EB                JMP      

    LINE     12831

    0001484D  B8 01000000       MOV      EAX,1
    00014852  8B C8             MOV      ECX,EAX
    00014854  B8 05000000       MOV      EAX,5
    00014859  50                PUSH     EAX
    0001485A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001485D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014860  5B                POP      EBX
    00014861  53                PUSH     EBX
    00014862  3B C3             CMP      EAX,EBX
    00014864  0F 8E03000000     JLE      3
    0001486A  EB                JMP      

    LINE     12838

    0001486B  B8 01000000       MOV      EAX,1
    00014870  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12839

    00014873  B8 01000000       MOV      EAX,1
    00014878  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12840

    0001487B  B8 01000000       MOV      EAX,1
    00014880  8B C8             MOV      ECX,EAX
    00014882  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014885  48                DEC      EAX
    00014886  BB 0E000000       MOV      EBX,14
    0001488B  F7 E3             MUL      EBX
    0001488D  50                PUSH     EAX
    0001488E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014891  48                DEC      EAX
    00014892  BB 02000000       MOV      EBX,2
    00014897  F7 E3             MUL      EBX
    00014899  5B                POP      EBX
    0001489A  03 C3             ADD      EAX,EBX
    0001489C  8B F8             MOV      EDI,EAX
    0001489E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12841

    000148A2  B8 01000000       MOV      EAX,1
    000148A7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12842

    000148AA  B8 01000000       MOV      EAX,1
    000148AF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12844

    000148B2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000148B9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000148BE  5B                POP      EBX

    LINE     12846

    000148BF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000148C6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000148CB  5B                POP      EBX

    LINE     12848

    000148CC  B8 0A000000       MOV      EAX,10
    000148D1  40                INC      EAX
    000148D2  50                PUSH     EAX
    000148D3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000148D6  5B                POP      EBX
    000148D7  3B C3             CMP      EAX,EBX
    000148D9  0F 8503000000     JNE      3
    000148DF  EB                JMP      

    LINE     12856

    000148E0  B8 01000000       MOV      EAX,1
    000148E5  8B C8             MOV      ECX,EAX
    000148E7  B8 0A000000       MOV      EAX,10
    000148EC  50                PUSH     EAX
    000148ED  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000148F0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000148F3  5B                POP      EBX
    000148F4  53                PUSH     EBX
    000148F5  3B C3             CMP      EAX,EBX
    000148F7  0F 8E03000000     JLE      3
    000148FD  EB                JMP      

    LINE     12858

    000148FE  B8 01000000       MOV      EAX,1
    00014903  8B C8             MOV      ECX,EAX
    00014905  B8 05000000       MOV      EAX,5
    0001490A  50                PUSH     EAX
    0001490B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001490E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014911  5B                POP      EBX
    00014912  53                PUSH     EBX
    00014913  3B C3             CMP      EAX,EBX
    00014915  0F 8E03000000     JLE      3
    0001491B  EB                JMP      

    LINE     12865

    0001491C  B8 01000000       MOV      EAX,1
    00014921  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12866

    00014927  B8 01000000       MOV      EAX,1
    0001492C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12867

    00014932  B8 01000000       MOV      EAX,1
    00014937  8B C8             MOV      ECX,EAX
    00014939  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001493C  48                DEC      EAX
    0001493D  BB 0E000000       MOV      EBX,14
    00014942  F7 E3             MUL      EBX
    00014944  50                PUSH     EAX
    00014945  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014948  48                DEC      EAX
    00014949  BB 02000000       MOV      EBX,2
    0001494E  F7 E3             MUL      EBX
    00014950  5B                POP      EBX
    00014951  03 C3             ADD      EAX,EBX
    00014953  8B F8             MOV      EDI,EAX
    00014955  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12868

    0001495C  B8 01000000       MOV      EAX,1
    00014961  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12869

    00014967  B8 01000000       MOV      EAX,1
    0001496C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12871

    00014972  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014979  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001497E  5B                POP      EBX

    LINE     12873

    0001497F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014986  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001498B  5B                POP      EBX

    LINE     12875

    0001498C  B8 0A000000       MOV      EAX,10
    00014991  40                INC      EAX
    00014992  50                PUSH     EAX
    00014993  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014996  5B                POP      EBX
    00014997  3B C3             CMP      EAX,EBX
    00014999  0F 8503000000     JNE      3
    0001499F  EB                JMP      

    LINE     12882

    000149A0  B8 01000000       MOV      EAX,1
    000149A5  8B C8             MOV      ECX,EAX
    000149A7  B8 0A000000       MOV      EAX,10
    000149AC  50                PUSH     EAX
    000149AD  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000149B0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000149B3  5B                POP      EBX
    000149B4  53                PUSH     EBX
    000149B5  3B C3             CMP      EAX,EBX
    000149B7  0F 8E03000000     JLE      3
    000149BD  EB                JMP      

    LINE     12884

    000149BE  B8 01000000       MOV      EAX,1
    000149C3  8B C8             MOV      ECX,EAX
    000149C5  B8 05000000       MOV      EAX,5
    000149CA  50                PUSH     EAX
    000149CB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000149CE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000149D1  5B                POP      EBX
    000149D2  53                PUSH     EBX
    000149D3  3B C3             CMP      EAX,EBX
    000149D5  0F 8E03000000     JLE      3
    000149DB  EB                JMP      

    LINE     12891

    000149DC  B8 01000000       MOV      EAX,1
    000149E1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12892

    000149E7  B8 01000000       MOV      EAX,1
    000149EC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12893

    000149F2  B8 01000000       MOV      EAX,1
    000149F7  8B C8             MOV      ECX,EAX
    000149F9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000149FC  48                DEC      EAX
    000149FD  BB 0E000000       MOV      EBX,14
    00014A02  F7 E3             MUL      EBX
    00014A04  50                PUSH     EAX
    00014A05  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014A08  48                DEC      EAX
    00014A09  BB 02000000       MOV      EBX,2
    00014A0E  F7 E3             MUL      EBX
    00014A10  5B                POP      EBX
    00014A11  03 C3             ADD      EAX,EBX
    00014A13  8B F8             MOV      EDI,EAX
    00014A15  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12894

    00014A1C  B8 01000000       MOV      EAX,1
    00014A21  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12895

    00014A27  B8 01000000       MOV      EAX,1
    00014A2C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12897

    00014A32  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00014A39  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014A3E  5B                POP      EBX

    LINE     12899

    00014A3F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00014A46  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014A4B  5B                POP      EBX

    LINE     12901

    00014A4C  B8 0A000000       MOV      EAX,10
    00014A51  40                INC      EAX
    00014A52  50                PUSH     EAX
    00014A53  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014A56  5B                POP      EBX
    00014A57  3B C3             CMP      EAX,EBX
    00014A59  0F 8503000000     JNE      3
    00014A5F  EB                JMP      

    LINE     12915

    00014A60  56                PUSH     ESI
    00014A61  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00014A67  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00014A6D  FF D1             CALL     ECX                       run_inner_proc
    00014A6F  5E                POP      ESI                       /* restore callers static pointer */

    LINE     12917

    00014A70  B8 01000000       MOV      EAX,1
    00014A75  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     12919

    00014A78  B8 01000000       MOV      EAX,1
    00014A7D  8B C8             MOV      ECX,EAX
    00014A7F  B8 0A000000       MOV      EAX,10
    00014A84  50                PUSH     EAX
    00014A85  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00014A88  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014A8B  5B                POP      EBX
    00014A8C  53                PUSH     EBX
    00014A8D  3B C3             CMP      EAX,EBX
    00014A8F  0F 8E03000000     JLE      3
    00014A95  EB                JMP      

    LINE     12921

    00014A96  B8 01000000       MOV      EAX,1
    00014A9B  8B C8             MOV      ECX,EAX
    00014A9D  B8 05000000       MOV      EAX,5
    00014AA2  50                PUSH     EAX
    00014AA3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00014AA6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014AA9  5B                POP      EBX
    00014AAA  53                PUSH     EBX
    00014AAB  3B C3             CMP      EAX,EBX
    00014AAD  0F 8E03000000     JLE      3
    00014AB3  EB                JMP      

    LINE     12928

    00014AB4  B8 01000000       MOV      EAX,1
    00014AB9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12929

    00014ABC  B8 01000000       MOV      EAX,1
    00014AC1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12930

    00014AC4  B8 01000000       MOV      EAX,1
    00014AC9  8B C8             MOV      ECX,EAX
    00014ACB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014ACE  48                DEC      EAX
    00014ACF  BB 0E000000       MOV      EBX,14
    00014AD4  F7 E3             MUL      EBX
    00014AD6  50                PUSH     EAX
    00014AD7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014ADA  48                DEC      EAX
    00014ADB  BB 02000000       MOV      EBX,2
    00014AE0  F7 E3             MUL      EBX
    00014AE2  5B                POP      EBX
    00014AE3  03 C3             ADD      EAX,EBX
    00014AE5  8B F8             MOV      EDI,EAX
    00014AE7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12931

    00014AEB  B8 01000000       MOV      EAX,1
    00014AF0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12932

    00014AF3  B8 01000000       MOV      EAX,1
    00014AF8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12934

    00014AFB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014B02  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00014B07  5B                POP      EBX

    LINE     12936

    00014B08  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014B0F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00014B14  5B                POP      EBX

    LINE     12938

    00014B15  B8 0A000000       MOV      EAX,10
    00014B1A  40                INC      EAX
    00014B1B  50                PUSH     EAX
    00014B1C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014B1F  5B                POP      EBX
    00014B20  3B C3             CMP      EAX,EBX
    00014B22  0F 8503000000     JNE      3
    00014B28  EB                JMP      

    LINE     12945

    00014B29  B8 01000000       MOV      EAX,1
    00014B2E  8B C8             MOV      ECX,EAX
    00014B30  B8 0A000000       MOV      EAX,10
    00014B35  50                PUSH     EAX
    00014B36  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00014B39  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014B3C  5B                POP      EBX
    00014B3D  53                PUSH     EBX
    00014B3E  3B C3             CMP      EAX,EBX
    00014B40  0F 8E03000000     JLE      3
    00014B46  EB                JMP      

    LINE     12947

    00014B47  B8 01000000       MOV      EAX,1
    00014B4C  8B C8             MOV      ECX,EAX
    00014B4E  B8 05000000       MOV      EAX,5
    00014B53  50                PUSH     EAX
    00014B54  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00014B57  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014B5A  5B                POP      EBX
    00014B5B  53                PUSH     EBX
    00014B5C  3B C3             CMP      EAX,EBX
    00014B5E  0F 8E03000000     JLE      3
    00014B64  EB                JMP      

    LINE     12954

    00014B65  B8 01000000       MOV      EAX,1
    00014B6A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12955

    00014B6D  B8 01000000       MOV      EAX,1
    00014B72  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12956

    00014B75  B8 01000000       MOV      EAX,1
    00014B7A  8B C8             MOV      ECX,EAX
    00014B7C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014B7F  48                DEC      EAX
    00014B80  BB 0E000000       MOV      EBX,14
    00014B85  F7 E3             MUL      EBX
    00014B87  50                PUSH     EAX
    00014B88  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014B8B  48                DEC      EAX
    00014B8C  BB 02000000       MOV      EBX,2
    00014B91  F7 E3             MUL      EBX
    00014B93  5B                POP      EBX
    00014B94  03 C3             ADD      EAX,EBX
    00014B96  8B F8             MOV      EDI,EAX
    00014B98  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     12957

    00014B9C  B8 01000000       MOV      EAX,1
    00014BA1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12958

    00014BA4  B8 01000000       MOV      EAX,1
    00014BA9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     12960

    00014BAC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00014BB3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00014BB8  5B                POP      EBX

    LINE     12962

    00014BB9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00014BC0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00014BC5  5B                POP      EBX

    LINE     12964

    00014BC6  B8 0A000000       MOV      EAX,10
    00014BCB  40                INC      EAX
    00014BCC  50                PUSH     EAX
    00014BCD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014BD0  5B                POP      EBX
    00014BD1  3B C3             CMP      EAX,EBX
    00014BD3  0F 8503000000     JNE      3
    00014BD9  EB                JMP      

    LINE     12972

    00014BDA  B8 01000000       MOV      EAX,1
    00014BDF  8B C8             MOV      ECX,EAX
    00014BE1  B8 0A000000       MOV      EAX,10
    00014BE6  50                PUSH     EAX
    00014BE7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00014BEA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014BED  5B                POP      EBX
    00014BEE  53                PUSH     EBX
    00014BEF  3B C3             CMP      EAX,EBX
    00014BF1  0F 8E03000000     JLE      3
    00014BF7  EB                JMP      

    LINE     12974

    00014BF8  B8 01000000       MOV      EAX,1
    00014BFD  8B C8             MOV      ECX,EAX
    00014BFF  B8 05000000       MOV      EAX,5
    00014C04  50                PUSH     EAX
    00014C05  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00014C08  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014C0B  5B                POP      EBX
    00014C0C  53                PUSH     EBX
    00014C0D  3B C3             CMP      EAX,EBX
    00014C0F  0F 8E03000000     JLE      3
    00014C15  EB                JMP      

    LINE     12981

    00014C16  B8 01000000       MOV      EAX,1
    00014C1B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12982

    00014C21  B8 01000000       MOV      EAX,1
    00014C26  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12983

    00014C2C  B8 01000000       MOV      EAX,1
    00014C31  8B C8             MOV      ECX,EAX
    00014C33  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014C36  48                DEC      EAX
    00014C37  BB 0E000000       MOV      EBX,14
    00014C3C  F7 E3             MUL      EBX
    00014C3E  50                PUSH     EAX
    00014C3F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014C42  48                DEC      EAX
    00014C43  BB 02000000       MOV      EBX,2
    00014C48  F7 E3             MUL      EBX
    00014C4A  5B                POP      EBX
    00014C4B  03 C3             ADD      EAX,EBX
    00014C4D  8B F8             MOV      EDI,EAX
    00014C4F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     12984

    00014C56  B8 01000000       MOV      EAX,1
    00014C5B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12985

    00014C61  B8 01000000       MOV      EAX,1
    00014C66  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     12987

    00014C6C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014C73  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014C78  5B                POP      EBX

    LINE     12989

    00014C79  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014C80  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014C85  5B                POP      EBX

    LINE     12991

    00014C86  B8 0A000000       MOV      EAX,10
    00014C8B  40                INC      EAX
    00014C8C  50                PUSH     EAX
    00014C8D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014C90  5B                POP      EBX
    00014C91  3B C3             CMP      EAX,EBX
    00014C93  0F 8503000000     JNE      3
    00014C99  EB                JMP      

    LINE     12998

    00014C9A  B8 01000000       MOV      EAX,1
    00014C9F  8B C8             MOV      ECX,EAX
    00014CA1  B8 0A000000       MOV      EAX,10
    00014CA6  50                PUSH     EAX
    00014CA7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00014CAA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014CAD  5B                POP      EBX
    00014CAE  53                PUSH     EBX
    00014CAF  3B C3             CMP      EAX,EBX
    00014CB1  0F 8E03000000     JLE      3
    00014CB7  EB                JMP      

    LINE     13000

    00014CB8  B8 01000000       MOV      EAX,1
    00014CBD  8B C8             MOV      ECX,EAX
    00014CBF  B8 05000000       MOV      EAX,5
    00014CC4  50                PUSH     EAX
    00014CC5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00014CC8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014CCB  5B                POP      EBX
    00014CCC  53                PUSH     EBX
    00014CCD  3B C3             CMP      EAX,EBX
    00014CCF  0F 8E03000000     JLE      3
    00014CD5  EB                JMP      

    LINE     13007

    00014CD6  B8 01000000       MOV      EAX,1
    00014CDB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13008

    00014CE1  B8 01000000       MOV      EAX,1
    00014CE6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13009

    00014CEC  B8 01000000       MOV      EAX,1
    00014CF1  8B C8             MOV      ECX,EAX
    00014CF3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014CF6  48                DEC      EAX
    00014CF7  BB 0E000000       MOV      EBX,14
    00014CFC  F7 E3             MUL      EBX
    00014CFE  50                PUSH     EAX
    00014CFF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014D02  48                DEC      EAX
    00014D03  BB 02000000       MOV      EBX,2
    00014D08  F7 E3             MUL      EBX
    00014D0A  5B                POP      EBX
    00014D0B  03 C3             ADD      EAX,EBX
    00014D0D  8B F8             MOV      EDI,EAX
    00014D0F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13010

    00014D16  B8 01000000       MOV      EAX,1
    00014D1B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13011

    00014D21  B8 01000000       MOV      EAX,1
    00014D26  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13013

    00014D2C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00014D33  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014D38  5B                POP      EBX

    LINE     13015

    00014D39  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00014D40  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014D45  5B                POP      EBX

    LINE     13017

    00014D46  B8 0A000000       MOV      EAX,10
    00014D4B  40                INC      EAX
    00014D4C  50                PUSH     EAX
    00014D4D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014D50  5B                POP      EBX
    00014D51  3B C3             CMP      EAX,EBX
    00014D53  0F 8503000000     JNE      3
    00014D59  EB                JMP      

    LINE     13031

    00014D5A  56                PUSH     ESI
    00014D5B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00014D61  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00014D67  FF D1             CALL     ECX                       run_inner_proc
    00014D69  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13033

    00014D6A  B8 01000000       MOV      EAX,1
    00014D6F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13035

    00014D72  B8 01000000       MOV      EAX,1
    00014D77  8B C8             MOV      ECX,EAX
    00014D79  B8 0A000000       MOV      EAX,10
    00014D7E  50                PUSH     EAX
    00014D7F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00014D82  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014D85  5B                POP      EBX
    00014D86  53                PUSH     EBX
    00014D87  3B C3             CMP      EAX,EBX
    00014D89  0F 8E03000000     JLE      3
    00014D8F  EB                JMP      

    LINE     13037

    00014D90  B8 01000000       MOV      EAX,1
    00014D95  8B C8             MOV      ECX,EAX
    00014D97  B8 05000000       MOV      EAX,5
    00014D9C  50                PUSH     EAX
    00014D9D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00014DA0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014DA3  5B                POP      EBX
    00014DA4  53                PUSH     EBX
    00014DA5  3B C3             CMP      EAX,EBX
    00014DA7  0F 8E03000000     JLE      3
    00014DAD  EB                JMP      

    LINE     13044

    00014DAE  B8 01000000       MOV      EAX,1
    00014DB3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13045

    00014DB6  B8 01000000       MOV      EAX,1
    00014DBB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13046

    00014DBE  B8 01000000       MOV      EAX,1
    00014DC3  8B C8             MOV      ECX,EAX
    00014DC5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014DC8  48                DEC      EAX
    00014DC9  BB 0E000000       MOV      EBX,14
    00014DCE  F7 E3             MUL      EBX
    00014DD0  50                PUSH     EAX
    00014DD1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014DD4  48                DEC      EAX
    00014DD5  BB 02000000       MOV      EBX,2
    00014DDA  F7 E3             MUL      EBX
    00014DDC  5B                POP      EBX
    00014DDD  03 C3             ADD      EAX,EBX
    00014DDF  8B F8             MOV      EDI,EAX
    00014DE1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13047

    00014DE5  B8 01000000       MOV      EAX,1
    00014DEA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13048

    00014DED  B8 01000000       MOV      EAX,1
    00014DF2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13050

    00014DF5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014DFC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00014E01  5B                POP      EBX

    LINE     13052

    00014E02  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014E09  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00014E0E  5B                POP      EBX

    LINE     13054

    00014E0F  B8 0A000000       MOV      EAX,10
    00014E14  40                INC      EAX
    00014E15  50                PUSH     EAX
    00014E16  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014E19  5B                POP      EBX
    00014E1A  3B C3             CMP      EAX,EBX
    00014E1C  0F 8503000000     JNE      3
    00014E22  EB                JMP      

    LINE     13061

    00014E23  B8 01000000       MOV      EAX,1
    00014E28  8B C8             MOV      ECX,EAX
    00014E2A  B8 0A000000       MOV      EAX,10
    00014E2F  50                PUSH     EAX
    00014E30  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00014E33  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014E36  5B                POP      EBX
    00014E37  53                PUSH     EBX
    00014E38  3B C3             CMP      EAX,EBX
    00014E3A  0F 8E03000000     JLE      3
    00014E40  EB                JMP      

    LINE     13063

    00014E41  B8 01000000       MOV      EAX,1
    00014E46  8B C8             MOV      ECX,EAX
    00014E48  B8 05000000       MOV      EAX,5
    00014E4D  50                PUSH     EAX
    00014E4E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00014E51  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014E54  5B                POP      EBX
    00014E55  53                PUSH     EBX
    00014E56  3B C3             CMP      EAX,EBX
    00014E58  0F 8E03000000     JLE      3
    00014E5E  EB                JMP      

    LINE     13070

    00014E5F  B8 01000000       MOV      EAX,1
    00014E64  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13071

    00014E67  B8 01000000       MOV      EAX,1
    00014E6C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13072

    00014E6F  B8 01000000       MOV      EAX,1
    00014E74  8B C8             MOV      ECX,EAX
    00014E76  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014E79  48                DEC      EAX
    00014E7A  BB 0E000000       MOV      EBX,14
    00014E7F  F7 E3             MUL      EBX
    00014E81  50                PUSH     EAX
    00014E82  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014E85  48                DEC      EAX
    00014E86  BB 02000000       MOV      EBX,2
    00014E8B  F7 E3             MUL      EBX
    00014E8D  5B                POP      EBX
    00014E8E  03 C3             ADD      EAX,EBX
    00014E90  8B F8             MOV      EDI,EAX
    00014E92  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13073

    00014E96  B8 01000000       MOV      EAX,1
    00014E9B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13074

    00014E9E  B8 01000000       MOV      EAX,1
    00014EA3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13076

    00014EA6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00014EAD  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00014EB2  5B                POP      EBX

    LINE     13078

    00014EB3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00014EBA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00014EBF  5B                POP      EBX

    LINE     13080

    00014EC0  B8 0A000000       MOV      EAX,10
    00014EC5  40                INC      EAX
    00014EC6  50                PUSH     EAX
    00014EC7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014ECA  5B                POP      EBX
    00014ECB  3B C3             CMP      EAX,EBX
    00014ECD  0F 8503000000     JNE      3
    00014ED3  EB                JMP      

    LINE     13088

    00014ED4  B8 01000000       MOV      EAX,1
    00014ED9  8B C8             MOV      ECX,EAX
    00014EDB  B8 0A000000       MOV      EAX,10
    00014EE0  50                PUSH     EAX
    00014EE1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00014EE4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014EE7  5B                POP      EBX
    00014EE8  53                PUSH     EBX
    00014EE9  3B C3             CMP      EAX,EBX
    00014EEB  0F 8E03000000     JLE      3
    00014EF1  EB                JMP      

    LINE     13090

    00014EF2  B8 01000000       MOV      EAX,1
    00014EF7  8B C8             MOV      ECX,EAX
    00014EF9  B8 05000000       MOV      EAX,5
    00014EFE  50                PUSH     EAX
    00014EFF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00014F02  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014F05  5B                POP      EBX
    00014F06  53                PUSH     EBX
    00014F07  3B C3             CMP      EAX,EBX
    00014F09  0F 8E03000000     JLE      3
    00014F0F  EB                JMP      

    LINE     13097

    00014F10  B8 01000000       MOV      EAX,1
    00014F15  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13098

    00014F1B  B8 01000000       MOV      EAX,1
    00014F20  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13099

    00014F26  B8 01000000       MOV      EAX,1
    00014F2B  8B C8             MOV      ECX,EAX
    00014F2D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014F30  48                DEC      EAX
    00014F31  BB 0E000000       MOV      EBX,14
    00014F36  F7 E3             MUL      EBX
    00014F38  50                PUSH     EAX
    00014F39  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00014F3C  48                DEC      EAX
    00014F3D  BB 02000000       MOV      EBX,2
    00014F42  F7 E3             MUL      EBX
    00014F44  5B                POP      EBX
    00014F45  03 C3             ADD      EAX,EBX
    00014F47  8B F8             MOV      EDI,EAX
    00014F49  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13100

    00014F50  B8 01000000       MOV      EAX,1
    00014F55  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13101

    00014F5B  B8 01000000       MOV      EAX,1
    00014F60  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13103

    00014F66  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00014F6D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00014F72  5B                POP      EBX

    LINE     13105

    00014F73  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00014F7A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00014F7F  5B                POP      EBX

    LINE     13107

    00014F80  B8 0A000000       MOV      EAX,10
    00014F85  40                INC      EAX
    00014F86  50                PUSH     EAX
    00014F87  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00014F8A  5B                POP      EBX
    00014F8B  3B C3             CMP      EAX,EBX
    00014F8D  0F 8503000000     JNE      3
    00014F93  EB                JMP      

    LINE     13114

    00014F94  B8 01000000       MOV      EAX,1
    00014F99  8B C8             MOV      ECX,EAX
    00014F9B  B8 0A000000       MOV      EAX,10
    00014FA0  50                PUSH     EAX
    00014FA1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00014FA4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014FA7  5B                POP      EBX
    00014FA8  53                PUSH     EBX
    00014FA9  3B C3             CMP      EAX,EBX
    00014FAB  0F 8E03000000     JLE      3
    00014FB1  EB                JMP      

    LINE     13116

    00014FB2  B8 01000000       MOV      EAX,1
    00014FB7  8B C8             MOV      ECX,EAX
    00014FB9  B8 05000000       MOV      EAX,5
    00014FBE  50                PUSH     EAX
    00014FBF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00014FC2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014FC5  5B                POP      EBX
    00014FC6  53                PUSH     EBX
    00014FC7  3B C3             CMP      EAX,EBX
    00014FC9  0F 8E03000000     JLE      3
    00014FCF  EB                JMP      

    LINE     13123

    00014FD0  B8 01000000       MOV      EAX,1
    00014FD5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13124

    00014FDB  B8 01000000       MOV      EAX,1
    00014FE0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13125

    00014FE6  B8 01000000       MOV      EAX,1
    00014FEB  8B C8             MOV      ECX,EAX
    00014FED  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00014FF0  48                DEC      EAX
    00014FF1  BB 0E000000       MOV      EBX,14
    00014FF6  F7 E3             MUL      EBX
    00014FF8  50                PUSH     EAX
    00014FF9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00014FFC  48                DEC      EAX
    00014FFD  BB 02000000       MOV      EBX,2
    00015002  F7 E3             MUL      EBX
    00015004  5B                POP      EBX
    00015005  03 C3             ADD      EAX,EBX
    00015007  8B F8             MOV      EDI,EAX
    00015009  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13126

    00015010  B8 01000000       MOV      EAX,1
    00015015  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13127

    0001501B  B8 01000000       MOV      EAX,1
    00015020  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13129

    00015026  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001502D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015032  5B                POP      EBX

    LINE     13131

    00015033  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001503A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001503F  5B                POP      EBX

    LINE     13133

    00015040  B8 0A000000       MOV      EAX,10
    00015045  40                INC      EAX
    00015046  50                PUSH     EAX
    00015047  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001504A  5B                POP      EBX
    0001504B  3B C3             CMP      EAX,EBX
    0001504D  0F 8503000000     JNE      3
    00015053  EB                JMP      

    LINE     13147

    00015054  56                PUSH     ESI
    00015055  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001505B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00015061  FF D1             CALL     ECX                       run_inner_proc
    00015063  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13149

    00015064  B8 01000000       MOV      EAX,1
    00015069  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13151

    0001506C  B8 01000000       MOV      EAX,1
    00015071  8B C8             MOV      ECX,EAX
    00015073  B8 0A000000       MOV      EAX,10
    00015078  50                PUSH     EAX
    00015079  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001507C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001507F  5B                POP      EBX
    00015080  53                PUSH     EBX
    00015081  3B C3             CMP      EAX,EBX
    00015083  0F 8E03000000     JLE      3
    00015089  EB                JMP      

    LINE     13153

    0001508A  B8 01000000       MOV      EAX,1
    0001508F  8B C8             MOV      ECX,EAX
    00015091  B8 05000000       MOV      EAX,5
    00015096  50                PUSH     EAX
    00015097  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001509A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001509D  5B                POP      EBX
    0001509E  53                PUSH     EBX
    0001509F  3B C3             CMP      EAX,EBX
    000150A1  0F 8E03000000     JLE      3
    000150A7  EB                JMP      

    LINE     13160

    000150A8  B8 01000000       MOV      EAX,1
    000150AD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13161

    000150B0  B8 01000000       MOV      EAX,1
    000150B5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13162

    000150B8  B8 01000000       MOV      EAX,1
    000150BD  8B C8             MOV      ECX,EAX
    000150BF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000150C2  48                DEC      EAX
    000150C3  BB 0E000000       MOV      EBX,14
    000150C8  F7 E3             MUL      EBX
    000150CA  50                PUSH     EAX
    000150CB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000150CE  48                DEC      EAX
    000150CF  BB 02000000       MOV      EBX,2
    000150D4  F7 E3             MUL      EBX
    000150D6  5B                POP      EBX
    000150D7  03 C3             ADD      EAX,EBX
    000150D9  8B F8             MOV      EDI,EAX
    000150DB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13163

    000150DF  B8 01000000       MOV      EAX,1
    000150E4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13164

    000150E7  B8 01000000       MOV      EAX,1
    000150EC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13166

    000150EF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000150F6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000150FB  5B                POP      EBX

    LINE     13168

    000150FC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00015103  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00015108  5B                POP      EBX

    LINE     13170

    00015109  B8 0A000000       MOV      EAX,10
    0001510E  40                INC      EAX
    0001510F  50                PUSH     EAX
    00015110  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015113  5B                POP      EBX
    00015114  3B C3             CMP      EAX,EBX
    00015116  0F 8503000000     JNE      3
    0001511C  EB                JMP      

    LINE     13177

    0001511D  B8 01000000       MOV      EAX,1
    00015122  8B C8             MOV      ECX,EAX
    00015124  B8 0A000000       MOV      EAX,10
    00015129  50                PUSH     EAX
    0001512A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001512D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015130  5B                POP      EBX
    00015131  53                PUSH     EBX
    00015132  3B C3             CMP      EAX,EBX
    00015134  0F 8E03000000     JLE      3
    0001513A  EB                JMP      

    LINE     13179

    0001513B  B8 01000000       MOV      EAX,1
    00015140  8B C8             MOV      ECX,EAX
    00015142  B8 05000000       MOV      EAX,5
    00015147  50                PUSH     EAX
    00015148  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001514B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001514E  5B                POP      EBX
    0001514F  53                PUSH     EBX
    00015150  3B C3             CMP      EAX,EBX
    00015152  0F 8E03000000     JLE      3
    00015158  EB                JMP      

    LINE     13186

    00015159  B8 01000000       MOV      EAX,1
    0001515E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13187

    00015161  B8 01000000       MOV      EAX,1
    00015166  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13188

    00015169  B8 01000000       MOV      EAX,1
    0001516E  8B C8             MOV      ECX,EAX
    00015170  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015173  48                DEC      EAX
    00015174  BB 0E000000       MOV      EBX,14
    00015179  F7 E3             MUL      EBX
    0001517B  50                PUSH     EAX
    0001517C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001517F  48                DEC      EAX
    00015180  BB 02000000       MOV      EBX,2
    00015185  F7 E3             MUL      EBX
    00015187  5B                POP      EBX
    00015188  03 C3             ADD      EAX,EBX
    0001518A  8B F8             MOV      EDI,EAX
    0001518C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13189

    00015190  B8 01000000       MOV      EAX,1
    00015195  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13190

    00015198  B8 01000000       MOV      EAX,1
    0001519D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13192

    000151A0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000151A7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000151AC  5B                POP      EBX

    LINE     13194

    000151AD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000151B4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000151B9  5B                POP      EBX

    LINE     13196

    000151BA  B8 0A000000       MOV      EAX,10
    000151BF  40                INC      EAX
    000151C0  50                PUSH     EAX
    000151C1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000151C4  5B                POP      EBX
    000151C5  3B C3             CMP      EAX,EBX
    000151C7  0F 8503000000     JNE      3
    000151CD  EB                JMP      

    LINE     13204

    000151CE  B8 01000000       MOV      EAX,1
    000151D3  8B C8             MOV      ECX,EAX
    000151D5  B8 0A000000       MOV      EAX,10
    000151DA  50                PUSH     EAX
    000151DB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000151DE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000151E1  5B                POP      EBX
    000151E2  53                PUSH     EBX
    000151E3  3B C3             CMP      EAX,EBX
    000151E5  0F 8E03000000     JLE      3
    000151EB  EB                JMP      

    LINE     13206

    000151EC  B8 01000000       MOV      EAX,1
    000151F1  8B C8             MOV      ECX,EAX
    000151F3  B8 05000000       MOV      EAX,5
    000151F8  50                PUSH     EAX
    000151F9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000151FC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000151FF  5B                POP      EBX
    00015200  53                PUSH     EBX
    00015201  3B C3             CMP      EAX,EBX
    00015203  0F 8E03000000     JLE      3
    00015209  EB                JMP      

    LINE     13213

    0001520A  B8 01000000       MOV      EAX,1
    0001520F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13214

    00015215  B8 01000000       MOV      EAX,1
    0001521A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13215

    00015220  B8 01000000       MOV      EAX,1
    00015225  8B C8             MOV      ECX,EAX
    00015227  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001522A  48                DEC      EAX
    0001522B  BB 0E000000       MOV      EBX,14
    00015230  F7 E3             MUL      EBX
    00015232  50                PUSH     EAX
    00015233  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015236  48                DEC      EAX
    00015237  BB 02000000       MOV      EBX,2
    0001523C  F7 E3             MUL      EBX
    0001523E  5B                POP      EBX
    0001523F  03 C3             ADD      EAX,EBX
    00015241  8B F8             MOV      EDI,EAX
    00015243  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13216

    0001524A  B8 01000000       MOV      EAX,1
    0001524F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13217

    00015255  B8 01000000       MOV      EAX,1
    0001525A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13219

    00015260  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00015267  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001526C  5B                POP      EBX

    LINE     13221

    0001526D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00015274  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015279  5B                POP      EBX

    LINE     13223

    0001527A  B8 0A000000       MOV      EAX,10
    0001527F  40                INC      EAX
    00015280  50                PUSH     EAX
    00015281  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015284  5B                POP      EBX
    00015285  3B C3             CMP      EAX,EBX
    00015287  0F 8503000000     JNE      3
    0001528D  EB                JMP      

    LINE     13230

    0001528E  B8 01000000       MOV      EAX,1
    00015293  8B C8             MOV      ECX,EAX
    00015295  B8 0A000000       MOV      EAX,10
    0001529A  50                PUSH     EAX
    0001529B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001529E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000152A1  5B                POP      EBX
    000152A2  53                PUSH     EBX
    000152A3  3B C3             CMP      EAX,EBX
    000152A5  0F 8E03000000     JLE      3
    000152AB  EB                JMP      

    LINE     13232

    000152AC  B8 01000000       MOV      EAX,1
    000152B1  8B C8             MOV      ECX,EAX
    000152B3  B8 05000000       MOV      EAX,5
    000152B8  50                PUSH     EAX
    000152B9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000152BC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000152BF  5B                POP      EBX
    000152C0  53                PUSH     EBX
    000152C1  3B C3             CMP      EAX,EBX
    000152C3  0F 8E03000000     JLE      3
    000152C9  EB                JMP      

    LINE     13239

    000152CA  B8 01000000       MOV      EAX,1
    000152CF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13240

    000152D5  B8 01000000       MOV      EAX,1
    000152DA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13241

    000152E0  B8 01000000       MOV      EAX,1
    000152E5  8B C8             MOV      ECX,EAX
    000152E7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000152EA  48                DEC      EAX
    000152EB  BB 0E000000       MOV      EBX,14
    000152F0  F7 E3             MUL      EBX
    000152F2  50                PUSH     EAX
    000152F3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000152F6  48                DEC      EAX
    000152F7  BB 02000000       MOV      EBX,2
    000152FC  F7 E3             MUL      EBX
    000152FE  5B                POP      EBX
    000152FF  03 C3             ADD      EAX,EBX
    00015301  8B F8             MOV      EDI,EAX
    00015303  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13242

    0001530A  B8 01000000       MOV      EAX,1
    0001530F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13243

    00015315  B8 01000000       MOV      EAX,1
    0001531A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13245

    00015320  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00015327  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001532C  5B                POP      EBX

    LINE     13247

    0001532D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00015334  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015339  5B                POP      EBX

    LINE     13249

    0001533A  B8 0A000000       MOV      EAX,10
    0001533F  40                INC      EAX
    00015340  50                PUSH     EAX
    00015341  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015344  5B                POP      EBX
    00015345  3B C3             CMP      EAX,EBX
    00015347  0F 8503000000     JNE      3
    0001534D  EB                JMP      

    LINE     13263

    0001534E  56                PUSH     ESI
    0001534F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00015355  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001535B  FF D1             CALL     ECX                       run_inner_proc
    0001535D  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13265

    0001535E  B8 01000000       MOV      EAX,1
    00015363  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13267

    00015366  B8 01000000       MOV      EAX,1
    0001536B  8B C8             MOV      ECX,EAX
    0001536D  B8 0A000000       MOV      EAX,10
    00015372  50                PUSH     EAX
    00015373  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00015376  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015379  5B                POP      EBX
    0001537A  53                PUSH     EBX
    0001537B  3B C3             CMP      EAX,EBX
    0001537D  0F 8E03000000     JLE      3
    00015383  EB                JMP      

    LINE     13269

    00015384  B8 01000000       MOV      EAX,1
    00015389  8B C8             MOV      ECX,EAX
    0001538B  B8 05000000       MOV      EAX,5
    00015390  50                PUSH     EAX
    00015391  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00015394  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015397  5B                POP      EBX
    00015398  53                PUSH     EBX
    00015399  3B C3             CMP      EAX,EBX
    0001539B  0F 8E03000000     JLE      3
    000153A1  EB                JMP      

    LINE     13276

    000153A2  B8 01000000       MOV      EAX,1
    000153A7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13277

    000153AA  B8 01000000       MOV      EAX,1
    000153AF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13278

    000153B2  B8 01000000       MOV      EAX,1
    000153B7  8B C8             MOV      ECX,EAX
    000153B9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000153BC  48                DEC      EAX
    000153BD  BB 0E000000       MOV      EBX,14
    000153C2  F7 E3             MUL      EBX
    000153C4  50                PUSH     EAX
    000153C5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000153C8  48                DEC      EAX
    000153C9  BB 02000000       MOV      EBX,2
    000153CE  F7 E3             MUL      EBX
    000153D0  5B                POP      EBX
    000153D1  03 C3             ADD      EAX,EBX
    000153D3  8B F8             MOV      EDI,EAX
    000153D5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13279

    000153D9  B8 01000000       MOV      EAX,1
    000153DE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13280

    000153E1  B8 01000000       MOV      EAX,1
    000153E6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13282

    000153E9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000153F0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000153F5  5B                POP      EBX

    LINE     13284

    000153F6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000153FD  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00015402  5B                POP      EBX

    LINE     13286

    00015403  B8 0A000000       MOV      EAX,10
    00015408  40                INC      EAX
    00015409  50                PUSH     EAX
    0001540A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001540D  5B                POP      EBX
    0001540E  3B C3             CMP      EAX,EBX
    00015410  0F 8503000000     JNE      3
    00015416  EB                JMP      

    LINE     13293

    00015417  B8 01000000       MOV      EAX,1
    0001541C  8B C8             MOV      ECX,EAX
    0001541E  B8 0A000000       MOV      EAX,10
    00015423  50                PUSH     EAX
    00015424  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015427  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001542A  5B                POP      EBX
    0001542B  53                PUSH     EBX
    0001542C  3B C3             CMP      EAX,EBX
    0001542E  0F 8E03000000     JLE      3
    00015434  EB                JMP      

    LINE     13295

    00015435  B8 01000000       MOV      EAX,1
    0001543A  8B C8             MOV      ECX,EAX
    0001543C  B8 05000000       MOV      EAX,5
    00015441  50                PUSH     EAX
    00015442  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00015445  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015448  5B                POP      EBX
    00015449  53                PUSH     EBX
    0001544A  3B C3             CMP      EAX,EBX
    0001544C  0F 8E03000000     JLE      3
    00015452  EB                JMP      

    LINE     13302

    00015453  B8 01000000       MOV      EAX,1
    00015458  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13303

    0001545B  B8 01000000       MOV      EAX,1
    00015460  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13304

    00015463  B8 01000000       MOV      EAX,1
    00015468  8B C8             MOV      ECX,EAX
    0001546A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001546D  48                DEC      EAX
    0001546E  BB 0E000000       MOV      EBX,14
    00015473  F7 E3             MUL      EBX
    00015475  50                PUSH     EAX
    00015476  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015479  48                DEC      EAX
    0001547A  BB 02000000       MOV      EBX,2
    0001547F  F7 E3             MUL      EBX
    00015481  5B                POP      EBX
    00015482  03 C3             ADD      EAX,EBX
    00015484  8B F8             MOV      EDI,EAX
    00015486  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13305

    0001548A  B8 01000000       MOV      EAX,1
    0001548F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13306

    00015492  B8 01000000       MOV      EAX,1
    00015497  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13308

    0001549A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000154A1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000154A6  5B                POP      EBX

    LINE     13310

    000154A7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000154AE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000154B3  5B                POP      EBX

    LINE     13312

    000154B4  B8 0A000000       MOV      EAX,10
    000154B9  40                INC      EAX
    000154BA  50                PUSH     EAX
    000154BB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000154BE  5B                POP      EBX
    000154BF  3B C3             CMP      EAX,EBX
    000154C1  0F 8503000000     JNE      3
    000154C7  EB                JMP      

    LINE     13320

    000154C8  B8 01000000       MOV      EAX,1
    000154CD  8B C8             MOV      ECX,EAX
    000154CF  B8 0A000000       MOV      EAX,10
    000154D4  50                PUSH     EAX
    000154D5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000154D8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000154DB  5B                POP      EBX
    000154DC  53                PUSH     EBX
    000154DD  3B C3             CMP      EAX,EBX
    000154DF  0F 8E03000000     JLE      3
    000154E5  EB                JMP      

    LINE     13322

    000154E6  B8 01000000       MOV      EAX,1
    000154EB  8B C8             MOV      ECX,EAX
    000154ED  B8 05000000       MOV      EAX,5
    000154F2  50                PUSH     EAX
    000154F3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000154F6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000154F9  5B                POP      EBX
    000154FA  53                PUSH     EBX
    000154FB  3B C3             CMP      EAX,EBX
    000154FD  0F 8E03000000     JLE      3
    00015503  EB                JMP      

    LINE     13329

    00015504  B8 01000000       MOV      EAX,1
    00015509  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13330

    0001550F  B8 01000000       MOV      EAX,1
    00015514  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13331

    0001551A  B8 01000000       MOV      EAX,1
    0001551F  8B C8             MOV      ECX,EAX
    00015521  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015524  48                DEC      EAX
    00015525  BB 0E000000       MOV      EBX,14
    0001552A  F7 E3             MUL      EBX
    0001552C  50                PUSH     EAX
    0001552D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015530  48                DEC      EAX
    00015531  BB 02000000       MOV      EBX,2
    00015536  F7 E3             MUL      EBX
    00015538  5B                POP      EBX
    00015539  03 C3             ADD      EAX,EBX
    0001553B  8B F8             MOV      EDI,EAX
    0001553D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13332

    00015544  B8 01000000       MOV      EAX,1
    00015549  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13333

    0001554F  B8 01000000       MOV      EAX,1
    00015554  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13335

    0001555A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00015561  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015566  5B                POP      EBX

    LINE     13337

    00015567  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001556E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015573  5B                POP      EBX

    LINE     13339

    00015574  B8 0A000000       MOV      EAX,10
    00015579  40                INC      EAX
    0001557A  50                PUSH     EAX
    0001557B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001557E  5B                POP      EBX
    0001557F  3B C3             CMP      EAX,EBX
    00015581  0F 8503000000     JNE      3
    00015587  EB                JMP      

    LINE     13346

    00015588  B8 01000000       MOV      EAX,1
    0001558D  8B C8             MOV      ECX,EAX
    0001558F  B8 0A000000       MOV      EAX,10
    00015594  50                PUSH     EAX
    00015595  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015598  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001559B  5B                POP      EBX
    0001559C  53                PUSH     EBX
    0001559D  3B C3             CMP      EAX,EBX
    0001559F  0F 8E03000000     JLE      3
    000155A5  EB                JMP      

    LINE     13348

    000155A6  B8 01000000       MOV      EAX,1
    000155AB  8B C8             MOV      ECX,EAX
    000155AD  B8 05000000       MOV      EAX,5
    000155B2  50                PUSH     EAX
    000155B3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000155B6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000155B9  5B                POP      EBX
    000155BA  53                PUSH     EBX
    000155BB  3B C3             CMP      EAX,EBX
    000155BD  0F 8E03000000     JLE      3
    000155C3  EB                JMP      

    LINE     13355

    000155C4  B8 01000000       MOV      EAX,1
    000155C9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13356

    000155CF  B8 01000000       MOV      EAX,1
    000155D4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13357

    000155DA  B8 01000000       MOV      EAX,1
    000155DF  8B C8             MOV      ECX,EAX
    000155E1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000155E4  48                DEC      EAX
    000155E5  BB 0E000000       MOV      EBX,14
    000155EA  F7 E3             MUL      EBX
    000155EC  50                PUSH     EAX
    000155ED  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000155F0  48                DEC      EAX
    000155F1  BB 02000000       MOV      EBX,2
    000155F6  F7 E3             MUL      EBX
    000155F8  5B                POP      EBX
    000155F9  03 C3             ADD      EAX,EBX
    000155FB  8B F8             MOV      EDI,EAX
    000155FD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13358

    00015604  B8 01000000       MOV      EAX,1
    00015609  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13359

    0001560F  B8 01000000       MOV      EAX,1
    00015614  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13361

    0001561A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00015621  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015626  5B                POP      EBX

    LINE     13363

    00015627  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001562E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015633  5B                POP      EBX

    LINE     13365

    00015634  B8 0A000000       MOV      EAX,10
    00015639  40                INC      EAX
    0001563A  50                PUSH     EAX
    0001563B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001563E  5B                POP      EBX
    0001563F  3B C3             CMP      EAX,EBX
    00015641  0F 8503000000     JNE      3
    00015647  EB                JMP      

    LINE     13379

    00015648  56                PUSH     ESI
    00015649  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001564F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00015655  FF D1             CALL     ECX                       run_inner_proc
    00015657  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13381

    00015658  B8 01000000       MOV      EAX,1
    0001565D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13383

    00015660  B8 01000000       MOV      EAX,1
    00015665  8B C8             MOV      ECX,EAX
    00015667  B8 0A000000       MOV      EAX,10
    0001566C  50                PUSH     EAX
    0001566D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00015670  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015673  5B                POP      EBX
    00015674  53                PUSH     EBX
    00015675  3B C3             CMP      EAX,EBX
    00015677  0F 8E03000000     JLE      3
    0001567D  EB                JMP      

    LINE     13385

    0001567E  B8 01000000       MOV      EAX,1
    00015683  8B C8             MOV      ECX,EAX
    00015685  B8 05000000       MOV      EAX,5
    0001568A  50                PUSH     EAX
    0001568B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001568E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015691  5B                POP      EBX
    00015692  53                PUSH     EBX
    00015693  3B C3             CMP      EAX,EBX
    00015695  0F 8E03000000     JLE      3
    0001569B  EB                JMP      

    LINE     13392

    0001569C  B8 01000000       MOV      EAX,1
    000156A1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13393

    000156A4  B8 01000000       MOV      EAX,1
    000156A9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13394

    000156AC  B8 01000000       MOV      EAX,1
    000156B1  8B C8             MOV      ECX,EAX
    000156B3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000156B6  48                DEC      EAX
    000156B7  BB 0E000000       MOV      EBX,14
    000156BC  F7 E3             MUL      EBX
    000156BE  50                PUSH     EAX
    000156BF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000156C2  48                DEC      EAX
    000156C3  BB 02000000       MOV      EBX,2
    000156C8  F7 E3             MUL      EBX
    000156CA  5B                POP      EBX
    000156CB  03 C3             ADD      EAX,EBX
    000156CD  8B F8             MOV      EDI,EAX
    000156CF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13395

    000156D3  B8 01000000       MOV      EAX,1
    000156D8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13396

    000156DB  B8 01000000       MOV      EAX,1
    000156E0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13398

    000156E3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000156EA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000156EF  5B                POP      EBX

    LINE     13400

    000156F0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000156F7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000156FC  5B                POP      EBX

    LINE     13402

    000156FD  B8 0A000000       MOV      EAX,10
    00015702  40                INC      EAX
    00015703  50                PUSH     EAX
    00015704  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015707  5B                POP      EBX
    00015708  3B C3             CMP      EAX,EBX
    0001570A  0F 8503000000     JNE      3
    00015710  EB                JMP      

    LINE     13409

    00015711  B8 01000000       MOV      EAX,1
    00015716  8B C8             MOV      ECX,EAX
    00015718  B8 0A000000       MOV      EAX,10
    0001571D  50                PUSH     EAX
    0001571E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015721  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015724  5B                POP      EBX
    00015725  53                PUSH     EBX
    00015726  3B C3             CMP      EAX,EBX
    00015728  0F 8E03000000     JLE      3
    0001572E  EB                JMP      

    LINE     13411

    0001572F  B8 01000000       MOV      EAX,1
    00015734  8B C8             MOV      ECX,EAX
    00015736  B8 05000000       MOV      EAX,5
    0001573B  50                PUSH     EAX
    0001573C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001573F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015742  5B                POP      EBX
    00015743  53                PUSH     EBX
    00015744  3B C3             CMP      EAX,EBX
    00015746  0F 8E03000000     JLE      3
    0001574C  EB                JMP      

    LINE     13418

    0001574D  B8 01000000       MOV      EAX,1
    00015752  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13419

    00015755  B8 01000000       MOV      EAX,1
    0001575A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13420

    0001575D  B8 01000000       MOV      EAX,1
    00015762  8B C8             MOV      ECX,EAX
    00015764  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015767  48                DEC      EAX
    00015768  BB 0E000000       MOV      EBX,14
    0001576D  F7 E3             MUL      EBX
    0001576F  50                PUSH     EAX
    00015770  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015773  48                DEC      EAX
    00015774  BB 02000000       MOV      EBX,2
    00015779  F7 E3             MUL      EBX
    0001577B  5B                POP      EBX
    0001577C  03 C3             ADD      EAX,EBX
    0001577E  8B F8             MOV      EDI,EAX
    00015780  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13421

    00015784  B8 01000000       MOV      EAX,1
    00015789  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13422

    0001578C  B8 01000000       MOV      EAX,1
    00015791  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13424

    00015794  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001579B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000157A0  5B                POP      EBX

    LINE     13426

    000157A1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000157A8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000157AD  5B                POP      EBX

    LINE     13428

    000157AE  B8 0A000000       MOV      EAX,10
    000157B3  40                INC      EAX
    000157B4  50                PUSH     EAX
    000157B5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000157B8  5B                POP      EBX
    000157B9  3B C3             CMP      EAX,EBX
    000157BB  0F 8503000000     JNE      3
    000157C1  EB                JMP      

    LINE     13436

    000157C2  B8 01000000       MOV      EAX,1
    000157C7  8B C8             MOV      ECX,EAX
    000157C9  B8 0A000000       MOV      EAX,10
    000157CE  50                PUSH     EAX
    000157CF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000157D2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000157D5  5B                POP      EBX
    000157D6  53                PUSH     EBX
    000157D7  3B C3             CMP      EAX,EBX
    000157D9  0F 8E03000000     JLE      3
    000157DF  EB                JMP      

    LINE     13438

    000157E0  B8 01000000       MOV      EAX,1
    000157E5  8B C8             MOV      ECX,EAX
    000157E7  B8 05000000       MOV      EAX,5
    000157EC  50                PUSH     EAX
    000157ED  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000157F0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000157F3  5B                POP      EBX
    000157F4  53                PUSH     EBX
    000157F5  3B C3             CMP      EAX,EBX
    000157F7  0F 8E03000000     JLE      3
    000157FD  EB                JMP      

    LINE     13445

    000157FE  B8 01000000       MOV      EAX,1
    00015803  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13446

    00015809  B8 01000000       MOV      EAX,1
    0001580E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13447

    00015814  B8 01000000       MOV      EAX,1
    00015819  8B C8             MOV      ECX,EAX
    0001581B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001581E  48                DEC      EAX
    0001581F  BB 0E000000       MOV      EBX,14
    00015824  F7 E3             MUL      EBX
    00015826  50                PUSH     EAX
    00015827  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001582A  48                DEC      EAX
    0001582B  BB 02000000       MOV      EBX,2
    00015830  F7 E3             MUL      EBX
    00015832  5B                POP      EBX
    00015833  03 C3             ADD      EAX,EBX
    00015835  8B F8             MOV      EDI,EAX
    00015837  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13448

    0001583E  B8 01000000       MOV      EAX,1
    00015843  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13449

    00015849  B8 01000000       MOV      EAX,1
    0001584E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13451

    00015854  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001585B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015860  5B                POP      EBX

    LINE     13453

    00015861  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00015868  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001586D  5B                POP      EBX

    LINE     13455

    0001586E  B8 0A000000       MOV      EAX,10
    00015873  40                INC      EAX
    00015874  50                PUSH     EAX
    00015875  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015878  5B                POP      EBX
    00015879  3B C3             CMP      EAX,EBX
    0001587B  0F 8503000000     JNE      3
    00015881  EB                JMP      

    LINE     13462

    00015882  B8 01000000       MOV      EAX,1
    00015887  8B C8             MOV      ECX,EAX
    00015889  B8 0A000000       MOV      EAX,10
    0001588E  50                PUSH     EAX
    0001588F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015892  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015895  5B                POP      EBX
    00015896  53                PUSH     EBX
    00015897  3B C3             CMP      EAX,EBX
    00015899  0F 8E03000000     JLE      3
    0001589F  EB                JMP      

    LINE     13464

    000158A0  B8 01000000       MOV      EAX,1
    000158A5  8B C8             MOV      ECX,EAX
    000158A7  B8 05000000       MOV      EAX,5
    000158AC  50                PUSH     EAX
    000158AD  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000158B0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000158B3  5B                POP      EBX
    000158B4  53                PUSH     EBX
    000158B5  3B C3             CMP      EAX,EBX
    000158B7  0F 8E03000000     JLE      3
    000158BD  EB                JMP      

    LINE     13471

    000158BE  B8 01000000       MOV      EAX,1
    000158C3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13472

    000158C9  B8 01000000       MOV      EAX,1
    000158CE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13473

    000158D4  B8 01000000       MOV      EAX,1
    000158D9  8B C8             MOV      ECX,EAX
    000158DB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000158DE  48                DEC      EAX
    000158DF  BB 0E000000       MOV      EBX,14
    000158E4  F7 E3             MUL      EBX
    000158E6  50                PUSH     EAX
    000158E7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000158EA  48                DEC      EAX
    000158EB  BB 02000000       MOV      EBX,2
    000158F0  F7 E3             MUL      EBX
    000158F2  5B                POP      EBX
    000158F3  03 C3             ADD      EAX,EBX
    000158F5  8B F8             MOV      EDI,EAX
    000158F7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13474

    000158FE  B8 01000000       MOV      EAX,1
    00015903  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13475

    00015909  B8 01000000       MOV      EAX,1
    0001590E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13477

    00015914  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001591B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015920  5B                POP      EBX

    LINE     13479

    00015921  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00015928  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001592D  5B                POP      EBX

    LINE     13481

    0001592E  B8 0A000000       MOV      EAX,10
    00015933  40                INC      EAX
    00015934  50                PUSH     EAX
    00015935  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015938  5B                POP      EBX
    00015939  3B C3             CMP      EAX,EBX
    0001593B  0F 8503000000     JNE      3
    00015941  EB                JMP      

    LINE     13495

    00015942  56                PUSH     ESI
    00015943  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00015949  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001594F  FF D1             CALL     ECX                       run_inner_proc
    00015951  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13497

    00015952  B8 01000000       MOV      EAX,1
    00015957  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13499

    0001595A  B8 01000000       MOV      EAX,1
    0001595F  8B C8             MOV      ECX,EAX
    00015961  B8 0A000000       MOV      EAX,10
    00015966  50                PUSH     EAX
    00015967  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001596A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001596D  5B                POP      EBX
    0001596E  53                PUSH     EBX
    0001596F  3B C3             CMP      EAX,EBX
    00015971  0F 8E03000000     JLE      3
    00015977  EB                JMP      

    LINE     13501

    00015978  B8 01000000       MOV      EAX,1
    0001597D  8B C8             MOV      ECX,EAX
    0001597F  B8 05000000       MOV      EAX,5
    00015984  50                PUSH     EAX
    00015985  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00015988  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001598B  5B                POP      EBX
    0001598C  53                PUSH     EBX
    0001598D  3B C3             CMP      EAX,EBX
    0001598F  0F 8E03000000     JLE      3
    00015995  EB                JMP      

    LINE     13508

    00015996  B8 01000000       MOV      EAX,1
    0001599B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13509

    0001599E  B8 01000000       MOV      EAX,1
    000159A3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13510

    000159A6  B8 01000000       MOV      EAX,1
    000159AB  8B C8             MOV      ECX,EAX
    000159AD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000159B0  48                DEC      EAX
    000159B1  BB 0E000000       MOV      EBX,14
    000159B6  F7 E3             MUL      EBX
    000159B8  50                PUSH     EAX
    000159B9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000159BC  48                DEC      EAX
    000159BD  BB 02000000       MOV      EBX,2
    000159C2  F7 E3             MUL      EBX
    000159C4  5B                POP      EBX
    000159C5  03 C3             ADD      EAX,EBX
    000159C7  8B F8             MOV      EDI,EAX
    000159C9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13511

    000159CD  B8 01000000       MOV      EAX,1
    000159D2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13512

    000159D5  B8 01000000       MOV      EAX,1
    000159DA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13514

    000159DD  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000159E4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000159E9  5B                POP      EBX

    LINE     13516

    000159EA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000159F1  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000159F6  5B                POP      EBX

    LINE     13518

    000159F7  B8 0A000000       MOV      EAX,10
    000159FC  40                INC      EAX
    000159FD  50                PUSH     EAX
    000159FE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015A01  5B                POP      EBX
    00015A02  3B C3             CMP      EAX,EBX
    00015A04  0F 8503000000     JNE      3
    00015A0A  EB                JMP      

    LINE     13525

    00015A0B  B8 01000000       MOV      EAX,1
    00015A10  8B C8             MOV      ECX,EAX
    00015A12  B8 0A000000       MOV      EAX,10
    00015A17  50                PUSH     EAX
    00015A18  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015A1B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015A1E  5B                POP      EBX
    00015A1F  53                PUSH     EBX
    00015A20  3B C3             CMP      EAX,EBX
    00015A22  0F 8E03000000     JLE      3
    00015A28  EB                JMP      

    LINE     13527

    00015A29  B8 01000000       MOV      EAX,1
    00015A2E  8B C8             MOV      ECX,EAX
    00015A30  B8 05000000       MOV      EAX,5
    00015A35  50                PUSH     EAX
    00015A36  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00015A39  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015A3C  5B                POP      EBX
    00015A3D  53                PUSH     EBX
    00015A3E  3B C3             CMP      EAX,EBX
    00015A40  0F 8E03000000     JLE      3
    00015A46  EB                JMP      

    LINE     13534

    00015A47  B8 01000000       MOV      EAX,1
    00015A4C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13535

    00015A4F  B8 01000000       MOV      EAX,1
    00015A54  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13536

    00015A57  B8 01000000       MOV      EAX,1
    00015A5C  8B C8             MOV      ECX,EAX
    00015A5E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015A61  48                DEC      EAX
    00015A62  BB 0E000000       MOV      EBX,14
    00015A67  F7 E3             MUL      EBX
    00015A69  50                PUSH     EAX
    00015A6A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015A6D  48                DEC      EAX
    00015A6E  BB 02000000       MOV      EBX,2
    00015A73  F7 E3             MUL      EBX
    00015A75  5B                POP      EBX
    00015A76  03 C3             ADD      EAX,EBX
    00015A78  8B F8             MOV      EDI,EAX
    00015A7A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13537

    00015A7E  B8 01000000       MOV      EAX,1
    00015A83  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13538

    00015A86  B8 01000000       MOV      EAX,1
    00015A8B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13540

    00015A8E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00015A95  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00015A9A  5B                POP      EBX

    LINE     13542

    00015A9B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00015AA2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00015AA7  5B                POP      EBX

    LINE     13544

    00015AA8  B8 0A000000       MOV      EAX,10
    00015AAD  40                INC      EAX
    00015AAE  50                PUSH     EAX
    00015AAF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015AB2  5B                POP      EBX
    00015AB3  3B C3             CMP      EAX,EBX
    00015AB5  0F 8503000000     JNE      3
    00015ABB  EB                JMP      

    LINE     13552

    00015ABC  B8 01000000       MOV      EAX,1
    00015AC1  8B C8             MOV      ECX,EAX
    00015AC3  B8 0A000000       MOV      EAX,10
    00015AC8  50                PUSH     EAX
    00015AC9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00015ACC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015ACF  5B                POP      EBX
    00015AD0  53                PUSH     EBX
    00015AD1  3B C3             CMP      EAX,EBX
    00015AD3  0F 8E03000000     JLE      3
    00015AD9  EB                JMP      

    LINE     13554

    00015ADA  B8 01000000       MOV      EAX,1
    00015ADF  8B C8             MOV      ECX,EAX
    00015AE1  B8 05000000       MOV      EAX,5
    00015AE6  50                PUSH     EAX
    00015AE7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00015AEA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015AED  5B                POP      EBX
    00015AEE  53                PUSH     EBX
    00015AEF  3B C3             CMP      EAX,EBX
    00015AF1  0F 8E03000000     JLE      3
    00015AF7  EB                JMP      

    LINE     13561

    00015AF8  B8 01000000       MOV      EAX,1
    00015AFD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13562

    00015B03  B8 01000000       MOV      EAX,1
    00015B08  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13563

    00015B0E  B8 01000000       MOV      EAX,1
    00015B13  8B C8             MOV      ECX,EAX
    00015B15  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015B18  48                DEC      EAX
    00015B19  BB 0E000000       MOV      EBX,14
    00015B1E  F7 E3             MUL      EBX
    00015B20  50                PUSH     EAX
    00015B21  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015B24  48                DEC      EAX
    00015B25  BB 02000000       MOV      EBX,2
    00015B2A  F7 E3             MUL      EBX
    00015B2C  5B                POP      EBX
    00015B2D  03 C3             ADD      EAX,EBX
    00015B2F  8B F8             MOV      EDI,EAX
    00015B31  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13564

    00015B38  B8 01000000       MOV      EAX,1
    00015B3D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13565

    00015B43  B8 01000000       MOV      EAX,1
    00015B48  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13567

    00015B4E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00015B55  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015B5A  5B                POP      EBX

    LINE     13569

    00015B5B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00015B62  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015B67  5B                POP      EBX

    LINE     13571

    00015B68  B8 0A000000       MOV      EAX,10
    00015B6D  40                INC      EAX
    00015B6E  50                PUSH     EAX
    00015B6F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015B72  5B                POP      EBX
    00015B73  3B C3             CMP      EAX,EBX
    00015B75  0F 8503000000     JNE      3
    00015B7B  EB                JMP      

    LINE     13578

    00015B7C  B8 01000000       MOV      EAX,1
    00015B81  8B C8             MOV      ECX,EAX
    00015B83  B8 0A000000       MOV      EAX,10
    00015B88  50                PUSH     EAX
    00015B89  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015B8C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015B8F  5B                POP      EBX
    00015B90  53                PUSH     EBX
    00015B91  3B C3             CMP      EAX,EBX
    00015B93  0F 8E03000000     JLE      3
    00015B99  EB                JMP      

    LINE     13580

    00015B9A  B8 01000000       MOV      EAX,1
    00015B9F  8B C8             MOV      ECX,EAX
    00015BA1  B8 05000000       MOV      EAX,5
    00015BA6  50                PUSH     EAX
    00015BA7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00015BAA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015BAD  5B                POP      EBX
    00015BAE  53                PUSH     EBX
    00015BAF  3B C3             CMP      EAX,EBX
    00015BB1  0F 8E03000000     JLE      3
    00015BB7  EB                JMP      

    LINE     13587

    00015BB8  B8 01000000       MOV      EAX,1
    00015BBD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13588

    00015BC3  B8 01000000       MOV      EAX,1
    00015BC8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13589

    00015BCE  B8 01000000       MOV      EAX,1
    00015BD3  8B C8             MOV      ECX,EAX
    00015BD5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015BD8  48                DEC      EAX
    00015BD9  BB 0E000000       MOV      EBX,14
    00015BDE  F7 E3             MUL      EBX
    00015BE0  50                PUSH     EAX
    00015BE1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015BE4  48                DEC      EAX
    00015BE5  BB 02000000       MOV      EBX,2
    00015BEA  F7 E3             MUL      EBX
    00015BEC  5B                POP      EBX
    00015BED  03 C3             ADD      EAX,EBX
    00015BEF  8B F8             MOV      EDI,EAX
    00015BF1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13590

    00015BF8  B8 01000000       MOV      EAX,1
    00015BFD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13591

    00015C03  B8 01000000       MOV      EAX,1
    00015C08  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13593

    00015C0E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00015C15  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015C1A  5B                POP      EBX

    LINE     13595

    00015C1B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00015C22  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015C27  5B                POP      EBX

    LINE     13597

    00015C28  B8 0A000000       MOV      EAX,10
    00015C2D  40                INC      EAX
    00015C2E  50                PUSH     EAX
    00015C2F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015C32  5B                POP      EBX
    00015C33  3B C3             CMP      EAX,EBX
    00015C35  0F 8503000000     JNE      3
    00015C3B  EB                JMP      

    LINE     13611

    00015C3C  56                PUSH     ESI
    00015C3D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00015C43  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00015C49  FF D1             CALL     ECX                       run_inner_proc
    00015C4B  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13613

    00015C4C  B8 01000000       MOV      EAX,1
    00015C51  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13615

    00015C54  B8 01000000       MOV      EAX,1
    00015C59  8B C8             MOV      ECX,EAX
    00015C5B  B8 0A000000       MOV      EAX,10
    00015C60  50                PUSH     EAX
    00015C61  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00015C64  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015C67  5B                POP      EBX
    00015C68  53                PUSH     EBX
    00015C69  3B C3             CMP      EAX,EBX
    00015C6B  0F 8E03000000     JLE      3
    00015C71  EB                JMP      

    LINE     13617

    00015C72  B8 01000000       MOV      EAX,1
    00015C77  8B C8             MOV      ECX,EAX
    00015C79  B8 05000000       MOV      EAX,5
    00015C7E  50                PUSH     EAX
    00015C7F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00015C82  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015C85  5B                POP      EBX
    00015C86  53                PUSH     EBX
    00015C87  3B C3             CMP      EAX,EBX
    00015C89  0F 8E03000000     JLE      3
    00015C8F  EB                JMP      

    LINE     13624

    00015C90  B8 01000000       MOV      EAX,1
    00015C95  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13625

    00015C98  B8 01000000       MOV      EAX,1
    00015C9D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13626

    00015CA0  B8 01000000       MOV      EAX,1
    00015CA5  8B C8             MOV      ECX,EAX
    00015CA7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015CAA  48                DEC      EAX
    00015CAB  BB 0E000000       MOV      EBX,14
    00015CB0  F7 E3             MUL      EBX
    00015CB2  50                PUSH     EAX
    00015CB3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015CB6  48                DEC      EAX
    00015CB7  BB 02000000       MOV      EBX,2
    00015CBC  F7 E3             MUL      EBX
    00015CBE  5B                POP      EBX
    00015CBF  03 C3             ADD      EAX,EBX
    00015CC1  8B F8             MOV      EDI,EAX
    00015CC3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13627

    00015CC7  B8 01000000       MOV      EAX,1
    00015CCC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13628

    00015CCF  B8 01000000       MOV      EAX,1
    00015CD4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13630

    00015CD7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00015CDE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00015CE3  5B                POP      EBX

    LINE     13632

    00015CE4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00015CEB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00015CF0  5B                POP      EBX

    LINE     13634

    00015CF1  B8 0A000000       MOV      EAX,10
    00015CF6  40                INC      EAX
    00015CF7  50                PUSH     EAX
    00015CF8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015CFB  5B                POP      EBX
    00015CFC  3B C3             CMP      EAX,EBX
    00015CFE  0F 8503000000     JNE      3
    00015D04  EB                JMP      

    LINE     13641

    00015D05  B8 01000000       MOV      EAX,1
    00015D0A  8B C8             MOV      ECX,EAX
    00015D0C  B8 0A000000       MOV      EAX,10
    00015D11  50                PUSH     EAX
    00015D12  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015D15  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015D18  5B                POP      EBX
    00015D19  53                PUSH     EBX
    00015D1A  3B C3             CMP      EAX,EBX
    00015D1C  0F 8E03000000     JLE      3
    00015D22  EB                JMP      

    LINE     13643

    00015D23  B8 01000000       MOV      EAX,1
    00015D28  8B C8             MOV      ECX,EAX
    00015D2A  B8 05000000       MOV      EAX,5
    00015D2F  50                PUSH     EAX
    00015D30  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00015D33  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015D36  5B                POP      EBX
    00015D37  53                PUSH     EBX
    00015D38  3B C3             CMP      EAX,EBX
    00015D3A  0F 8E03000000     JLE      3
    00015D40  EB                JMP      

    LINE     13650

    00015D41  B8 01000000       MOV      EAX,1
    00015D46  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13651

    00015D49  B8 01000000       MOV      EAX,1
    00015D4E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13652

    00015D51  B8 01000000       MOV      EAX,1
    00015D56  8B C8             MOV      ECX,EAX
    00015D58  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015D5B  48                DEC      EAX
    00015D5C  BB 0E000000       MOV      EBX,14
    00015D61  F7 E3             MUL      EBX
    00015D63  50                PUSH     EAX
    00015D64  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015D67  48                DEC      EAX
    00015D68  BB 02000000       MOV      EBX,2
    00015D6D  F7 E3             MUL      EBX
    00015D6F  5B                POP      EBX
    00015D70  03 C3             ADD      EAX,EBX
    00015D72  8B F8             MOV      EDI,EAX
    00015D74  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13653

    00015D78  B8 01000000       MOV      EAX,1
    00015D7D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13654

    00015D80  B8 01000000       MOV      EAX,1
    00015D85  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13656

    00015D88  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00015D8F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00015D94  5B                POP      EBX

    LINE     13658

    00015D95  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00015D9C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00015DA1  5B                POP      EBX

    LINE     13660

    00015DA2  B8 0A000000       MOV      EAX,10
    00015DA7  40                INC      EAX
    00015DA8  50                PUSH     EAX
    00015DA9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015DAC  5B                POP      EBX
    00015DAD  3B C3             CMP      EAX,EBX
    00015DAF  0F 8503000000     JNE      3
    00015DB5  EB                JMP      

    LINE     13668

    00015DB6  B8 01000000       MOV      EAX,1
    00015DBB  8B C8             MOV      ECX,EAX
    00015DBD  B8 0A000000       MOV      EAX,10
    00015DC2  50                PUSH     EAX
    00015DC3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00015DC6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015DC9  5B                POP      EBX
    00015DCA  53                PUSH     EBX
    00015DCB  3B C3             CMP      EAX,EBX
    00015DCD  0F 8E03000000     JLE      3
    00015DD3  EB                JMP      

    LINE     13670

    00015DD4  B8 01000000       MOV      EAX,1
    00015DD9  8B C8             MOV      ECX,EAX
    00015DDB  B8 05000000       MOV      EAX,5
    00015DE0  50                PUSH     EAX
    00015DE1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00015DE4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015DE7  5B                POP      EBX
    00015DE8  53                PUSH     EBX
    00015DE9  3B C3             CMP      EAX,EBX
    00015DEB  0F 8E03000000     JLE      3
    00015DF1  EB                JMP      

    LINE     13677

    00015DF2  B8 01000000       MOV      EAX,1
    00015DF7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13678

    00015DFD  B8 01000000       MOV      EAX,1
    00015E02  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13679

    00015E08  B8 01000000       MOV      EAX,1
    00015E0D  8B C8             MOV      ECX,EAX
    00015E0F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015E12  48                DEC      EAX
    00015E13  BB 0E000000       MOV      EBX,14
    00015E18  F7 E3             MUL      EBX
    00015E1A  50                PUSH     EAX
    00015E1B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015E1E  48                DEC      EAX
    00015E1F  BB 02000000       MOV      EBX,2
    00015E24  F7 E3             MUL      EBX
    00015E26  5B                POP      EBX
    00015E27  03 C3             ADD      EAX,EBX
    00015E29  8B F8             MOV      EDI,EAX
    00015E2B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13680

    00015E32  B8 01000000       MOV      EAX,1
    00015E37  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13681

    00015E3D  B8 01000000       MOV      EAX,1
    00015E42  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13683

    00015E48  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00015E4F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015E54  5B                POP      EBX

    LINE     13685

    00015E55  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00015E5C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015E61  5B                POP      EBX

    LINE     13687

    00015E62  B8 0A000000       MOV      EAX,10
    00015E67  40                INC      EAX
    00015E68  50                PUSH     EAX
    00015E69  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015E6C  5B                POP      EBX
    00015E6D  3B C3             CMP      EAX,EBX
    00015E6F  0F 8503000000     JNE      3
    00015E75  EB                JMP      

    LINE     13694

    00015E76  B8 01000000       MOV      EAX,1
    00015E7B  8B C8             MOV      ECX,EAX
    00015E7D  B8 0A000000       MOV      EAX,10
    00015E82  50                PUSH     EAX
    00015E83  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00015E86  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015E89  5B                POP      EBX
    00015E8A  53                PUSH     EBX
    00015E8B  3B C3             CMP      EAX,EBX
    00015E8D  0F 8E03000000     JLE      3
    00015E93  EB                JMP      

    LINE     13696

    00015E94  B8 01000000       MOV      EAX,1
    00015E99  8B C8             MOV      ECX,EAX
    00015E9B  B8 05000000       MOV      EAX,5
    00015EA0  50                PUSH     EAX
    00015EA1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00015EA4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015EA7  5B                POP      EBX
    00015EA8  53                PUSH     EBX
    00015EA9  3B C3             CMP      EAX,EBX
    00015EAB  0F 8E03000000     JLE      3
    00015EB1  EB                JMP      

    LINE     13703

    00015EB2  B8 01000000       MOV      EAX,1
    00015EB7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13704

    00015EBD  B8 01000000       MOV      EAX,1
    00015EC2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13705

    00015EC8  B8 01000000       MOV      EAX,1
    00015ECD  8B C8             MOV      ECX,EAX
    00015ECF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00015ED2  48                DEC      EAX
    00015ED3  BB 0E000000       MOV      EBX,14
    00015ED8  F7 E3             MUL      EBX
    00015EDA  50                PUSH     EAX
    00015EDB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00015EDE  48                DEC      EAX
    00015EDF  BB 02000000       MOV      EBX,2
    00015EE4  F7 E3             MUL      EBX
    00015EE6  5B                POP      EBX
    00015EE7  03 C3             ADD      EAX,EBX
    00015EE9  8B F8             MOV      EDI,EAX
    00015EEB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13706

    00015EF2  B8 01000000       MOV      EAX,1
    00015EF7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13707

    00015EFD  B8 01000000       MOV      EAX,1
    00015F02  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13709

    00015F08  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00015F0F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00015F14  5B                POP      EBX

    LINE     13711

    00015F15  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00015F1C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00015F21  5B                POP      EBX

    LINE     13713

    00015F22  B8 0A000000       MOV      EAX,10
    00015F27  40                INC      EAX
    00015F28  50                PUSH     EAX
    00015F29  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015F2C  5B                POP      EBX
    00015F2D  3B C3             CMP      EAX,EBX
    00015F2F  0F 8503000000     JNE      3
    00015F35  EB                JMP      

    LINE     13727

    00015F36  56                PUSH     ESI
    00015F37  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00015F3D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00015F43  FF D1             CALL     ECX                       run_inner_proc
    00015F45  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13729

    00015F46  B8 01000000       MOV      EAX,1
    00015F4B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13731

    00015F4E  B8 01000000       MOV      EAX,1
    00015F53  8B C8             MOV      ECX,EAX
    00015F55  B8 0A000000       MOV      EAX,10
    00015F5A  50                PUSH     EAX
    00015F5B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00015F5E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015F61  5B                POP      EBX
    00015F62  53                PUSH     EBX
    00015F63  3B C3             CMP      EAX,EBX
    00015F65  0F 8E03000000     JLE      3
    00015F6B  EB                JMP      

    LINE     13733

    00015F6C  B8 01000000       MOV      EAX,1
    00015F71  8B C8             MOV      ECX,EAX
    00015F73  B8 05000000       MOV      EAX,5
    00015F78  50                PUSH     EAX
    00015F79  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00015F7C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015F7F  5B                POP      EBX
    00015F80  53                PUSH     EBX
    00015F81  3B C3             CMP      EAX,EBX
    00015F83  0F 8E03000000     JLE      3
    00015F89  EB                JMP      

    LINE     13740

    00015F8A  B8 01000000       MOV      EAX,1
    00015F8F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13741

    00015F92  B8 01000000       MOV      EAX,1
    00015F97  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13742

    00015F9A  B8 01000000       MOV      EAX,1
    00015F9F  8B C8             MOV      ECX,EAX
    00015FA1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015FA4  48                DEC      EAX
    00015FA5  BB 0E000000       MOV      EBX,14
    00015FAA  F7 E3             MUL      EBX
    00015FAC  50                PUSH     EAX
    00015FAD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00015FB0  48                DEC      EAX
    00015FB1  BB 02000000       MOV      EBX,2
    00015FB6  F7 E3             MUL      EBX
    00015FB8  5B                POP      EBX
    00015FB9  03 C3             ADD      EAX,EBX
    00015FBB  8B F8             MOV      EDI,EAX
    00015FBD  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13743

    00015FC1  B8 01000000       MOV      EAX,1
    00015FC6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13744

    00015FC9  B8 01000000       MOV      EAX,1
    00015FCE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13746

    00015FD1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00015FD8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00015FDD  5B                POP      EBX

    LINE     13748

    00015FDE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00015FE5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00015FEA  5B                POP      EBX

    LINE     13750

    00015FEB  B8 0A000000       MOV      EAX,10
    00015FF0  40                INC      EAX
    00015FF1  50                PUSH     EAX
    00015FF2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00015FF5  5B                POP      EBX
    00015FF6  3B C3             CMP      EAX,EBX
    00015FF8  0F 8503000000     JNE      3
    00015FFE  EB                JMP      

    LINE     13757

    00015FFF  B8 01000000       MOV      EAX,1
    00016004  8B C8             MOV      ECX,EAX
    00016006  B8 0A000000       MOV      EAX,10
    0001600B  50                PUSH     EAX
    0001600C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001600F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016012  5B                POP      EBX
    00016013  53                PUSH     EBX
    00016014  3B C3             CMP      EAX,EBX
    00016016  0F 8E03000000     JLE      3
    0001601C  EB                JMP      

    LINE     13759

    0001601D  B8 01000000       MOV      EAX,1
    00016022  8B C8             MOV      ECX,EAX
    00016024  B8 05000000       MOV      EAX,5
    00016029  50                PUSH     EAX
    0001602A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001602D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016030  5B                POP      EBX
    00016031  53                PUSH     EBX
    00016032  3B C3             CMP      EAX,EBX
    00016034  0F 8E03000000     JLE      3
    0001603A  EB                JMP      

    LINE     13766

    0001603B  B8 01000000       MOV      EAX,1
    00016040  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13767

    00016043  B8 01000000       MOV      EAX,1
    00016048  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13768

    0001604B  B8 01000000       MOV      EAX,1
    00016050  8B C8             MOV      ECX,EAX
    00016052  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016055  48                DEC      EAX
    00016056  BB 0E000000       MOV      EBX,14
    0001605B  F7 E3             MUL      EBX
    0001605D  50                PUSH     EAX
    0001605E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016061  48                DEC      EAX
    00016062  BB 02000000       MOV      EBX,2
    00016067  F7 E3             MUL      EBX
    00016069  5B                POP      EBX
    0001606A  03 C3             ADD      EAX,EBX
    0001606C  8B F8             MOV      EDI,EAX
    0001606E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13769

    00016072  B8 01000000       MOV      EAX,1
    00016077  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13770

    0001607A  B8 01000000       MOV      EAX,1
    0001607F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13772

    00016082  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016089  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001608E  5B                POP      EBX

    LINE     13774

    0001608F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016096  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001609B  5B                POP      EBX

    LINE     13776

    0001609C  B8 0A000000       MOV      EAX,10
    000160A1  40                INC      EAX
    000160A2  50                PUSH     EAX
    000160A3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000160A6  5B                POP      EBX
    000160A7  3B C3             CMP      EAX,EBX
    000160A9  0F 8503000000     JNE      3
    000160AF  EB                JMP      

    LINE     13784

    000160B0  B8 01000000       MOV      EAX,1
    000160B5  8B C8             MOV      ECX,EAX
    000160B7  B8 0A000000       MOV      EAX,10
    000160BC  50                PUSH     EAX
    000160BD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000160C0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000160C3  5B                POP      EBX
    000160C4  53                PUSH     EBX
    000160C5  3B C3             CMP      EAX,EBX
    000160C7  0F 8E03000000     JLE      3
    000160CD  EB                JMP      

    LINE     13786

    000160CE  B8 01000000       MOV      EAX,1
    000160D3  8B C8             MOV      ECX,EAX
    000160D5  B8 05000000       MOV      EAX,5
    000160DA  50                PUSH     EAX
    000160DB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000160DE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000160E1  5B                POP      EBX
    000160E2  53                PUSH     EBX
    000160E3  3B C3             CMP      EAX,EBX
    000160E5  0F 8E03000000     JLE      3
    000160EB  EB                JMP      

    LINE     13793

    000160EC  B8 01000000       MOV      EAX,1
    000160F1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13794

    000160F7  B8 01000000       MOV      EAX,1
    000160FC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13795

    00016102  B8 01000000       MOV      EAX,1
    00016107  8B C8             MOV      ECX,EAX
    00016109  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001610C  48                DEC      EAX
    0001610D  BB 0E000000       MOV      EBX,14
    00016112  F7 E3             MUL      EBX
    00016114  50                PUSH     EAX
    00016115  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016118  48                DEC      EAX
    00016119  BB 02000000       MOV      EBX,2
    0001611E  F7 E3             MUL      EBX
    00016120  5B                POP      EBX
    00016121  03 C3             ADD      EAX,EBX
    00016123  8B F8             MOV      EDI,EAX
    00016125  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13796

    0001612C  B8 01000000       MOV      EAX,1
    00016131  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13797

    00016137  B8 01000000       MOV      EAX,1
    0001613C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13799

    00016142  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00016149  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001614E  5B                POP      EBX

    LINE     13801

    0001614F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00016156  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001615B  5B                POP      EBX

    LINE     13803

    0001615C  B8 0A000000       MOV      EAX,10
    00016161  40                INC      EAX
    00016162  50                PUSH     EAX
    00016163  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016166  5B                POP      EBX
    00016167  3B C3             CMP      EAX,EBX
    00016169  0F 8503000000     JNE      3
    0001616F  EB                JMP      

    LINE     13810

    00016170  B8 01000000       MOV      EAX,1
    00016175  8B C8             MOV      ECX,EAX
    00016177  B8 0A000000       MOV      EAX,10
    0001617C  50                PUSH     EAX
    0001617D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016180  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016183  5B                POP      EBX
    00016184  53                PUSH     EBX
    00016185  3B C3             CMP      EAX,EBX
    00016187  0F 8E03000000     JLE      3
    0001618D  EB                JMP      

    LINE     13812

    0001618E  B8 01000000       MOV      EAX,1
    00016193  8B C8             MOV      ECX,EAX
    00016195  B8 05000000       MOV      EAX,5
    0001619A  50                PUSH     EAX
    0001619B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001619E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000161A1  5B                POP      EBX
    000161A2  53                PUSH     EBX
    000161A3  3B C3             CMP      EAX,EBX
    000161A5  0F 8E03000000     JLE      3
    000161AB  EB                JMP      

    LINE     13819

    000161AC  B8 01000000       MOV      EAX,1
    000161B1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13820

    000161B7  B8 01000000       MOV      EAX,1
    000161BC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13821

    000161C2  B8 01000000       MOV      EAX,1
    000161C7  8B C8             MOV      ECX,EAX
    000161C9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000161CC  48                DEC      EAX
    000161CD  BB 0E000000       MOV      EBX,14
    000161D2  F7 E3             MUL      EBX
    000161D4  50                PUSH     EAX
    000161D5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000161D8  48                DEC      EAX
    000161D9  BB 02000000       MOV      EBX,2
    000161DE  F7 E3             MUL      EBX
    000161E0  5B                POP      EBX
    000161E1  03 C3             ADD      EAX,EBX
    000161E3  8B F8             MOV      EDI,EAX
    000161E5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13822

    000161EC  B8 01000000       MOV      EAX,1
    000161F1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13823

    000161F7  B8 01000000       MOV      EAX,1
    000161FC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13825

    00016202  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016209  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001620E  5B                POP      EBX

    LINE     13827

    0001620F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016216  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001621B  5B                POP      EBX

    LINE     13829

    0001621C  B8 0A000000       MOV      EAX,10
    00016221  40                INC      EAX
    00016222  50                PUSH     EAX
    00016223  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016226  5B                POP      EBX
    00016227  3B C3             CMP      EAX,EBX
    00016229  0F 8503000000     JNE      3
    0001622F  EB                JMP      

    LINE     13843

    00016230  56                PUSH     ESI
    00016231  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00016237  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001623D  FF D1             CALL     ECX                       run_inner_proc
    0001623F  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13845

    00016240  B8 01000000       MOV      EAX,1
    00016245  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13847

    00016248  B8 01000000       MOV      EAX,1
    0001624D  8B C8             MOV      ECX,EAX
    0001624F  B8 0A000000       MOV      EAX,10
    00016254  50                PUSH     EAX
    00016255  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00016258  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001625B  5B                POP      EBX
    0001625C  53                PUSH     EBX
    0001625D  3B C3             CMP      EAX,EBX
    0001625F  0F 8E03000000     JLE      3
    00016265  EB                JMP      

    LINE     13849

    00016266  B8 01000000       MOV      EAX,1
    0001626B  8B C8             MOV      ECX,EAX
    0001626D  B8 05000000       MOV      EAX,5
    00016272  50                PUSH     EAX
    00016273  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00016276  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016279  5B                POP      EBX
    0001627A  53                PUSH     EBX
    0001627B  3B C3             CMP      EAX,EBX
    0001627D  0F 8E03000000     JLE      3
    00016283  EB                JMP      

    LINE     13856

    00016284  B8 01000000       MOV      EAX,1
    00016289  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13857

    0001628C  B8 01000000       MOV      EAX,1
    00016291  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13858

    00016294  B8 01000000       MOV      EAX,1
    00016299  8B C8             MOV      ECX,EAX
    0001629B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001629E  48                DEC      EAX
    0001629F  BB 0E000000       MOV      EBX,14
    000162A4  F7 E3             MUL      EBX
    000162A6  50                PUSH     EAX
    000162A7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000162AA  48                DEC      EAX
    000162AB  BB 02000000       MOV      EBX,2
    000162B0  F7 E3             MUL      EBX
    000162B2  5B                POP      EBX
    000162B3  03 C3             ADD      EAX,EBX
    000162B5  8B F8             MOV      EDI,EAX
    000162B7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13859

    000162BB  B8 01000000       MOV      EAX,1
    000162C0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13860

    000162C3  B8 01000000       MOV      EAX,1
    000162C8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13862

    000162CB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000162D2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000162D7  5B                POP      EBX

    LINE     13864

    000162D8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000162DF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000162E4  5B                POP      EBX

    LINE     13866

    000162E5  B8 0A000000       MOV      EAX,10
    000162EA  40                INC      EAX
    000162EB  50                PUSH     EAX
    000162EC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000162EF  5B                POP      EBX
    000162F0  3B C3             CMP      EAX,EBX
    000162F2  0F 8503000000     JNE      3
    000162F8  EB                JMP      

    LINE     13873

    000162F9  B8 01000000       MOV      EAX,1
    000162FE  8B C8             MOV      ECX,EAX
    00016300  B8 0A000000       MOV      EAX,10
    00016305  50                PUSH     EAX
    00016306  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016309  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001630C  5B                POP      EBX
    0001630D  53                PUSH     EBX
    0001630E  3B C3             CMP      EAX,EBX
    00016310  0F 8E03000000     JLE      3
    00016316  EB                JMP      

    LINE     13875

    00016317  B8 01000000       MOV      EAX,1
    0001631C  8B C8             MOV      ECX,EAX
    0001631E  B8 05000000       MOV      EAX,5
    00016323  50                PUSH     EAX
    00016324  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016327  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001632A  5B                POP      EBX
    0001632B  53                PUSH     EBX
    0001632C  3B C3             CMP      EAX,EBX
    0001632E  0F 8E03000000     JLE      3
    00016334  EB                JMP      

    LINE     13882

    00016335  B8 01000000       MOV      EAX,1
    0001633A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13883

    0001633D  B8 01000000       MOV      EAX,1
    00016342  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13884

    00016345  B8 01000000       MOV      EAX,1
    0001634A  8B C8             MOV      ECX,EAX
    0001634C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001634F  48                DEC      EAX
    00016350  BB 0E000000       MOV      EBX,14
    00016355  F7 E3             MUL      EBX
    00016357  50                PUSH     EAX
    00016358  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001635B  48                DEC      EAX
    0001635C  BB 02000000       MOV      EBX,2
    00016361  F7 E3             MUL      EBX
    00016363  5B                POP      EBX
    00016364  03 C3             ADD      EAX,EBX
    00016366  8B F8             MOV      EDI,EAX
    00016368  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13885

    0001636C  B8 01000000       MOV      EAX,1
    00016371  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13886

    00016374  B8 01000000       MOV      EAX,1
    00016379  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13888

    0001637C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016383  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00016388  5B                POP      EBX

    LINE     13890

    00016389  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016390  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00016395  5B                POP      EBX

    LINE     13892

    00016396  B8 0A000000       MOV      EAX,10
    0001639B  40                INC      EAX
    0001639C  50                PUSH     EAX
    0001639D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000163A0  5B                POP      EBX
    000163A1  3B C3             CMP      EAX,EBX
    000163A3  0F 8503000000     JNE      3
    000163A9  EB                JMP      

    LINE     13900

    000163AA  B8 01000000       MOV      EAX,1
    000163AF  8B C8             MOV      ECX,EAX
    000163B1  B8 0A000000       MOV      EAX,10
    000163B6  50                PUSH     EAX
    000163B7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000163BA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000163BD  5B                POP      EBX
    000163BE  53                PUSH     EBX
    000163BF  3B C3             CMP      EAX,EBX
    000163C1  0F 8E03000000     JLE      3
    000163C7  EB                JMP      

    LINE     13902

    000163C8  B8 01000000       MOV      EAX,1
    000163CD  8B C8             MOV      ECX,EAX
    000163CF  B8 05000000       MOV      EAX,5
    000163D4  50                PUSH     EAX
    000163D5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000163D8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000163DB  5B                POP      EBX
    000163DC  53                PUSH     EBX
    000163DD  3B C3             CMP      EAX,EBX
    000163DF  0F 8E03000000     JLE      3
    000163E5  EB                JMP      

    LINE     13909

    000163E6  B8 01000000       MOV      EAX,1
    000163EB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13910

    000163F1  B8 01000000       MOV      EAX,1
    000163F6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13911

    000163FC  B8 01000000       MOV      EAX,1
    00016401  8B C8             MOV      ECX,EAX
    00016403  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016406  48                DEC      EAX
    00016407  BB 0E000000       MOV      EBX,14
    0001640C  F7 E3             MUL      EBX
    0001640E  50                PUSH     EAX
    0001640F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016412  48                DEC      EAX
    00016413  BB 02000000       MOV      EBX,2
    00016418  F7 E3             MUL      EBX
    0001641A  5B                POP      EBX
    0001641B  03 C3             ADD      EAX,EBX
    0001641D  8B F8             MOV      EDI,EAX
    0001641F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13912

    00016426  B8 01000000       MOV      EAX,1
    0001642B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13913

    00016431  B8 01000000       MOV      EAX,1
    00016436  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13915

    0001643C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00016443  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016448  5B                POP      EBX

    LINE     13917

    00016449  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00016450  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00016455  5B                POP      EBX

    LINE     13919

    00016456  B8 0A000000       MOV      EAX,10
    0001645B  40                INC      EAX
    0001645C  50                PUSH     EAX
    0001645D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016460  5B                POP      EBX
    00016461  3B C3             CMP      EAX,EBX
    00016463  0F 8503000000     JNE      3
    00016469  EB                JMP      

    LINE     13926

    0001646A  B8 01000000       MOV      EAX,1
    0001646F  8B C8             MOV      ECX,EAX
    00016471  B8 0A000000       MOV      EAX,10
    00016476  50                PUSH     EAX
    00016477  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001647A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001647D  5B                POP      EBX
    0001647E  53                PUSH     EBX
    0001647F  3B C3             CMP      EAX,EBX
    00016481  0F 8E03000000     JLE      3
    00016487  EB                JMP      

    LINE     13928

    00016488  B8 01000000       MOV      EAX,1
    0001648D  8B C8             MOV      ECX,EAX
    0001648F  B8 05000000       MOV      EAX,5
    00016494  50                PUSH     EAX
    00016495  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016498  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001649B  5B                POP      EBX
    0001649C  53                PUSH     EBX
    0001649D  3B C3             CMP      EAX,EBX
    0001649F  0F 8E03000000     JLE      3
    000164A5  EB                JMP      

    LINE     13935

    000164A6  B8 01000000       MOV      EAX,1
    000164AB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13936

    000164B1  B8 01000000       MOV      EAX,1
    000164B6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13937

    000164BC  B8 01000000       MOV      EAX,1
    000164C1  8B C8             MOV      ECX,EAX
    000164C3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000164C6  48                DEC      EAX
    000164C7  BB 0E000000       MOV      EBX,14
    000164CC  F7 E3             MUL      EBX
    000164CE  50                PUSH     EAX
    000164CF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000164D2  48                DEC      EAX
    000164D3  BB 02000000       MOV      EBX,2
    000164D8  F7 E3             MUL      EBX
    000164DA  5B                POP      EBX
    000164DB  03 C3             ADD      EAX,EBX
    000164DD  8B F8             MOV      EDI,EAX
    000164DF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     13938

    000164E6  B8 01000000       MOV      EAX,1
    000164EB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13939

    000164F1  B8 01000000       MOV      EAX,1
    000164F6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     13941

    000164FC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016503  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016508  5B                POP      EBX

    LINE     13943

    00016509  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016510  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00016515  5B                POP      EBX

    LINE     13945

    00016516  B8 0A000000       MOV      EAX,10
    0001651B  40                INC      EAX
    0001651C  50                PUSH     EAX
    0001651D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016520  5B                POP      EBX
    00016521  3B C3             CMP      EAX,EBX
    00016523  0F 8503000000     JNE      3
    00016529  EB                JMP      

    LINE     13959

    0001652A  56                PUSH     ESI
    0001652B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00016531  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00016537  FF D1             CALL     ECX                       run_inner_proc
    00016539  5E                POP      ESI                       /* restore callers static pointer */

    LINE     13961

    0001653A  B8 01000000       MOV      EAX,1
    0001653F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     13963

    00016542  B8 01000000       MOV      EAX,1
    00016547  8B C8             MOV      ECX,EAX
    00016549  B8 0A000000       MOV      EAX,10
    0001654E  50                PUSH     EAX
    0001654F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00016552  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016555  5B                POP      EBX
    00016556  53                PUSH     EBX
    00016557  3B C3             CMP      EAX,EBX
    00016559  0F 8E03000000     JLE      3
    0001655F  EB                JMP      

    LINE     13965

    00016560  B8 01000000       MOV      EAX,1
    00016565  8B C8             MOV      ECX,EAX
    00016567  B8 05000000       MOV      EAX,5
    0001656C  50                PUSH     EAX
    0001656D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00016570  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016573  5B                POP      EBX
    00016574  53                PUSH     EBX
    00016575  3B C3             CMP      EAX,EBX
    00016577  0F 8E03000000     JLE      3
    0001657D  EB                JMP      

    LINE     13972

    0001657E  B8 01000000       MOV      EAX,1
    00016583  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13973

    00016586  B8 01000000       MOV      EAX,1
    0001658B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13974

    0001658E  B8 01000000       MOV      EAX,1
    00016593  8B C8             MOV      ECX,EAX
    00016595  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016598  48                DEC      EAX
    00016599  BB 0E000000       MOV      EBX,14
    0001659E  F7 E3             MUL      EBX
    000165A0  50                PUSH     EAX
    000165A1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000165A4  48                DEC      EAX
    000165A5  BB 02000000       MOV      EBX,2
    000165AA  F7 E3             MUL      EBX
    000165AC  5B                POP      EBX
    000165AD  03 C3             ADD      EAX,EBX
    000165AF  8B F8             MOV      EDI,EAX
    000165B1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     13975

    000165B5  B8 01000000       MOV      EAX,1
    000165BA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13976

    000165BD  B8 01000000       MOV      EAX,1
    000165C2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13978

    000165C5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000165CC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000165D1  5B                POP      EBX

    LINE     13980

    000165D2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000165D9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000165DE  5B                POP      EBX

    LINE     13982

    000165DF  B8 0A000000       MOV      EAX,10
    000165E4  40                INC      EAX
    000165E5  50                PUSH     EAX
    000165E6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000165E9  5B                POP      EBX
    000165EA  3B C3             CMP      EAX,EBX
    000165EC  0F 8503000000     JNE      3
    000165F2  EB                JMP      

    LINE     13989

    000165F3  B8 01000000       MOV      EAX,1
    000165F8  8B C8             MOV      ECX,EAX
    000165FA  B8 0A000000       MOV      EAX,10
    000165FF  50                PUSH     EAX
    00016600  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016603  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016606  5B                POP      EBX
    00016607  53                PUSH     EBX
    00016608  3B C3             CMP      EAX,EBX
    0001660A  0F 8E03000000     JLE      3
    00016610  EB                JMP      

    LINE     13991

    00016611  B8 01000000       MOV      EAX,1
    00016616  8B C8             MOV      ECX,EAX
    00016618  B8 05000000       MOV      EAX,5
    0001661D  50                PUSH     EAX
    0001661E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016621  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016624  5B                POP      EBX
    00016625  53                PUSH     EBX
    00016626  3B C3             CMP      EAX,EBX
    00016628  0F 8E03000000     JLE      3
    0001662E  EB                JMP      

    LINE     13998

    0001662F  B8 01000000       MOV      EAX,1
    00016634  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     13999

    00016637  B8 01000000       MOV      EAX,1
    0001663C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14000

    0001663F  B8 01000000       MOV      EAX,1
    00016644  8B C8             MOV      ECX,EAX
    00016646  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016649  48                DEC      EAX
    0001664A  BB 0E000000       MOV      EBX,14
    0001664F  F7 E3             MUL      EBX
    00016651  50                PUSH     EAX
    00016652  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016655  48                DEC      EAX
    00016656  BB 02000000       MOV      EBX,2
    0001665B  F7 E3             MUL      EBX
    0001665D  5B                POP      EBX
    0001665E  03 C3             ADD      EAX,EBX
    00016660  8B F8             MOV      EDI,EAX
    00016662  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14001

    00016666  B8 01000000       MOV      EAX,1
    0001666B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14002

    0001666E  B8 01000000       MOV      EAX,1
    00016673  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14004

    00016676  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001667D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00016682  5B                POP      EBX

    LINE     14006

    00016683  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001668A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001668F  5B                POP      EBX

    LINE     14008

    00016690  B8 0A000000       MOV      EAX,10
    00016695  40                INC      EAX
    00016696  50                PUSH     EAX
    00016697  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001669A  5B                POP      EBX
    0001669B  3B C3             CMP      EAX,EBX
    0001669D  0F 8503000000     JNE      3
    000166A3  EB                JMP      

    LINE     14016

    000166A4  B8 01000000       MOV      EAX,1
    000166A9  8B C8             MOV      ECX,EAX
    000166AB  B8 0A000000       MOV      EAX,10
    000166B0  50                PUSH     EAX
    000166B1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000166B4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000166B7  5B                POP      EBX
    000166B8  53                PUSH     EBX
    000166B9  3B C3             CMP      EAX,EBX
    000166BB  0F 8E03000000     JLE      3
    000166C1  EB                JMP      

    LINE     14018

    000166C2  B8 01000000       MOV      EAX,1
    000166C7  8B C8             MOV      ECX,EAX
    000166C9  B8 05000000       MOV      EAX,5
    000166CE  50                PUSH     EAX
    000166CF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000166D2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000166D5  5B                POP      EBX
    000166D6  53                PUSH     EBX
    000166D7  3B C3             CMP      EAX,EBX
    000166D9  0F 8E03000000     JLE      3
    000166DF  EB                JMP      

    LINE     14025

    000166E0  B8 01000000       MOV      EAX,1
    000166E5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14026

    000166EB  B8 01000000       MOV      EAX,1
    000166F0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14027

    000166F6  B8 01000000       MOV      EAX,1
    000166FB  8B C8             MOV      ECX,EAX
    000166FD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016700  48                DEC      EAX
    00016701  BB 0E000000       MOV      EBX,14
    00016706  F7 E3             MUL      EBX
    00016708  50                PUSH     EAX
    00016709  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001670C  48                DEC      EAX
    0001670D  BB 02000000       MOV      EBX,2
    00016712  F7 E3             MUL      EBX
    00016714  5B                POP      EBX
    00016715  03 C3             ADD      EAX,EBX
    00016717  8B F8             MOV      EDI,EAX
    00016719  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14028

    00016720  B8 01000000       MOV      EAX,1
    00016725  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14029

    0001672B  B8 01000000       MOV      EAX,1
    00016730  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14031

    00016736  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001673D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016742  5B                POP      EBX

    LINE     14033

    00016743  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001674A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001674F  5B                POP      EBX

    LINE     14035

    00016750  B8 0A000000       MOV      EAX,10
    00016755  40                INC      EAX
    00016756  50                PUSH     EAX
    00016757  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001675A  5B                POP      EBX
    0001675B  3B C3             CMP      EAX,EBX
    0001675D  0F 8503000000     JNE      3
    00016763  EB                JMP      

    LINE     14042

    00016764  B8 01000000       MOV      EAX,1
    00016769  8B C8             MOV      ECX,EAX
    0001676B  B8 0A000000       MOV      EAX,10
    00016770  50                PUSH     EAX
    00016771  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016774  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016777  5B                POP      EBX
    00016778  53                PUSH     EBX
    00016779  3B C3             CMP      EAX,EBX
    0001677B  0F 8E03000000     JLE      3
    00016781  EB                JMP      

    LINE     14044

    00016782  B8 01000000       MOV      EAX,1
    00016787  8B C8             MOV      ECX,EAX
    00016789  B8 05000000       MOV      EAX,5
    0001678E  50                PUSH     EAX
    0001678F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016792  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016795  5B                POP      EBX
    00016796  53                PUSH     EBX
    00016797  3B C3             CMP      EAX,EBX
    00016799  0F 8E03000000     JLE      3
    0001679F  EB                JMP      

    LINE     14051

    000167A0  B8 01000000       MOV      EAX,1
    000167A5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14052

    000167AB  B8 01000000       MOV      EAX,1
    000167B0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14053

    000167B6  B8 01000000       MOV      EAX,1
    000167BB  8B C8             MOV      ECX,EAX
    000167BD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000167C0  48                DEC      EAX
    000167C1  BB 0E000000       MOV      EBX,14
    000167C6  F7 E3             MUL      EBX
    000167C8  50                PUSH     EAX
    000167C9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000167CC  48                DEC      EAX
    000167CD  BB 02000000       MOV      EBX,2
    000167D2  F7 E3             MUL      EBX
    000167D4  5B                POP      EBX
    000167D5  03 C3             ADD      EAX,EBX
    000167D7  8B F8             MOV      EDI,EAX
    000167D9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14054

    000167E0  B8 01000000       MOV      EAX,1
    000167E5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14055

    000167EB  B8 01000000       MOV      EAX,1
    000167F0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14057

    000167F6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000167FD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016802  5B                POP      EBX

    LINE     14059

    00016803  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001680A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001680F  5B                POP      EBX

    LINE     14061

    00016810  B8 0A000000       MOV      EAX,10
    00016815  40                INC      EAX
    00016816  50                PUSH     EAX
    00016817  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001681A  5B                POP      EBX
    0001681B  3B C3             CMP      EAX,EBX
    0001681D  0F 8503000000     JNE      3
    00016823  EB                JMP      

    LINE     14075

    00016824  56                PUSH     ESI
    00016825  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001682B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00016831  FF D1             CALL     ECX                       run_inner_proc
    00016833  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14077

    00016834  B8 01000000       MOV      EAX,1
    00016839  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14079

    0001683C  B8 01000000       MOV      EAX,1
    00016841  8B C8             MOV      ECX,EAX
    00016843  B8 0A000000       MOV      EAX,10
    00016848  50                PUSH     EAX
    00016849  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001684C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001684F  5B                POP      EBX
    00016850  53                PUSH     EBX
    00016851  3B C3             CMP      EAX,EBX
    00016853  0F 8E03000000     JLE      3
    00016859  EB                JMP      

    LINE     14081

    0001685A  B8 01000000       MOV      EAX,1
    0001685F  8B C8             MOV      ECX,EAX
    00016861  B8 05000000       MOV      EAX,5
    00016866  50                PUSH     EAX
    00016867  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001686A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001686D  5B                POP      EBX
    0001686E  53                PUSH     EBX
    0001686F  3B C3             CMP      EAX,EBX
    00016871  0F 8E03000000     JLE      3
    00016877  EB                JMP      

    LINE     14088

    00016878  B8 01000000       MOV      EAX,1
    0001687D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14089

    00016880  B8 01000000       MOV      EAX,1
    00016885  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14090

    00016888  B8 01000000       MOV      EAX,1
    0001688D  8B C8             MOV      ECX,EAX
    0001688F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016892  48                DEC      EAX
    00016893  BB 0E000000       MOV      EBX,14
    00016898  F7 E3             MUL      EBX
    0001689A  50                PUSH     EAX
    0001689B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001689E  48                DEC      EAX
    0001689F  BB 02000000       MOV      EBX,2
    000168A4  F7 E3             MUL      EBX
    000168A6  5B                POP      EBX
    000168A7  03 C3             ADD      EAX,EBX
    000168A9  8B F8             MOV      EDI,EAX
    000168AB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14091

    000168AF  B8 01000000       MOV      EAX,1
    000168B4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14092

    000168B7  B8 01000000       MOV      EAX,1
    000168BC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14094

    000168BF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page  12


    000168C6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000168CB  5B                POP      EBX

    LINE     14096

    000168CC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000168D3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000168D8  5B                POP      EBX

    LINE     14098

    000168D9  B8 0A000000       MOV      EAX,10
    000168DE  40                INC      EAX
    000168DF  50                PUSH     EAX
    000168E0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000168E3  5B                POP      EBX
    000168E4  3B C3             CMP      EAX,EBX
    000168E6  0F 8503000000     JNE      3
    000168EC  EB                JMP      

    LINE     14105

    000168ED  B8 01000000       MOV      EAX,1
    000168F2  8B C8             MOV      ECX,EAX
    000168F4  B8 0A000000       MOV      EAX,10
    000168F9  50                PUSH     EAX
    000168FA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000168FD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016900  5B                POP      EBX
    00016901  53                PUSH     EBX
    00016902  3B C3             CMP      EAX,EBX
    00016904  0F 8E03000000     JLE      3
    0001690A  EB                JMP      

    LINE     14107

    0001690B  B8 01000000       MOV      EAX,1
    00016910  8B C8             MOV      ECX,EAX
    00016912  B8 05000000       MOV      EAX,5
    00016917  50                PUSH     EAX
    00016918  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001691B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001691E  5B                POP      EBX
    0001691F  53                PUSH     EBX
    00016920  3B C3             CMP      EAX,EBX
    00016922  0F 8E03000000     JLE      3
    00016928  EB                JMP      

    LINE     14114

    00016929  B8 01000000       MOV      EAX,1
    0001692E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14115

    00016931  B8 01000000       MOV      EAX,1
    00016936  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14116

    00016939  B8 01000000       MOV      EAX,1
    0001693E  8B C8             MOV      ECX,EAX
    00016940  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016943  48                DEC      EAX
    00016944  BB 0E000000       MOV      EBX,14
    00016949  F7 E3             MUL      EBX
    0001694B  50                PUSH     EAX
    0001694C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001694F  48                DEC      EAX
    00016950  BB 02000000       MOV      EBX,2
    00016955  F7 E3             MUL      EBX
    00016957  5B                POP      EBX
    00016958  03 C3             ADD      EAX,EBX
    0001695A  8B F8             MOV      EDI,EAX
    0001695C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14117

    00016960  B8 01000000       MOV      EAX,1
    00016965  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14118

    00016968  B8 01000000       MOV      EAX,1
    0001696D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14120

    00016970  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016977  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001697C  5B                POP      EBX

    LINE     14122

    0001697D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016984  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00016989  5B                POP      EBX

    LINE     14124

    0001698A  B8 0A000000       MOV      EAX,10
    0001698F  40                INC      EAX
    00016990  50                PUSH     EAX
    00016991  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016994  5B                POP      EBX
    00016995  3B C3             CMP      EAX,EBX
    00016997  0F 8503000000     JNE      3
    0001699D  EB                JMP      

    LINE     14132

    0001699E  B8 01000000       MOV      EAX,1
    000169A3  8B C8             MOV      ECX,EAX
    000169A5  B8 0A000000       MOV      EAX,10
    000169AA  50                PUSH     EAX
    000169AB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000169AE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000169B1  5B                POP      EBX
    000169B2  53                PUSH     EBX
    000169B3  3B C3             CMP      EAX,EBX
    000169B5  0F 8E03000000     JLE      3
    000169BB  EB                JMP      

    LINE     14134

    000169BC  B8 01000000       MOV      EAX,1
    000169C1  8B C8             MOV      ECX,EAX
    000169C3  B8 05000000       MOV      EAX,5
    000169C8  50                PUSH     EAX
    000169C9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000169CC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000169CF  5B                POP      EBX
    000169D0  53                PUSH     EBX
    000169D1  3B C3             CMP      EAX,EBX
    000169D3  0F 8E03000000     JLE      3
    000169D9  EB                JMP      

    LINE     14141

    000169DA  B8 01000000       MOV      EAX,1
    000169DF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14142

    000169E5  B8 01000000       MOV      EAX,1
    000169EA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14143

    000169F0  B8 01000000       MOV      EAX,1
    000169F5  8B C8             MOV      ECX,EAX
    000169F7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000169FA  48                DEC      EAX
    000169FB  BB 0E000000       MOV      EBX,14
    00016A00  F7 E3             MUL      EBX
    00016A02  50                PUSH     EAX
    00016A03  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016A06  48                DEC      EAX
    00016A07  BB 02000000       MOV      EBX,2
    00016A0C  F7 E3             MUL      EBX
    00016A0E  5B                POP      EBX
    00016A0F  03 C3             ADD      EAX,EBX
    00016A11  8B F8             MOV      EDI,EAX
    00016A13  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14144

    00016A1A  B8 01000000       MOV      EAX,1
    00016A1F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14145

    00016A25  B8 01000000       MOV      EAX,1
    00016A2A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14147

    00016A30  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00016A37  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016A3C  5B                POP      EBX

    LINE     14149

    00016A3D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00016A44  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00016A49  5B                POP      EBX

    LINE     14151

    00016A4A  B8 0A000000       MOV      EAX,10
    00016A4F  40                INC      EAX
    00016A50  50                PUSH     EAX
    00016A51  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016A54  5B                POP      EBX
    00016A55  3B C3             CMP      EAX,EBX
    00016A57  0F 8503000000     JNE      3
    00016A5D  EB                JMP      

    LINE     14158

    00016A5E  B8 01000000       MOV      EAX,1
    00016A63  8B C8             MOV      ECX,EAX
    00016A65  B8 0A000000       MOV      EAX,10
    00016A6A  50                PUSH     EAX
    00016A6B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016A6E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016A71  5B                POP      EBX
    00016A72  53                PUSH     EBX
    00016A73  3B C3             CMP      EAX,EBX
    00016A75  0F 8E03000000     JLE      3
    00016A7B  EB                JMP      

    LINE     14160

    00016A7C  B8 01000000       MOV      EAX,1
    00016A81  8B C8             MOV      ECX,EAX
    00016A83  B8 05000000       MOV      EAX,5
    00016A88  50                PUSH     EAX
    00016A89  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016A8C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016A8F  5B                POP      EBX
    00016A90  53                PUSH     EBX
    00016A91  3B C3             CMP      EAX,EBX
    00016A93  0F 8E03000000     JLE      3
    00016A99  EB                JMP      

    LINE     14167

    00016A9A  B8 01000000       MOV      EAX,1
    00016A9F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14168

    00016AA5  B8 01000000       MOV      EAX,1
    00016AAA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14169

    00016AB0  B8 01000000       MOV      EAX,1
    00016AB5  8B C8             MOV      ECX,EAX
    00016AB7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016ABA  48                DEC      EAX
    00016ABB  BB 0E000000       MOV      EBX,14
    00016AC0  F7 E3             MUL      EBX
    00016AC2  50                PUSH     EAX
    00016AC3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016AC6  48                DEC      EAX
    00016AC7  BB 02000000       MOV      EBX,2
    00016ACC  F7 E3             MUL      EBX
    00016ACE  5B                POP      EBX
    00016ACF  03 C3             ADD      EAX,EBX
    00016AD1  8B F8             MOV      EDI,EAX
    00016AD3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14170

    00016ADA  B8 01000000       MOV      EAX,1
    00016ADF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14171

    00016AE5  B8 01000000       MOV      EAX,1
    00016AEA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14173

    00016AF0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016AF7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016AFC  5B                POP      EBX

    LINE     14175

    00016AFD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016B04  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00016B09  5B                POP      EBX

    LINE     14177

    00016B0A  B8 0A000000       MOV      EAX,10
    00016B0F  40                INC      EAX
    00016B10  50                PUSH     EAX
    00016B11  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016B14  5B                POP      EBX
    00016B15  3B C3             CMP      EAX,EBX
    00016B17  0F 8503000000     JNE      3
    00016B1D  EB                JMP      

    LINE     14191

    00016B1E  56                PUSH     ESI
    00016B1F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00016B25  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00016B2B  FF D1             CALL     ECX                       run_inner_proc
    00016B2D  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14193

    00016B2E  B8 01000000       MOV      EAX,1
    00016B33  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14195

    00016B36  B8 01000000       MOV      EAX,1
    00016B3B  8B C8             MOV      ECX,EAX
    00016B3D  B8 0A000000       MOV      EAX,10
    00016B42  50                PUSH     EAX
    00016B43  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00016B46  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016B49  5B                POP      EBX
    00016B4A  53                PUSH     EBX
    00016B4B  3B C3             CMP      EAX,EBX
    00016B4D  0F 8E03000000     JLE      3
    00016B53  EB                JMP      

    LINE     14197

    00016B54  B8 01000000       MOV      EAX,1
    00016B59  8B C8             MOV      ECX,EAX
    00016B5B  B8 05000000       MOV      EAX,5
    00016B60  50                PUSH     EAX
    00016B61  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00016B64  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016B67  5B                POP      EBX
    00016B68  53                PUSH     EBX
    00016B69  3B C3             CMP      EAX,EBX
    00016B6B  0F 8E03000000     JLE      3
    00016B71  EB                JMP      

    LINE     14204

    00016B72  B8 01000000       MOV      EAX,1
    00016B77  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14205

    00016B7A  B8 01000000       MOV      EAX,1
    00016B7F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14206

    00016B82  B8 01000000       MOV      EAX,1
    00016B87  8B C8             MOV      ECX,EAX
    00016B89  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016B8C  48                DEC      EAX
    00016B8D  BB 0E000000       MOV      EBX,14
    00016B92  F7 E3             MUL      EBX
    00016B94  50                PUSH     EAX
    00016B95  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016B98  48                DEC      EAX
    00016B99  BB 02000000       MOV      EBX,2
    00016B9E  F7 E3             MUL      EBX
    00016BA0  5B                POP      EBX
    00016BA1  03 C3             ADD      EAX,EBX
    00016BA3  8B F8             MOV      EDI,EAX
    00016BA5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14207

    00016BA9  B8 01000000       MOV      EAX,1
    00016BAE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14208

    00016BB1  B8 01000000       MOV      EAX,1
    00016BB6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14210

    00016BB9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00016BC0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00016BC5  5B                POP      EBX

    LINE     14212

    00016BC6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00016BCD  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00016BD2  5B                POP      EBX

    LINE     14214

    00016BD3  B8 0A000000       MOV      EAX,10
    00016BD8  40                INC      EAX
    00016BD9  50                PUSH     EAX
    00016BDA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016BDD  5B                POP      EBX
    00016BDE  3B C3             CMP      EAX,EBX
    00016BE0  0F 8503000000     JNE      3
    00016BE6  EB                JMP      

    LINE     14221

    00016BE7  B8 01000000       MOV      EAX,1
    00016BEC  8B C8             MOV      ECX,EAX
    00016BEE  B8 0A000000       MOV      EAX,10
    00016BF3  50                PUSH     EAX
    00016BF4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016BF7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016BFA  5B                POP      EBX
    00016BFB  53                PUSH     EBX
    00016BFC  3B C3             CMP      EAX,EBX
    00016BFE  0F 8E03000000     JLE      3
    00016C04  EB                JMP      

    LINE     14223

    00016C05  B8 01000000       MOV      EAX,1
    00016C0A  8B C8             MOV      ECX,EAX
    00016C0C  B8 05000000       MOV      EAX,5
    00016C11  50                PUSH     EAX
    00016C12  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016C15  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016C18  5B                POP      EBX
    00016C19  53                PUSH     EBX
    00016C1A  3B C3             CMP      EAX,EBX
    00016C1C  0F 8E03000000     JLE      3
    00016C22  EB                JMP      

    LINE     14230

    00016C23  B8 01000000       MOV      EAX,1
    00016C28  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14231

    00016C2B  B8 01000000       MOV      EAX,1
    00016C30  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14232

    00016C33  B8 01000000       MOV      EAX,1
    00016C38  8B C8             MOV      ECX,EAX
    00016C3A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016C3D  48                DEC      EAX
    00016C3E  BB 0E000000       MOV      EBX,14
    00016C43  F7 E3             MUL      EBX
    00016C45  50                PUSH     EAX
    00016C46  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016C49  48                DEC      EAX
    00016C4A  BB 02000000       MOV      EBX,2
    00016C4F  F7 E3             MUL      EBX
    00016C51  5B                POP      EBX
    00016C52  03 C3             ADD      EAX,EBX
    00016C54  8B F8             MOV      EDI,EAX
    00016C56  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14233

    00016C5A  B8 01000000       MOV      EAX,1
    00016C5F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14234

    00016C62  B8 01000000       MOV      EAX,1
    00016C67  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14236

    00016C6A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016C71  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00016C76  5B                POP      EBX

    LINE     14238

    00016C77  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016C7E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00016C83  5B                POP      EBX

    LINE     14240

    00016C84  B8 0A000000       MOV      EAX,10
    00016C89  40                INC      EAX
    00016C8A  50                PUSH     EAX
    00016C8B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016C8E  5B                POP      EBX
    00016C8F  3B C3             CMP      EAX,EBX
    00016C91  0F 8503000000     JNE      3
    00016C97  EB                JMP      

    LINE     14248

    00016C98  B8 01000000       MOV      EAX,1
    00016C9D  8B C8             MOV      ECX,EAX
    00016C9F  B8 0A000000       MOV      EAX,10
    00016CA4  50                PUSH     EAX
    00016CA5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00016CA8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016CAB  5B                POP      EBX
    00016CAC  53                PUSH     EBX
    00016CAD  3B C3             CMP      EAX,EBX
    00016CAF  0F 8E03000000     JLE      3
    00016CB5  EB                JMP      

    LINE     14250

    00016CB6  B8 01000000       MOV      EAX,1
    00016CBB  8B C8             MOV      ECX,EAX
    00016CBD  B8 05000000       MOV      EAX,5
    00016CC2  50                PUSH     EAX
    00016CC3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00016CC6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016CC9  5B                POP      EBX
    00016CCA  53                PUSH     EBX
    00016CCB  3B C3             CMP      EAX,EBX
    00016CCD  0F 8E03000000     JLE      3
    00016CD3  EB                JMP      

    LINE     14257

    00016CD4  B8 01000000       MOV      EAX,1
    00016CD9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14258

    00016CDF  B8 01000000       MOV      EAX,1
    00016CE4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14259

    00016CEA  B8 01000000       MOV      EAX,1
    00016CEF  8B C8             MOV      ECX,EAX
    00016CF1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016CF4  48                DEC      EAX
    00016CF5  BB 0E000000       MOV      EBX,14
    00016CFA  F7 E3             MUL      EBX
    00016CFC  50                PUSH     EAX
    00016CFD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016D00  48                DEC      EAX
    00016D01  BB 02000000       MOV      EBX,2
    00016D06  F7 E3             MUL      EBX
    00016D08  5B                POP      EBX
    00016D09  03 C3             ADD      EAX,EBX
    00016D0B  8B F8             MOV      EDI,EAX
    00016D0D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14260

    00016D14  B8 01000000       MOV      EAX,1
    00016D19  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14261

    00016D1F  B8 01000000       MOV      EAX,1
    00016D24  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14263

    00016D2A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00016D31  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016D36  5B                POP      EBX

    LINE     14265

    00016D37  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00016D3E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00016D43  5B                POP      EBX

    LINE     14267

    00016D44  B8 0A000000       MOV      EAX,10
    00016D49  40                INC      EAX
    00016D4A  50                PUSH     EAX
    00016D4B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016D4E  5B                POP      EBX
    00016D4F  3B C3             CMP      EAX,EBX
    00016D51  0F 8503000000     JNE      3
    00016D57  EB                JMP      

    LINE     14274

    00016D58  B8 01000000       MOV      EAX,1
    00016D5D  8B C8             MOV      ECX,EAX
    00016D5F  B8 0A000000       MOV      EAX,10
    00016D64  50                PUSH     EAX
    00016D65  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016D68  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016D6B  5B                POP      EBX
    00016D6C  53                PUSH     EBX
    00016D6D  3B C3             CMP      EAX,EBX
    00016D6F  0F 8E03000000     JLE      3
    00016D75  EB                JMP      

    LINE     14276

    00016D76  B8 01000000       MOV      EAX,1
    00016D7B  8B C8             MOV      ECX,EAX
    00016D7D  B8 05000000       MOV      EAX,5
    00016D82  50                PUSH     EAX
    00016D83  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016D86  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016D89  5B                POP      EBX
    00016D8A  53                PUSH     EBX
    00016D8B  3B C3             CMP      EAX,EBX
    00016D8D  0F 8E03000000     JLE      3
    00016D93  EB                JMP      

    LINE     14283

    00016D94  B8 01000000       MOV      EAX,1
    00016D99  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14284

    00016D9F  B8 01000000       MOV      EAX,1
    00016DA4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14285

    00016DAA  B8 01000000       MOV      EAX,1
    00016DAF  8B C8             MOV      ECX,EAX
    00016DB1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016DB4  48                DEC      EAX
    00016DB5  BB 0E000000       MOV      EBX,14
    00016DBA  F7 E3             MUL      EBX
    00016DBC  50                PUSH     EAX
    00016DBD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016DC0  48                DEC      EAX
    00016DC1  BB 02000000       MOV      EBX,2
    00016DC6  F7 E3             MUL      EBX
    00016DC8  5B                POP      EBX
    00016DC9  03 C3             ADD      EAX,EBX
    00016DCB  8B F8             MOV      EDI,EAX
    00016DCD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14286

    00016DD4  B8 01000000       MOV      EAX,1
    00016DD9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14287

    00016DDF  B8 01000000       MOV      EAX,1
    00016DE4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14289

    00016DEA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016DF1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00016DF6  5B                POP      EBX

    LINE     14291

    00016DF7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016DFE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00016E03  5B                POP      EBX

    LINE     14293

    00016E04  B8 0A000000       MOV      EAX,10
    00016E09  40                INC      EAX
    00016E0A  50                PUSH     EAX
    00016E0B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016E0E  5B                POP      EBX
    00016E0F  3B C3             CMP      EAX,EBX
    00016E11  0F 8503000000     JNE      3
    00016E17  EB                JMP      

    LINE     14307

    00016E18  56                PUSH     ESI
    00016E19  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00016E1F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00016E25  FF D1             CALL     ECX                       run_inner_proc
    00016E27  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14309

    00016E28  B8 01000000       MOV      EAX,1
    00016E2D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14311

    00016E30  B8 01000000       MOV      EAX,1
    00016E35  8B C8             MOV      ECX,EAX
    00016E37  B8 0A000000       MOV      EAX,10
    00016E3C  50                PUSH     EAX
    00016E3D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00016E40  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016E43  5B                POP      EBX
    00016E44  53                PUSH     EBX
    00016E45  3B C3             CMP      EAX,EBX
    00016E47  0F 8E03000000     JLE      3
    00016E4D  EB                JMP      

    LINE     14313

    00016E4E  B8 01000000       MOV      EAX,1
    00016E53  8B C8             MOV      ECX,EAX
    00016E55  B8 05000000       MOV      EAX,5
    00016E5A  50                PUSH     EAX
    00016E5B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00016E5E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016E61  5B                POP      EBX
    00016E62  53                PUSH     EBX
    00016E63  3B C3             CMP      EAX,EBX
    00016E65  0F 8E03000000     JLE      3
    00016E6B  EB                JMP      

    LINE     14320

    00016E6C  B8 01000000       MOV      EAX,1
    00016E71  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14321

    00016E74  B8 01000000       MOV      EAX,1
    00016E79  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14322

    00016E7C  B8 01000000       MOV      EAX,1
    00016E81  8B C8             MOV      ECX,EAX
    00016E83  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016E86  48                DEC      EAX
    00016E87  BB 0E000000       MOV      EBX,14
    00016E8C  F7 E3             MUL      EBX
    00016E8E  50                PUSH     EAX
    00016E8F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016E92  48                DEC      EAX
    00016E93  BB 02000000       MOV      EBX,2
    00016E98  F7 E3             MUL      EBX
    00016E9A  5B                POP      EBX
    00016E9B  03 C3             ADD      EAX,EBX
    00016E9D  8B F8             MOV      EDI,EAX
    00016E9F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14323

    00016EA3  B8 01000000       MOV      EAX,1
    00016EA8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14324

    00016EAB  B8 01000000       MOV      EAX,1
    00016EB0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14326

    00016EB3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00016EBA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00016EBF  5B                POP      EBX

    LINE     14328

    00016EC0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00016EC7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00016ECC  5B                POP      EBX

    LINE     14330

    00016ECD  B8 0A000000       MOV      EAX,10
    00016ED2  40                INC      EAX
    00016ED3  50                PUSH     EAX
    00016ED4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016ED7  5B                POP      EBX
    00016ED8  3B C3             CMP      EAX,EBX
    00016EDA  0F 8503000000     JNE      3
    00016EE0  EB                JMP      

    LINE     14337

    00016EE1  B8 01000000       MOV      EAX,1
    00016EE6  8B C8             MOV      ECX,EAX
    00016EE8  B8 0A000000       MOV      EAX,10
    00016EED  50                PUSH     EAX
    00016EEE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00016EF1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016EF4  5B                POP      EBX
    00016EF5  53                PUSH     EBX
    00016EF6  3B C3             CMP      EAX,EBX
    00016EF8  0F 8E03000000     JLE      3
    00016EFE  EB                JMP      

    LINE     14339

    00016EFF  B8 01000000       MOV      EAX,1
    00016F04  8B C8             MOV      ECX,EAX
    00016F06  B8 05000000       MOV      EAX,5
    00016F0B  50                PUSH     EAX
    00016F0C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00016F0F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016F12  5B                POP      EBX
    00016F13  53                PUSH     EBX
    00016F14  3B C3             CMP      EAX,EBX
    00016F16  0F 8E03000000     JLE      3
    00016F1C  EB                JMP      

    LINE     14346

    00016F1D  B8 01000000       MOV      EAX,1
    00016F22  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14347

    00016F25  B8 01000000       MOV      EAX,1
    00016F2A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14348

    00016F2D  B8 01000000       MOV      EAX,1
    00016F32  8B C8             MOV      ECX,EAX
    00016F34  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00016F37  48                DEC      EAX
    00016F38  BB 0E000000       MOV      EBX,14
    00016F3D  F7 E3             MUL      EBX
    00016F3F  50                PUSH     EAX
    00016F40  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00016F43  48                DEC      EAX
    00016F44  BB 02000000       MOV      EBX,2
    00016F49  F7 E3             MUL      EBX
    00016F4B  5B                POP      EBX
    00016F4C  03 C3             ADD      EAX,EBX
    00016F4E  8B F8             MOV      EDI,EAX
    00016F50  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14349

    00016F54  B8 01000000       MOV      EAX,1
    00016F59  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14350

    00016F5C  B8 01000000       MOV      EAX,1
    00016F61  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14352

    00016F64  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00016F6B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00016F70  5B                POP      EBX

    LINE     14354

    00016F71  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00016F78  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00016F7D  5B                POP      EBX

    LINE     14356

    00016F7E  B8 0A000000       MOV      EAX,10
    00016F83  40                INC      EAX
    00016F84  50                PUSH     EAX
    00016F85  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016F88  5B                POP      EBX
    00016F89  3B C3             CMP      EAX,EBX
    00016F8B  0F 8503000000     JNE      3
    00016F91  EB                JMP      

    LINE     14364

    00016F92  B8 01000000       MOV      EAX,1
    00016F97  8B C8             MOV      ECX,EAX
    00016F99  B8 0A000000       MOV      EAX,10
    00016F9E  50                PUSH     EAX
    00016F9F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00016FA2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016FA5  5B                POP      EBX
    00016FA6  53                PUSH     EBX
    00016FA7  3B C3             CMP      EAX,EBX
    00016FA9  0F 8E03000000     JLE      3
    00016FAF  EB                JMP      

    LINE     14366

    00016FB0  B8 01000000       MOV      EAX,1
    00016FB5  8B C8             MOV      ECX,EAX
    00016FB7  B8 05000000       MOV      EAX,5
    00016FBC  50                PUSH     EAX
    00016FBD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00016FC0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016FC3  5B                POP      EBX
    00016FC4  53                PUSH     EBX
    00016FC5  3B C3             CMP      EAX,EBX
    00016FC7  0F 8E03000000     JLE      3
    00016FCD  EB                JMP      

    LINE     14373

    00016FCE  B8 01000000       MOV      EAX,1
    00016FD3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14374

    00016FD9  B8 01000000       MOV      EAX,1
    00016FDE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14375

    00016FE4  B8 01000000       MOV      EAX,1
    00016FE9  8B C8             MOV      ECX,EAX
    00016FEB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00016FEE  48                DEC      EAX
    00016FEF  BB 0E000000       MOV      EBX,14
    00016FF4  F7 E3             MUL      EBX
    00016FF6  50                PUSH     EAX
    00016FF7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00016FFA  48                DEC      EAX
    00016FFB  BB 02000000       MOV      EBX,2
    00017000  F7 E3             MUL      EBX
    00017002  5B                POP      EBX
    00017003  03 C3             ADD      EAX,EBX
    00017005  8B F8             MOV      EDI,EAX
    00017007  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14376

    0001700E  B8 01000000       MOV      EAX,1
    00017013  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14377

    00017019  B8 01000000       MOV      EAX,1
    0001701E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14379

    00017024  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001702B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00017030  5B                POP      EBX

    LINE     14381

    00017031  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00017038  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001703D  5B                POP      EBX

    LINE     14383

    0001703E  B8 0A000000       MOV      EAX,10
    00017043  40                INC      EAX
    00017044  50                PUSH     EAX
    00017045  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017048  5B                POP      EBX
    00017049  3B C3             CMP      EAX,EBX
    0001704B  0F 8503000000     JNE      3
    00017051  EB                JMP      

    LINE     14390

    00017052  B8 01000000       MOV      EAX,1
    00017057  8B C8             MOV      ECX,EAX
    00017059  B8 0A000000       MOV      EAX,10
    0001705E  50                PUSH     EAX
    0001705F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00017062  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017065  5B                POP      EBX
    00017066  53                PUSH     EBX
    00017067  3B C3             CMP      EAX,EBX
    00017069  0F 8E03000000     JLE      3
    0001706F  EB                JMP      

    LINE     14392

    00017070  B8 01000000       MOV      EAX,1
    00017075  8B C8             MOV      ECX,EAX
    00017077  B8 05000000       MOV      EAX,5
    0001707C  50                PUSH     EAX
    0001707D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017080  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017083  5B                POP      EBX
    00017084  53                PUSH     EBX
    00017085  3B C3             CMP      EAX,EBX
    00017087  0F 8E03000000     JLE      3
    0001708D  EB                JMP      

    LINE     14399

    0001708E  B8 01000000       MOV      EAX,1
    00017093  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14400

    00017099  B8 01000000       MOV      EAX,1
    0001709E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14401

    000170A4  B8 01000000       MOV      EAX,1
    000170A9  8B C8             MOV      ECX,EAX
    000170AB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000170AE  48                DEC      EAX
    000170AF  BB 0E000000       MOV      EBX,14
    000170B4  F7 E3             MUL      EBX
    000170B6  50                PUSH     EAX
    000170B7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000170BA  48                DEC      EAX
    000170BB  BB 02000000       MOV      EBX,2
    000170C0  F7 E3             MUL      EBX
    000170C2  5B                POP      EBX
    000170C3  03 C3             ADD      EAX,EBX
    000170C5  8B F8             MOV      EDI,EAX
    000170C7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14402

    000170CE  B8 01000000       MOV      EAX,1
    000170D3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14403

    000170D9  B8 01000000       MOV      EAX,1
    000170DE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14405

    000170E4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000170EB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000170F0  5B                POP      EBX

    LINE     14407

    000170F1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000170F8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000170FD  5B                POP      EBX

    LINE     14409

    000170FE  B8 0A000000       MOV      EAX,10
    00017103  40                INC      EAX
    00017104  50                PUSH     EAX
    00017105  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017108  5B                POP      EBX
    00017109  3B C3             CMP      EAX,EBX
    0001710B  0F 8503000000     JNE      3
    00017111  EB                JMP      

    LINE     14423

    00017112  56                PUSH     ESI
    00017113  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00017119  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001711F  FF D1             CALL     ECX                       run_inner_proc
    00017121  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14425

    00017122  B8 01000000       MOV      EAX,1
    00017127  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14427

    0001712A  B8 01000000       MOV      EAX,1
    0001712F  8B C8             MOV      ECX,EAX
    00017131  B8 0A000000       MOV      EAX,10
    00017136  50                PUSH     EAX
    00017137  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001713A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001713D  5B                POP      EBX
    0001713E  53                PUSH     EBX
    0001713F  3B C3             CMP      EAX,EBX
    00017141  0F 8E03000000     JLE      3
    00017147  EB                JMP      

    LINE     14429

    00017148  B8 01000000       MOV      EAX,1
    0001714D  8B C8             MOV      ECX,EAX
    0001714F  B8 05000000       MOV      EAX,5
    00017154  50                PUSH     EAX
    00017155  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00017158  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001715B  5B                POP      EBX
    0001715C  53                PUSH     EBX
    0001715D  3B C3             CMP      EAX,EBX
    0001715F  0F 8E03000000     JLE      3
    00017165  EB                JMP      

    LINE     14436

    00017166  B8 01000000       MOV      EAX,1
    0001716B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14437

    0001716E  B8 01000000       MOV      EAX,1
    00017173  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14438

    00017176  B8 01000000       MOV      EAX,1
    0001717B  8B C8             MOV      ECX,EAX
    0001717D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017180  48                DEC      EAX
    00017181  BB 0E000000       MOV      EBX,14
    00017186  F7 E3             MUL      EBX
    00017188  50                PUSH     EAX
    00017189  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001718C  48                DEC      EAX
    0001718D  BB 02000000       MOV      EBX,2
    00017192  F7 E3             MUL      EBX
    00017194  5B                POP      EBX
    00017195  03 C3             ADD      EAX,EBX
    00017197  8B F8             MOV      EDI,EAX
    00017199  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14439

    0001719D  B8 01000000       MOV      EAX,1
    000171A2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14440

    000171A5  B8 01000000       MOV      EAX,1
    000171AA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14442

    000171AD  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000171B4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000171B9  5B                POP      EBX

    LINE     14444

    000171BA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000171C1  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000171C6  5B                POP      EBX

    LINE     14446

    000171C7  B8 0A000000       MOV      EAX,10
    000171CC  40                INC      EAX
    000171CD  50                PUSH     EAX
    000171CE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000171D1  5B                POP      EBX
    000171D2  3B C3             CMP      EAX,EBX
    000171D4  0F 8503000000     JNE      3
    000171DA  EB                JMP      

    LINE     14453

    000171DB  B8 01000000       MOV      EAX,1
    000171E0  8B C8             MOV      ECX,EAX
    000171E2  B8 0A000000       MOV      EAX,10
    000171E7  50                PUSH     EAX
    000171E8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000171EB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000171EE  5B                POP      EBX
    000171EF  53                PUSH     EBX
    000171F0  3B C3             CMP      EAX,EBX
    000171F2  0F 8E03000000     JLE      3
    000171F8  EB                JMP      

    LINE     14455

    000171F9  B8 01000000       MOV      EAX,1
    000171FE  8B C8             MOV      ECX,EAX
    00017200  B8 05000000       MOV      EAX,5
    00017205  50                PUSH     EAX
    00017206  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017209  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001720C  5B                POP      EBX
    0001720D  53                PUSH     EBX
    0001720E  3B C3             CMP      EAX,EBX
    00017210  0F 8E03000000     JLE      3
    00017216  EB                JMP      

    LINE     14462

    00017217  B8 01000000       MOV      EAX,1
    0001721C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14463

    0001721F  B8 01000000       MOV      EAX,1
    00017224  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14464

    00017227  B8 01000000       MOV      EAX,1
    0001722C  8B C8             MOV      ECX,EAX
    0001722E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017231  48                DEC      EAX
    00017232  BB 0E000000       MOV      EBX,14
    00017237  F7 E3             MUL      EBX
    00017239  50                PUSH     EAX
    0001723A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001723D  48                DEC      EAX
    0001723E  BB 02000000       MOV      EBX,2
    00017243  F7 E3             MUL      EBX
    00017245  5B                POP      EBX
    00017246  03 C3             ADD      EAX,EBX
    00017248  8B F8             MOV      EDI,EAX
    0001724A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14465

    0001724E  B8 01000000       MOV      EAX,1
    00017253  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14466

    00017256  B8 01000000       MOV      EAX,1
    0001725B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14468

    0001725E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00017265  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001726A  5B                POP      EBX

    LINE     14470

    0001726B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00017272  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00017277  5B                POP      EBX

    LINE     14472

    00017278  B8 0A000000       MOV      EAX,10
    0001727D  40                INC      EAX
    0001727E  50                PUSH     EAX
    0001727F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017282  5B                POP      EBX
    00017283  3B C3             CMP      EAX,EBX
    00017285  0F 8503000000     JNE      3
    0001728B  EB                JMP      

    LINE     14480

    0001728C  B8 01000000       MOV      EAX,1
    00017291  8B C8             MOV      ECX,EAX
    00017293  B8 0A000000       MOV      EAX,10
    00017298  50                PUSH     EAX
    00017299  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001729C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001729F  5B                POP      EBX
    000172A0  53                PUSH     EBX
    000172A1  3B C3             CMP      EAX,EBX
    000172A3  0F 8E03000000     JLE      3
    000172A9  EB                JMP      

    LINE     14482

    000172AA  B8 01000000       MOV      EAX,1
    000172AF  8B C8             MOV      ECX,EAX
    000172B1  B8 05000000       MOV      EAX,5
    000172B6  50                PUSH     EAX
    000172B7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000172BA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000172BD  5B                POP      EBX
    000172BE  53                PUSH     EBX
    000172BF  3B C3             CMP      EAX,EBX
    000172C1  0F 8E03000000     JLE      3
    000172C7  EB                JMP      

    LINE     14489

    000172C8  B8 01000000       MOV      EAX,1
    000172CD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14490

    000172D3  B8 01000000       MOV      EAX,1
    000172D8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14491

    000172DE  B8 01000000       MOV      EAX,1
    000172E3  8B C8             MOV      ECX,EAX
    000172E5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000172E8  48                DEC      EAX
    000172E9  BB 0E000000       MOV      EBX,14
    000172EE  F7 E3             MUL      EBX
    000172F0  50                PUSH     EAX
    000172F1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000172F4  48                DEC      EAX
    000172F5  BB 02000000       MOV      EBX,2
    000172FA  F7 E3             MUL      EBX
    000172FC  5B                POP      EBX
    000172FD  03 C3             ADD      EAX,EBX
    000172FF  8B F8             MOV      EDI,EAX
    00017301  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14492

    00017308  B8 01000000       MOV      EAX,1
    0001730D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14493

    00017313  B8 01000000       MOV      EAX,1
    00017318  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14495

    0001731E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00017325  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001732A  5B                POP      EBX

    LINE     14497

    0001732B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00017332  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00017337  5B                POP      EBX

    LINE     14499

    00017338  B8 0A000000       MOV      EAX,10
    0001733D  40                INC      EAX
    0001733E  50                PUSH     EAX
    0001733F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017342  5B                POP      EBX
    00017343  3B C3             CMP      EAX,EBX
    00017345  0F 8503000000     JNE      3
    0001734B  EB                JMP      

    LINE     14506

    0001734C  B8 01000000       MOV      EAX,1
    00017351  8B C8             MOV      ECX,EAX
    00017353  B8 0A000000       MOV      EAX,10
    00017358  50                PUSH     EAX
    00017359  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001735C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001735F  5B                POP      EBX
    00017360  53                PUSH     EBX
    00017361  3B C3             CMP      EAX,EBX
    00017363  0F 8E03000000     JLE      3
    00017369  EB                JMP      

    LINE     14508

    0001736A  B8 01000000       MOV      EAX,1
    0001736F  8B C8             MOV      ECX,EAX
    00017371  B8 05000000       MOV      EAX,5
    00017376  50                PUSH     EAX
    00017377  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001737A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001737D  5B                POP      EBX
    0001737E  53                PUSH     EBX
    0001737F  3B C3             CMP      EAX,EBX
    00017381  0F 8E03000000     JLE      3
    00017387  EB                JMP      

    LINE     14515

    00017388  B8 01000000       MOV      EAX,1
    0001738D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14516

    00017393  B8 01000000       MOV      EAX,1
    00017398  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14517

    0001739E  B8 01000000       MOV      EAX,1
    000173A3  8B C8             MOV      ECX,EAX
    000173A5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000173A8  48                DEC      EAX
    000173A9  BB 0E000000       MOV      EBX,14
    000173AE  F7 E3             MUL      EBX
    000173B0  50                PUSH     EAX
    000173B1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000173B4  48                DEC      EAX
    000173B5  BB 02000000       MOV      EBX,2
    000173BA  F7 E3             MUL      EBX
    000173BC  5B                POP      EBX
    000173BD  03 C3             ADD      EAX,EBX
    000173BF  8B F8             MOV      EDI,EAX
    000173C1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14518

    000173C8  B8 01000000       MOV      EAX,1
    000173CD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14519

    000173D3  B8 01000000       MOV      EAX,1
    000173D8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14521

    000173DE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000173E5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000173EA  5B                POP      EBX

    LINE     14523

    000173EB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000173F2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000173F7  5B                POP      EBX

    LINE     14525

    000173F8  B8 0A000000       MOV      EAX,10
    000173FD  40                INC      EAX
    000173FE  50                PUSH     EAX
    000173FF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017402  5B                POP      EBX
    00017403  3B C3             CMP      EAX,EBX
    00017405  0F 8503000000     JNE      3
    0001740B  EB                JMP      

    LINE     14539

    0001740C  56                PUSH     ESI
    0001740D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00017413  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00017419  FF D1             CALL     ECX                       run_inner_proc
    0001741B  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14541

    0001741C  B8 01000000       MOV      EAX,1
    00017421  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14543

    00017424  B8 01000000       MOV      EAX,1
    00017429  8B C8             MOV      ECX,EAX
    0001742B  B8 0A000000       MOV      EAX,10
    00017430  50                PUSH     EAX
    00017431  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00017434  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017437  5B                POP      EBX
    00017438  53                PUSH     EBX
    00017439  3B C3             CMP      EAX,EBX
    0001743B  0F 8E03000000     JLE      3
    00017441  EB                JMP      

    LINE     14545

    00017442  B8 01000000       MOV      EAX,1
    00017447  8B C8             MOV      ECX,EAX
    00017449  B8 05000000       MOV      EAX,5
    0001744E  50                PUSH     EAX
    0001744F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00017452  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017455  5B                POP      EBX
    00017456  53                PUSH     EBX
    00017457  3B C3             CMP      EAX,EBX
    00017459  0F 8E03000000     JLE      3
    0001745F  EB                JMP      

    LINE     14552

    00017460  B8 01000000       MOV      EAX,1
    00017465  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14553

    00017468  B8 01000000       MOV      EAX,1
    0001746D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14554

    00017470  B8 01000000       MOV      EAX,1
    00017475  8B C8             MOV      ECX,EAX
    00017477  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001747A  48                DEC      EAX
    0001747B  BB 0E000000       MOV      EBX,14
    00017480  F7 E3             MUL      EBX
    00017482  50                PUSH     EAX
    00017483  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017486  48                DEC      EAX
    00017487  BB 02000000       MOV      EBX,2
    0001748C  F7 E3             MUL      EBX
    0001748E  5B                POP      EBX
    0001748F  03 C3             ADD      EAX,EBX
    00017491  8B F8             MOV      EDI,EAX
    00017493  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14555

    00017497  B8 01000000       MOV      EAX,1
    0001749C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14556

    0001749F  B8 01000000       MOV      EAX,1
    000174A4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14558

    000174A7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000174AE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000174B3  5B                POP      EBX

    LINE     14560

    000174B4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000174BB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000174C0  5B                POP      EBX

    LINE     14562

    000174C1  B8 0A000000       MOV      EAX,10
    000174C6  40                INC      EAX
    000174C7  50                PUSH     EAX
    000174C8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000174CB  5B                POP      EBX
    000174CC  3B C3             CMP      EAX,EBX
    000174CE  0F 8503000000     JNE      3
    000174D4  EB                JMP      

    LINE     14569

    000174D5  B8 01000000       MOV      EAX,1
    000174DA  8B C8             MOV      ECX,EAX
    000174DC  B8 0A000000       MOV      EAX,10
    000174E1  50                PUSH     EAX
    000174E2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000174E5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000174E8  5B                POP      EBX
    000174E9  53                PUSH     EBX
    000174EA  3B C3             CMP      EAX,EBX
    000174EC  0F 8E03000000     JLE      3
    000174F2  EB                JMP      

    LINE     14571

    000174F3  B8 01000000       MOV      EAX,1
    000174F8  8B C8             MOV      ECX,EAX
    000174FA  B8 05000000       MOV      EAX,5
    000174FF  50                PUSH     EAX
    00017500  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017503  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017506  5B                POP      EBX
    00017507  53                PUSH     EBX
    00017508  3B C3             CMP      EAX,EBX
    0001750A  0F 8E03000000     JLE      3
    00017510  EB                JMP      

    LINE     14578

    00017511  B8 01000000       MOV      EAX,1
    00017516  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14579

    00017519  B8 01000000       MOV      EAX,1
    0001751E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14580

    00017521  B8 01000000       MOV      EAX,1
    00017526  8B C8             MOV      ECX,EAX
    00017528  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001752B  48                DEC      EAX
    0001752C  BB 0E000000       MOV      EBX,14
    00017531  F7 E3             MUL      EBX
    00017533  50                PUSH     EAX
    00017534  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017537  48                DEC      EAX
    00017538  BB 02000000       MOV      EBX,2
    0001753D  F7 E3             MUL      EBX
    0001753F  5B                POP      EBX
    00017540  03 C3             ADD      EAX,EBX
    00017542  8B F8             MOV      EDI,EAX
    00017544  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14581

    00017548  B8 01000000       MOV      EAX,1
    0001754D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14582

    00017550  B8 01000000       MOV      EAX,1
    00017555  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14584

    00017558  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001755F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00017564  5B                POP      EBX

    LINE     14586

    00017565  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001756C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00017571  5B                POP      EBX

    LINE     14588

    00017572  B8 0A000000       MOV      EAX,10
    00017577  40                INC      EAX
    00017578  50                PUSH     EAX
    00017579  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001757C  5B                POP      EBX
    0001757D  3B C3             CMP      EAX,EBX
    0001757F  0F 8503000000     JNE      3
    00017585  EB                JMP      

    LINE     14596

    00017586  B8 01000000       MOV      EAX,1
    0001758B  8B C8             MOV      ECX,EAX
    0001758D  B8 0A000000       MOV      EAX,10
    00017592  50                PUSH     EAX
    00017593  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00017596  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017599  5B                POP      EBX
    0001759A  53                PUSH     EBX
    0001759B  3B C3             CMP      EAX,EBX
    0001759D  0F 8E03000000     JLE      3
    000175A3  EB                JMP      

    LINE     14598

    000175A4  B8 01000000       MOV      EAX,1
    000175A9  8B C8             MOV      ECX,EAX
    000175AB  B8 05000000       MOV      EAX,5
    000175B0  50                PUSH     EAX
    000175B1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000175B4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000175B7  5B                POP      EBX
    000175B8  53                PUSH     EBX
    000175B9  3B C3             CMP      EAX,EBX
    000175BB  0F 8E03000000     JLE      3
    000175C1  EB                JMP      

    LINE     14605

    000175C2  B8 01000000       MOV      EAX,1
    000175C7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14606

    000175CD  B8 01000000       MOV      EAX,1
    000175D2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14607

    000175D8  B8 01000000       MOV      EAX,1
    000175DD  8B C8             MOV      ECX,EAX
    000175DF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000175E2  48                DEC      EAX
    000175E3  BB 0E000000       MOV      EBX,14
    000175E8  F7 E3             MUL      EBX
    000175EA  50                PUSH     EAX
    000175EB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000175EE  48                DEC      EAX
    000175EF  BB 02000000       MOV      EBX,2
    000175F4  F7 E3             MUL      EBX
    000175F6  5B                POP      EBX
    000175F7  03 C3             ADD      EAX,EBX
    000175F9  8B F8             MOV      EDI,EAX
    000175FB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14608

    00017602  B8 01000000       MOV      EAX,1
    00017607  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14609

    0001760D  B8 01000000       MOV      EAX,1
    00017612  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14611

    00017618  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001761F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00017624  5B                POP      EBX

    LINE     14613

    00017625  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001762C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00017631  5B                POP      EBX

    LINE     14615

    00017632  B8 0A000000       MOV      EAX,10
    00017637  40                INC      EAX
    00017638  50                PUSH     EAX
    00017639  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001763C  5B                POP      EBX
    0001763D  3B C3             CMP      EAX,EBX
    0001763F  0F 8503000000     JNE      3
    00017645  EB                JMP      

    LINE     14622

    00017646  B8 01000000       MOV      EAX,1
    0001764B  8B C8             MOV      ECX,EAX
    0001764D  B8 0A000000       MOV      EAX,10
    00017652  50                PUSH     EAX
    00017653  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00017656  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017659  5B                POP      EBX
    0001765A  53                PUSH     EBX
    0001765B  3B C3             CMP      EAX,EBX
    0001765D  0F 8E03000000     JLE      3
    00017663  EB                JMP      

    LINE     14624

    00017664  B8 01000000       MOV      EAX,1
    00017669  8B C8             MOV      ECX,EAX
    0001766B  B8 05000000       MOV      EAX,5
    00017670  50                PUSH     EAX
    00017671  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017674  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017677  5B                POP      EBX
    00017678  53                PUSH     EBX
    00017679  3B C3             CMP      EAX,EBX
    0001767B  0F 8E03000000     JLE      3
    00017681  EB                JMP      

    LINE     14631

    00017682  B8 01000000       MOV      EAX,1
    00017687  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14632

    0001768D  B8 01000000       MOV      EAX,1
    00017692  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14633

    00017698  B8 01000000       MOV      EAX,1
    0001769D  8B C8             MOV      ECX,EAX
    0001769F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000176A2  48                DEC      EAX
    000176A3  BB 0E000000       MOV      EBX,14
    000176A8  F7 E3             MUL      EBX
    000176AA  50                PUSH     EAX
    000176AB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000176AE  48                DEC      EAX
    000176AF  BB 02000000       MOV      EBX,2
    000176B4  F7 E3             MUL      EBX
    000176B6  5B                POP      EBX
    000176B7  03 C3             ADD      EAX,EBX
    000176B9  8B F8             MOV      EDI,EAX
    000176BB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14634

    000176C2  B8 01000000       MOV      EAX,1
    000176C7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14635

    000176CD  B8 01000000       MOV      EAX,1
    000176D2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14637

    000176D8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000176DF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000176E4  5B                POP      EBX

    LINE     14639

    000176E5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000176EC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000176F1  5B                POP      EBX

    LINE     14641

    000176F2  B8 0A000000       MOV      EAX,10
    000176F7  40                INC      EAX
    000176F8  50                PUSH     EAX
    000176F9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000176FC  5B                POP      EBX
    000176FD  3B C3             CMP      EAX,EBX
    000176FF  0F 8503000000     JNE      3
    00017705  EB                JMP      

    LINE     14655

    00017706  56                PUSH     ESI
    00017707  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001770D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00017713  FF D1             CALL     ECX                       run_inner_proc
    00017715  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14657

    00017716  B8 01000000       MOV      EAX,1
    0001771B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14659

    0001771E  B8 01000000       MOV      EAX,1
    00017723  8B C8             MOV      ECX,EAX
    00017725  B8 0A000000       MOV      EAX,10
    0001772A  50                PUSH     EAX
    0001772B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001772E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017731  5B                POP      EBX
    00017732  53                PUSH     EBX
    00017733  3B C3             CMP      EAX,EBX
    00017735  0F 8E03000000     JLE      3
    0001773B  EB                JMP      

    LINE     14661

    0001773C  B8 01000000       MOV      EAX,1
    00017741  8B C8             MOV      ECX,EAX
    00017743  B8 05000000       MOV      EAX,5
    00017748  50                PUSH     EAX
    00017749  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001774C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001774F  5B                POP      EBX
    00017750  53                PUSH     EBX
    00017751  3B C3             CMP      EAX,EBX
    00017753  0F 8E03000000     JLE      3
    00017759  EB                JMP      

    LINE     14668

    0001775A  B8 01000000       MOV      EAX,1
    0001775F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14669

    00017762  B8 01000000       MOV      EAX,1
    00017767  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14670

    0001776A  B8 01000000       MOV      EAX,1
    0001776F  8B C8             MOV      ECX,EAX
    00017771  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017774  48                DEC      EAX
    00017775  BB 0E000000       MOV      EBX,14
    0001777A  F7 E3             MUL      EBX
    0001777C  50                PUSH     EAX
    0001777D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017780  48                DEC      EAX
    00017781  BB 02000000       MOV      EBX,2
    00017786  F7 E3             MUL      EBX
    00017788  5B                POP      EBX
    00017789  03 C3             ADD      EAX,EBX
    0001778B  8B F8             MOV      EDI,EAX
    0001778D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14671

    00017791  B8 01000000       MOV      EAX,1
    00017796  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14672

    00017799  B8 01000000       MOV      EAX,1
    0001779E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14674

    000177A1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000177A8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    000177AD  5B                POP      EBX

    LINE     14676

    000177AE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000177B5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000177BA  5B                POP      EBX

    LINE     14678

    000177BB  B8 0A000000       MOV      EAX,10
    000177C0  40                INC      EAX
    000177C1  50                PUSH     EAX
    000177C2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000177C5  5B                POP      EBX
    000177C6  3B C3             CMP      EAX,EBX
    000177C8  0F 8503000000     JNE      3
    000177CE  EB                JMP      

    LINE     14685

    000177CF  B8 01000000       MOV      EAX,1
    000177D4  8B C8             MOV      ECX,EAX
    000177D6  B8 0A000000       MOV      EAX,10
    000177DB  50                PUSH     EAX
    000177DC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000177DF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000177E2  5B                POP      EBX
    000177E3  53                PUSH     EBX
    000177E4  3B C3             CMP      EAX,EBX
    000177E6  0F 8E03000000     JLE      3
    000177EC  EB                JMP      

    LINE     14687

    000177ED  B8 01000000       MOV      EAX,1
    000177F2  8B C8             MOV      ECX,EAX
    000177F4  B8 05000000       MOV      EAX,5
    000177F9  50                PUSH     EAX
    000177FA  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000177FD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017800  5B                POP      EBX
    00017801  53                PUSH     EBX
    00017802  3B C3             CMP      EAX,EBX
    00017804  0F 8E03000000     JLE      3
    0001780A  EB                JMP      

    LINE     14694

    0001780B  B8 01000000       MOV      EAX,1
    00017810  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14695

    00017813  B8 01000000       MOV      EAX,1
    00017818  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14696

    0001781B  B8 01000000       MOV      EAX,1
    00017820  8B C8             MOV      ECX,EAX
    00017822  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017825  48                DEC      EAX
    00017826  BB 0E000000       MOV      EBX,14
    0001782B  F7 E3             MUL      EBX
    0001782D  50                PUSH     EAX
    0001782E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017831  48                DEC      EAX
    00017832  BB 02000000       MOV      EBX,2
    00017837  F7 E3             MUL      EBX
    00017839  5B                POP      EBX
    0001783A  03 C3             ADD      EAX,EBX
    0001783C  8B F8             MOV      EDI,EAX
    0001783E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14697

    00017842  B8 01000000       MOV      EAX,1
    00017847  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14698

    0001784A  B8 01000000       MOV      EAX,1
    0001784F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14700

    00017852  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00017859  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001785E  5B                POP      EBX

    LINE     14702

    0001785F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00017866  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001786B  5B                POP      EBX

    LINE     14704

    0001786C  B8 0A000000       MOV      EAX,10
    00017871  40                INC      EAX
    00017872  50                PUSH     EAX
    00017873  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017876  5B                POP      EBX
    00017877  3B C3             CMP      EAX,EBX
    00017879  0F 8503000000     JNE      3
    0001787F  EB                JMP      

    LINE     14712

    00017880  B8 01000000       MOV      EAX,1
    00017885  8B C8             MOV      ECX,EAX
    00017887  B8 0A000000       MOV      EAX,10
    0001788C  50                PUSH     EAX
    0001788D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00017890  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017893  5B                POP      EBX
    00017894  53                PUSH     EBX
    00017895  3B C3             CMP      EAX,EBX
    00017897  0F 8E03000000     JLE      3
    0001789D  EB                JMP      

    LINE     14714

    0001789E  B8 01000000       MOV      EAX,1
    000178A3  8B C8             MOV      ECX,EAX
    000178A5  B8 05000000       MOV      EAX,5
    000178AA  50                PUSH     EAX
    000178AB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    000178AE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000178B1  5B                POP      EBX
    000178B2  53                PUSH     EBX
    000178B3  3B C3             CMP      EAX,EBX
    000178B5  0F 8E03000000     JLE      3
    000178BB  EB                JMP      

    LINE     14721

    000178BC  B8 01000000       MOV      EAX,1
    000178C1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14722

    000178C7  B8 01000000       MOV      EAX,1
    000178CC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14723

    000178D2  B8 01000000       MOV      EAX,1
    000178D7  8B C8             MOV      ECX,EAX
    000178D9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000178DC  48                DEC      EAX
    000178DD  BB 0E000000       MOV      EBX,14
    000178E2  F7 E3             MUL      EBX
    000178E4  50                PUSH     EAX
    000178E5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000178E8  48                DEC      EAX
    000178E9  BB 02000000       MOV      EBX,2
    000178EE  F7 E3             MUL      EBX
    000178F0  5B                POP      EBX
    000178F1  03 C3             ADD      EAX,EBX
    000178F3  8B F8             MOV      EDI,EAX
    000178F5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14724

    000178FC  B8 01000000       MOV      EAX,1
    00017901  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14725

    00017907  B8 01000000       MOV      EAX,1
    0001790C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14727

    00017912  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00017919  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001791E  5B                POP      EBX

    LINE     14729

    0001791F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00017926  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001792B  5B                POP      EBX

    LINE     14731

    0001792C  B8 0A000000       MOV      EAX,10
    00017931  40                INC      EAX
    00017932  50                PUSH     EAX
    00017933  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017936  5B                POP      EBX
    00017937  3B C3             CMP      EAX,EBX
    00017939  0F 8503000000     JNE      3
    0001793F  EB                JMP      

    LINE     14738

    00017940  B8 01000000       MOV      EAX,1
    00017945  8B C8             MOV      ECX,EAX
    00017947  B8 0A000000       MOV      EAX,10
    0001794C  50                PUSH     EAX
    0001794D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00017950  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017953  5B                POP      EBX
    00017954  53                PUSH     EBX
    00017955  3B C3             CMP      EAX,EBX
    00017957  0F 8E03000000     JLE      3
    0001795D  EB                JMP      

    LINE     14740

    0001795E  B8 01000000       MOV      EAX,1
    00017963  8B C8             MOV      ECX,EAX
    00017965  B8 05000000       MOV      EAX,5
    0001796A  50                PUSH     EAX
    0001796B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001796E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017971  5B                POP      EBX
    00017972  53                PUSH     EBX
    00017973  3B C3             CMP      EAX,EBX
    00017975  0F 8E03000000     JLE      3
    0001797B  EB                JMP      

    LINE     14747

    0001797C  B8 01000000       MOV      EAX,1
    00017981  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14748

    00017987  B8 01000000       MOV      EAX,1
    0001798C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14749

    00017992  B8 01000000       MOV      EAX,1
    00017997  8B C8             MOV      ECX,EAX
    00017999  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001799C  48                DEC      EAX
    0001799D  BB 0E000000       MOV      EBX,14
    000179A2  F7 E3             MUL      EBX
    000179A4  50                PUSH     EAX
    000179A5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000179A8  48                DEC      EAX
    000179A9  BB 02000000       MOV      EBX,2
    000179AE  F7 E3             MUL      EBX
    000179B0  5B                POP      EBX
    000179B1  03 C3             ADD      EAX,EBX
    000179B3  8B F8             MOV      EDI,EAX
    000179B5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14750

    000179BC  B8 01000000       MOV      EAX,1
    000179C1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14751

    000179C7  B8 01000000       MOV      EAX,1
    000179CC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14753

    000179D2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000179D9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000179DE  5B                POP      EBX

    LINE     14755

    000179DF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000179E6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000179EB  5B                POP      EBX

    LINE     14757

    000179EC  B8 0A000000       MOV      EAX,10
    000179F1  40                INC      EAX
    000179F2  50                PUSH     EAX
    000179F3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000179F6  5B                POP      EBX
    000179F7  3B C3             CMP      EAX,EBX
    000179F9  0F 8503000000     JNE      3
    000179FF  EB                JMP      

    LINE     14771

    00017A00  56                PUSH     ESI
    00017A01  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00017A07  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00017A0D  FF D1             CALL     ECX                       run_inner_proc
    00017A0F  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14773

    00017A10  B8 01000000       MOV      EAX,1
    00017A15  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14775

    00017A18  B8 01000000       MOV      EAX,1
    00017A1D  8B C8             MOV      ECX,EAX
    00017A1F  B8 0A000000       MOV      EAX,10
    00017A24  50                PUSH     EAX
    00017A25  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00017A28  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017A2B  5B                POP      EBX
    00017A2C  53                PUSH     EBX
    00017A2D  3B C3             CMP      EAX,EBX
    00017A2F  0F 8E03000000     JLE      3
    00017A35  EB                JMP      

    LINE     14777

    00017A36  B8 01000000       MOV      EAX,1
    00017A3B  8B C8             MOV      ECX,EAX
    00017A3D  B8 05000000       MOV      EAX,5
    00017A42  50                PUSH     EAX
    00017A43  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00017A46  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017A49  5B                POP      EBX
    00017A4A  53                PUSH     EBX
    00017A4B  3B C3             CMP      EAX,EBX
    00017A4D  0F 8E03000000     JLE      3
    00017A53  EB                JMP      

    LINE     14784

    00017A54  B8 01000000       MOV      EAX,1
    00017A59  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14785

    00017A5C  B8 01000000       MOV      EAX,1
    00017A61  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14786

    00017A64  B8 01000000       MOV      EAX,1
    00017A69  8B C8             MOV      ECX,EAX
    00017A6B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017A6E  48                DEC      EAX
    00017A6F  BB 0E000000       MOV      EBX,14
    00017A74  F7 E3             MUL      EBX
    00017A76  50                PUSH     EAX
    00017A77  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017A7A  48                DEC      EAX
    00017A7B  BB 02000000       MOV      EBX,2
    00017A80  F7 E3             MUL      EBX
    00017A82  5B                POP      EBX
    00017A83  03 C3             ADD      EAX,EBX
    00017A85  8B F8             MOV      EDI,EAX
    00017A87  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14787

    00017A8B  B8 01000000       MOV      EAX,1
    00017A90  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14788

    00017A93  B8 01000000       MOV      EAX,1
    00017A98  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14790

    00017A9B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00017AA2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00017AA7  5B                POP      EBX

    LINE     14792

    00017AA8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00017AAF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00017AB4  5B                POP      EBX

    LINE     14794

    00017AB5  B8 0A000000       MOV      EAX,10
    00017ABA  40                INC      EAX
    00017ABB  50                PUSH     EAX
    00017ABC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017ABF  5B                POP      EBX
    00017AC0  3B C3             CMP      EAX,EBX
    00017AC2  0F 8503000000     JNE      3
    00017AC8  EB                JMP      

    LINE     14801

    00017AC9  B8 01000000       MOV      EAX,1
    00017ACE  8B C8             MOV      ECX,EAX
    00017AD0  B8 0A000000       MOV      EAX,10
    00017AD5  50                PUSH     EAX
    00017AD6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00017AD9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017ADC  5B                POP      EBX
    00017ADD  53                PUSH     EBX
    00017ADE  3B C3             CMP      EAX,EBX
    00017AE0  0F 8E03000000     JLE      3
    00017AE6  EB                JMP      

    LINE     14803

    00017AE7  B8 01000000       MOV      EAX,1
    00017AEC  8B C8             MOV      ECX,EAX
    00017AEE  B8 05000000       MOV      EAX,5
    00017AF3  50                PUSH     EAX
    00017AF4  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017AF7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017AFA  5B                POP      EBX
    00017AFB  53                PUSH     EBX
    00017AFC  3B C3             CMP      EAX,EBX
    00017AFE  0F 8E03000000     JLE      3
    00017B04  EB                JMP      

    LINE     14810

    00017B05  B8 01000000       MOV      EAX,1
    00017B0A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14811

    00017B0D  B8 01000000       MOV      EAX,1
    00017B12  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14812

    00017B15  B8 01000000       MOV      EAX,1
    00017B1A  8B C8             MOV      ECX,EAX
    00017B1C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017B1F  48                DEC      EAX
    00017B20  BB 0E000000       MOV      EBX,14
    00017B25  F7 E3             MUL      EBX
    00017B27  50                PUSH     EAX
    00017B28  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017B2B  48                DEC      EAX
    00017B2C  BB 02000000       MOV      EBX,2
    00017B31  F7 E3             MUL      EBX
    00017B33  5B                POP      EBX
    00017B34  03 C3             ADD      EAX,EBX
    00017B36  8B F8             MOV      EDI,EAX
    00017B38  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14813

    00017B3C  B8 01000000       MOV      EAX,1
    00017B41  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14814

    00017B44  B8 01000000       MOV      EAX,1
    00017B49  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14816

    00017B4C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00017B53  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00017B58  5B                POP      EBX

    LINE     14818

    00017B59  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00017B60  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00017B65  5B                POP      EBX

    LINE     14820

    00017B66  B8 0A000000       MOV      EAX,10
    00017B6B  40                INC      EAX
    00017B6C  50                PUSH     EAX
    00017B6D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017B70  5B                POP      EBX
    00017B71  3B C3             CMP      EAX,EBX
    00017B73  0F 8503000000     JNE      3
    00017B79  EB                JMP      

    LINE     14828

    00017B7A  B8 01000000       MOV      EAX,1
    00017B7F  8B C8             MOV      ECX,EAX
    00017B81  B8 0A000000       MOV      EAX,10
    00017B86  50                PUSH     EAX
    00017B87  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00017B8A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017B8D  5B                POP      EBX
    00017B8E  53                PUSH     EBX
    00017B8F  3B C3             CMP      EAX,EBX
    00017B91  0F 8E03000000     JLE      3
    00017B97  EB                JMP      

    LINE     14830

    00017B98  B8 01000000       MOV      EAX,1
    00017B9D  8B C8             MOV      ECX,EAX
    00017B9F  B8 05000000       MOV      EAX,5
    00017BA4  50                PUSH     EAX
    00017BA5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00017BA8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017BAB  5B                POP      EBX
    00017BAC  53                PUSH     EBX
    00017BAD  3B C3             CMP      EAX,EBX
    00017BAF  0F 8E03000000     JLE      3
    00017BB5  EB                JMP      

    LINE     14837

    00017BB6  B8 01000000       MOV      EAX,1
    00017BBB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14838

    00017BC1  B8 01000000       MOV      EAX,1
    00017BC6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14839

    00017BCC  B8 01000000       MOV      EAX,1
    00017BD1  8B C8             MOV      ECX,EAX
    00017BD3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017BD6  48                DEC      EAX
    00017BD7  BB 0E000000       MOV      EBX,14
    00017BDC  F7 E3             MUL      EBX
    00017BDE  50                PUSH     EAX
    00017BDF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017BE2  48                DEC      EAX
    00017BE3  BB 02000000       MOV      EBX,2
    00017BE8  F7 E3             MUL      EBX
    00017BEA  5B                POP      EBX
    00017BEB  03 C3             ADD      EAX,EBX
    00017BED  8B F8             MOV      EDI,EAX
    00017BEF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14840

    00017BF6  B8 01000000       MOV      EAX,1
    00017BFB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14841

    00017C01  B8 01000000       MOV      EAX,1
    00017C06  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14843

    00017C0C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00017C13  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00017C18  5B                POP      EBX

    LINE     14845

    00017C19  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00017C20  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00017C25  5B                POP      EBX

    LINE     14847

    00017C26  B8 0A000000       MOV      EAX,10
    00017C2B  40                INC      EAX
    00017C2C  50                PUSH     EAX
    00017C2D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017C30  5B                POP      EBX
    00017C31  3B C3             CMP      EAX,EBX
    00017C33  0F 8503000000     JNE      3
    00017C39  EB                JMP      

    LINE     14854

    00017C3A  B8 01000000       MOV      EAX,1
    00017C3F  8B C8             MOV      ECX,EAX
    00017C41  B8 0A000000       MOV      EAX,10
    00017C46  50                PUSH     EAX
    00017C47  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00017C4A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017C4D  5B                POP      EBX
    00017C4E  53                PUSH     EBX
    00017C4F  3B C3             CMP      EAX,EBX
    00017C51  0F 8E03000000     JLE      3
    00017C57  EB                JMP      

    LINE     14856

    00017C58  B8 01000000       MOV      EAX,1
    00017C5D  8B C8             MOV      ECX,EAX
    00017C5F  B8 05000000       MOV      EAX,5
    00017C64  50                PUSH     EAX
    00017C65  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017C68  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017C6B  5B                POP      EBX
    00017C6C  53                PUSH     EBX
    00017C6D  3B C3             CMP      EAX,EBX
    00017C6F  0F 8E03000000     JLE      3
    00017C75  EB                JMP      

    LINE     14863

    00017C76  B8 01000000       MOV      EAX,1
    00017C7B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14864

    00017C81  B8 01000000       MOV      EAX,1
    00017C86  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14865

    00017C8C  B8 01000000       MOV      EAX,1
    00017C91  8B C8             MOV      ECX,EAX
    00017C93  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017C96  48                DEC      EAX
    00017C97  BB 0E000000       MOV      EBX,14
    00017C9C  F7 E3             MUL      EBX
    00017C9E  50                PUSH     EAX
    00017C9F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017CA2  48                DEC      EAX
    00017CA3  BB 02000000       MOV      EBX,2
    00017CA8  F7 E3             MUL      EBX
    00017CAA  5B                POP      EBX
    00017CAB  03 C3             ADD      EAX,EBX
    00017CAD  8B F8             MOV      EDI,EAX
    00017CAF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14866

    00017CB6  B8 01000000       MOV      EAX,1
    00017CBB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14867

    00017CC1  B8 01000000       MOV      EAX,1
    00017CC6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14869

    00017CCC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00017CD3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00017CD8  5B                POP      EBX

    LINE     14871

    00017CD9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00017CE0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00017CE5  5B                POP      EBX

    LINE     14873

    00017CE6  B8 0A000000       MOV      EAX,10
    00017CEB  40                INC      EAX
    00017CEC  50                PUSH     EAX
    00017CED  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017CF0  5B                POP      EBX
    00017CF1  3B C3             CMP      EAX,EBX
    00017CF3  0F 8503000000     JNE      3
    00017CF9  EB                JMP      

    LINE     14887

    00017CFA  56                PUSH     ESI
    00017CFB  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00017D01  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00017D07  FF D1             CALL     ECX                       run_inner_proc
    00017D09  5E                POP      ESI                       /* restore callers static pointer */

    LINE     14889

    00017D0A  B8 01000000       MOV      EAX,1
    00017D0F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     14891

    00017D12  B8 01000000       MOV      EAX,1
    00017D17  8B C8             MOV      ECX,EAX
    00017D19  B8 0A000000       MOV      EAX,10
    00017D1E  50                PUSH     EAX
    00017D1F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00017D22  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017D25  5B                POP      EBX
    00017D26  53                PUSH     EBX
    00017D27  3B C3             CMP      EAX,EBX
    00017D29  0F 8E03000000     JLE      3
    00017D2F  EB                JMP      

    LINE     14893

    00017D30  B8 01000000       MOV      EAX,1
    00017D35  8B C8             MOV      ECX,EAX
    00017D37  B8 05000000       MOV      EAX,5
    00017D3C  50                PUSH     EAX
    00017D3D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00017D40  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017D43  5B                POP      EBX
    00017D44  53                PUSH     EBX
    00017D45  3B C3             CMP      EAX,EBX
    00017D47  0F 8E03000000     JLE      3
    00017D4D  EB                JMP      

    LINE     14900

    00017D4E  B8 01000000       MOV      EAX,1
    00017D53  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14901

    00017D56  B8 01000000       MOV      EAX,1
    00017D5B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14902

    00017D5E  B8 01000000       MOV      EAX,1
    00017D63  8B C8             MOV      ECX,EAX
    00017D65  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017D68  48                DEC      EAX
    00017D69  BB 0E000000       MOV      EBX,14
    00017D6E  F7 E3             MUL      EBX
    00017D70  50                PUSH     EAX
    00017D71  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017D74  48                DEC      EAX
    00017D75  BB 02000000       MOV      EBX,2
    00017D7A  F7 E3             MUL      EBX
    00017D7C  5B                POP      EBX
    00017D7D  03 C3             ADD      EAX,EBX
    00017D7F  8B F8             MOV      EDI,EAX
    00017D81  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14903

    00017D85  B8 01000000       MOV      EAX,1
    00017D8A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14904

    00017D8D  B8 01000000       MOV      EAX,1
    00017D92  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14906

    00017D95  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00017D9C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00017DA1  5B                POP      EBX

    LINE     14908

    00017DA2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00017DA9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00017DAE  5B                POP      EBX

    LINE     14910

    00017DAF  B8 0A000000       MOV      EAX,10
    00017DB4  40                INC      EAX
    00017DB5  50                PUSH     EAX
    00017DB6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017DB9  5B                POP      EBX
    00017DBA  3B C3             CMP      EAX,EBX
    00017DBC  0F 8503000000     JNE      3
    00017DC2  EB                JMP      

    LINE     14917

    00017DC3  B8 01000000       MOV      EAX,1
    00017DC8  8B C8             MOV      ECX,EAX
    00017DCA  B8 0A000000       MOV      EAX,10
    00017DCF  50                PUSH     EAX
    00017DD0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00017DD3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017DD6  5B                POP      EBX
    00017DD7  53                PUSH     EBX
    00017DD8  3B C3             CMP      EAX,EBX
    00017DDA  0F 8E03000000     JLE      3
    00017DE0  EB                JMP      

    LINE     14919

    00017DE1  B8 01000000       MOV      EAX,1
    00017DE6  8B C8             MOV      ECX,EAX
    00017DE8  B8 05000000       MOV      EAX,5
    00017DED  50                PUSH     EAX
    00017DEE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017DF1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017DF4  5B                POP      EBX
    00017DF5  53                PUSH     EBX
    00017DF6  3B C3             CMP      EAX,EBX
    00017DF8  0F 8E03000000     JLE      3
    00017DFE  EB                JMP      

    LINE     14926

    00017DFF  B8 01000000       MOV      EAX,1
    00017E04  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14927

    00017E07  B8 01000000       MOV      EAX,1
    00017E0C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14928

    00017E0F  B8 01000000       MOV      EAX,1
    00017E14  8B C8             MOV      ECX,EAX
    00017E16  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017E19  48                DEC      EAX
    00017E1A  BB 0E000000       MOV      EBX,14
    00017E1F  F7 E3             MUL      EBX
    00017E21  50                PUSH     EAX
    00017E22  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017E25  48                DEC      EAX
    00017E26  BB 02000000       MOV      EBX,2
    00017E2B  F7 E3             MUL      EBX
    00017E2D  5B                POP      EBX
    00017E2E  03 C3             ADD      EAX,EBX
    00017E30  8B F8             MOV      EDI,EAX
    00017E32  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     14929

    00017E36  B8 01000000       MOV      EAX,1
    00017E3B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14930

    00017E3E  B8 01000000       MOV      EAX,1
    00017E43  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     14932

    00017E46  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00017E4D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00017E52  5B                POP      EBX

    LINE     14934

    00017E53  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00017E5A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00017E5F  5B                POP      EBX

    LINE     14936

    00017E60  B8 0A000000       MOV      EAX,10
    00017E65  40                INC      EAX
    00017E66  50                PUSH     EAX
    00017E67  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017E6A  5B                POP      EBX
    00017E6B  3B C3             CMP      EAX,EBX
    00017E6D  0F 8503000000     JNE      3
    00017E73  EB                JMP      

    LINE     14944

    00017E74  B8 01000000       MOV      EAX,1
    00017E79  8B C8             MOV      ECX,EAX
    00017E7B  B8 0A000000       MOV      EAX,10
    00017E80  50                PUSH     EAX
    00017E81  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00017E84  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017E87  5B                POP      EBX
    00017E88  53                PUSH     EBX
    00017E89  3B C3             CMP      EAX,EBX
    00017E8B  0F 8E03000000     JLE      3
    00017E91  EB                JMP      

    LINE     14946

    00017E92  B8 01000000       MOV      EAX,1
    00017E97  8B C8             MOV      ECX,EAX
    00017E99  B8 05000000       MOV      EAX,5
    00017E9E  50                PUSH     EAX
    00017E9F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00017EA2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017EA5  5B                POP      EBX
    00017EA6  53                PUSH     EBX
    00017EA7  3B C3             CMP      EAX,EBX
    00017EA9  0F 8E03000000     JLE      3
    00017EAF  EB                JMP      

    LINE     14953

    00017EB0  B8 01000000       MOV      EAX,1
    00017EB5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14954

    00017EBB  B8 01000000       MOV      EAX,1
    00017EC0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14955

    00017EC6  B8 01000000       MOV      EAX,1
    00017ECB  8B C8             MOV      ECX,EAX
    00017ECD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017ED0  48                DEC      EAX
    00017ED1  BB 0E000000       MOV      EBX,14
    00017ED6  F7 E3             MUL      EBX
    00017ED8  50                PUSH     EAX
    00017ED9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00017EDC  48                DEC      EAX
    00017EDD  BB 02000000       MOV      EBX,2
    00017EE2  F7 E3             MUL      EBX
    00017EE4  5B                POP      EBX
    00017EE5  03 C3             ADD      EAX,EBX
    00017EE7  8B F8             MOV      EDI,EAX
    00017EE9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14956

    00017EF0  B8 01000000       MOV      EAX,1
    00017EF5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14957

    00017EFB  B8 01000000       MOV      EAX,1
    00017F00  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14959

    00017F06  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00017F0D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00017F12  5B                POP      EBX

    LINE     14961

    00017F13  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00017F1A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00017F1F  5B                POP      EBX

    LINE     14963

    00017F20  B8 0A000000       MOV      EAX,10
    00017F25  40                INC      EAX
    00017F26  50                PUSH     EAX
    00017F27  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017F2A  5B                POP      EBX
    00017F2B  3B C3             CMP      EAX,EBX
    00017F2D  0F 8503000000     JNE      3
    00017F33  EB                JMP      

    LINE     14970

    00017F34  B8 01000000       MOV      EAX,1
    00017F39  8B C8             MOV      ECX,EAX
    00017F3B  B8 0A000000       MOV      EAX,10
    00017F40  50                PUSH     EAX
    00017F41  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00017F44  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017F47  5B                POP      EBX
    00017F48  53                PUSH     EBX
    00017F49  3B C3             CMP      EAX,EBX
    00017F4B  0F 8E03000000     JLE      3
    00017F51  EB                JMP      

    LINE     14972

    00017F52  B8 01000000       MOV      EAX,1
    00017F57  8B C8             MOV      ECX,EAX
    00017F59  B8 05000000       MOV      EAX,5
    00017F5E  50                PUSH     EAX
    00017F5F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00017F62  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017F65  5B                POP      EBX
    00017F66  53                PUSH     EBX
    00017F67  3B C3             CMP      EAX,EBX
    00017F69  0F 8E03000000     JLE      3
    00017F6F  EB                JMP      

    LINE     14979

    00017F70  B8 01000000       MOV      EAX,1
    00017F75  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14980

    00017F7B  B8 01000000       MOV      EAX,1
    00017F80  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14981

    00017F86  B8 01000000       MOV      EAX,1
    00017F8B  8B C8             MOV      ECX,EAX
    00017F8D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00017F90  48                DEC      EAX
    00017F91  BB 0E000000       MOV      EBX,14
    00017F96  F7 E3             MUL      EBX
    00017F98  50                PUSH     EAX
    00017F99  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00017F9C  48                DEC      EAX
    00017F9D  BB 02000000       MOV      EBX,2
    00017FA2  F7 E3             MUL      EBX
    00017FA4  5B                POP      EBX
    00017FA5  03 C3             ADD      EAX,EBX
    00017FA7  8B F8             MOV      EDI,EAX
    00017FA9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     14982

    00017FB0  B8 01000000       MOV      EAX,1
    00017FB5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14983

    00017FBB  B8 01000000       MOV      EAX,1
    00017FC0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     14985

    00017FC6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00017FCD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00017FD2  5B                POP      EBX

    LINE     14987

    00017FD3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00017FDA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00017FDF  5B                POP      EBX

    LINE     14989

    00017FE0  B8 0A000000       MOV      EAX,10
    00017FE5  40                INC      EAX
    00017FE6  50                PUSH     EAX
    00017FE7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00017FEA  5B                POP      EBX
    00017FEB  3B C3             CMP      EAX,EBX
    00017FED  0F 8503000000     JNE      3
    00017FF3  EB                JMP      

    LINE     15003

    00017FF4  56                PUSH     ESI
    00017FF5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00017FFB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00018001  FF D1             CALL     ECX                       run_inner_proc
    00018003  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15005

    00018004  B8 01000000       MOV      EAX,1
    00018009  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15007

    0001800C  B8 01000000       MOV      EAX,1
    00018011  8B C8             MOV      ECX,EAX
    00018013  B8 0A000000       MOV      EAX,10
    00018018  50                PUSH     EAX
    00018019  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001801C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001801F  5B                POP      EBX
    00018020  53                PUSH     EBX
    00018021  3B C3             CMP      EAX,EBX
    00018023  0F 8E03000000     JLE      3
    00018029  EB                JMP      

    LINE     15009

    0001802A  B8 01000000       MOV      EAX,1
    0001802F  8B C8             MOV      ECX,EAX
    00018031  B8 05000000       MOV      EAX,5
    00018036  50                PUSH     EAX
    00018037  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001803A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001803D  5B                POP      EBX
    0001803E  53                PUSH     EBX
    0001803F  3B C3             CMP      EAX,EBX
    00018041  0F 8E03000000     JLE      3
    00018047  EB                JMP      

    LINE     15016

    00018048  B8 01000000       MOV      EAX,1
    0001804D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15017

    00018050  B8 01000000       MOV      EAX,1
    00018055  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15018

    00018058  B8 01000000       MOV      EAX,1
    0001805D  8B C8             MOV      ECX,EAX
    0001805F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018062  48                DEC      EAX
    00018063  BB 0E000000       MOV      EBX,14
    00018068  F7 E3             MUL      EBX
    0001806A  50                PUSH     EAX
    0001806B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001806E  48                DEC      EAX
    0001806F  BB 02000000       MOV      EBX,2
    00018074  F7 E3             MUL      EBX
    00018076  5B                POP      EBX
    00018077  03 C3             ADD      EAX,EBX
    00018079  8B F8             MOV      EDI,EAX
    0001807B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15019

    0001807F  B8 01000000       MOV      EAX,1
    00018084  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15020

    00018087  B8 01000000       MOV      EAX,1
    0001808C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15022

    0001808F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018096  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001809B  5B                POP      EBX

    LINE     15024

    0001809C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000180A3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000180A8  5B                POP      EBX

    LINE     15026

    000180A9  B8 0A000000       MOV      EAX,10
    000180AE  40                INC      EAX
    000180AF  50                PUSH     EAX
    000180B0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000180B3  5B                POP      EBX
    000180B4  3B C3             CMP      EAX,EBX
    000180B6  0F 8503000000     JNE      3
    000180BC  EB                JMP      

    LINE     15033

    000180BD  B8 01000000       MOV      EAX,1
    000180C2  8B C8             MOV      ECX,EAX
    000180C4  B8 0A000000       MOV      EAX,10
    000180C9  50                PUSH     EAX
    000180CA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000180CD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000180D0  5B                POP      EBX
    000180D1  53                PUSH     EBX
    000180D2  3B C3             CMP      EAX,EBX
    000180D4  0F 8E03000000     JLE      3
    000180DA  EB                JMP      

    LINE     15035

    000180DB  B8 01000000       MOV      EAX,1
    000180E0  8B C8             MOV      ECX,EAX
    000180E2  B8 05000000       MOV      EAX,5
    000180E7  50                PUSH     EAX
    000180E8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000180EB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000180EE  5B                POP      EBX
    000180EF  53                PUSH     EBX
    000180F0  3B C3             CMP      EAX,EBX
    000180F2  0F 8E03000000     JLE      3
    000180F8  EB                JMP      

    LINE     15042

    000180F9  B8 01000000       MOV      EAX,1
    000180FE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15043

    00018101  B8 01000000       MOV      EAX,1
    00018106  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15044

    00018109  B8 01000000       MOV      EAX,1
    0001810E  8B C8             MOV      ECX,EAX
    00018110  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018113  48                DEC      EAX
    00018114  BB 0E000000       MOV      EBX,14
    00018119  F7 E3             MUL      EBX
    0001811B  50                PUSH     EAX
    0001811C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001811F  48                DEC      EAX
    00018120  BB 02000000       MOV      EBX,2
    00018125  F7 E3             MUL      EBX
    00018127  5B                POP      EBX
    00018128  03 C3             ADD      EAX,EBX
    0001812A  8B F8             MOV      EDI,EAX
    0001812C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15045

    00018130  B8 01000000       MOV      EAX,1
    00018135  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15046

    00018138  B8 01000000       MOV      EAX,1
    0001813D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15048

    00018140  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00018147  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001814C  5B                POP      EBX

    LINE     15050

    0001814D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00018154  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00018159  5B                POP      EBX

    LINE     15052

    0001815A  B8 0A000000       MOV      EAX,10
    0001815F  40                INC      EAX
    00018160  50                PUSH     EAX
    00018161  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018164  5B                POP      EBX
    00018165  3B C3             CMP      EAX,EBX
    00018167  0F 8503000000     JNE      3
    0001816D  EB                JMP      

    LINE     15060

    0001816E  B8 01000000       MOV      EAX,1
    00018173  8B C8             MOV      ECX,EAX
    00018175  B8 0A000000       MOV      EAX,10
    0001817A  50                PUSH     EAX
    0001817B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001817E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018181  5B                POP      EBX
    00018182  53                PUSH     EBX
    00018183  3B C3             CMP      EAX,EBX
    00018185  0F 8E03000000     JLE      3
    0001818B  EB                JMP      

    LINE     15062

    0001818C  B8 01000000       MOV      EAX,1
    00018191  8B C8             MOV      ECX,EAX
    00018193  B8 05000000       MOV      EAX,5
    00018198  50                PUSH     EAX
    00018199  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001819C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001819F  5B                POP      EBX
    000181A0  53                PUSH     EBX
    000181A1  3B C3             CMP      EAX,EBX
    000181A3  0F 8E03000000     JLE      3
    000181A9  EB                JMP      

    LINE     15069

    000181AA  B8 01000000       MOV      EAX,1
    000181AF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15070

    000181B5  B8 01000000       MOV      EAX,1
    000181BA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15071

    000181C0  B8 01000000       MOV      EAX,1
    000181C5  8B C8             MOV      ECX,EAX
    000181C7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000181CA  48                DEC      EAX
    000181CB  BB 0E000000       MOV      EBX,14
    000181D0  F7 E3             MUL      EBX
    000181D2  50                PUSH     EAX
    000181D3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000181D6  48                DEC      EAX
    000181D7  BB 02000000       MOV      EBX,2
    000181DC  F7 E3             MUL      EBX
    000181DE  5B                POP      EBX
    000181DF  03 C3             ADD      EAX,EBX
    000181E1  8B F8             MOV      EDI,EAX
    000181E3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15072

    000181EA  B8 01000000       MOV      EAX,1
    000181EF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15073

    000181F5  B8 01000000       MOV      EAX,1
    000181FA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15075

    00018200  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018207  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001820C  5B                POP      EBX

    LINE     15077

    0001820D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018214  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00018219  5B                POP      EBX

    LINE     15079

    0001821A  B8 0A000000       MOV      EAX,10
    0001821F  40                INC      EAX
    00018220  50                PUSH     EAX
    00018221  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018224  5B                POP      EBX
    00018225  3B C3             CMP      EAX,EBX
    00018227  0F 8503000000     JNE      3
    0001822D  EB                JMP      

    LINE     15086

    0001822E  B8 01000000       MOV      EAX,1
    00018233  8B C8             MOV      ECX,EAX
    00018235  B8 0A000000       MOV      EAX,10
    0001823A  50                PUSH     EAX
    0001823B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001823E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018241  5B                POP      EBX
    00018242  53                PUSH     EBX
    00018243  3B C3             CMP      EAX,EBX
    00018245  0F 8E03000000     JLE      3
    0001824B  EB                JMP      

    LINE     15088

    0001824C  B8 01000000       MOV      EAX,1
    00018251  8B C8             MOV      ECX,EAX
    00018253  B8 05000000       MOV      EAX,5
    00018258  50                PUSH     EAX
    00018259  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001825C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001825F  5B                POP      EBX
    00018260  53                PUSH     EBX
    00018261  3B C3             CMP      EAX,EBX
    00018263  0F 8E03000000     JLE      3
    00018269  EB                JMP      

    LINE     15095

    0001826A  B8 01000000       MOV      EAX,1
    0001826F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15096

    00018275  B8 01000000       MOV      EAX,1
    0001827A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15097

    00018280  B8 01000000       MOV      EAX,1
    00018285  8B C8             MOV      ECX,EAX
    00018287  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001828A  48                DEC      EAX
    0001828B  BB 0E000000       MOV      EBX,14
    00018290  F7 E3             MUL      EBX
    00018292  50                PUSH     EAX
    00018293  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018296  48                DEC      EAX
    00018297  BB 02000000       MOV      EBX,2
    0001829C  F7 E3             MUL      EBX
    0001829E  5B                POP      EBX
    0001829F  03 C3             ADD      EAX,EBX
    000182A1  8B F8             MOV      EDI,EAX
    000182A3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15098

    000182AA  B8 01000000       MOV      EAX,1
    000182AF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15099

    000182B5  B8 01000000       MOV      EAX,1
    000182BA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15101

    000182C0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000182C7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000182CC  5B                POP      EBX

    LINE     15103

    000182CD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000182D4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000182D9  5B                POP      EBX

    LINE     15105

    000182DA  B8 0A000000       MOV      EAX,10
    000182DF  40                INC      EAX
    000182E0  50                PUSH     EAX
    000182E1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000182E4  5B                POP      EBX
    000182E5  3B C3             CMP      EAX,EBX
    000182E7  0F 8503000000     JNE      3
    000182ED  EB                JMP      

    LINE     15119

    000182EE  56                PUSH     ESI
    000182EF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000182F5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000182FB  FF D1             CALL     ECX                       run_inner_proc
    000182FD  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15121

    000182FE  B8 01000000       MOV      EAX,1
    00018303  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15123

    00018306  B8 01000000       MOV      EAX,1
    0001830B  8B C8             MOV      ECX,EAX
    0001830D  B8 0A000000       MOV      EAX,10
    00018312  50                PUSH     EAX
    00018313  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018316  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018319  5B                POP      EBX
    0001831A  53                PUSH     EBX
    0001831B  3B C3             CMP      EAX,EBX
    0001831D  0F 8E03000000     JLE      3
    00018323  EB                JMP      

    LINE     15125

    00018324  B8 01000000       MOV      EAX,1
    00018329  8B C8             MOV      ECX,EAX
    0001832B  B8 05000000       MOV      EAX,5
    00018330  50                PUSH     EAX
    00018331  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018334  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018337  5B                POP      EBX
    00018338  53                PUSH     EBX
    00018339  3B C3             CMP      EAX,EBX
    0001833B  0F 8E03000000     JLE      3
    00018341  EB                JMP      

    LINE     15132

    00018342  B8 01000000       MOV      EAX,1
    00018347  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15133

    0001834A  B8 01000000       MOV      EAX,1
    0001834F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15134

    00018352  B8 01000000       MOV      EAX,1
    00018357  8B C8             MOV      ECX,EAX
    00018359  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001835C  48                DEC      EAX
    0001835D  BB 0E000000       MOV      EBX,14
    00018362  F7 E3             MUL      EBX
    00018364  50                PUSH     EAX
    00018365  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018368  48                DEC      EAX
    00018369  BB 02000000       MOV      EBX,2
    0001836E  F7 E3             MUL      EBX
    00018370  5B                POP      EBX
    00018371  03 C3             ADD      EAX,EBX
    00018373  8B F8             MOV      EDI,EAX
    00018375  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15135

    00018379  B8 01000000       MOV      EAX,1
    0001837E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15136

    00018381  B8 01000000       MOV      EAX,1
    00018386  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15138

    00018389  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018390  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018395  5B                POP      EBX

    LINE     15140

    00018396  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001839D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    000183A2  5B                POP      EBX

    LINE     15142

    000183A3  B8 0A000000       MOV      EAX,10
    000183A8  40                INC      EAX
    000183A9  50                PUSH     EAX
    000183AA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000183AD  5B                POP      EBX
    000183AE  3B C3             CMP      EAX,EBX
    000183B0  0F 8503000000     JNE      3
    000183B6  EB                JMP      

    LINE     15149

    000183B7  B8 01000000       MOV      EAX,1
    000183BC  8B C8             MOV      ECX,EAX
    000183BE  B8 0A000000       MOV      EAX,10
    000183C3  50                PUSH     EAX
    000183C4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000183C7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000183CA  5B                POP      EBX
    000183CB  53                PUSH     EBX
    000183CC  3B C3             CMP      EAX,EBX
    000183CE  0F 8E03000000     JLE      3
    000183D4  EB                JMP      

    LINE     15151

    000183D5  B8 01000000       MOV      EAX,1
    000183DA  8B C8             MOV      ECX,EAX
    000183DC  B8 05000000       MOV      EAX,5
    000183E1  50                PUSH     EAX
    000183E2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000183E5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000183E8  5B                POP      EBX
    000183E9  53                PUSH     EBX
    000183EA  3B C3             CMP      EAX,EBX
    000183EC  0F 8E03000000     JLE      3
    000183F2  EB                JMP      

    LINE     15158

    000183F3  B8 01000000       MOV      EAX,1
    000183F8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15159

    000183FB  B8 01000000       MOV      EAX,1
    00018400  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15160

    00018403  B8 01000000       MOV      EAX,1
    00018408  8B C8             MOV      ECX,EAX
    0001840A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001840D  48                DEC      EAX
    0001840E  BB 0E000000       MOV      EBX,14
    00018413  F7 E3             MUL      EBX
    00018415  50                PUSH     EAX
    00018416  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018419  48                DEC      EAX
    0001841A  BB 02000000       MOV      EBX,2
    0001841F  F7 E3             MUL      EBX
    00018421  5B                POP      EBX
    00018422  03 C3             ADD      EAX,EBX
    00018424  8B F8             MOV      EDI,EAX
    00018426  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15161

    0001842A  B8 01000000       MOV      EAX,1
    0001842F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15162

    00018432  B8 01000000       MOV      EAX,1
    00018437  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15164

    0001843A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00018441  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018446  5B                POP      EBX

    LINE     15166

    00018447  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001844E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00018453  5B                POP      EBX

    LINE     15168

    00018454  B8 0A000000       MOV      EAX,10
    00018459  40                INC      EAX
    0001845A  50                PUSH     EAX
    0001845B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001845E  5B                POP      EBX
    0001845F  3B C3             CMP      EAX,EBX
    00018461  0F 8503000000     JNE      3
    00018467  EB                JMP      

    LINE     15176

    00018468  B8 01000000       MOV      EAX,1
    0001846D  8B C8             MOV      ECX,EAX
    0001846F  B8 0A000000       MOV      EAX,10
    00018474  50                PUSH     EAX
    00018475  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018478  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001847B  5B                POP      EBX
    0001847C  53                PUSH     EBX
    0001847D  3B C3             CMP      EAX,EBX
    0001847F  0F 8E03000000     JLE      3
    00018485  EB                JMP      

    LINE     15178

    00018486  B8 01000000       MOV      EAX,1
    0001848B  8B C8             MOV      ECX,EAX
    0001848D  B8 05000000       MOV      EAX,5
    00018492  50                PUSH     EAX
    00018493  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018496  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018499  5B                POP      EBX
    0001849A  53                PUSH     EBX
    0001849B  3B C3             CMP      EAX,EBX
    0001849D  0F 8E03000000     JLE      3
    000184A3  EB                JMP      

    LINE     15185

    000184A4  B8 01000000       MOV      EAX,1
    000184A9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15186

    000184AF  B8 01000000       MOV      EAX,1
    000184B4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15187

    000184BA  B8 01000000       MOV      EAX,1
    000184BF  8B C8             MOV      ECX,EAX
    000184C1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000184C4  48                DEC      EAX
    000184C5  BB 0E000000       MOV      EBX,14
    000184CA  F7 E3             MUL      EBX
    000184CC  50                PUSH     EAX
    000184CD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000184D0  48                DEC      EAX
    000184D1  BB 02000000       MOV      EBX,2
    000184D6  F7 E3             MUL      EBX
    000184D8  5B                POP      EBX
    000184D9  03 C3             ADD      EAX,EBX
    000184DB  8B F8             MOV      EDI,EAX
    000184DD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15188

    000184E4  B8 01000000       MOV      EAX,1
    000184E9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15189

    000184EF  B8 01000000       MOV      EAX,1
    000184F4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15191

    000184FA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018501  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00018506  5B                POP      EBX

    LINE     15193

    00018507  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001850E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00018513  5B                POP      EBX

    LINE     15195

    00018514  B8 0A000000       MOV      EAX,10
    00018519  40                INC      EAX
    0001851A  50                PUSH     EAX
    0001851B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001851E  5B                POP      EBX
    0001851F  3B C3             CMP      EAX,EBX
    00018521  0F 8503000000     JNE      3
    00018527  EB                JMP      

    LINE     15202

    00018528  B8 01000000       MOV      EAX,1
    0001852D  8B C8             MOV      ECX,EAX
    0001852F  B8 0A000000       MOV      EAX,10
    00018534  50                PUSH     EAX
    00018535  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00018538  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001853B  5B                POP      EBX
    0001853C  53                PUSH     EBX
    0001853D  3B C3             CMP      EAX,EBX
    0001853F  0F 8E03000000     JLE      3
    00018545  EB                JMP      

    LINE     15204

    00018546  B8 01000000       MOV      EAX,1
    0001854B  8B C8             MOV      ECX,EAX
    0001854D  B8 05000000       MOV      EAX,5
    00018552  50                PUSH     EAX
    00018553  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00018556  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018559  5B                POP      EBX
    0001855A  53                PUSH     EBX
    0001855B  3B C3             CMP      EAX,EBX
    0001855D  0F 8E03000000     JLE      3
    00018563  EB                JMP      

    LINE     15211

    00018564  B8 01000000       MOV      EAX,1
    00018569  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15212

    0001856F  B8 01000000       MOV      EAX,1
    00018574  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15213

    0001857A  B8 01000000       MOV      EAX,1
    0001857F  8B C8             MOV      ECX,EAX
    00018581  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018584  48                DEC      EAX
    00018585  BB 0E000000       MOV      EBX,14
    0001858A  F7 E3             MUL      EBX
    0001858C  50                PUSH     EAX
    0001858D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018590  48                DEC      EAX
    00018591  BB 02000000       MOV      EBX,2
    00018596  F7 E3             MUL      EBX
    00018598  5B                POP      EBX
    00018599  03 C3             ADD      EAX,EBX
    0001859B  8B F8             MOV      EDI,EAX
    0001859D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15214

    000185A4  B8 01000000       MOV      EAX,1
    000185A9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15215

    000185AF  B8 01000000       MOV      EAX,1
    000185B4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15217

    000185BA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000185C1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000185C6  5B                POP      EBX

    LINE     15219

    000185C7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000185CE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000185D3  5B                POP      EBX

    LINE     15221

    000185D4  B8 0A000000       MOV      EAX,10
    000185D9  40                INC      EAX
    000185DA  50                PUSH     EAX
    000185DB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000185DE  5B                POP      EBX
    000185DF  3B C3             CMP      EAX,EBX
    000185E1  0F 8503000000     JNE      3
    000185E7  EB                JMP      

    LINE     15235

    000185E8  56                PUSH     ESI
    000185E9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000185EF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000185F5  FF D1             CALL     ECX                       run_inner_proc
    000185F7  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15237

    000185F8  B8 01000000       MOV      EAX,1
    000185FD  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15239

    00018600  B8 01000000       MOV      EAX,1
    00018605  8B C8             MOV      ECX,EAX
    00018607  B8 0A000000       MOV      EAX,10
    0001860C  50                PUSH     EAX
    0001860D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018610  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018613  5B                POP      EBX
    00018614  53                PUSH     EBX
    00018615  3B C3             CMP      EAX,EBX
    00018617  0F 8E03000000     JLE      3
    0001861D  EB                JMP      

    LINE     15241

    0001861E  B8 01000000       MOV      EAX,1
    00018623  8B C8             MOV      ECX,EAX
    00018625  B8 05000000       MOV      EAX,5
    0001862A  50                PUSH     EAX
    0001862B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001862E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018631  5B                POP      EBX
    00018632  53                PUSH     EBX
    00018633  3B C3             CMP      EAX,EBX
    00018635  0F 8E03000000     JLE      3
    0001863B  EB                JMP      

    LINE     15248

    0001863C  B8 01000000       MOV      EAX,1
    00018641  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15249

    00018644  B8 01000000       MOV      EAX,1
    00018649  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15250

    0001864C  B8 01000000       MOV      EAX,1
    00018651  8B C8             MOV      ECX,EAX
    00018653  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018656  48                DEC      EAX
    00018657  BB 0E000000       MOV      EBX,14
    0001865C  F7 E3             MUL      EBX
    0001865E  50                PUSH     EAX
    0001865F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018662  48                DEC      EAX
    00018663  BB 02000000       MOV      EBX,2
    00018668  F7 E3             MUL      EBX
    0001866A  5B                POP      EBX
    0001866B  03 C3             ADD      EAX,EBX
    0001866D  8B F8             MOV      EDI,EAX
    0001866F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15251

    00018673  B8 01000000       MOV      EAX,1
    00018678  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15252

    0001867B  B8 01000000       MOV      EAX,1
    00018680  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15254

    00018683  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001868A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001868F  5B                POP      EBX

    LINE     15256

    00018690  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018697  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001869C  5B                POP      EBX

    LINE     15258

    0001869D  B8 0A000000       MOV      EAX,10
    000186A2  40                INC      EAX
    000186A3  50                PUSH     EAX
    000186A4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000186A7  5B                POP      EBX
    000186A8  3B C3             CMP      EAX,EBX
    000186AA  0F 8503000000     JNE      3
    000186B0  EB                JMP      

    LINE     15265

    000186B1  B8 01000000       MOV      EAX,1
    000186B6  8B C8             MOV      ECX,EAX
    000186B8  B8 0A000000       MOV      EAX,10
    000186BD  50                PUSH     EAX
    000186BE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000186C1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000186C4  5B                POP      EBX
    000186C5  53                PUSH     EBX
    000186C6  3B C3             CMP      EAX,EBX
    000186C8  0F 8E03000000     JLE      3
    000186CE  EB                JMP      

    LINE     15267

    000186CF  B8 01000000       MOV      EAX,1
    000186D4  8B C8             MOV      ECX,EAX
    000186D6  B8 05000000       MOV      EAX,5
    000186DB  50                PUSH     EAX
    000186DC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000186DF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000186E2  5B                POP      EBX
    000186E3  53                PUSH     EBX
    000186E4  3B C3             CMP      EAX,EBX
    000186E6  0F 8E03000000     JLE      3
    000186EC  EB                JMP      

    LINE     15274

    000186ED  B8 01000000       MOV      EAX,1
    000186F2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15275

    000186F5  B8 01000000       MOV      EAX,1
    000186FA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15276

    000186FD  B8 01000000       MOV      EAX,1
    00018702  8B C8             MOV      ECX,EAX
    00018704  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018707  48                DEC      EAX
    00018708  BB 0E000000       MOV      EBX,14
    0001870D  F7 E3             MUL      EBX
    0001870F  50                PUSH     EAX
    00018710  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018713  48                DEC      EAX
    00018714  BB 02000000       MOV      EBX,2
    00018719  F7 E3             MUL      EBX
    0001871B  5B                POP      EBX
    0001871C  03 C3             ADD      EAX,EBX
    0001871E  8B F8             MOV      EDI,EAX
    00018720  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15277

    00018724  B8 01000000       MOV      EAX,1
    00018729  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15278

    0001872C  B8 01000000       MOV      EAX,1
    00018731  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15280

    00018734  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001873B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018740  5B                POP      EBX

    LINE     15282

    00018741  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00018748  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001874D  5B                POP      EBX

    LINE     15284

    0001874E  B8 0A000000       MOV      EAX,10
    00018753  40                INC      EAX
    00018754  50                PUSH     EAX
    00018755  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018758  5B                POP      EBX
    00018759  3B C3             CMP      EAX,EBX
    0001875B  0F 8503000000     JNE      3
    00018761  EB                JMP      

    LINE     15292

    00018762  B8 01000000       MOV      EAX,1
    00018767  8B C8             MOV      ECX,EAX
    00018769  B8 0A000000       MOV      EAX,10
    0001876E  50                PUSH     EAX
    0001876F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018772  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018775  5B                POP      EBX
    00018776  53                PUSH     EBX
    00018777  3B C3             CMP      EAX,EBX
    00018779  0F 8E03000000     JLE      3
    0001877F  EB                JMP      

    LINE     15294

    00018780  B8 01000000       MOV      EAX,1
    00018785  8B C8             MOV      ECX,EAX
    00018787  B8 05000000       MOV      EAX,5
    0001878C  50                PUSH     EAX
    0001878D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018790  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018793  5B                POP      EBX
    00018794  53                PUSH     EBX
    00018795  3B C3             CMP      EAX,EBX
    00018797  0F 8E03000000     JLE      3
    0001879D  EB                JMP      

    LINE     15301

    0001879E  B8 01000000       MOV      EAX,1
    000187A3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15302

    000187A9  B8 01000000       MOV      EAX,1
    000187AE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15303

    000187B4  B8 01000000       MOV      EAX,1
    000187B9  8B C8             MOV      ECX,EAX
    000187BB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000187BE  48                DEC      EAX
    000187BF  BB 0E000000       MOV      EBX,14
    000187C4  F7 E3             MUL      EBX
    000187C6  50                PUSH     EAX
    000187C7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000187CA  48                DEC      EAX
    000187CB  BB 02000000       MOV      EBX,2
    000187D0  F7 E3             MUL      EBX
    000187D2  5B                POP      EBX
    000187D3  03 C3             ADD      EAX,EBX
    000187D5  8B F8             MOV      EDI,EAX
    000187D7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15304

    000187DE  B8 01000000       MOV      EAX,1
    000187E3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15305

    000187E9  B8 01000000       MOV      EAX,1
    000187EE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15307

    000187F4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000187FB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00018800  5B                POP      EBX

    LINE     15309

    00018801  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018808  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001880D  5B                POP      EBX

    LINE     15311

    0001880E  B8 0A000000       MOV      EAX,10
    00018813  40                INC      EAX
    00018814  50                PUSH     EAX
    00018815  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018818  5B                POP      EBX
    00018819  3B C3             CMP      EAX,EBX
    0001881B  0F 8503000000     JNE      3
    00018821  EB                JMP      

    LINE     15318

    00018822  B8 01000000       MOV      EAX,1
    00018827  8B C8             MOV      ECX,EAX
    00018829  B8 0A000000       MOV      EAX,10
    0001882E  50                PUSH     EAX
    0001882F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00018832  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018835  5B                POP      EBX
    00018836  53                PUSH     EBX
    00018837  3B C3             CMP      EAX,EBX
    00018839  0F 8E03000000     JLE      3
    0001883F  EB                JMP      

    LINE     15320

    00018840  B8 01000000       MOV      EAX,1
    00018845  8B C8             MOV      ECX,EAX
    00018847  B8 05000000       MOV      EAX,5
    0001884C  50                PUSH     EAX
    0001884D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00018850  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018853  5B                POP      EBX
    00018854  53                PUSH     EBX
    00018855  3B C3             CMP      EAX,EBX
    00018857  0F 8E03000000     JLE      3
    0001885D  EB                JMP      

    LINE     15327

    0001885E  B8 01000000       MOV      EAX,1
    00018863  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15328

    00018869  B8 01000000       MOV      EAX,1
    0001886E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15329

    00018874  B8 01000000       MOV      EAX,1
    00018879  8B C8             MOV      ECX,EAX
    0001887B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001887E  48                DEC      EAX
    0001887F  BB 0E000000       MOV      EBX,14
    00018884  F7 E3             MUL      EBX
    00018886  50                PUSH     EAX
    00018887  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001888A  48                DEC      EAX
    0001888B  BB 02000000       MOV      EBX,2
    00018890  F7 E3             MUL      EBX
    00018892  5B                POP      EBX
    00018893  03 C3             ADD      EAX,EBX
    00018895  8B F8             MOV      EDI,EAX
    00018897  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15330

    0001889E  B8 01000000       MOV      EAX,1
    000188A3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15331

    000188A9  B8 01000000       MOV      EAX,1
    000188AE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15333

    000188B4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000188BB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000188C0  5B                POP      EBX

    LINE     15335

    000188C1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000188C8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000188CD  5B                POP      EBX

    LINE     15337

    000188CE  B8 0A000000       MOV      EAX,10
    000188D3  40                INC      EAX
    000188D4  50                PUSH     EAX
    000188D5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000188D8  5B                POP      EBX
    000188D9  3B C3             CMP      EAX,EBX
    000188DB  0F 8503000000     JNE      3
    000188E1  EB                JMP      

    LINE     15351

    000188E2  56                PUSH     ESI
    000188E3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000188E9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000188EF  FF D1             CALL     ECX                       run_inner_proc
    000188F1  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15353

    000188F2  B8 01000000       MOV      EAX,1
    000188F7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15355

    000188FA  B8 01000000       MOV      EAX,1
    000188FF  8B C8             MOV      ECX,EAX
    00018901  B8 0A000000       MOV      EAX,10
    00018906  50                PUSH     EAX
    00018907  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001890A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001890D  5B                POP      EBX
    0001890E  53                PUSH     EBX
    0001890F  3B C3             CMP      EAX,EBX
    00018911  0F 8E03000000     JLE      3
    00018917  EB                JMP      

    LINE     15357

    00018918  B8 01000000       MOV      EAX,1
    0001891D  8B C8             MOV      ECX,EAX
    0001891F  B8 05000000       MOV      EAX,5
    00018924  50                PUSH     EAX
    00018925  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018928  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001892B  5B                POP      EBX
    0001892C  53                PUSH     EBX
    0001892D  3B C3             CMP      EAX,EBX
    0001892F  0F 8E03000000     JLE      3
    00018935  EB                JMP      

    LINE     15364

    00018936  B8 01000000       MOV      EAX,1
    0001893B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15365

    0001893E  B8 01000000       MOV      EAX,1
    00018943  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15366

    00018946  B8 01000000       MOV      EAX,1
    0001894B  8B C8             MOV      ECX,EAX
    0001894D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018950  48                DEC      EAX
    00018951  BB 0E000000       MOV      EBX,14
    00018956  F7 E3             MUL      EBX
    00018958  50                PUSH     EAX
    00018959  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001895C  48                DEC      EAX
    0001895D  BB 02000000       MOV      EBX,2
    00018962  F7 E3             MUL      EBX
    00018964  5B                POP      EBX
    00018965  03 C3             ADD      EAX,EBX
    00018967  8B F8             MOV      EDI,EAX
    00018969  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15367

    0001896D  B8 01000000       MOV      EAX,1
    00018972  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15368

    00018975  B8 01000000       MOV      EAX,1
    0001897A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15370

    0001897D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018984  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018989  5B                POP      EBX

    LINE     15372

    0001898A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018991  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00018996  5B                POP      EBX

    LINE     15374

    00018997  B8 0A000000       MOV      EAX,10
    0001899C  40                INC      EAX
    0001899D  50                PUSH     EAX
    0001899E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000189A1  5B                POP      EBX
    000189A2  3B C3             CMP      EAX,EBX
    000189A4  0F 8503000000     JNE      3
    000189AA  EB                JMP      

    LINE     15381

    000189AB  B8 01000000       MOV      EAX,1
    000189B0  8B C8             MOV      ECX,EAX
    000189B2  B8 0A000000       MOV      EAX,10
    000189B7  50                PUSH     EAX
    000189B8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000189BB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000189BE  5B                POP      EBX
    000189BF  53                PUSH     EBX
    000189C0  3B C3             CMP      EAX,EBX
    000189C2  0F 8E03000000     JLE      3
    000189C8  EB                JMP      

    LINE     15383

    000189C9  B8 01000000       MOV      EAX,1
    000189CE  8B C8             MOV      ECX,EAX
    000189D0  B8 05000000       MOV      EAX,5
    000189D5  50                PUSH     EAX
    000189D6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000189D9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000189DC  5B                POP      EBX
    000189DD  53                PUSH     EBX
    000189DE  3B C3             CMP      EAX,EBX
    000189E0  0F 8E03000000     JLE      3
    000189E6  EB                JMP      

    LINE     15390

    000189E7  B8 01000000       MOV      EAX,1
    000189EC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15391

    000189EF  B8 01000000       MOV      EAX,1
    000189F4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15392

    000189F7  B8 01000000       MOV      EAX,1
    000189FC  8B C8             MOV      ECX,EAX
    000189FE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018A01  48                DEC      EAX
    00018A02  BB 0E000000       MOV      EBX,14
    00018A07  F7 E3             MUL      EBX
    00018A09  50                PUSH     EAX
    00018A0A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018A0D  48                DEC      EAX
    00018A0E  BB 02000000       MOV      EBX,2
    00018A13  F7 E3             MUL      EBX
    00018A15  5B                POP      EBX
    00018A16  03 C3             ADD      EAX,EBX
    00018A18  8B F8             MOV      EDI,EAX
    00018A1A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15393

    00018A1E  B8 01000000       MOV      EAX,1
    00018A23  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15394

    00018A26  B8 01000000       MOV      EAX,1
    00018A2B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15396

    00018A2E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00018A35  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018A3A  5B                POP      EBX

    LINE     15398

    00018A3B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00018A42  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00018A47  5B                POP      EBX

    LINE     15400

    00018A48  B8 0A000000       MOV      EAX,10
    00018A4D  40                INC      EAX
    00018A4E  50                PUSH     EAX
    00018A4F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018A52  5B                POP      EBX
    00018A53  3B C3             CMP      EAX,EBX
    00018A55  0F 8503000000     JNE      3
    00018A5B  EB                JMP      

    LINE     15408

    00018A5C  B8 01000000       MOV      EAX,1
    00018A61  8B C8             MOV      ECX,EAX
    00018A63  B8 0A000000       MOV      EAX,10
    00018A68  50                PUSH     EAX
    00018A69  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018A6C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018A6F  5B                POP      EBX
    00018A70  53                PUSH     EBX
    00018A71  3B C3             CMP      EAX,EBX
    00018A73  0F 8E03000000     JLE      3
    00018A79  EB                JMP      

    LINE     15410

    00018A7A  B8 01000000       MOV      EAX,1
    00018A7F  8B C8             MOV      ECX,EAX
    00018A81  B8 05000000       MOV      EAX,5
    00018A86  50                PUSH     EAX
    00018A87  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018A8A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018A8D  5B                POP      EBX
    00018A8E  53                PUSH     EBX
    00018A8F  3B C3             CMP      EAX,EBX
    00018A91  0F 8E03000000     JLE      3
    00018A97  EB                JMP      

    LINE     15417

    00018A98  B8 01000000       MOV      EAX,1
    00018A9D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15418

    00018AA3  B8 01000000       MOV      EAX,1
    00018AA8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15419

    00018AAE  B8 01000000       MOV      EAX,1
    00018AB3  8B C8             MOV      ECX,EAX
    00018AB5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018AB8  48                DEC      EAX
    00018AB9  BB 0E000000       MOV      EBX,14
    00018ABE  F7 E3             MUL      EBX
    00018AC0  50                PUSH     EAX
    00018AC1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018AC4  48                DEC      EAX
    00018AC5  BB 02000000       MOV      EBX,2
    00018ACA  F7 E3             MUL      EBX
    00018ACC  5B                POP      EBX
    00018ACD  03 C3             ADD      EAX,EBX
    00018ACF  8B F8             MOV      EDI,EAX
    00018AD1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15420

    00018AD8  B8 01000000       MOV      EAX,1
    00018ADD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15421

    00018AE3  B8 01000000       MOV      EAX,1
    00018AE8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15423

    00018AEE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018AF5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00018AFA  5B                POP      EBX

    LINE     15425

    00018AFB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018B02  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00018B07  5B                POP      EBX

    LINE     15427

    00018B08  B8 0A000000       MOV      EAX,10
    00018B0D  40                INC      EAX
    00018B0E  50                PUSH     EAX
    00018B0F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018B12  5B                POP      EBX
    00018B13  3B C3             CMP      EAX,EBX
    00018B15  0F 8503000000     JNE      3
    00018B1B  EB                JMP      

    LINE     15434

    00018B1C  B8 01000000       MOV      EAX,1
    00018B21  8B C8             MOV      ECX,EAX
    00018B23  B8 0A000000       MOV      EAX,10
    00018B28  50                PUSH     EAX
    00018B29  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00018B2C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018B2F  5B                POP      EBX
    00018B30  53                PUSH     EBX
    00018B31  3B C3             CMP      EAX,EBX
    00018B33  0F 8E03000000     JLE      3
    00018B39  EB                JMP      

    LINE     15436

    00018B3A  B8 01000000       MOV      EAX,1
    00018B3F  8B C8             MOV      ECX,EAX
    00018B41  B8 05000000       MOV      EAX,5
    00018B46  50                PUSH     EAX
    00018B47  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00018B4A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018B4D  5B                POP      EBX
    00018B4E  53                PUSH     EBX
    00018B4F  3B C3             CMP      EAX,EBX
    00018B51  0F 8E03000000     JLE      3
    00018B57  EB                JMP      

    LINE     15443

    00018B58  B8 01000000       MOV      EAX,1
    00018B5D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15444

    00018B63  B8 01000000       MOV      EAX,1
    00018B68  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15445

    00018B6E  B8 01000000       MOV      EAX,1
    00018B73  8B C8             MOV      ECX,EAX
    00018B75  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018B78  48                DEC      EAX
    00018B79  BB 0E000000       MOV      EBX,14
    00018B7E  F7 E3             MUL      EBX
    00018B80  50                PUSH     EAX
    00018B81  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018B84  48                DEC      EAX
    00018B85  BB 02000000       MOV      EBX,2
    00018B8A  F7 E3             MUL      EBX
    00018B8C  5B                POP      EBX
    00018B8D  03 C3             ADD      EAX,EBX
    00018B8F  8B F8             MOV      EDI,EAX
    00018B91  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15446

    00018B98  B8 01000000       MOV      EAX,1
    00018B9D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15447

    00018BA3  B8 01000000       MOV      EAX,1
    00018BA8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15449

    00018BAE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00018BB5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00018BBA  5B                POP      EBX

    LINE     15451

    00018BBB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00018BC2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00018BC7  5B                POP      EBX

    LINE     15453

    00018BC8  B8 0A000000       MOV      EAX,10
    00018BCD  40                INC      EAX
    00018BCE  50                PUSH     EAX
    00018BCF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018BD2  5B                POP      EBX
    00018BD3  3B C3             CMP      EAX,EBX
    00018BD5  0F 8503000000     JNE      3
    00018BDB  EB                JMP      

    LINE     15467

    00018BDC  56                PUSH     ESI
    00018BDD  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00018BE3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00018BE9  FF D1             CALL     ECX                       run_inner_proc
    00018BEB  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15469

    00018BEC  B8 01000000       MOV      EAX,1
    00018BF1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15471

    00018BF4  B8 01000000       MOV      EAX,1
    00018BF9  8B C8             MOV      ECX,EAX
    00018BFB  B8 0A000000       MOV      EAX,10
    00018C00  50                PUSH     EAX
    00018C01  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018C04  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018C07  5B                POP      EBX
    00018C08  53                PUSH     EBX
    00018C09  3B C3             CMP      EAX,EBX
    00018C0B  0F 8E03000000     JLE      3
    00018C11  EB                JMP      

    LINE     15473

    00018C12  B8 01000000       MOV      EAX,1
    00018C17  8B C8             MOV      ECX,EAX
    00018C19  B8 05000000       MOV      EAX,5
    00018C1E  50                PUSH     EAX
    00018C1F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018C22  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018C25  5B                POP      EBX
    00018C26  53                PUSH     EBX
    00018C27  3B C3             CMP      EAX,EBX
    00018C29  0F 8E03000000     JLE      3
    00018C2F  EB                JMP      

    LINE     15480

    00018C30  B8 01000000       MOV      EAX,1
    00018C35  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15481

    00018C38  B8 01000000       MOV      EAX,1
    00018C3D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15482

    00018C40  B8 01000000       MOV      EAX,1
    00018C45  8B C8             MOV      ECX,EAX
    00018C47  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018C4A  48                DEC      EAX
    00018C4B  BB 0E000000       MOV      EBX,14
    00018C50  F7 E3             MUL      EBX
    00018C52  50                PUSH     EAX
    00018C53  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018C56  48                DEC      EAX
    00018C57  BB 02000000       MOV      EBX,2
    00018C5C  F7 E3             MUL      EBX
    00018C5E  5B                POP      EBX
    00018C5F  03 C3             ADD      EAX,EBX
    00018C61  8B F8             MOV      EDI,EAX
    00018C63  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15483

    00018C67  B8 01000000       MOV      EAX,1
    00018C6C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15484

    00018C6F  B8 01000000       MOV      EAX,1
    00018C74  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15486

    00018C77  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018C7E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018C83  5B                POP      EBX

    LINE     15488

    00018C84  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018C8B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00018C90  5B                POP      EBX

    LINE     15490

    00018C91  B8 0A000000       MOV      EAX,10
    00018C96  40                INC      EAX
    00018C97  50                PUSH     EAX
    00018C98  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018C9B  5B                POP      EBX
    00018C9C  3B C3             CMP      EAX,EBX
    00018C9E  0F 8503000000     JNE      3
    00018CA4  EB                JMP      

    LINE     15497

    00018CA5  B8 01000000       MOV      EAX,1
    00018CAA  8B C8             MOV      ECX,EAX
    00018CAC  B8 0A000000       MOV      EAX,10
    00018CB1  50                PUSH     EAX
    00018CB2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00018CB5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018CB8  5B                POP      EBX
    00018CB9  53                PUSH     EBX
    00018CBA  3B C3             CMP      EAX,EBX
    00018CBC  0F 8E03000000     JLE      3
    00018CC2  EB                JMP      

    LINE     15499

    00018CC3  B8 01000000       MOV      EAX,1
    00018CC8  8B C8             MOV      ECX,EAX
    00018CCA  B8 05000000       MOV      EAX,5
    00018CCF  50                PUSH     EAX
    00018CD0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00018CD3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018CD6  5B                POP      EBX
    00018CD7  53                PUSH     EBX
    00018CD8  3B C3             CMP      EAX,EBX
    00018CDA  0F 8E03000000     JLE      3
    00018CE0  EB                JMP      

    LINE     15506

    00018CE1  B8 01000000       MOV      EAX,1
    00018CE6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15507

    00018CE9  B8 01000000       MOV      EAX,1
    00018CEE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15508

    00018CF1  B8 01000000       MOV      EAX,1
    00018CF6  8B C8             MOV      ECX,EAX
    00018CF8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018CFB  48                DEC      EAX
    00018CFC  BB 0E000000       MOV      EBX,14
    00018D01  F7 E3             MUL      EBX
    00018D03  50                PUSH     EAX
    00018D04  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018D07  48                DEC      EAX
    00018D08  BB 02000000       MOV      EBX,2
    00018D0D  F7 E3             MUL      EBX
    00018D0F  5B                POP      EBX
    00018D10  03 C3             ADD      EAX,EBX
    00018D12  8B F8             MOV      EDI,EAX
    00018D14  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15509

    00018D18  B8 01000000       MOV      EAX,1
    00018D1D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15510

    00018D20  B8 01000000       MOV      EAX,1
    00018D25  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15512

    00018D28  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00018D2F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018D34  5B                POP      EBX

    LINE     15514

    00018D35  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00018D3C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00018D41  5B                POP      EBX

    LINE     15516

    00018D42  B8 0A000000       MOV      EAX,10
    00018D47  40                INC      EAX
    00018D48  50                PUSH     EAX
    00018D49  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018D4C  5B                POP      EBX
    00018D4D  3B C3             CMP      EAX,EBX
    00018D4F  0F 8503000000     JNE      3
    00018D55  EB                JMP      

    LINE     15524

    00018D56  B8 01000000       MOV      EAX,1
    00018D5B  8B C8             MOV      ECX,EAX
    00018D5D  B8 0A000000       MOV      EAX,10
    00018D62  50                PUSH     EAX
    00018D63  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018D66  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018D69  5B                POP      EBX
    00018D6A  53                PUSH     EBX
    00018D6B  3B C3             CMP      EAX,EBX
    00018D6D  0F 8E03000000     JLE      3
    00018D73  EB                JMP      

    LINE     15526

    00018D74  B8 01000000       MOV      EAX,1
    00018D79  8B C8             MOV      ECX,EAX
    00018D7B  B8 05000000       MOV      EAX,5
    00018D80  50                PUSH     EAX
    00018D81  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018D84  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018D87  5B                POP      EBX
    00018D88  53                PUSH     EBX
    00018D89  3B C3             CMP      EAX,EBX
    00018D8B  0F 8E03000000     JLE      3
    00018D91  EB                JMP      

    LINE     15533

    00018D92  B8 01000000       MOV      EAX,1
    00018D97  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15534

    00018D9D  B8 01000000       MOV      EAX,1
    00018DA2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15535

    00018DA8  B8 01000000       MOV      EAX,1
    00018DAD  8B C8             MOV      ECX,EAX
    00018DAF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018DB2  48                DEC      EAX
    00018DB3  BB 0E000000       MOV      EBX,14
    00018DB8  F7 E3             MUL      EBX
    00018DBA  50                PUSH     EAX
    00018DBB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018DBE  48                DEC      EAX
    00018DBF  BB 02000000       MOV      EBX,2
    00018DC4  F7 E3             MUL      EBX
    00018DC6  5B                POP      EBX
    00018DC7  03 C3             ADD      EAX,EBX
    00018DC9  8B F8             MOV      EDI,EAX
    00018DCB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15536

    00018DD2  B8 01000000       MOV      EAX,1
    00018DD7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15537

    00018DDD  B8 01000000       MOV      EAX,1
    00018DE2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15539

    00018DE8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018DEF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00018DF4  5B                POP      EBX

    LINE     15541

    00018DF5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018DFC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00018E01  5B                POP      EBX

    LINE     15543

    00018E02  B8 0A000000       MOV      EAX,10
    00018E07  40                INC      EAX
    00018E08  50                PUSH     EAX
    00018E09  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018E0C  5B                POP      EBX
    00018E0D  3B C3             CMP      EAX,EBX
    00018E0F  0F 8503000000     JNE      3
    00018E15  EB                JMP      

    LINE     15550

    00018E16  B8 01000000       MOV      EAX,1
    00018E1B  8B C8             MOV      ECX,EAX
    00018E1D  B8 0A000000       MOV      EAX,10
    00018E22  50                PUSH     EAX
    00018E23  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00018E26  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018E29  5B                POP      EBX
    00018E2A  53                PUSH     EBX
    00018E2B  3B C3             CMP      EAX,EBX
    00018E2D  0F 8E03000000     JLE      3
    00018E33  EB                JMP      

    LINE     15552

    00018E34  B8 01000000       MOV      EAX,1
    00018E39  8B C8             MOV      ECX,EAX
    00018E3B  B8 05000000       MOV      EAX,5
    00018E40  50                PUSH     EAX
    00018E41  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00018E44  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018E47  5B                POP      EBX
    00018E48  53                PUSH     EBX
    00018E49  3B C3             CMP      EAX,EBX
    00018E4B  0F 8E03000000     JLE      3
    00018E51  EB                JMP      

    LINE     15559

    00018E52  B8 01000000       MOV      EAX,1
    00018E57  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15560

    00018E5D  B8 01000000       MOV      EAX,1
    00018E62  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15561

    00018E68  B8 01000000       MOV      EAX,1
    00018E6D  8B C8             MOV      ECX,EAX
    00018E6F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018E72  48                DEC      EAX
    00018E73  BB 0E000000       MOV      EBX,14
    00018E78  F7 E3             MUL      EBX
    00018E7A  50                PUSH     EAX
    00018E7B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018E7E  48                DEC      EAX
    00018E7F  BB 02000000       MOV      EBX,2
    00018E84  F7 E3             MUL      EBX
    00018E86  5B                POP      EBX
    00018E87  03 C3             ADD      EAX,EBX
    00018E89  8B F8             MOV      EDI,EAX
    00018E8B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15562

    00018E92  B8 01000000       MOV      EAX,1
    00018E97  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15563

    00018E9D  B8 01000000       MOV      EAX,1
    00018EA2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15565

    00018EA8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00018EAF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00018EB4  5B                POP      EBX

    LINE     15567

    00018EB5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00018EBC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00018EC1  5B                POP      EBX

    LINE     15569

    00018EC2  B8 0A000000       MOV      EAX,10
    00018EC7  40                INC      EAX
    00018EC8  50                PUSH     EAX
    00018EC9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018ECC  5B                POP      EBX
    00018ECD  3B C3             CMP      EAX,EBX
    00018ECF  0F 8503000000     JNE      3
    00018ED5  EB                JMP      

    LINE     15583

    00018ED6  56                PUSH     ESI
    00018ED7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00018EDD  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00018EE3  FF D1             CALL     ECX                       run_inner_proc
    00018EE5  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15585

    00018EE6  B8 01000000       MOV      EAX,1
    00018EEB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15587

    00018EEE  B8 01000000       MOV      EAX,1
    00018EF3  8B C8             MOV      ECX,EAX
    00018EF5  B8 0A000000       MOV      EAX,10
    00018EFA  50                PUSH     EAX
    00018EFB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00018EFE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018F01  5B                POP      EBX
    00018F02  53                PUSH     EBX
    00018F03  3B C3             CMP      EAX,EBX
    00018F05  0F 8E03000000     JLE      3
    00018F0B  EB                JMP      

    LINE     15589

    00018F0C  B8 01000000       MOV      EAX,1
    00018F11  8B C8             MOV      ECX,EAX
    00018F13  B8 05000000       MOV      EAX,5
    00018F18  50                PUSH     EAX
    00018F19  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00018F1C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018F1F  5B                POP      EBX
    00018F20  53                PUSH     EBX
    00018F21  3B C3             CMP      EAX,EBX
    00018F23  0F 8E03000000     JLE      3
    00018F29  EB                JMP      

    LINE     15596

    00018F2A  B8 01000000       MOV      EAX,1
    00018F2F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15597

    00018F32  B8 01000000       MOV      EAX,1
    00018F37  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15598

    00018F3A  B8 01000000       MOV      EAX,1
    00018F3F  8B C8             MOV      ECX,EAX
    00018F41  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018F44  48                DEC      EAX
    00018F45  BB 0E000000       MOV      EBX,14
    00018F4A  F7 E3             MUL      EBX
    00018F4C  50                PUSH     EAX
    00018F4D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00018F50  48                DEC      EAX
    00018F51  BB 02000000       MOV      EBX,2
    00018F56  F7 E3             MUL      EBX
    00018F58  5B                POP      EBX
    00018F59  03 C3             ADD      EAX,EBX
    00018F5B  8B F8             MOV      EDI,EAX
    00018F5D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15599

    00018F61  B8 01000000       MOV      EAX,1
    00018F66  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15600

    00018F69  B8 01000000       MOV      EAX,1
    00018F6E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15602

    00018F71  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00018F78  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00018F7D  5B                POP      EBX

    LINE     15604

    00018F7E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00018F85  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00018F8A  5B                POP      EBX

    LINE     15606

    00018F8B  B8 0A000000       MOV      EAX,10
    00018F90  40                INC      EAX
    00018F91  50                PUSH     EAX
    00018F92  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00018F95  5B                POP      EBX
    00018F96  3B C3             CMP      EAX,EBX
    00018F98  0F 8503000000     JNE      3
    00018F9E  EB                JMP      

    LINE     15613

    00018F9F  B8 01000000       MOV      EAX,1
    00018FA4  8B C8             MOV      ECX,EAX
    00018FA6  B8 0A000000       MOV      EAX,10
    00018FAB  50                PUSH     EAX
    00018FAC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00018FAF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018FB2  5B                POP      EBX
    00018FB3  53                PUSH     EBX
    00018FB4  3B C3             CMP      EAX,EBX
    00018FB6  0F 8E03000000     JLE      3
    00018FBC  EB                JMP      

    LINE     15615

    00018FBD  B8 01000000       MOV      EAX,1
    00018FC2  8B C8             MOV      ECX,EAX
    00018FC4  B8 05000000       MOV      EAX,5
    00018FC9  50                PUSH     EAX
    00018FCA  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00018FCD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00018FD0  5B                POP      EBX
    00018FD1  53                PUSH     EBX
    00018FD2  3B C3             CMP      EAX,EBX
    00018FD4  0F 8E03000000     JLE      3
    00018FDA  EB                JMP      

    LINE     15622

    00018FDB  B8 01000000       MOV      EAX,1
    00018FE0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15623

    00018FE3  B8 01000000       MOV      EAX,1
    00018FE8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15624

    00018FEB  B8 01000000       MOV      EAX,1
    00018FF0  8B C8             MOV      ECX,EAX
    00018FF2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00018FF5  48                DEC      EAX
    00018FF6  BB 0E000000       MOV      EBX,14
    00018FFB  F7 E3             MUL      EBX
    00018FFD  50                PUSH     EAX
    00018FFE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019001  48                DEC      EAX
    00019002  BB 02000000       MOV      EBX,2
    00019007  F7 E3             MUL      EBX
    00019009  5B                POP      EBX
    0001900A  03 C3             ADD      EAX,EBX
    0001900C  8B F8             MOV      EDI,EAX
    0001900E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15625

    00019012  B8 01000000       MOV      EAX,1
    00019017  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15626

    0001901A  B8 01000000       MOV      EAX,1
    0001901F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15628

    00019022  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00019029  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001902E  5B                POP      EBX

    LINE     15630

    0001902F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00019036  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001903B  5B                POP      EBX

    LINE     15632

    0001903C  B8 0A000000       MOV      EAX,10
    00019041  40                INC      EAX
    00019042  50                PUSH     EAX
    00019043  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019046  5B                POP      EBX
    00019047  3B C3             CMP      EAX,EBX
    00019049  0F 8503000000     JNE      3
    0001904F  EB                JMP      

    LINE     15640

    00019050  B8 01000000       MOV      EAX,1
    00019055  8B C8             MOV      ECX,EAX
    00019057  B8 0A000000       MOV      EAX,10
    0001905C  50                PUSH     EAX
    0001905D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00019060  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019063  5B                POP      EBX
    00019064  53                PUSH     EBX
    00019065  3B C3             CMP      EAX,EBX
    00019067  0F 8E03000000     JLE      3
    0001906D  EB                JMP      

    LINE     15642

    0001906E  B8 01000000       MOV      EAX,1
    00019073  8B C8             MOV      ECX,EAX
    00019075  B8 05000000       MOV      EAX,5
    0001907A  50                PUSH     EAX
    0001907B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001907E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019081  5B                POP      EBX
    00019082  53                PUSH     EBX
    00019083  3B C3             CMP      EAX,EBX
    00019085  0F 8E03000000     JLE      3
    0001908B  EB                JMP      

    LINE     15649

    0001908C  B8 01000000       MOV      EAX,1
    00019091  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15650

    00019097  B8 01000000       MOV      EAX,1
    0001909C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15651

    000190A2  B8 01000000       MOV      EAX,1
    000190A7  8B C8             MOV      ECX,EAX
    000190A9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000190AC  48                DEC      EAX
    000190AD  BB 0E000000       MOV      EBX,14
    000190B2  F7 E3             MUL      EBX
    000190B4  50                PUSH     EAX
    000190B5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000190B8  48                DEC      EAX
    000190B9  BB 02000000       MOV      EBX,2
    000190BE  F7 E3             MUL      EBX
    000190C0  5B                POP      EBX
    000190C1  03 C3             ADD      EAX,EBX
    000190C3  8B F8             MOV      EDI,EAX
    000190C5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15652

    000190CC  B8 01000000       MOV      EAX,1
    000190D1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15653

    000190D7  B8 01000000       MOV      EAX,1
    000190DC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15655

    000190E2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000190E9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000190EE  5B                POP      EBX

    LINE     15657

    000190EF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000190F6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000190FB  5B                POP      EBX

    LINE     15659

    000190FC  B8 0A000000       MOV      EAX,10
    00019101  40                INC      EAX
    00019102  50                PUSH     EAX
    00019103  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019106  5B                POP      EBX
    00019107  3B C3             CMP      EAX,EBX
    00019109  0F 8503000000     JNE      3
    0001910F  EB                JMP      

    LINE     15666

    00019110  B8 01000000       MOV      EAX,1
    00019115  8B C8             MOV      ECX,EAX
    00019117  B8 0A000000       MOV      EAX,10
    0001911C  50                PUSH     EAX
    0001911D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00019120  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019123  5B                POP      EBX
    00019124  53                PUSH     EBX
    00019125  3B C3             CMP      EAX,EBX
    00019127  0F 8E03000000     JLE      3
    0001912D  EB                JMP      

    LINE     15668

    0001912E  B8 01000000       MOV      EAX,1
    00019133  8B C8             MOV      ECX,EAX
    00019135  B8 05000000       MOV      EAX,5
    0001913A  50                PUSH     EAX
    0001913B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001913E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019141  5B                POP      EBX
    00019142  53                PUSH     EBX
    00019143  3B C3             CMP      EAX,EBX
    00019145  0F 8E03000000     JLE      3
    0001914B  EB                JMP      

    LINE     15675

    0001914C  B8 01000000       MOV      EAX,1
    00019151  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15676

    00019157  B8 01000000       MOV      EAX,1
    0001915C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15677

    00019162  B8 01000000       MOV      EAX,1
    00019167  8B C8             MOV      ECX,EAX
    00019169  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001916C  48                DEC      EAX
    0001916D  BB 0E000000       MOV      EBX,14
    00019172  F7 E3             MUL      EBX
    00019174  50                PUSH     EAX
    00019175  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019178  48                DEC      EAX
    00019179  BB 02000000       MOV      EBX,2
    0001917E  F7 E3             MUL      EBX
    00019180  5B                POP      EBX
    00019181  03 C3             ADD      EAX,EBX
    00019183  8B F8             MOV      EDI,EAX
    00019185  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15678

    0001918C  B8 01000000       MOV      EAX,1
    00019191  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15679

    00019197  B8 01000000       MOV      EAX,1
    0001919C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15681

    000191A2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000191A9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000191AE  5B                POP      EBX

    LINE     15683

    000191AF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000191B6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000191BB  5B                POP      EBX

    LINE     15685

    000191BC  B8 0A000000       MOV      EAX,10
    000191C1  40                INC      EAX
    000191C2  50                PUSH     EAX
    000191C3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000191C6  5B                POP      EBX
    000191C7  3B C3             CMP      EAX,EBX
    000191C9  0F 8503000000     JNE      3
    000191CF  EB                JMP      

    LINE     15699

    000191D0  56                PUSH     ESI
    000191D1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000191D7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000191DD  FF D1             CALL     ECX                       run_inner_proc
    000191DF  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15701

    000191E0  B8 01000000       MOV      EAX,1
    000191E5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15703

    000191E8  B8 01000000       MOV      EAX,1
    000191ED  8B C8             MOV      ECX,EAX
    000191EF  B8 0A000000       MOV      EAX,10
    000191F4  50                PUSH     EAX
    000191F5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000191F8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000191FB  5B                POP      EBX
    000191FC  53                PUSH     EBX
    000191FD  3B C3             CMP      EAX,EBX
    000191FF  0F 8E03000000     JLE      3
    00019205  EB                JMP      

    LINE     15705

    00019206  B8 01000000       MOV      EAX,1
    0001920B  8B C8             MOV      ECX,EAX
    0001920D  B8 05000000       MOV      EAX,5
    00019212  50                PUSH     EAX
    00019213  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019216  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019219  5B                POP      EBX
    0001921A  53                PUSH     EBX
    0001921B  3B C3             CMP      EAX,EBX
    0001921D  0F 8E03000000     JLE      3
    00019223  EB                JMP      

    LINE     15712

    00019224  B8 01000000       MOV      EAX,1
    00019229  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15713

    0001922C  B8 01000000       MOV      EAX,1
    00019231  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15714

    00019234  B8 01000000       MOV      EAX,1
    00019239  8B C8             MOV      ECX,EAX
    0001923B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001923E  48                DEC      EAX
    0001923F  BB 0E000000       MOV      EBX,14
    00019244  F7 E3             MUL      EBX
    00019246  50                PUSH     EAX
    00019247  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001924A  48                DEC      EAX
    0001924B  BB 02000000       MOV      EBX,2
    00019250  F7 E3             MUL      EBX
    00019252  5B                POP      EBX
    00019253  03 C3             ADD      EAX,EBX
    00019255  8B F8             MOV      EDI,EAX
    00019257  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15715

    0001925B  B8 01000000       MOV      EAX,1
    00019260  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15716

    00019263  B8 01000000       MOV      EAX,1
    00019268  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15718

    0001926B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00019272  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019277  5B                POP      EBX

    LINE     15720

    00019278  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001927F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019284  5B                POP      EBX

    LINE     15722

    00019285  B8 0A000000       MOV      EAX,10
    0001928A  40                INC      EAX
    0001928B  50                PUSH     EAX
    0001928C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001928F  5B                POP      EBX
    00019290  3B C3             CMP      EAX,EBX
    00019292  0F 8503000000     JNE      3
    00019298  EB                JMP      

    LINE     15729

    00019299  B8 01000000       MOV      EAX,1
    0001929E  8B C8             MOV      ECX,EAX
    000192A0  B8 0A000000       MOV      EAX,10
    000192A5  50                PUSH     EAX
    000192A6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000192A9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000192AC  5B                POP      EBX
    000192AD  53                PUSH     EBX
    000192AE  3B C3             CMP      EAX,EBX
    000192B0  0F 8E03000000     JLE      3
    000192B6  EB                JMP      

    LINE     15731

    000192B7  B8 01000000       MOV      EAX,1
    000192BC  8B C8             MOV      ECX,EAX
    000192BE  B8 05000000       MOV      EAX,5
    000192C3  50                PUSH     EAX
    000192C4  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000192C7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000192CA  5B                POP      EBX
    000192CB  53                PUSH     EBX
    000192CC  3B C3             CMP      EAX,EBX
    000192CE  0F 8E03000000     JLE      3
    000192D4  EB                JMP      

    LINE     15738

    000192D5  B8 01000000       MOV      EAX,1
    000192DA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15739

    000192DD  B8 01000000       MOV      EAX,1
    000192E2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15740

    000192E5  B8 01000000       MOV      EAX,1
    000192EA  8B C8             MOV      ECX,EAX
    000192EC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000192EF  48                DEC      EAX
    000192F0  BB 0E000000       MOV      EBX,14
    000192F5  F7 E3             MUL      EBX
    000192F7  50                PUSH     EAX
    000192F8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000192FB  48                DEC      EAX
    000192FC  BB 02000000       MOV      EBX,2
    00019301  F7 E3             MUL      EBX
    00019303  5B                POP      EBX
    00019304  03 C3             ADD      EAX,EBX
    00019306  8B F8             MOV      EDI,EAX
    00019308  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15741

    0001930C  B8 01000000       MOV      EAX,1
    00019311  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15742

    00019314  B8 01000000       MOV      EAX,1
    00019319  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15744

    0001931C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00019323  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019328  5B                POP      EBX

    LINE     15746

    00019329  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00019330  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019335  5B                POP      EBX

    LINE     15748

    00019336  B8 0A000000       MOV      EAX,10
    0001933B  40                INC      EAX
    0001933C  50                PUSH     EAX
    0001933D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019340  5B                POP      EBX
    00019341  3B C3             CMP      EAX,EBX
    00019343  0F 8503000000     JNE      3
    00019349  EB                JMP      

    LINE     15756

    0001934A  B8 01000000       MOV      EAX,1
    0001934F  8B C8             MOV      ECX,EAX
    00019351  B8 0A000000       MOV      EAX,10
    00019356  50                PUSH     EAX
    00019357  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001935A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001935D  5B                POP      EBX
    0001935E  53                PUSH     EBX
    0001935F  3B C3             CMP      EAX,EBX
    00019361  0F 8E03000000     JLE      3
    00019367  EB                JMP      

    LINE     15758

    00019368  B8 01000000       MOV      EAX,1
    0001936D  8B C8             MOV      ECX,EAX
    0001936F  B8 05000000       MOV      EAX,5
    00019374  50                PUSH     EAX
    00019375  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019378  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001937B  5B                POP      EBX
    0001937C  53                PUSH     EBX
    0001937D  3B C3             CMP      EAX,EBX
    0001937F  0F 8E03000000     JLE      3
    00019385  EB                JMP      

    LINE     15765

    00019386  B8 01000000       MOV      EAX,1
    0001938B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15766

    00019391  B8 01000000       MOV      EAX,1
    00019396  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15767

    0001939C  B8 01000000       MOV      EAX,1
    000193A1  8B C8             MOV      ECX,EAX
    000193A3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000193A6  48                DEC      EAX
    000193A7  BB 0E000000       MOV      EBX,14
    000193AC  F7 E3             MUL      EBX
    000193AE  50                PUSH     EAX
    000193AF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000193B2  48                DEC      EAX
    000193B3  BB 02000000       MOV      EBX,2
    000193B8  F7 E3             MUL      EBX
    000193BA  5B                POP      EBX
    000193BB  03 C3             ADD      EAX,EBX
    000193BD  8B F8             MOV      EDI,EAX
    000193BF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15768

    000193C6  B8 01000000       MOV      EAX,1
    000193CB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15769

    000193D1  B8 01000000       MOV      EAX,1
    000193D6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15771

    000193DC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000193E3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000193E8  5B                POP      EBX

    LINE     15773

    000193E9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000193F0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000193F5  5B                POP      EBX

    LINE     15775

    000193F6  B8 0A000000       MOV      EAX,10
    000193FB  40                INC      EAX
    000193FC  50                PUSH     EAX
    000193FD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019400  5B                POP      EBX
    00019401  3B C3             CMP      EAX,EBX
    00019403  0F 8503000000     JNE      3
    00019409  EB                JMP      

    LINE     15782

    0001940A  B8 01000000       MOV      EAX,1
    0001940F  8B C8             MOV      ECX,EAX
    00019411  B8 0A000000       MOV      EAX,10
    00019416  50                PUSH     EAX
    00019417  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001941A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001941D  5B                POP      EBX
    0001941E  53                PUSH     EBX
    0001941F  3B C3             CMP      EAX,EBX
    00019421  0F 8E03000000     JLE      3
    00019427  EB                JMP      

    LINE     15784

    00019428  B8 01000000       MOV      EAX,1
    0001942D  8B C8             MOV      ECX,EAX
    0001942F  B8 05000000       MOV      EAX,5
    00019434  50                PUSH     EAX
    00019435  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00019438  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001943B  5B                POP      EBX
    0001943C  53                PUSH     EBX
    0001943D  3B C3             CMP      EAX,EBX
    0001943F  0F 8E03000000     JLE      3
    00019445  EB                JMP      

    LINE     15791

    00019446  B8 01000000       MOV      EAX,1
    0001944B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15792

    00019451  B8 01000000       MOV      EAX,1
    00019456  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15793

    0001945C  B8 01000000       MOV      EAX,1
    00019461  8B C8             MOV      ECX,EAX
    00019463  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019466  48                DEC      EAX
    00019467  BB 0E000000       MOV      EBX,14
    0001946C  F7 E3             MUL      EBX
    0001946E  50                PUSH     EAX
    0001946F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019472  48                DEC      EAX
    00019473  BB 02000000       MOV      EBX,2
    00019478  F7 E3             MUL      EBX
    0001947A  5B                POP      EBX
    0001947B  03 C3             ADD      EAX,EBX
    0001947D  8B F8             MOV      EDI,EAX
    0001947F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15794

    00019486  B8 01000000       MOV      EAX,1
    0001948B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15795

    00019491  B8 01000000       MOV      EAX,1
    00019496  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15797

    0001949C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    000194A3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000194A8  5B                POP      EBX

    LINE     15799

    000194A9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000194B0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000194B5  5B                POP      EBX

    LINE     15801

    000194B6  B8 0A000000       MOV      EAX,10
    000194BB  40                INC      EAX
    000194BC  50                PUSH     EAX
    000194BD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000194C0  5B                POP      EBX
    000194C1  3B C3             CMP      EAX,EBX
    000194C3  0F 8503000000     JNE      3
    000194C9  EB                JMP      

    LINE     15815

    000194CA  56                PUSH     ESI
    000194CB  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000194D1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000194D7  FF D1             CALL     ECX                       run_inner_proc
    000194D9  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15817

    000194DA  B8 01000000       MOV      EAX,1
    000194DF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15819

    000194E2  B8 01000000       MOV      EAX,1
    000194E7  8B C8             MOV      ECX,EAX
    000194E9  B8 0A000000       MOV      EAX,10
    000194EE  50                PUSH     EAX
    000194EF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000194F2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000194F5  5B                POP      EBX
    000194F6  53                PUSH     EBX
    000194F7  3B C3             CMP      EAX,EBX
    000194F9  0F 8E03000000     JLE      3
    000194FF  EB                JMP      

    LINE     15821

    00019500  B8 01000000       MOV      EAX,1
    00019505  8B C8             MOV      ECX,EAX
    00019507  B8 05000000       MOV      EAX,5
    0001950C  50                PUSH     EAX
    0001950D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019510  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019513  5B                POP      EBX
    00019514  53                PUSH     EBX
    00019515  3B C3             CMP      EAX,EBX
    00019517  0F 8E03000000     JLE      3
    0001951D  EB                JMP      

    LINE     15828

    0001951E  B8 01000000       MOV      EAX,1
    00019523  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15829

    00019526  B8 01000000       MOV      EAX,1
    0001952B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15830

    0001952E  B8 01000000       MOV      EAX,1
    00019533  8B C8             MOV      ECX,EAX
    00019535  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019538  48                DEC      EAX
    00019539  BB 0E000000       MOV      EBX,14
    0001953E  F7 E3             MUL      EBX
    00019540  50                PUSH     EAX
    00019541  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019544  48                DEC      EAX
    00019545  BB 02000000       MOV      EBX,2
    0001954A  F7 E3             MUL      EBX
    0001954C  5B                POP      EBX
    0001954D  03 C3             ADD      EAX,EBX
    0001954F  8B F8             MOV      EDI,EAX
    00019551  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15831

    00019555  B8 01000000       MOV      EAX,1
    0001955A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15832

    0001955D  B8 01000000       MOV      EAX,1
    00019562  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15834

    00019565  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001956C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019571  5B                POP      EBX

    LINE     15836

    00019572  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00019579  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001957E  5B                POP      EBX

    LINE     15838

    0001957F  B8 0A000000       MOV      EAX,10
    00019584  40                INC      EAX
    00019585  50                PUSH     EAX
    00019586  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019589  5B                POP      EBX
    0001958A  3B C3             CMP      EAX,EBX
    0001958C  0F 8503000000     JNE      3
    00019592  EB                JMP      

    LINE     15845

    00019593  B8 01000000       MOV      EAX,1
    00019598  8B C8             MOV      ECX,EAX
    0001959A  B8 0A000000       MOV      EAX,10
    0001959F  50                PUSH     EAX
    000195A0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    000195A3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000195A6  5B                POP      EBX
    000195A7  53                PUSH     EBX
    000195A8  3B C3             CMP      EAX,EBX
    000195AA  0F 8E03000000     JLE      3
    000195B0  EB                JMP      

    LINE     15847

    000195B1  B8 01000000       MOV      EAX,1
    000195B6  8B C8             MOV      ECX,EAX
    000195B8  B8 05000000       MOV      EAX,5
    000195BD  50                PUSH     EAX
    000195BE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000195C1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000195C4  5B                POP      EBX
    000195C5  53                PUSH     EBX
    000195C6  3B C3             CMP      EAX,EBX
    000195C8  0F 8E03000000     JLE      3
    000195CE  EB                JMP      

    LINE     15854

    000195CF  B8 01000000       MOV      EAX,1
    000195D4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15855

    000195D7  B8 01000000       MOV      EAX,1
    000195DC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15856

    000195DF  B8 01000000       MOV      EAX,1
    000195E4  8B C8             MOV      ECX,EAX
    000195E6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000195E9  48                DEC      EAX
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page  13


    000195EA  BB 0E000000       MOV      EBX,14
    000195EF  F7 E3             MUL      EBX
    000195F1  50                PUSH     EAX
    000195F2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000195F5  48                DEC      EAX
    000195F6  BB 02000000       MOV      EBX,2
    000195FB  F7 E3             MUL      EBX
    000195FD  5B                POP      EBX
    000195FE  03 C3             ADD      EAX,EBX
    00019600  8B F8             MOV      EDI,EAX
    00019602  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15857

    00019606  B8 01000000       MOV      EAX,1
    0001960B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15858

    0001960E  B8 01000000       MOV      EAX,1
    00019613  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15860

    00019616  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001961D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019622  5B                POP      EBX

    LINE     15862

    00019623  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001962A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001962F  5B                POP      EBX

    LINE     15864

    00019630  B8 0A000000       MOV      EAX,10
    00019635  40                INC      EAX
    00019636  50                PUSH     EAX
    00019637  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001963A  5B                POP      EBX
    0001963B  3B C3             CMP      EAX,EBX
    0001963D  0F 8503000000     JNE      3
    00019643  EB                JMP      

    LINE     15872

    00019644  B8 01000000       MOV      EAX,1
    00019649  8B C8             MOV      ECX,EAX
    0001964B  B8 0A000000       MOV      EAX,10
    00019650  50                PUSH     EAX
    00019651  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00019654  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019657  5B                POP      EBX
    00019658  53                PUSH     EBX
    00019659  3B C3             CMP      EAX,EBX
    0001965B  0F 8E03000000     JLE      3
    00019661  EB                JMP      

    LINE     15874

    00019662  B8 01000000       MOV      EAX,1
    00019667  8B C8             MOV      ECX,EAX
    00019669  B8 05000000       MOV      EAX,5
    0001966E  50                PUSH     EAX
    0001966F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019672  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019675  5B                POP      EBX
    00019676  53                PUSH     EBX
    00019677  3B C3             CMP      EAX,EBX
    00019679  0F 8E03000000     JLE      3
    0001967F  EB                JMP      

    LINE     15881

    00019680  B8 01000000       MOV      EAX,1
    00019685  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15882

    0001968B  B8 01000000       MOV      EAX,1
    00019690  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15883

    00019696  B8 01000000       MOV      EAX,1
    0001969B  8B C8             MOV      ECX,EAX
    0001969D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000196A0  48                DEC      EAX
    000196A1  BB 0E000000       MOV      EBX,14
    000196A6  F7 E3             MUL      EBX
    000196A8  50                PUSH     EAX
    000196A9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000196AC  48                DEC      EAX
    000196AD  BB 02000000       MOV      EBX,2
    000196B2  F7 E3             MUL      EBX
    000196B4  5B                POP      EBX
    000196B5  03 C3             ADD      EAX,EBX
    000196B7  8B F8             MOV      EDI,EAX
    000196B9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15884

    000196C0  B8 01000000       MOV      EAX,1
    000196C5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15885

    000196CB  B8 01000000       MOV      EAX,1
    000196D0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15887

    000196D6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000196DD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000196E2  5B                POP      EBX

    LINE     15889

    000196E3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000196EA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000196EF  5B                POP      EBX

    LINE     15891

    000196F0  B8 0A000000       MOV      EAX,10
    000196F5  40                INC      EAX
    000196F6  50                PUSH     EAX
    000196F7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000196FA  5B                POP      EBX
    000196FB  3B C3             CMP      EAX,EBX
    000196FD  0F 8503000000     JNE      3
    00019703  EB                JMP      

    LINE     15898

    00019704  B8 01000000       MOV      EAX,1
    00019709  8B C8             MOV      ECX,EAX
    0001970B  B8 0A000000       MOV      EAX,10
    00019710  50                PUSH     EAX
    00019711  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00019714  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019717  5B                POP      EBX
    00019718  53                PUSH     EBX
    00019719  3B C3             CMP      EAX,EBX
    0001971B  0F 8E03000000     JLE      3
    00019721  EB                JMP      

    LINE     15900

    00019722  B8 01000000       MOV      EAX,1
    00019727  8B C8             MOV      ECX,EAX
    00019729  B8 05000000       MOV      EAX,5
    0001972E  50                PUSH     EAX
    0001972F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00019732  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019735  5B                POP      EBX
    00019736  53                PUSH     EBX
    00019737  3B C3             CMP      EAX,EBX
    00019739  0F 8E03000000     JLE      3
    0001973F  EB                JMP      

    LINE     15907

    00019740  B8 01000000       MOV      EAX,1
    00019745  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15908

    0001974B  B8 01000000       MOV      EAX,1
    00019750  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15909

    00019756  B8 01000000       MOV      EAX,1
    0001975B  8B C8             MOV      ECX,EAX
    0001975D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019760  48                DEC      EAX
    00019761  BB 0E000000       MOV      EBX,14
    00019766  F7 E3             MUL      EBX
    00019768  50                PUSH     EAX
    00019769  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001976C  48                DEC      EAX
    0001976D  BB 02000000       MOV      EBX,2
    00019772  F7 E3             MUL      EBX
    00019774  5B                POP      EBX
    00019775  03 C3             ADD      EAX,EBX
    00019777  8B F8             MOV      EDI,EAX
    00019779  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     15910

    00019780  B8 01000000       MOV      EAX,1
    00019785  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15911

    0001978B  B8 01000000       MOV      EAX,1
    00019790  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15913

    00019796  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001979D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000197A2  5B                POP      EBX

    LINE     15915

    000197A3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    000197AA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000197AF  5B                POP      EBX

    LINE     15917

    000197B0  B8 0A000000       MOV      EAX,10
    000197B5  40                INC      EAX
    000197B6  50                PUSH     EAX
    000197B7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000197BA  5B                POP      EBX
    000197BB  3B C3             CMP      EAX,EBX
    000197BD  0F 8503000000     JNE      3
    000197C3  EB                JMP      

    LINE     15931

    000197C4  56                PUSH     ESI
    000197C5  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    000197CB  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    000197D1  FF D1             CALL     ECX                       run_inner_proc
    000197D3  5E                POP      ESI                       /* restore callers static pointer */

    LINE     15933

    000197D4  B8 01000000       MOV      EAX,1
    000197D9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     15935

    000197DC  B8 01000000       MOV      EAX,1
    000197E1  8B C8             MOV      ECX,EAX
    000197E3  B8 0A000000       MOV      EAX,10
    000197E8  50                PUSH     EAX
    000197E9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    000197EC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000197EF  5B                POP      EBX
    000197F0  53                PUSH     EBX
    000197F1  3B C3             CMP      EAX,EBX
    000197F3  0F 8E03000000     JLE      3
    000197F9  EB                JMP      

    LINE     15937

    000197FA  B8 01000000       MOV      EAX,1
    000197FF  8B C8             MOV      ECX,EAX
    00019801  B8 05000000       MOV      EAX,5
    00019806  50                PUSH     EAX
    00019807  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001980A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001980D  5B                POP      EBX
    0001980E  53                PUSH     EBX
    0001980F  3B C3             CMP      EAX,EBX
    00019811  0F 8E03000000     JLE      3
    00019817  EB                JMP      

    LINE     15944

    00019818  B8 01000000       MOV      EAX,1
    0001981D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15945

    00019820  B8 01000000       MOV      EAX,1
    00019825  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15946

    00019828  B8 01000000       MOV      EAX,1
    0001982D  8B C8             MOV      ECX,EAX
    0001982F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019832  48                DEC      EAX
    00019833  BB 0E000000       MOV      EBX,14
    00019838  F7 E3             MUL      EBX
    0001983A  50                PUSH     EAX
    0001983B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001983E  48                DEC      EAX
    0001983F  BB 02000000       MOV      EBX,2
    00019844  F7 E3             MUL      EBX
    00019846  5B                POP      EBX
    00019847  03 C3             ADD      EAX,EBX
    00019849  8B F8             MOV      EDI,EAX
    0001984B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15947

    0001984F  B8 01000000       MOV      EAX,1
    00019854  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15948

    00019857  B8 01000000       MOV      EAX,1
    0001985C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15950

    0001985F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00019866  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001986B  5B                POP      EBX

    LINE     15952

    0001986C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00019873  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019878  5B                POP      EBX

    LINE     15954

    00019879  B8 0A000000       MOV      EAX,10
    0001987E  40                INC      EAX
    0001987F  50                PUSH     EAX
    00019880  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019883  5B                POP      EBX
    00019884  3B C3             CMP      EAX,EBX
    00019886  0F 8503000000     JNE      3
    0001988C  EB                JMP      

    LINE     15961

    0001988D  B8 01000000       MOV      EAX,1
    00019892  8B C8             MOV      ECX,EAX
    00019894  B8 0A000000       MOV      EAX,10
    00019899  50                PUSH     EAX
    0001989A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001989D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000198A0  5B                POP      EBX
    000198A1  53                PUSH     EBX
    000198A2  3B C3             CMP      EAX,EBX
    000198A4  0F 8E03000000     JLE      3
    000198AA  EB                JMP      

    LINE     15963

    000198AB  B8 01000000       MOV      EAX,1
    000198B0  8B C8             MOV      ECX,EAX
    000198B2  B8 05000000       MOV      EAX,5
    000198B7  50                PUSH     EAX
    000198B8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    000198BB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000198BE  5B                POP      EBX
    000198BF  53                PUSH     EBX
    000198C0  3B C3             CMP      EAX,EBX
    000198C2  0F 8E03000000     JLE      3
    000198C8  EB                JMP      

    LINE     15970

    000198C9  B8 01000000       MOV      EAX,1
    000198CE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15971

    000198D1  B8 01000000       MOV      EAX,1
    000198D6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15972

    000198D9  B8 01000000       MOV      EAX,1
    000198DE  8B C8             MOV      ECX,EAX
    000198E0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    000198E3  48                DEC      EAX
    000198E4  BB 0E000000       MOV      EBX,14
    000198E9  F7 E3             MUL      EBX
    000198EB  50                PUSH     EAX
    000198EC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    000198EF  48                DEC      EAX
    000198F0  BB 02000000       MOV      EBX,2
    000198F5  F7 E3             MUL      EBX
    000198F7  5B                POP      EBX
    000198F8  03 C3             ADD      EAX,EBX
    000198FA  8B F8             MOV      EDI,EAX
    000198FC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     15973

    00019900  B8 01000000       MOV      EAX,1
    00019905  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15974

    00019908  B8 01000000       MOV      EAX,1
    0001990D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     15976

    00019910  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00019917  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001991C  5B                POP      EBX

    LINE     15978

    0001991D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00019924  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019929  5B                POP      EBX

    LINE     15980

    0001992A  B8 0A000000       MOV      EAX,10
    0001992F  40                INC      EAX
    00019930  50                PUSH     EAX
    00019931  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019934  5B                POP      EBX
    00019935  3B C3             CMP      EAX,EBX
    00019937  0F 8503000000     JNE      3
    0001993D  EB                JMP      

    LINE     15988

    0001993E  B8 01000000       MOV      EAX,1
    00019943  8B C8             MOV      ECX,EAX
    00019945  B8 0A000000       MOV      EAX,10
    0001994A  50                PUSH     EAX
    0001994B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001994E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019951  5B                POP      EBX
    00019952  53                PUSH     EBX
    00019953  3B C3             CMP      EAX,EBX
    00019955  0F 8E03000000     JLE      3
    0001995B  EB                JMP      

    LINE     15990

    0001995C  B8 01000000       MOV      EAX,1
    00019961  8B C8             MOV      ECX,EAX
    00019963  B8 05000000       MOV      EAX,5
    00019968  50                PUSH     EAX
    00019969  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001996C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001996F  5B                POP      EBX
    00019970  53                PUSH     EBX
    00019971  3B C3             CMP      EAX,EBX
    00019973  0F 8E03000000     JLE      3
    00019979  EB                JMP      

    LINE     15997

    0001997A  B8 01000000       MOV      EAX,1
    0001997F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15998

    00019985  B8 01000000       MOV      EAX,1
    0001998A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     15999

    00019990  B8 01000000       MOV      EAX,1
    00019995  8B C8             MOV      ECX,EAX
    00019997  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001999A  48                DEC      EAX
    0001999B  BB 0E000000       MOV      EBX,14
    000199A0  F7 E3             MUL      EBX
    000199A2  50                PUSH     EAX
    000199A3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    000199A6  48                DEC      EAX
    000199A7  BB 02000000       MOV      EBX,2
    000199AC  F7 E3             MUL      EBX
    000199AE  5B                POP      EBX
    000199AF  03 C3             ADD      EAX,EBX
    000199B1  8B F8             MOV      EDI,EAX
    000199B3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16000

    000199BA  B8 01000000       MOV      EAX,1
    000199BF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16001

    000199C5  B8 01000000       MOV      EAX,1
    000199CA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16003

    000199D0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    000199D7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    000199DC  5B                POP      EBX

    LINE     16005

    000199DD  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    000199E4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    000199E9  5B                POP      EBX

    LINE     16007

    000199EA  B8 0A000000       MOV      EAX,10
    000199EF  40                INC      EAX
    000199F0  50                PUSH     EAX
    000199F1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    000199F4  5B                POP      EBX
    000199F5  3B C3             CMP      EAX,EBX
    000199F7  0F 8503000000     JNE      3
    000199FD  EB                JMP      

    LINE     16014

    000199FE  B8 01000000       MOV      EAX,1
    00019A03  8B C8             MOV      ECX,EAX
    00019A05  B8 0A000000       MOV      EAX,10
    00019A0A  50                PUSH     EAX
    00019A0B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00019A0E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019A11  5B                POP      EBX
    00019A12  53                PUSH     EBX
    00019A13  3B C3             CMP      EAX,EBX
    00019A15  0F 8E03000000     JLE      3
    00019A1B  EB                JMP      

    LINE     16016

    00019A1C  B8 01000000       MOV      EAX,1
    00019A21  8B C8             MOV      ECX,EAX
    00019A23  B8 05000000       MOV      EAX,5
    00019A28  50                PUSH     EAX
    00019A29  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00019A2C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019A2F  5B                POP      EBX
    00019A30  53                PUSH     EBX
    00019A31  3B C3             CMP      EAX,EBX
    00019A33  0F 8E03000000     JLE      3
    00019A39  EB                JMP      

    LINE     16023

    00019A3A  B8 01000000       MOV      EAX,1
    00019A3F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16024

    00019A45  B8 01000000       MOV      EAX,1
    00019A4A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16025

    00019A50  B8 01000000       MOV      EAX,1
    00019A55  8B C8             MOV      ECX,EAX
    00019A57  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019A5A  48                DEC      EAX
    00019A5B  BB 0E000000       MOV      EBX,14
    00019A60  F7 E3             MUL      EBX
    00019A62  50                PUSH     EAX
    00019A63  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019A66  48                DEC      EAX
    00019A67  BB 02000000       MOV      EBX,2
    00019A6C  F7 E3             MUL      EBX
    00019A6E  5B                POP      EBX
    00019A6F  03 C3             ADD      EAX,EBX
    00019A71  8B F8             MOV      EDI,EAX
    00019A73  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16026

    00019A7A  B8 01000000       MOV      EAX,1
    00019A7F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16027

    00019A85  B8 01000000       MOV      EAX,1
    00019A8A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16029

    00019A90  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00019A97  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00019A9C  5B                POP      EBX

    LINE     16031

    00019A9D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00019AA4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00019AA9  5B                POP      EBX

    LINE     16033

    00019AAA  B8 0A000000       MOV      EAX,10
    00019AAF  40                INC      EAX
    00019AB0  50                PUSH     EAX
    00019AB1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019AB4  5B                POP      EBX
    00019AB5  3B C3             CMP      EAX,EBX
    00019AB7  0F 8503000000     JNE      3
    00019ABD  EB                JMP      

    LINE     16047

    00019ABE  56                PUSH     ESI
    00019ABF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00019AC5  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00019ACB  FF D1             CALL     ECX                       run_inner_proc
    00019ACD  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16049

    00019ACE  B8 01000000       MOV      EAX,1
    00019AD3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16051

    00019AD6  B8 01000000       MOV      EAX,1
    00019ADB  8B C8             MOV      ECX,EAX
    00019ADD  B8 0A000000       MOV      EAX,10
    00019AE2  50                PUSH     EAX
    00019AE3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00019AE6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019AE9  5B                POP      EBX
    00019AEA  53                PUSH     EBX
    00019AEB  3B C3             CMP      EAX,EBX
    00019AED  0F 8E03000000     JLE      3
    00019AF3  EB                JMP      

    LINE     16053

    00019AF4  B8 01000000       MOV      EAX,1
    00019AF9  8B C8             MOV      ECX,EAX
    00019AFB  B8 05000000       MOV      EAX,5
    00019B00  50                PUSH     EAX
    00019B01  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019B04  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019B07  5B                POP      EBX
    00019B08  53                PUSH     EBX
    00019B09  3B C3             CMP      EAX,EBX
    00019B0B  0F 8E03000000     JLE      3
    00019B11  EB                JMP      

    LINE     16060

    00019B12  B8 01000000       MOV      EAX,1
    00019B17  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16061

    00019B1A  B8 01000000       MOV      EAX,1
    00019B1F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16062

    00019B22  B8 01000000       MOV      EAX,1
    00019B27  8B C8             MOV      ECX,EAX
    00019B29  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019B2C  48                DEC      EAX
    00019B2D  BB 0E000000       MOV      EBX,14
    00019B32  F7 E3             MUL      EBX
    00019B34  50                PUSH     EAX
    00019B35  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019B38  48                DEC      EAX
    00019B39  BB 02000000       MOV      EBX,2
    00019B3E  F7 E3             MUL      EBX
    00019B40  5B                POP      EBX
    00019B41  03 C3             ADD      EAX,EBX
    00019B43  8B F8             MOV      EDI,EAX
    00019B45  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16063

    00019B49  B8 01000000       MOV      EAX,1
    00019B4E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16064

    00019B51  B8 01000000       MOV      EAX,1
    00019B56  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16066

    00019B59  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00019B60  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019B65  5B                POP      EBX

    LINE     16068

    00019B66  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00019B6D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019B72  5B                POP      EBX

    LINE     16070

    00019B73  B8 0A000000       MOV      EAX,10
    00019B78  40                INC      EAX
    00019B79  50                PUSH     EAX
    00019B7A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019B7D  5B                POP      EBX
    00019B7E  3B C3             CMP      EAX,EBX
    00019B80  0F 8503000000     JNE      3
    00019B86  EB                JMP      

    LINE     16077

    00019B87  B8 01000000       MOV      EAX,1
    00019B8C  8B C8             MOV      ECX,EAX
    00019B8E  B8 0A000000       MOV      EAX,10
    00019B93  50                PUSH     EAX
    00019B94  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00019B97  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019B9A  5B                POP      EBX
    00019B9B  53                PUSH     EBX
    00019B9C  3B C3             CMP      EAX,EBX
    00019B9E  0F 8E03000000     JLE      3
    00019BA4  EB                JMP      

    LINE     16079

    00019BA5  B8 01000000       MOV      EAX,1
    00019BAA  8B C8             MOV      ECX,EAX
    00019BAC  B8 05000000       MOV      EAX,5
    00019BB1  50                PUSH     EAX
    00019BB2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00019BB5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019BB8  5B                POP      EBX
    00019BB9  53                PUSH     EBX
    00019BBA  3B C3             CMP      EAX,EBX
    00019BBC  0F 8E03000000     JLE      3
    00019BC2  EB                JMP      

    LINE     16086

    00019BC3  B8 01000000       MOV      EAX,1
    00019BC8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16087

    00019BCB  B8 01000000       MOV      EAX,1
    00019BD0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16088

    00019BD3  B8 01000000       MOV      EAX,1
    00019BD8  8B C8             MOV      ECX,EAX
    00019BDA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019BDD  48                DEC      EAX
    00019BDE  BB 0E000000       MOV      EBX,14
    00019BE3  F7 E3             MUL      EBX
    00019BE5  50                PUSH     EAX
    00019BE6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019BE9  48                DEC      EAX
    00019BEA  BB 02000000       MOV      EBX,2
    00019BEF  F7 E3             MUL      EBX
    00019BF1  5B                POP      EBX
    00019BF2  03 C3             ADD      EAX,EBX
    00019BF4  8B F8             MOV      EDI,EAX
    00019BF6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16089

    00019BFA  B8 01000000       MOV      EAX,1
    00019BFF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16090

    00019C02  B8 01000000       MOV      EAX,1
    00019C07  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16092

    00019C0A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00019C11  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019C16  5B                POP      EBX

    LINE     16094

    00019C17  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00019C1E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019C23  5B                POP      EBX

    LINE     16096

    00019C24  B8 0A000000       MOV      EAX,10
    00019C29  40                INC      EAX
    00019C2A  50                PUSH     EAX
    00019C2B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019C2E  5B                POP      EBX
    00019C2F  3B C3             CMP      EAX,EBX
    00019C31  0F 8503000000     JNE      3
    00019C37  EB                JMP      

    LINE     16104

    00019C38  B8 01000000       MOV      EAX,1
    00019C3D  8B C8             MOV      ECX,EAX
    00019C3F  B8 0A000000       MOV      EAX,10
    00019C44  50                PUSH     EAX
    00019C45  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00019C48  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019C4B  5B                POP      EBX
    00019C4C  53                PUSH     EBX
    00019C4D  3B C3             CMP      EAX,EBX
    00019C4F  0F 8E03000000     JLE      3
    00019C55  EB                JMP      

    LINE     16106

    00019C56  B8 01000000       MOV      EAX,1
    00019C5B  8B C8             MOV      ECX,EAX
    00019C5D  B8 05000000       MOV      EAX,5
    00019C62  50                PUSH     EAX
    00019C63  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019C66  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019C69  5B                POP      EBX
    00019C6A  53                PUSH     EBX
    00019C6B  3B C3             CMP      EAX,EBX
    00019C6D  0F 8E03000000     JLE      3
    00019C73  EB                JMP      

    LINE     16113

    00019C74  B8 01000000       MOV      EAX,1
    00019C79  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16114

    00019C7F  B8 01000000       MOV      EAX,1
    00019C84  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16115

    00019C8A  B8 01000000       MOV      EAX,1
    00019C8F  8B C8             MOV      ECX,EAX
    00019C91  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019C94  48                DEC      EAX
    00019C95  BB 0E000000       MOV      EBX,14
    00019C9A  F7 E3             MUL      EBX
    00019C9C  50                PUSH     EAX
    00019C9D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019CA0  48                DEC      EAX
    00019CA1  BB 02000000       MOV      EBX,2
    00019CA6  F7 E3             MUL      EBX
    00019CA8  5B                POP      EBX
    00019CA9  03 C3             ADD      EAX,EBX
    00019CAB  8B F8             MOV      EDI,EAX
    00019CAD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16116

    00019CB4  B8 01000000       MOV      EAX,1
    00019CB9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16117

    00019CBF  B8 01000000       MOV      EAX,1
    00019CC4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16119

    00019CCA  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00019CD1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00019CD6  5B                POP      EBX

    LINE     16121

    00019CD7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00019CDE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00019CE3  5B                POP      EBX

    LINE     16123

    00019CE4  B8 0A000000       MOV      EAX,10
    00019CE9  40                INC      EAX
    00019CEA  50                PUSH     EAX
    00019CEB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019CEE  5B                POP      EBX
    00019CEF  3B C3             CMP      EAX,EBX
    00019CF1  0F 8503000000     JNE      3
    00019CF7  EB                JMP      

    LINE     16130

    00019CF8  B8 01000000       MOV      EAX,1
    00019CFD  8B C8             MOV      ECX,EAX
    00019CFF  B8 0A000000       MOV      EAX,10
    00019D04  50                PUSH     EAX
    00019D05  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00019D08  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019D0B  5B                POP      EBX
    00019D0C  53                PUSH     EBX
    00019D0D  3B C3             CMP      EAX,EBX
    00019D0F  0F 8E03000000     JLE      3
    00019D15  EB                JMP      

    LINE     16132

    00019D16  B8 01000000       MOV      EAX,1
    00019D1B  8B C8             MOV      ECX,EAX
    00019D1D  B8 05000000       MOV      EAX,5
    00019D22  50                PUSH     EAX
    00019D23  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00019D26  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019D29  5B                POP      EBX
    00019D2A  53                PUSH     EBX
    00019D2B  3B C3             CMP      EAX,EBX
    00019D2D  0F 8E03000000     JLE      3
    00019D33  EB                JMP      

    LINE     16139

    00019D34  B8 01000000       MOV      EAX,1
    00019D39  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16140

    00019D3F  B8 01000000       MOV      EAX,1
    00019D44  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16141

    00019D4A  B8 01000000       MOV      EAX,1
    00019D4F  8B C8             MOV      ECX,EAX
    00019D51  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019D54  48                DEC      EAX
    00019D55  BB 0E000000       MOV      EBX,14
    00019D5A  F7 E3             MUL      EBX
    00019D5C  50                PUSH     EAX
    00019D5D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019D60  48                DEC      EAX
    00019D61  BB 02000000       MOV      EBX,2
    00019D66  F7 E3             MUL      EBX
    00019D68  5B                POP      EBX
    00019D69  03 C3             ADD      EAX,EBX
    00019D6B  8B F8             MOV      EDI,EAX
    00019D6D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16142

    00019D74  B8 01000000       MOV      EAX,1
    00019D79  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16143

    00019D7F  B8 01000000       MOV      EAX,1
    00019D84  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16145

    00019D8A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00019D91  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00019D96  5B                POP      EBX

    LINE     16147

    00019D97  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00019D9E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00019DA3  5B                POP      EBX

    LINE     16149

    00019DA4  B8 0A000000       MOV      EAX,10
    00019DA9  40                INC      EAX
    00019DAA  50                PUSH     EAX
    00019DAB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019DAE  5B                POP      EBX
    00019DAF  3B C3             CMP      EAX,EBX
    00019DB1  0F 8503000000     JNE      3
    00019DB7  EB                JMP      

    LINE     16163

    00019DB8  56                PUSH     ESI
    00019DB9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    00019DBF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    00019DC5  FF D1             CALL     ECX                       run_inner_proc
    00019DC7  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16165

    00019DC8  B8 01000000       MOV      EAX,1
    00019DCD  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16167

    00019DD0  B8 01000000       MOV      EAX,1
    00019DD5  8B C8             MOV      ECX,EAX
    00019DD7  B8 0A000000       MOV      EAX,10
    00019DDC  50                PUSH     EAX
    00019DDD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00019DE0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019DE3  5B                POP      EBX
    00019DE4  53                PUSH     EBX
    00019DE5  3B C3             CMP      EAX,EBX
    00019DE7  0F 8E03000000     JLE      3
    00019DED  EB                JMP      

    LINE     16169

    00019DEE  B8 01000000       MOV      EAX,1
    00019DF3  8B C8             MOV      ECX,EAX
    00019DF5  B8 05000000       MOV      EAX,5
    00019DFA  50                PUSH     EAX
    00019DFB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019DFE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019E01  5B                POP      EBX
    00019E02  53                PUSH     EBX
    00019E03  3B C3             CMP      EAX,EBX
    00019E05  0F 8E03000000     JLE      3
    00019E0B  EB                JMP      

    LINE     16176

    00019E0C  B8 01000000       MOV      EAX,1
    00019E11  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16177

    00019E14  B8 01000000       MOV      EAX,1
    00019E19  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16178

    00019E1C  B8 01000000       MOV      EAX,1
    00019E21  8B C8             MOV      ECX,EAX
    00019E23  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019E26  48                DEC      EAX
    00019E27  BB 0E000000       MOV      EBX,14
    00019E2C  F7 E3             MUL      EBX
    00019E2E  50                PUSH     EAX
    00019E2F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019E32  48                DEC      EAX
    00019E33  BB 02000000       MOV      EBX,2
    00019E38  F7 E3             MUL      EBX
    00019E3A  5B                POP      EBX
    00019E3B  03 C3             ADD      EAX,EBX
    00019E3D  8B F8             MOV      EDI,EAX
    00019E3F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16179

    00019E43  B8 01000000       MOV      EAX,1
    00019E48  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16180

    00019E4B  B8 01000000       MOV      EAX,1
    00019E50  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16182

    00019E53  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00019E5A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019E5F  5B                POP      EBX

    LINE     16184

    00019E60  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00019E67  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019E6C  5B                POP      EBX

    LINE     16186

    00019E6D  B8 0A000000       MOV      EAX,10
    00019E72  40                INC      EAX
    00019E73  50                PUSH     EAX
    00019E74  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019E77  5B                POP      EBX
    00019E78  3B C3             CMP      EAX,EBX
    00019E7A  0F 8503000000     JNE      3
    00019E80  EB                JMP      

    LINE     16193

    00019E81  B8 01000000       MOV      EAX,1
    00019E86  8B C8             MOV      ECX,EAX
    00019E88  B8 0A000000       MOV      EAX,10
    00019E8D  50                PUSH     EAX
    00019E8E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    00019E91  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019E94  5B                POP      EBX
    00019E95  53                PUSH     EBX
    00019E96  3B C3             CMP      EAX,EBX
    00019E98  0F 8E03000000     JLE      3
    00019E9E  EB                JMP      

    LINE     16195

    00019E9F  B8 01000000       MOV      EAX,1
    00019EA4  8B C8             MOV      ECX,EAX
    00019EA6  B8 05000000       MOV      EAX,5
    00019EAB  50                PUSH     EAX
    00019EAC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    00019EAF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019EB2  5B                POP      EBX
    00019EB3  53                PUSH     EBX
    00019EB4  3B C3             CMP      EAX,EBX
    00019EB6  0F 8E03000000     JLE      3
    00019EBC  EB                JMP      

    LINE     16202

    00019EBD  B8 01000000       MOV      EAX,1
    00019EC2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16203

    00019EC5  B8 01000000       MOV      EAX,1
    00019ECA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16204

    00019ECD  B8 01000000       MOV      EAX,1
    00019ED2  8B C8             MOV      ECX,EAX
    00019ED4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    00019ED7  48                DEC      EAX
    00019ED8  BB 0E000000       MOV      EBX,14
    00019EDD  F7 E3             MUL      EBX
    00019EDF  50                PUSH     EAX
    00019EE0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    00019EE3  48                DEC      EAX
    00019EE4  BB 02000000       MOV      EBX,2
    00019EE9  F7 E3             MUL      EBX
    00019EEB  5B                POP      EBX
    00019EEC  03 C3             ADD      EAX,EBX
    00019EEE  8B F8             MOV      EDI,EAX
    00019EF0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16205

    00019EF4  B8 01000000       MOV      EAX,1
    00019EF9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16206

    00019EFC  B8 01000000       MOV      EAX,1
    00019F01  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16208

    00019F04  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    00019F0B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    00019F10  5B                POP      EBX

    LINE     16210

    00019F11  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    00019F18  E9 78FFFFFF       JMP      -136                     /* End of loop */
    00019F1D  5B                POP      EBX

    LINE     16212

    00019F1E  B8 0A000000       MOV      EAX,10
    00019F23  40                INC      EAX
    00019F24  50                PUSH     EAX
    00019F25  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019F28  5B                POP      EBX
    00019F29  3B C3             CMP      EAX,EBX
    00019F2B  0F 8503000000     JNE      3
    00019F31  EB                JMP      

    LINE     16220

    00019F32  B8 01000000       MOV      EAX,1
    00019F37  8B C8             MOV      ECX,EAX
    00019F39  B8 0A000000       MOV      EAX,10
    00019F3E  50                PUSH     EAX
    00019F3F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    00019F42  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019F45  5B                POP      EBX
    00019F46  53                PUSH     EBX
    00019F47  3B C3             CMP      EAX,EBX
    00019F49  0F 8E03000000     JLE      3
    00019F4F  EB                JMP      

    LINE     16222

    00019F50  B8 01000000       MOV      EAX,1
    00019F55  8B C8             MOV      ECX,EAX
    00019F57  B8 05000000       MOV      EAX,5
    00019F5C  50                PUSH     EAX
    00019F5D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    00019F60  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019F63  5B                POP      EBX
    00019F64  53                PUSH     EBX
    00019F65  3B C3             CMP      EAX,EBX
    00019F67  0F 8E03000000     JLE      3
    00019F6D  EB                JMP      

    LINE     16229

    00019F6E  B8 01000000       MOV      EAX,1
    00019F73  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16230

    00019F79  B8 01000000       MOV      EAX,1
    00019F7E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16231

    00019F84  B8 01000000       MOV      EAX,1
    00019F89  8B C8             MOV      ECX,EAX
    00019F8B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019F8E  48                DEC      EAX
    00019F8F  BB 0E000000       MOV      EBX,14
    00019F94  F7 E3             MUL      EBX
    00019F96  50                PUSH     EAX
    00019F97  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    00019F9A  48                DEC      EAX
    00019F9B  BB 02000000       MOV      EBX,2
    00019FA0  F7 E3             MUL      EBX
    00019FA2  5B                POP      EBX
    00019FA3  03 C3             ADD      EAX,EBX
    00019FA5  8B F8             MOV      EDI,EAX
    00019FA7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16232

    00019FAE  B8 01000000       MOV      EAX,1
    00019FB3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16233

    00019FB9  B8 01000000       MOV      EAX,1
    00019FBE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16235

    00019FC4  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    00019FCB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    00019FD0  5B                POP      EBX

    LINE     16237

    00019FD1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    00019FD8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    00019FDD  5B                POP      EBX

    LINE     16239

    00019FDE  B8 0A000000       MOV      EAX,10
    00019FE3  40                INC      EAX
    00019FE4  50                PUSH     EAX
    00019FE5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    00019FE8  5B                POP      EBX
    00019FE9  3B C3             CMP      EAX,EBX
    00019FEB  0F 8503000000     JNE      3
    00019FF1  EB                JMP      

    LINE     16246

    00019FF2  B8 01000000       MOV      EAX,1
    00019FF7  8B C8             MOV      ECX,EAX
    00019FF9  B8 0A000000       MOV      EAX,10
    00019FFE  50                PUSH     EAX
    00019FFF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001A002  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A005  5B                POP      EBX
    0001A006  53                PUSH     EBX
    0001A007  3B C3             CMP      EAX,EBX
    0001A009  0F 8E03000000     JLE      3
    0001A00F  EB                JMP      

    LINE     16248

    0001A010  B8 01000000       MOV      EAX,1
    0001A015  8B C8             MOV      ECX,EAX
    0001A017  B8 05000000       MOV      EAX,5
    0001A01C  50                PUSH     EAX
    0001A01D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001A020  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A023  5B                POP      EBX
    0001A024  53                PUSH     EBX
    0001A025  3B C3             CMP      EAX,EBX
    0001A027  0F 8E03000000     JLE      3
    0001A02D  EB                JMP      

    LINE     16255

    0001A02E  B8 01000000       MOV      EAX,1
    0001A033  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16256

    0001A039  B8 01000000       MOV      EAX,1
    0001A03E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16257

    0001A044  B8 01000000       MOV      EAX,1
    0001A049  8B C8             MOV      ECX,EAX
    0001A04B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A04E  48                DEC      EAX
    0001A04F  BB 0E000000       MOV      EBX,14
    0001A054  F7 E3             MUL      EBX
    0001A056  50                PUSH     EAX
    0001A057  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A05A  48                DEC      EAX
    0001A05B  BB 02000000       MOV      EBX,2
    0001A060  F7 E3             MUL      EBX
    0001A062  5B                POP      EBX
    0001A063  03 C3             ADD      EAX,EBX
    0001A065  8B F8             MOV      EDI,EAX
    0001A067  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16258

    0001A06E  B8 01000000       MOV      EAX,1
    0001A073  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16259

    0001A079  B8 01000000       MOV      EAX,1
    0001A07E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16261

    0001A084  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001A08B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001A090  5B                POP      EBX

    LINE     16263

    0001A091  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001A098  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001A09D  5B                POP      EBX

    LINE     16265

    0001A09E  B8 0A000000       MOV      EAX,10
    0001A0A3  40                INC      EAX
    0001A0A4  50                PUSH     EAX
    0001A0A5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A0A8  5B                POP      EBX
    0001A0A9  3B C3             CMP      EAX,EBX
    0001A0AB  0F 8503000000     JNE      3
    0001A0B1  EB                JMP      

    LINE     16279

    0001A0B2  56                PUSH     ESI
    0001A0B3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001A0B9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001A0BF  FF D1             CALL     ECX                       run_inner_proc
    0001A0C1  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16281

    0001A0C2  B8 01000000       MOV      EAX,1
    0001A0C7  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16283

    0001A0CA  B8 01000000       MOV      EAX,1
    0001A0CF  8B C8             MOV      ECX,EAX
    0001A0D1  B8 0A000000       MOV      EAX,10
    0001A0D6  50                PUSH     EAX
    0001A0D7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001A0DA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A0DD  5B                POP      EBX
    0001A0DE  53                PUSH     EBX
    0001A0DF  3B C3             CMP      EAX,EBX
    0001A0E1  0F 8E03000000     JLE      3
    0001A0E7  EB                JMP      

    LINE     16285

    0001A0E8  B8 01000000       MOV      EAX,1
    0001A0ED  8B C8             MOV      ECX,EAX
    0001A0EF  B8 05000000       MOV      EAX,5
    0001A0F4  50                PUSH     EAX
    0001A0F5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001A0F8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A0FB  5B                POP      EBX
    0001A0FC  53                PUSH     EBX
    0001A0FD  3B C3             CMP      EAX,EBX
    0001A0FF  0F 8E03000000     JLE      3
    0001A105  EB                JMP      

    LINE     16292

    0001A106  B8 01000000       MOV      EAX,1
    0001A10B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16293

    0001A10E  B8 01000000       MOV      EAX,1
    0001A113  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16294

    0001A116  B8 01000000       MOV      EAX,1
    0001A11B  8B C8             MOV      ECX,EAX
    0001A11D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A120  48                DEC      EAX
    0001A121  BB 0E000000       MOV      EBX,14
    0001A126  F7 E3             MUL      EBX
    0001A128  50                PUSH     EAX
    0001A129  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A12C  48                DEC      EAX
    0001A12D  BB 02000000       MOV      EBX,2
    0001A132  F7 E3             MUL      EBX
    0001A134  5B                POP      EBX
    0001A135  03 C3             ADD      EAX,EBX
    0001A137  8B F8             MOV      EDI,EAX
    0001A139  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16295

    0001A13D  B8 01000000       MOV      EAX,1
    0001A142  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16296

    0001A145  B8 01000000       MOV      EAX,1
    0001A14A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16298

    0001A14D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001A154  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001A159  5B                POP      EBX

    LINE     16300

    0001A15A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001A161  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001A166  5B                POP      EBX

    LINE     16302

    0001A167  B8 0A000000       MOV      EAX,10
    0001A16C  40                INC      EAX
    0001A16D  50                PUSH     EAX
    0001A16E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A171  5B                POP      EBX
    0001A172  3B C3             CMP      EAX,EBX
    0001A174  0F 8503000000     JNE      3
    0001A17A  EB                JMP      

    LINE     16309

    0001A17B  B8 01000000       MOV      EAX,1
    0001A180  8B C8             MOV      ECX,EAX
    0001A182  B8 0A000000       MOV      EAX,10
    0001A187  50                PUSH     EAX
    0001A188  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001A18B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A18E  5B                POP      EBX
    0001A18F  53                PUSH     EBX
    0001A190  3B C3             CMP      EAX,EBX
    0001A192  0F 8E03000000     JLE      3
    0001A198  EB                JMP      

    LINE     16311

    0001A199  B8 01000000       MOV      EAX,1
    0001A19E  8B C8             MOV      ECX,EAX
    0001A1A0  B8 05000000       MOV      EAX,5
    0001A1A5  50                PUSH     EAX
    0001A1A6  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001A1A9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A1AC  5B                POP      EBX
    0001A1AD  53                PUSH     EBX
    0001A1AE  3B C3             CMP      EAX,EBX
    0001A1B0  0F 8E03000000     JLE      3
    0001A1B6  EB                JMP      

    LINE     16318

    0001A1B7  B8 01000000       MOV      EAX,1
    0001A1BC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16319

    0001A1BF  B8 01000000       MOV      EAX,1
    0001A1C4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16320

    0001A1C7  B8 01000000       MOV      EAX,1
    0001A1CC  8B C8             MOV      ECX,EAX
    0001A1CE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A1D1  48                DEC      EAX
    0001A1D2  BB 0E000000       MOV      EBX,14
    0001A1D7  F7 E3             MUL      EBX
    0001A1D9  50                PUSH     EAX
    0001A1DA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A1DD  48                DEC      EAX
    0001A1DE  BB 02000000       MOV      EBX,2
    0001A1E3  F7 E3             MUL      EBX
    0001A1E5  5B                POP      EBX
    0001A1E6  03 C3             ADD      EAX,EBX
    0001A1E8  8B F8             MOV      EDI,EAX
    0001A1EA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16321

    0001A1EE  B8 01000000       MOV      EAX,1
    0001A1F3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16322

    0001A1F6  B8 01000000       MOV      EAX,1
    0001A1FB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16324

    0001A1FE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001A205  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001A20A  5B                POP      EBX

    LINE     16326

    0001A20B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001A212  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001A217  5B                POP      EBX

    LINE     16328

    0001A218  B8 0A000000       MOV      EAX,10
    0001A21D  40                INC      EAX
    0001A21E  50                PUSH     EAX
    0001A21F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A222  5B                POP      EBX
    0001A223  3B C3             CMP      EAX,EBX
    0001A225  0F 8503000000     JNE      3
    0001A22B  EB                JMP      

    LINE     16336

    0001A22C  B8 01000000       MOV      EAX,1
    0001A231  8B C8             MOV      ECX,EAX
    0001A233  B8 0A000000       MOV      EAX,10
    0001A238  50                PUSH     EAX
    0001A239  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001A23C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A23F  5B                POP      EBX
    0001A240  53                PUSH     EBX
    0001A241  3B C3             CMP      EAX,EBX
    0001A243  0F 8E03000000     JLE      3
    0001A249  EB                JMP      

    LINE     16338

    0001A24A  B8 01000000       MOV      EAX,1
    0001A24F  8B C8             MOV      ECX,EAX
    0001A251  B8 05000000       MOV      EAX,5
    0001A256  50                PUSH     EAX
    0001A257  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001A25A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A25D  5B                POP      EBX
    0001A25E  53                PUSH     EBX
    0001A25F  3B C3             CMP      EAX,EBX
    0001A261  0F 8E03000000     JLE      3
    0001A267  EB                JMP      

    LINE     16345

    0001A268  B8 01000000       MOV      EAX,1
    0001A26D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16346

    0001A273  B8 01000000       MOV      EAX,1
    0001A278  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16347

    0001A27E  B8 01000000       MOV      EAX,1
    0001A283  8B C8             MOV      ECX,EAX
    0001A285  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A288  48                DEC      EAX
    0001A289  BB 0E000000       MOV      EBX,14
    0001A28E  F7 E3             MUL      EBX
    0001A290  50                PUSH     EAX
    0001A291  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A294  48                DEC      EAX
    0001A295  BB 02000000       MOV      EBX,2
    0001A29A  F7 E3             MUL      EBX
    0001A29C  5B                POP      EBX
    0001A29D  03 C3             ADD      EAX,EBX
    0001A29F  8B F8             MOV      EDI,EAX
    0001A2A1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16348

    0001A2A8  B8 01000000       MOV      EAX,1
    0001A2AD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16349

    0001A2B3  B8 01000000       MOV      EAX,1
    0001A2B8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16351

    0001A2BE  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001A2C5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001A2CA  5B                POP      EBX

    LINE     16353

    0001A2CB  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001A2D2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001A2D7  5B                POP      EBX

    LINE     16355

    0001A2D8  B8 0A000000       MOV      EAX,10
    0001A2DD  40                INC      EAX
    0001A2DE  50                PUSH     EAX
    0001A2DF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A2E2  5B                POP      EBX
    0001A2E3  3B C3             CMP      EAX,EBX
    0001A2E5  0F 8503000000     JNE      3
    0001A2EB  EB                JMP      

    LINE     16362

    0001A2EC  B8 01000000       MOV      EAX,1
    0001A2F1  8B C8             MOV      ECX,EAX
    0001A2F3  B8 0A000000       MOV      EAX,10
    0001A2F8  50                PUSH     EAX
    0001A2F9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001A2FC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A2FF  5B                POP      EBX
    0001A300  53                PUSH     EBX
    0001A301  3B C3             CMP      EAX,EBX
    0001A303  0F 8E03000000     JLE      3
    0001A309  EB                JMP      

    LINE     16364

    0001A30A  B8 01000000       MOV      EAX,1
    0001A30F  8B C8             MOV      ECX,EAX
    0001A311  B8 05000000       MOV      EAX,5
    0001A316  50                PUSH     EAX
    0001A317  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001A31A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A31D  5B                POP      EBX
    0001A31E  53                PUSH     EBX
    0001A31F  3B C3             CMP      EAX,EBX
    0001A321  0F 8E03000000     JLE      3
    0001A327  EB                JMP      

    LINE     16371

    0001A328  B8 01000000       MOV      EAX,1
    0001A32D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16372

    0001A333  B8 01000000       MOV      EAX,1
    0001A338  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16373

    0001A33E  B8 01000000       MOV      EAX,1
    0001A343  8B C8             MOV      ECX,EAX
    0001A345  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A348  48                DEC      EAX
    0001A349  BB 0E000000       MOV      EBX,14
    0001A34E  F7 E3             MUL      EBX
    0001A350  50                PUSH     EAX
    0001A351  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A354  48                DEC      EAX
    0001A355  BB 02000000       MOV      EBX,2
    0001A35A  F7 E3             MUL      EBX
    0001A35C  5B                POP      EBX
    0001A35D  03 C3             ADD      EAX,EBX
    0001A35F  8B F8             MOV      EDI,EAX
    0001A361  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16374

    0001A368  B8 01000000       MOV      EAX,1
    0001A36D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16375

    0001A373  B8 01000000       MOV      EAX,1
    0001A378  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16377

    0001A37E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001A385  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001A38A  5B                POP      EBX

    LINE     16379

    0001A38B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001A392  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001A397  5B                POP      EBX

    LINE     16381

    0001A398  B8 0A000000       MOV      EAX,10
    0001A39D  40                INC      EAX
    0001A39E  50                PUSH     EAX
    0001A39F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A3A2  5B                POP      EBX
    0001A3A3  3B C3             CMP      EAX,EBX
    0001A3A5  0F 8503000000     JNE      3
    0001A3AB  EB                JMP      

    LINE     16395

    0001A3AC  56                PUSH     ESI
    0001A3AD  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001A3B3  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001A3B9  FF D1             CALL     ECX                       run_inner_proc
    0001A3BB  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16397

    0001A3BC  B8 01000000       MOV      EAX,1
    0001A3C1  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16399

    0001A3C4  B8 01000000       MOV      EAX,1
    0001A3C9  8B C8             MOV      ECX,EAX
    0001A3CB  B8 0A000000       MOV      EAX,10
    0001A3D0  50                PUSH     EAX
    0001A3D1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001A3D4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A3D7  5B                POP      EBX
    0001A3D8  53                PUSH     EBX
    0001A3D9  3B C3             CMP      EAX,EBX
    0001A3DB  0F 8E03000000     JLE      3
    0001A3E1  EB                JMP      

    LINE     16401

    0001A3E2  B8 01000000       MOV      EAX,1
    0001A3E7  8B C8             MOV      ECX,EAX
    0001A3E9  B8 05000000       MOV      EAX,5
    0001A3EE  50                PUSH     EAX
    0001A3EF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001A3F2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A3F5  5B                POP      EBX
    0001A3F6  53                PUSH     EBX
    0001A3F7  3B C3             CMP      EAX,EBX
    0001A3F9  0F 8E03000000     JLE      3
    0001A3FF  EB                JMP      

    LINE     16408

    0001A400  B8 01000000       MOV      EAX,1
    0001A405  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16409

    0001A408  B8 01000000       MOV      EAX,1
    0001A40D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16410

    0001A410  B8 01000000       MOV      EAX,1
    0001A415  8B C8             MOV      ECX,EAX
    0001A417  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A41A  48                DEC      EAX
    0001A41B  BB 0E000000       MOV      EBX,14
    0001A420  F7 E3             MUL      EBX
    0001A422  50                PUSH     EAX
    0001A423  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A426  48                DEC      EAX
    0001A427  BB 02000000       MOV      EBX,2
    0001A42C  F7 E3             MUL      EBX
    0001A42E  5B                POP      EBX
    0001A42F  03 C3             ADD      EAX,EBX
    0001A431  8B F8             MOV      EDI,EAX
    0001A433  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16411

    0001A437  B8 01000000       MOV      EAX,1
    0001A43C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16412

    0001A43F  B8 01000000       MOV      EAX,1
    0001A444  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16414

    0001A447  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001A44E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001A453  5B                POP      EBX

    LINE     16416

    0001A454  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001A45B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001A460  5B                POP      EBX

    LINE     16418

    0001A461  B8 0A000000       MOV      EAX,10
    0001A466  40                INC      EAX
    0001A467  50                PUSH     EAX
    0001A468  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A46B  5B                POP      EBX
    0001A46C  3B C3             CMP      EAX,EBX
    0001A46E  0F 8503000000     JNE      3
    0001A474  EB                JMP      

    LINE     16425

    0001A475  B8 01000000       MOV      EAX,1
    0001A47A  8B C8             MOV      ECX,EAX
    0001A47C  B8 0A000000       MOV      EAX,10
    0001A481  50                PUSH     EAX
    0001A482  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001A485  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A488  5B                POP      EBX
    0001A489  53                PUSH     EBX
    0001A48A  3B C3             CMP      EAX,EBX
    0001A48C  0F 8E03000000     JLE      3
    0001A492  EB                JMP      

    LINE     16427

    0001A493  B8 01000000       MOV      EAX,1
    0001A498  8B C8             MOV      ECX,EAX
    0001A49A  B8 05000000       MOV      EAX,5
    0001A49F  50                PUSH     EAX
    0001A4A0  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001A4A3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A4A6  5B                POP      EBX
    0001A4A7  53                PUSH     EBX
    0001A4A8  3B C3             CMP      EAX,EBX
    0001A4AA  0F 8E03000000     JLE      3
    0001A4B0  EB                JMP      

    LINE     16434

    0001A4B1  B8 01000000       MOV      EAX,1
    0001A4B6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16435

    0001A4B9  B8 01000000       MOV      EAX,1
    0001A4BE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16436

    0001A4C1  B8 01000000       MOV      EAX,1
    0001A4C6  8B C8             MOV      ECX,EAX
    0001A4C8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A4CB  48                DEC      EAX
    0001A4CC  BB 0E000000       MOV      EBX,14
    0001A4D1  F7 E3             MUL      EBX
    0001A4D3  50                PUSH     EAX
    0001A4D4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A4D7  48                DEC      EAX
    0001A4D8  BB 02000000       MOV      EBX,2
    0001A4DD  F7 E3             MUL      EBX
    0001A4DF  5B                POP      EBX
    0001A4E0  03 C3             ADD      EAX,EBX
    0001A4E2  8B F8             MOV      EDI,EAX
    0001A4E4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16437

    0001A4E8  B8 01000000       MOV      EAX,1
    0001A4ED  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16438

    0001A4F0  B8 01000000       MOV      EAX,1
    0001A4F5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16440

    0001A4F8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001A4FF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001A504  5B                POP      EBX

    LINE     16442

    0001A505  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001A50C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001A511  5B                POP      EBX

    LINE     16444

    0001A512  B8 0A000000       MOV      EAX,10
    0001A517  40                INC      EAX
    0001A518  50                PUSH     EAX
    0001A519  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A51C  5B                POP      EBX
    0001A51D  3B C3             CMP      EAX,EBX
    0001A51F  0F 8503000000     JNE      3
    0001A525  EB                JMP      

    LINE     16452

    0001A526  B8 01000000       MOV      EAX,1
    0001A52B  8B C8             MOV      ECX,EAX
    0001A52D  B8 0A000000       MOV      EAX,10
    0001A532  50                PUSH     EAX
    0001A533  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001A536  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A539  5B                POP      EBX
    0001A53A  53                PUSH     EBX
    0001A53B  3B C3             CMP      EAX,EBX
    0001A53D  0F 8E03000000     JLE      3
    0001A543  EB                JMP      

    LINE     16454

    0001A544  B8 01000000       MOV      EAX,1
    0001A549  8B C8             MOV      ECX,EAX
    0001A54B  B8 05000000       MOV      EAX,5
    0001A550  50                PUSH     EAX
    0001A551  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001A554  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A557  5B                POP      EBX
    0001A558  53                PUSH     EBX
    0001A559  3B C3             CMP      EAX,EBX
    0001A55B  0F 8E03000000     JLE      3
    0001A561  EB                JMP      

    LINE     16461

    0001A562  B8 01000000       MOV      EAX,1
    0001A567  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16462

    0001A56D  B8 01000000       MOV      EAX,1
    0001A572  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16463

    0001A578  B8 01000000       MOV      EAX,1
    0001A57D  8B C8             MOV      ECX,EAX
    0001A57F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A582  48                DEC      EAX
    0001A583  BB 0E000000       MOV      EBX,14
    0001A588  F7 E3             MUL      EBX
    0001A58A  50                PUSH     EAX
    0001A58B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A58E  48                DEC      EAX
    0001A58F  BB 02000000       MOV      EBX,2
    0001A594  F7 E3             MUL      EBX
    0001A596  5B                POP      EBX
    0001A597  03 C3             ADD      EAX,EBX
    0001A599  8B F8             MOV      EDI,EAX
    0001A59B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16464

    0001A5A2  B8 01000000       MOV      EAX,1
    0001A5A7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16465

    0001A5AD  B8 01000000       MOV      EAX,1
    0001A5B2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16467

    0001A5B8  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001A5BF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001A5C4  5B                POP      EBX

    LINE     16469

    0001A5C5  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001A5CC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001A5D1  5B                POP      EBX

    LINE     16471

    0001A5D2  B8 0A000000       MOV      EAX,10
    0001A5D7  40                INC      EAX
    0001A5D8  50                PUSH     EAX
    0001A5D9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A5DC  5B                POP      EBX
    0001A5DD  3B C3             CMP      EAX,EBX
    0001A5DF  0F 8503000000     JNE      3
    0001A5E5  EB                JMP      

    LINE     16478

    0001A5E6  B8 01000000       MOV      EAX,1
    0001A5EB  8B C8             MOV      ECX,EAX
    0001A5ED  B8 0A000000       MOV      EAX,10
    0001A5F2  50                PUSH     EAX
    0001A5F3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001A5F6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A5F9  5B                POP      EBX
    0001A5FA  53                PUSH     EBX
    0001A5FB  3B C3             CMP      EAX,EBX
    0001A5FD  0F 8E03000000     JLE      3
    0001A603  EB                JMP      

    LINE     16480

    0001A604  B8 01000000       MOV      EAX,1
    0001A609  8B C8             MOV      ECX,EAX
    0001A60B  B8 05000000       MOV      EAX,5
    0001A610  50                PUSH     EAX
    0001A611  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001A614  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A617  5B                POP      EBX
    0001A618  53                PUSH     EBX
    0001A619  3B C3             CMP      EAX,EBX
    0001A61B  0F 8E03000000     JLE      3
    0001A621  EB                JMP      

    LINE     16487

    0001A622  B8 01000000       MOV      EAX,1
    0001A627  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16488

    0001A62D  B8 01000000       MOV      EAX,1
    0001A632  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16489

    0001A638  B8 01000000       MOV      EAX,1
    0001A63D  8B C8             MOV      ECX,EAX
    0001A63F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A642  48                DEC      EAX
    0001A643  BB 0E000000       MOV      EBX,14
    0001A648  F7 E3             MUL      EBX
    0001A64A  50                PUSH     EAX
    0001A64B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A64E  48                DEC      EAX
    0001A64F  BB 02000000       MOV      EBX,2
    0001A654  F7 E3             MUL      EBX
    0001A656  5B                POP      EBX
    0001A657  03 C3             ADD      EAX,EBX
    0001A659  8B F8             MOV      EDI,EAX
    0001A65B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16490

    0001A662  B8 01000000       MOV      EAX,1
    0001A667  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16491

    0001A66D  B8 01000000       MOV      EAX,1
    0001A672  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16493

    0001A678  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001A67F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001A684  5B                POP      EBX

    LINE     16495

    0001A685  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001A68C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001A691  5B                POP      EBX

    LINE     16497

    0001A692  B8 0A000000       MOV      EAX,10
    0001A697  40                INC      EAX
    0001A698  50                PUSH     EAX
    0001A699  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A69C  5B                POP      EBX
    0001A69D  3B C3             CMP      EAX,EBX
    0001A69F  0F 8503000000     JNE      3
    0001A6A5  EB                JMP      

    LINE     16511

    0001A6A6  56                PUSH     ESI
    0001A6A7  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001A6AD  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001A6B3  FF D1             CALL     ECX                       run_inner_proc
    0001A6B5  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16513

    0001A6B6  B8 01000000       MOV      EAX,1
    0001A6BB  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16515

    0001A6BE  B8 01000000       MOV      EAX,1
    0001A6C3  8B C8             MOV      ECX,EAX
    0001A6C5  B8 0A000000       MOV      EAX,10
    0001A6CA  50                PUSH     EAX
    0001A6CB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001A6CE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A6D1  5B                POP      EBX
    0001A6D2  53                PUSH     EBX
    0001A6D3  3B C3             CMP      EAX,EBX
    0001A6D5  0F 8E03000000     JLE      3
    0001A6DB  EB                JMP      

    LINE     16517

    0001A6DC  B8 01000000       MOV      EAX,1
    0001A6E1  8B C8             MOV      ECX,EAX
    0001A6E3  B8 05000000       MOV      EAX,5
    0001A6E8  50                PUSH     EAX
    0001A6E9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001A6EC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A6EF  5B                POP      EBX
    0001A6F0  53                PUSH     EBX
    0001A6F1  3B C3             CMP      EAX,EBX
    0001A6F3  0F 8E03000000     JLE      3
    0001A6F9  EB                JMP      

    LINE     16524

    0001A6FA  B8 01000000       MOV      EAX,1
    0001A6FF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16525

    0001A702  B8 01000000       MOV      EAX,1
    0001A707  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16526

    0001A70A  B8 01000000       MOV      EAX,1
    0001A70F  8B C8             MOV      ECX,EAX
    0001A711  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A714  48                DEC      EAX
    0001A715  BB 0E000000       MOV      EBX,14
    0001A71A  F7 E3             MUL      EBX
    0001A71C  50                PUSH     EAX
    0001A71D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A720  48                DEC      EAX
    0001A721  BB 02000000       MOV      EBX,2
    0001A726  F7 E3             MUL      EBX
    0001A728  5B                POP      EBX
    0001A729  03 C3             ADD      EAX,EBX
    0001A72B  8B F8             MOV      EDI,EAX
    0001A72D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16527

    0001A731  B8 01000000       MOV      EAX,1
    0001A736  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16528

    0001A739  B8 01000000       MOV      EAX,1
    0001A73E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16530

    0001A741  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001A748  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001A74D  5B                POP      EBX

    LINE     16532

    0001A74E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001A755  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001A75A  5B                POP      EBX

    LINE     16534

    0001A75B  B8 0A000000       MOV      EAX,10
    0001A760  40                INC      EAX
    0001A761  50                PUSH     EAX
    0001A762  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A765  5B                POP      EBX
    0001A766  3B C3             CMP      EAX,EBX
    0001A768  0F 8503000000     JNE      3
    0001A76E  EB                JMP      

    LINE     16541

    0001A76F  B8 01000000       MOV      EAX,1
    0001A774  8B C8             MOV      ECX,EAX
    0001A776  B8 0A000000       MOV      EAX,10
    0001A77B  50                PUSH     EAX
    0001A77C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001A77F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A782  5B                POP      EBX
    0001A783  53                PUSH     EBX
    0001A784  3B C3             CMP      EAX,EBX
    0001A786  0F 8E03000000     JLE      3
    0001A78C  EB                JMP      

    LINE     16543

    0001A78D  B8 01000000       MOV      EAX,1
    0001A792  8B C8             MOV      ECX,EAX
    0001A794  B8 05000000       MOV      EAX,5
    0001A799  50                PUSH     EAX
    0001A79A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001A79D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A7A0  5B                POP      EBX
    0001A7A1  53                PUSH     EBX
    0001A7A2  3B C3             CMP      EAX,EBX
    0001A7A4  0F 8E03000000     JLE      3
    0001A7AA  EB                JMP      

    LINE     16550

    0001A7AB  B8 01000000       MOV      EAX,1
    0001A7B0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16551

    0001A7B3  B8 01000000       MOV      EAX,1
    0001A7B8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16552

    0001A7BB  B8 01000000       MOV      EAX,1
    0001A7C0  8B C8             MOV      ECX,EAX
    0001A7C2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A7C5  48                DEC      EAX
    0001A7C6  BB 0E000000       MOV      EBX,14
    0001A7CB  F7 E3             MUL      EBX
    0001A7CD  50                PUSH     EAX
    0001A7CE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A7D1  48                DEC      EAX
    0001A7D2  BB 02000000       MOV      EBX,2
    0001A7D7  F7 E3             MUL      EBX
    0001A7D9  5B                POP      EBX
    0001A7DA  03 C3             ADD      EAX,EBX
    0001A7DC  8B F8             MOV      EDI,EAX
    0001A7DE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16553

    0001A7E2  B8 01000000       MOV      EAX,1
    0001A7E7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16554

    0001A7EA  B8 01000000       MOV      EAX,1
    0001A7EF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16556

    0001A7F2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001A7F9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001A7FE  5B                POP      EBX

    LINE     16558

    0001A7FF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001A806  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001A80B  5B                POP      EBX

    LINE     16560

    0001A80C  B8 0A000000       MOV      EAX,10
    0001A811  40                INC      EAX
    0001A812  50                PUSH     EAX
    0001A813  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A816  5B                POP      EBX
    0001A817  3B C3             CMP      EAX,EBX
    0001A819  0F 8503000000     JNE      3
    0001A81F  EB                JMP      

    LINE     16568

    0001A820  B8 01000000       MOV      EAX,1
    0001A825  8B C8             MOV      ECX,EAX
    0001A827  B8 0A000000       MOV      EAX,10
    0001A82C  50                PUSH     EAX
    0001A82D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001A830  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A833  5B                POP      EBX
    0001A834  53                PUSH     EBX
    0001A835  3B C3             CMP      EAX,EBX
    0001A837  0F 8E03000000     JLE      3
    0001A83D  EB                JMP      

    LINE     16570

    0001A83E  B8 01000000       MOV      EAX,1
    0001A843  8B C8             MOV      ECX,EAX
    0001A845  B8 05000000       MOV      EAX,5
    0001A84A  50                PUSH     EAX
    0001A84B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001A84E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A851  5B                POP      EBX
    0001A852  53                PUSH     EBX
    0001A853  3B C3             CMP      EAX,EBX
    0001A855  0F 8E03000000     JLE      3
    0001A85B  EB                JMP      

    LINE     16577

    0001A85C  B8 01000000       MOV      EAX,1
    0001A861  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16578

    0001A867  B8 01000000       MOV      EAX,1
    0001A86C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16579

    0001A872  B8 01000000       MOV      EAX,1
    0001A877  8B C8             MOV      ECX,EAX
    0001A879  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A87C  48                DEC      EAX
    0001A87D  BB 0E000000       MOV      EBX,14
    0001A882  F7 E3             MUL      EBX
    0001A884  50                PUSH     EAX
    0001A885  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A888  48                DEC      EAX
    0001A889  BB 02000000       MOV      EBX,2
    0001A88E  F7 E3             MUL      EBX
    0001A890  5B                POP      EBX
    0001A891  03 C3             ADD      EAX,EBX
    0001A893  8B F8             MOV      EDI,EAX
    0001A895  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16580

    0001A89C  B8 01000000       MOV      EAX,1
    0001A8A1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16581

    0001A8A7  B8 01000000       MOV      EAX,1
    0001A8AC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16583

    0001A8B2  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001A8B9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001A8BE  5B                POP      EBX

    LINE     16585

    0001A8BF  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001A8C6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001A8CB  5B                POP      EBX

    LINE     16587

    0001A8CC  B8 0A000000       MOV      EAX,10
    0001A8D1  40                INC      EAX
    0001A8D2  50                PUSH     EAX
    0001A8D3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A8D6  5B                POP      EBX
    0001A8D7  3B C3             CMP      EAX,EBX
    0001A8D9  0F 8503000000     JNE      3
    0001A8DF  EB                JMP      

    LINE     16594

    0001A8E0  B8 01000000       MOV      EAX,1
    0001A8E5  8B C8             MOV      ECX,EAX
    0001A8E7  B8 0A000000       MOV      EAX,10
    0001A8EC  50                PUSH     EAX
    0001A8ED  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001A8F0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A8F3  5B                POP      EBX
    0001A8F4  53                PUSH     EBX
    0001A8F5  3B C3             CMP      EAX,EBX
    0001A8F7  0F 8E03000000     JLE      3
    0001A8FD  EB                JMP      

    LINE     16596

    0001A8FE  B8 01000000       MOV      EAX,1
    0001A903  8B C8             MOV      ECX,EAX
    0001A905  B8 05000000       MOV      EAX,5
    0001A90A  50                PUSH     EAX
    0001A90B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001A90E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A911  5B                POP      EBX
    0001A912  53                PUSH     EBX
    0001A913  3B C3             CMP      EAX,EBX
    0001A915  0F 8E03000000     JLE      3
    0001A91B  EB                JMP      

    LINE     16603

    0001A91C  B8 01000000       MOV      EAX,1
    0001A921  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16604

    0001A927  B8 01000000       MOV      EAX,1
    0001A92C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16605

    0001A932  B8 01000000       MOV      EAX,1
    0001A937  8B C8             MOV      ECX,EAX
    0001A939  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001A93C  48                DEC      EAX
    0001A93D  BB 0E000000       MOV      EBX,14
    0001A942  F7 E3             MUL      EBX
    0001A944  50                PUSH     EAX
    0001A945  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001A948  48                DEC      EAX
    0001A949  BB 02000000       MOV      EBX,2
    0001A94E  F7 E3             MUL      EBX
    0001A950  5B                POP      EBX
    0001A951  03 C3             ADD      EAX,EBX
    0001A953  8B F8             MOV      EDI,EAX
    0001A955  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16606

    0001A95C  B8 01000000       MOV      EAX,1
    0001A961  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16607

    0001A967  B8 01000000       MOV      EAX,1
    0001A96C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16609

    0001A972  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001A979  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001A97E  5B                POP      EBX

    LINE     16611

    0001A97F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001A986  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001A98B  5B                POP      EBX

    LINE     16613

    0001A98C  B8 0A000000       MOV      EAX,10
    0001A991  40                INC      EAX
    0001A992  50                PUSH     EAX
    0001A993  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A996  5B                POP      EBX
    0001A997  3B C3             CMP      EAX,EBX
    0001A999  0F 8503000000     JNE      3
    0001A99F  EB                JMP      

    LINE     16627

    0001A9A0  56                PUSH     ESI
    0001A9A1  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001A9A7  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001A9AD  FF D1             CALL     ECX                       run_inner_proc
    0001A9AF  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16629

    0001A9B0  B8 01000000       MOV      EAX,1
    0001A9B5  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16631

    0001A9B8  B8 01000000       MOV      EAX,1
    0001A9BD  8B C8             MOV      ECX,EAX
    0001A9BF  B8 0A000000       MOV      EAX,10
    0001A9C4  50                PUSH     EAX
    0001A9C5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001A9C8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001A9CB  5B                POP      EBX
    0001A9CC  53                PUSH     EBX
    0001A9CD  3B C3             CMP      EAX,EBX
    0001A9CF  0F 8E03000000     JLE      3
    0001A9D5  EB                JMP      

    LINE     16633

    0001A9D6  B8 01000000       MOV      EAX,1
    0001A9DB  8B C8             MOV      ECX,EAX
    0001A9DD  B8 05000000       MOV      EAX,5
    0001A9E2  50                PUSH     EAX
    0001A9E3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001A9E6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001A9E9  5B                POP      EBX
    0001A9EA  53                PUSH     EBX
    0001A9EB  3B C3             CMP      EAX,EBX
    0001A9ED  0F 8E03000000     JLE      3
    0001A9F3  EB                JMP      

    LINE     16640

    0001A9F4  B8 01000000       MOV      EAX,1
    0001A9F9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16641

    0001A9FC  B8 01000000       MOV      EAX,1
    0001AA01  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16642

    0001AA04  B8 01000000       MOV      EAX,1
    0001AA09  8B C8             MOV      ECX,EAX
    0001AA0B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AA0E  48                DEC      EAX
    0001AA0F  BB 0E000000       MOV      EBX,14
    0001AA14  F7 E3             MUL      EBX
    0001AA16  50                PUSH     EAX
    0001AA17  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001AA1A  48                DEC      EAX
    0001AA1B  BB 02000000       MOV      EBX,2
    0001AA20  F7 E3             MUL      EBX
    0001AA22  5B                POP      EBX
    0001AA23  03 C3             ADD      EAX,EBX
    0001AA25  8B F8             MOV      EDI,EAX
    0001AA27  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16643

    0001AA2B  B8 01000000       MOV      EAX,1
    0001AA30  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16644

    0001AA33  B8 01000000       MOV      EAX,1
    0001AA38  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16646

    0001AA3B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001AA42  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001AA47  5B                POP      EBX

    LINE     16648

    0001AA48  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001AA4F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001AA54  5B                POP      EBX

    LINE     16650

    0001AA55  B8 0A000000       MOV      EAX,10
    0001AA5A  40                INC      EAX
    0001AA5B  50                PUSH     EAX
    0001AA5C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AA5F  5B                POP      EBX
    0001AA60  3B C3             CMP      EAX,EBX
    0001AA62  0F 8503000000     JNE      3
    0001AA68  EB                JMP      

    LINE     16657

    0001AA69  B8 01000000       MOV      EAX,1
    0001AA6E  8B C8             MOV      ECX,EAX
    0001AA70  B8 0A000000       MOV      EAX,10
    0001AA75  50                PUSH     EAX
    0001AA76  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001AA79  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001AA7C  5B                POP      EBX
    0001AA7D  53                PUSH     EBX
    0001AA7E  3B C3             CMP      EAX,EBX
    0001AA80  0F 8E03000000     JLE      3
    0001AA86  EB                JMP      

    LINE     16659

    0001AA87  B8 01000000       MOV      EAX,1
    0001AA8C  8B C8             MOV      ECX,EAX
    0001AA8E  B8 05000000       MOV      EAX,5
    0001AA93  50                PUSH     EAX
    0001AA94  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001AA97  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001AA9A  5B                POP      EBX
    0001AA9B  53                PUSH     EBX
    0001AA9C  3B C3             CMP      EAX,EBX
    0001AA9E  0F 8E03000000     JLE      3
    0001AAA4  EB                JMP      

    LINE     16666

    0001AAA5  B8 01000000       MOV      EAX,1
    0001AAAA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16667

    0001AAAD  B8 01000000       MOV      EAX,1
    0001AAB2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16668

    0001AAB5  B8 01000000       MOV      EAX,1
    0001AABA  8B C8             MOV      ECX,EAX
    0001AABC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001AABF  48                DEC      EAX
    0001AAC0  BB 0E000000       MOV      EBX,14
    0001AAC5  F7 E3             MUL      EBX
    0001AAC7  50                PUSH     EAX
    0001AAC8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001AACB  48                DEC      EAX
    0001AACC  BB 02000000       MOV      EBX,2
    0001AAD1  F7 E3             MUL      EBX
    0001AAD3  5B                POP      EBX
    0001AAD4  03 C3             ADD      EAX,EBX
    0001AAD6  8B F8             MOV      EDI,EAX
    0001AAD8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16669

    0001AADC  B8 01000000       MOV      EAX,1
    0001AAE1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16670

    0001AAE4  B8 01000000       MOV      EAX,1
    0001AAE9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16672

    0001AAEC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001AAF3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001AAF8  5B                POP      EBX

    LINE     16674

    0001AAF9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001AB00  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001AB05  5B                POP      EBX

    LINE     16676

    0001AB06  B8 0A000000       MOV      EAX,10
    0001AB0B  40                INC      EAX
    0001AB0C  50                PUSH     EAX
    0001AB0D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AB10  5B                POP      EBX
    0001AB11  3B C3             CMP      EAX,EBX
    0001AB13  0F 8503000000     JNE      3
    0001AB19  EB                JMP      

    LINE     16684

    0001AB1A  B8 01000000       MOV      EAX,1
    0001AB1F  8B C8             MOV      ECX,EAX
    0001AB21  B8 0A000000       MOV      EAX,10
    0001AB26  50                PUSH     EAX
    0001AB27  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001AB2A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AB2D  5B                POP      EBX
    0001AB2E  53                PUSH     EBX
    0001AB2F  3B C3             CMP      EAX,EBX
    0001AB31  0F 8E03000000     JLE      3
    0001AB37  EB                JMP      

    LINE     16686

    0001AB38  B8 01000000       MOV      EAX,1
    0001AB3D  8B C8             MOV      ECX,EAX
    0001AB3F  B8 05000000       MOV      EAX,5
    0001AB44  50                PUSH     EAX
    0001AB45  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001AB48  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001AB4B  5B                POP      EBX
    0001AB4C  53                PUSH     EBX
    0001AB4D  3B C3             CMP      EAX,EBX
    0001AB4F  0F 8E03000000     JLE      3
    0001AB55  EB                JMP      

    LINE     16693

    0001AB56  B8 01000000       MOV      EAX,1
    0001AB5B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16694

    0001AB61  B8 01000000       MOV      EAX,1
    0001AB66  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16695

    0001AB6C  B8 01000000       MOV      EAX,1
    0001AB71  8B C8             MOV      ECX,EAX
    0001AB73  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AB76  48                DEC      EAX
    0001AB77  BB 0E000000       MOV      EBX,14
    0001AB7C  F7 E3             MUL      EBX
    0001AB7E  50                PUSH     EAX
    0001AB7F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001AB82  48                DEC      EAX
    0001AB83  BB 02000000       MOV      EBX,2
    0001AB88  F7 E3             MUL      EBX
    0001AB8A  5B                POP      EBX
    0001AB8B  03 C3             ADD      EAX,EBX
    0001AB8D  8B F8             MOV      EDI,EAX
    0001AB8F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16696

    0001AB96  B8 01000000       MOV      EAX,1
    0001AB9B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16697

    0001ABA1  B8 01000000       MOV      EAX,1
    0001ABA6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16699

    0001ABAC  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001ABB3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001ABB8  5B                POP      EBX

    LINE     16701

    0001ABB9  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001ABC0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001ABC5  5B                POP      EBX

    LINE     16703

    0001ABC6  B8 0A000000       MOV      EAX,10
    0001ABCB  40                INC      EAX
    0001ABCC  50                PUSH     EAX
    0001ABCD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001ABD0  5B                POP      EBX
    0001ABD1  3B C3             CMP      EAX,EBX
    0001ABD3  0F 8503000000     JNE      3
    0001ABD9  EB                JMP      

    LINE     16710

    0001ABDA  B8 01000000       MOV      EAX,1
    0001ABDF  8B C8             MOV      ECX,EAX
    0001ABE1  B8 0A000000       MOV      EAX,10
    0001ABE6  50                PUSH     EAX
    0001ABE7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001ABEA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001ABED  5B                POP      EBX
    0001ABEE  53                PUSH     EBX
    0001ABEF  3B C3             CMP      EAX,EBX
    0001ABF1  0F 8E03000000     JLE      3
    0001ABF7  EB                JMP      

    LINE     16712

    0001ABF8  B8 01000000       MOV      EAX,1
    0001ABFD  8B C8             MOV      ECX,EAX
    0001ABFF  B8 05000000       MOV      EAX,5
    0001AC04  50                PUSH     EAX
    0001AC05  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001AC08  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001AC0B  5B                POP      EBX
    0001AC0C  53                PUSH     EBX
    0001AC0D  3B C3             CMP      EAX,EBX
    0001AC0F  0F 8E03000000     JLE      3
    0001AC15  EB                JMP      

    LINE     16719

    0001AC16  B8 01000000       MOV      EAX,1
    0001AC1B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16720

    0001AC21  B8 01000000       MOV      EAX,1
    0001AC26  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16721

    0001AC2C  B8 01000000       MOV      EAX,1
    0001AC31  8B C8             MOV      ECX,EAX
    0001AC33  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001AC36  48                DEC      EAX
    0001AC37  BB 0E000000       MOV      EBX,14
    0001AC3C  F7 E3             MUL      EBX
    0001AC3E  50                PUSH     EAX
    0001AC3F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001AC42  48                DEC      EAX
    0001AC43  BB 02000000       MOV      EBX,2
    0001AC48  F7 E3             MUL      EBX
    0001AC4A  5B                POP      EBX
    0001AC4B  03 C3             ADD      EAX,EBX
    0001AC4D  8B F8             MOV      EDI,EAX
    0001AC4F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16722

    0001AC56  B8 01000000       MOV      EAX,1
    0001AC5B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16723

    0001AC61  B8 01000000       MOV      EAX,1
    0001AC66  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16725

    0001AC6C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001AC73  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001AC78  5B                POP      EBX

    LINE     16727

    0001AC79  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001AC80  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001AC85  5B                POP      EBX

    LINE     16729

    0001AC86  B8 0A000000       MOV      EAX,10
    0001AC8B  40                INC      EAX
    0001AC8C  50                PUSH     EAX
    0001AC8D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AC90  5B                POP      EBX
    0001AC91  3B C3             CMP      EAX,EBX
    0001AC93  0F 8503000000     JNE      3
    0001AC99  EB                JMP      

    LINE     16743

    0001AC9A  56                PUSH     ESI
    0001AC9B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001ACA1  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001ACA7  FF D1             CALL     ECX                       run_inner_proc
    0001ACA9  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16745

    0001ACAA  B8 01000000       MOV      EAX,1
    0001ACAF  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16747

    0001ACB2  B8 01000000       MOV      EAX,1
    0001ACB7  8B C8             MOV      ECX,EAX
    0001ACB9  B8 0A000000       MOV      EAX,10
    0001ACBE  50                PUSH     EAX
    0001ACBF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001ACC2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001ACC5  5B                POP      EBX
    0001ACC6  53                PUSH     EBX
    0001ACC7  3B C3             CMP      EAX,EBX
    0001ACC9  0F 8E03000000     JLE      3
    0001ACCF  EB                JMP      

    LINE     16749

    0001ACD0  B8 01000000       MOV      EAX,1
    0001ACD5  8B C8             MOV      ECX,EAX
    0001ACD7  B8 05000000       MOV      EAX,5
    0001ACDC  50                PUSH     EAX
    0001ACDD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001ACE0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001ACE3  5B                POP      EBX
    0001ACE4  53                PUSH     EBX
    0001ACE5  3B C3             CMP      EAX,EBX
    0001ACE7  0F 8E03000000     JLE      3
    0001ACED  EB                JMP      

    LINE     16756

    0001ACEE  B8 01000000       MOV      EAX,1
    0001ACF3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16757

    0001ACF6  B8 01000000       MOV      EAX,1
    0001ACFB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16758

    0001ACFE  B8 01000000       MOV      EAX,1
    0001AD03  8B C8             MOV      ECX,EAX
    0001AD05  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AD08  48                DEC      EAX
    0001AD09  BB 0E000000       MOV      EBX,14
    0001AD0E  F7 E3             MUL      EBX
    0001AD10  50                PUSH     EAX
    0001AD11  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001AD14  48                DEC      EAX
    0001AD15  BB 02000000       MOV      EBX,2
    0001AD1A  F7 E3             MUL      EBX
    0001AD1C  5B                POP      EBX
    0001AD1D  03 C3             ADD      EAX,EBX
    0001AD1F  8B F8             MOV      EDI,EAX
    0001AD21  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16759

    0001AD25  B8 01000000       MOV      EAX,1
    0001AD2A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16760

    0001AD2D  B8 01000000       MOV      EAX,1
    0001AD32  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16762

    0001AD35  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001AD3C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001AD41  5B                POP      EBX

    LINE     16764

    0001AD42  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001AD49  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001AD4E  5B                POP      EBX

    LINE     16766

    0001AD4F  B8 0A000000       MOV      EAX,10
    0001AD54  40                INC      EAX
    0001AD55  50                PUSH     EAX
    0001AD56  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AD59  5B                POP      EBX
    0001AD5A  3B C3             CMP      EAX,EBX
    0001AD5C  0F 8503000000     JNE      3
    0001AD62  EB                JMP      

    LINE     16773

    0001AD63  B8 01000000       MOV      EAX,1
    0001AD68  8B C8             MOV      ECX,EAX
    0001AD6A  B8 0A000000       MOV      EAX,10
    0001AD6F  50                PUSH     EAX
    0001AD70  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001AD73  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001AD76  5B                POP      EBX
    0001AD77  53                PUSH     EBX
    0001AD78  3B C3             CMP      EAX,EBX
    0001AD7A  0F 8E03000000     JLE      3
    0001AD80  EB                JMP      

    LINE     16775

    0001AD81  B8 01000000       MOV      EAX,1
    0001AD86  8B C8             MOV      ECX,EAX
    0001AD88  B8 05000000       MOV      EAX,5
    0001AD8D  50                PUSH     EAX
    0001AD8E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001AD91  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001AD94  5B                POP      EBX
    0001AD95  53                PUSH     EBX
    0001AD96  3B C3             CMP      EAX,EBX
    0001AD98  0F 8E03000000     JLE      3
    0001AD9E  EB                JMP      

    LINE     16782

    0001AD9F  B8 01000000       MOV      EAX,1
    0001ADA4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16783

    0001ADA7  B8 01000000       MOV      EAX,1
    0001ADAC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16784

    0001ADAF  B8 01000000       MOV      EAX,1
    0001ADB4  8B C8             MOV      ECX,EAX
    0001ADB6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001ADB9  48                DEC      EAX
    0001ADBA  BB 0E000000       MOV      EBX,14
    0001ADBF  F7 E3             MUL      EBX
    0001ADC1  50                PUSH     EAX
    0001ADC2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001ADC5  48                DEC      EAX
    0001ADC6  BB 02000000       MOV      EBX,2
    0001ADCB  F7 E3             MUL      EBX
    0001ADCD  5B                POP      EBX
    0001ADCE  03 C3             ADD      EAX,EBX
    0001ADD0  8B F8             MOV      EDI,EAX
    0001ADD2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16785

    0001ADD6  B8 01000000       MOV      EAX,1
    0001ADDB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16786

    0001ADDE  B8 01000000       MOV      EAX,1
    0001ADE3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16788

    0001ADE6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001ADED  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001ADF2  5B                POP      EBX

    LINE     16790

    0001ADF3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001ADFA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001ADFF  5B                POP      EBX

    LINE     16792

    0001AE00  B8 0A000000       MOV      EAX,10
    0001AE05  40                INC      EAX
    0001AE06  50                PUSH     EAX
    0001AE07  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AE0A  5B                POP      EBX
    0001AE0B  3B C3             CMP      EAX,EBX
    0001AE0D  0F 8503000000     JNE      3
    0001AE13  EB                JMP      

    LINE     16800

    0001AE14  B8 01000000       MOV      EAX,1
    0001AE19  8B C8             MOV      ECX,EAX
    0001AE1B  B8 0A000000       MOV      EAX,10
    0001AE20  50                PUSH     EAX
    0001AE21  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001AE24  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AE27  5B                POP      EBX
    0001AE28  53                PUSH     EBX
    0001AE29  3B C3             CMP      EAX,EBX
    0001AE2B  0F 8E03000000     JLE      3
    0001AE31  EB                JMP      

    LINE     16802

    0001AE32  B8 01000000       MOV      EAX,1
    0001AE37  8B C8             MOV      ECX,EAX
    0001AE39  B8 05000000       MOV      EAX,5
    0001AE3E  50                PUSH     EAX
    0001AE3F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001AE42  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001AE45  5B                POP      EBX
    0001AE46  53                PUSH     EBX
    0001AE47  3B C3             CMP      EAX,EBX
    0001AE49  0F 8E03000000     JLE      3
    0001AE4F  EB                JMP      

    LINE     16809

    0001AE50  B8 01000000       MOV      EAX,1
    0001AE55  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16810

    0001AE5B  B8 01000000       MOV      EAX,1
    0001AE60  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16811

    0001AE66  B8 01000000       MOV      EAX,1
    0001AE6B  8B C8             MOV      ECX,EAX
    0001AE6D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AE70  48                DEC      EAX
    0001AE71  BB 0E000000       MOV      EBX,14
    0001AE76  F7 E3             MUL      EBX
    0001AE78  50                PUSH     EAX
    0001AE79  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001AE7C  48                DEC      EAX
    0001AE7D  BB 02000000       MOV      EBX,2
    0001AE82  F7 E3             MUL      EBX
    0001AE84  5B                POP      EBX
    0001AE85  03 C3             ADD      EAX,EBX
    0001AE87  8B F8             MOV      EDI,EAX
    0001AE89  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16812

    0001AE90  B8 01000000       MOV      EAX,1
    0001AE95  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16813

    0001AE9B  B8 01000000       MOV      EAX,1
    0001AEA0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16815

    0001AEA6  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001AEAD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001AEB2  5B                POP      EBX

    LINE     16817

    0001AEB3  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001AEBA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001AEBF  5B                POP      EBX

    LINE     16819

    0001AEC0  B8 0A000000       MOV      EAX,10
    0001AEC5  40                INC      EAX
    0001AEC6  50                PUSH     EAX
    0001AEC7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AECA  5B                POP      EBX
    0001AECB  3B C3             CMP      EAX,EBX
    0001AECD  0F 8503000000     JNE      3
    0001AED3  EB                JMP      

    LINE     16826

    0001AED4  B8 01000000       MOV      EAX,1
    0001AED9  8B C8             MOV      ECX,EAX
    0001AEDB  B8 0A000000       MOV      EAX,10
    0001AEE0  50                PUSH     EAX
    0001AEE1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001AEE4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001AEE7  5B                POP      EBX
    0001AEE8  53                PUSH     EBX
    0001AEE9  3B C3             CMP      EAX,EBX
    0001AEEB  0F 8E03000000     JLE      3
    0001AEF1  EB                JMP      

    LINE     16828

    0001AEF2  B8 01000000       MOV      EAX,1
    0001AEF7  8B C8             MOV      ECX,EAX
    0001AEF9  B8 05000000       MOV      EAX,5
    0001AEFE  50                PUSH     EAX
    0001AEFF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001AF02  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001AF05  5B                POP      EBX
    0001AF06  53                PUSH     EBX
    0001AF07  3B C3             CMP      EAX,EBX
    0001AF09  0F 8E03000000     JLE      3
    0001AF0F  EB                JMP      

    LINE     16835

    0001AF10  B8 01000000       MOV      EAX,1
    0001AF15  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16836

    0001AF1B  B8 01000000       MOV      EAX,1
    0001AF20  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16837

    0001AF26  B8 01000000       MOV      EAX,1
    0001AF2B  8B C8             MOV      ECX,EAX
    0001AF2D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001AF30  48                DEC      EAX
    0001AF31  BB 0E000000       MOV      EBX,14
    0001AF36  F7 E3             MUL      EBX
    0001AF38  50                PUSH     EAX
    0001AF39  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001AF3C  48                DEC      EAX
    0001AF3D  BB 02000000       MOV      EBX,2
    0001AF42  F7 E3             MUL      EBX
    0001AF44  5B                POP      EBX
    0001AF45  03 C3             ADD      EAX,EBX
    0001AF47  8B F8             MOV      EDI,EAX
    0001AF49  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16838

    0001AF50  B8 01000000       MOV      EAX,1
    0001AF55  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16839

    0001AF5B  B8 01000000       MOV      EAX,1
    0001AF60  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16841

    0001AF66  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001AF6D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001AF72  5B                POP      EBX

    LINE     16843

    0001AF73  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001AF7A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001AF7F  5B                POP      EBX

    LINE     16845

    0001AF80  B8 0A000000       MOV      EAX,10
    0001AF85  40                INC      EAX
    0001AF86  50                PUSH     EAX
    0001AF87  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AF8A  5B                POP      EBX
    0001AF8B  3B C3             CMP      EAX,EBX
    0001AF8D  0F 8503000000     JNE      3
    0001AF93  EB                JMP      

    LINE     16859

    0001AF94  56                PUSH     ESI
    0001AF95  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001AF9B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001AFA1  FF D1             CALL     ECX                       run_inner_proc
    0001AFA3  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16861

    0001AFA4  B8 01000000       MOV      EAX,1
    0001AFA9  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16863

    0001AFAC  B8 01000000       MOV      EAX,1
    0001AFB1  8B C8             MOV      ECX,EAX
    0001AFB3  B8 0A000000       MOV      EAX,10
    0001AFB8  50                PUSH     EAX
    0001AFB9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001AFBC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001AFBF  5B                POP      EBX
    0001AFC0  53                PUSH     EBX
    0001AFC1  3B C3             CMP      EAX,EBX
    0001AFC3  0F 8E03000000     JLE      3
    0001AFC9  EB                JMP      

    LINE     16865

    0001AFCA  B8 01000000       MOV      EAX,1
    0001AFCF  8B C8             MOV      ECX,EAX
    0001AFD1  B8 05000000       MOV      EAX,5
    0001AFD6  50                PUSH     EAX
    0001AFD7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001AFDA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001AFDD  5B                POP      EBX
    0001AFDE  53                PUSH     EBX
    0001AFDF  3B C3             CMP      EAX,EBX
    0001AFE1  0F 8E03000000     JLE      3
    0001AFE7  EB                JMP      

    LINE     16872

    0001AFE8  B8 01000000       MOV      EAX,1
    0001AFED  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16873

    0001AFF0  B8 01000000       MOV      EAX,1
    0001AFF5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16874

    0001AFF8  B8 01000000       MOV      EAX,1
    0001AFFD  8B C8             MOV      ECX,EAX
    0001AFFF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B002  48                DEC      EAX
    0001B003  BB 0E000000       MOV      EBX,14
    0001B008  F7 E3             MUL      EBX
    0001B00A  50                PUSH     EAX
    0001B00B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B00E  48                DEC      EAX
    0001B00F  BB 02000000       MOV      EBX,2
    0001B014  F7 E3             MUL      EBX
    0001B016  5B                POP      EBX
    0001B017  03 C3             ADD      EAX,EBX
    0001B019  8B F8             MOV      EDI,EAX
    0001B01B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16875

    0001B01F  B8 01000000       MOV      EAX,1
    0001B024  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16876

    0001B027  B8 01000000       MOV      EAX,1
    0001B02C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16878

    0001B02F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001B036  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B03B  5B                POP      EBX

    LINE     16880

    0001B03C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001B043  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B048  5B                POP      EBX

    LINE     16882

    0001B049  B8 0A000000       MOV      EAX,10
    0001B04E  40                INC      EAX
    0001B04F  50                PUSH     EAX
    0001B050  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B053  5B                POP      EBX
    0001B054  3B C3             CMP      EAX,EBX
    0001B056  0F 8503000000     JNE      3
    0001B05C  EB                JMP      

    LINE     16889

    0001B05D  B8 01000000       MOV      EAX,1
    0001B062  8B C8             MOV      ECX,EAX
    0001B064  B8 0A000000       MOV      EAX,10
    0001B069  50                PUSH     EAX
    0001B06A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001B06D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B070  5B                POP      EBX
    0001B071  53                PUSH     EBX
    0001B072  3B C3             CMP      EAX,EBX
    0001B074  0F 8E03000000     JLE      3
    0001B07A  EB                JMP      

    LINE     16891

    0001B07B  B8 01000000       MOV      EAX,1
    0001B080  8B C8             MOV      ECX,EAX
    0001B082  B8 05000000       MOV      EAX,5
    0001B087  50                PUSH     EAX
    0001B088  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001B08B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B08E  5B                POP      EBX
    0001B08F  53                PUSH     EBX
    0001B090  3B C3             CMP      EAX,EBX
    0001B092  0F 8E03000000     JLE      3
    0001B098  EB                JMP      

    LINE     16898

    0001B099  B8 01000000       MOV      EAX,1
    0001B09E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16899

    0001B0A1  B8 01000000       MOV      EAX,1
    0001B0A6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16900

    0001B0A9  B8 01000000       MOV      EAX,1
    0001B0AE  8B C8             MOV      ECX,EAX
    0001B0B0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B0B3  48                DEC      EAX
    0001B0B4  BB 0E000000       MOV      EBX,14
    0001B0B9  F7 E3             MUL      EBX
    0001B0BB  50                PUSH     EAX
    0001B0BC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B0BF  48                DEC      EAX
    0001B0C0  BB 02000000       MOV      EBX,2
    0001B0C5  F7 E3             MUL      EBX
    0001B0C7  5B                POP      EBX
    0001B0C8  03 C3             ADD      EAX,EBX
    0001B0CA  8B F8             MOV      EDI,EAX
    0001B0CC  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16901

    0001B0D0  B8 01000000       MOV      EAX,1
    0001B0D5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16902

    0001B0D8  B8 01000000       MOV      EAX,1
    0001B0DD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16904

    0001B0E0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001B0E7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B0EC  5B                POP      EBX

    LINE     16906

    0001B0ED  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001B0F4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B0F9  5B                POP      EBX

    LINE     16908

    0001B0FA  B8 0A000000       MOV      EAX,10
    0001B0FF  40                INC      EAX
    0001B100  50                PUSH     EAX
    0001B101  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B104  5B                POP      EBX
    0001B105  3B C3             CMP      EAX,EBX
    0001B107  0F 8503000000     JNE      3
    0001B10D  EB                JMP      

    LINE     16916

    0001B10E  B8 01000000       MOV      EAX,1
    0001B113  8B C8             MOV      ECX,EAX
    0001B115  B8 0A000000       MOV      EAX,10
    0001B11A  50                PUSH     EAX
    0001B11B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001B11E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B121  5B                POP      EBX
    0001B122  53                PUSH     EBX
    0001B123  3B C3             CMP      EAX,EBX
    0001B125  0F 8E03000000     JLE      3
    0001B12B  EB                JMP      

    LINE     16918

    0001B12C  B8 01000000       MOV      EAX,1
    0001B131  8B C8             MOV      ECX,EAX
    0001B133  B8 05000000       MOV      EAX,5
    0001B138  50                PUSH     EAX
    0001B139  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001B13C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B13F  5B                POP      EBX
    0001B140  53                PUSH     EBX
    0001B141  3B C3             CMP      EAX,EBX
    0001B143  0F 8E03000000     JLE      3
    0001B149  EB                JMP      

    LINE     16925

    0001B14A  B8 01000000       MOV      EAX,1
    0001B14F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16926

    0001B155  B8 01000000       MOV      EAX,1
    0001B15A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16927

    0001B160  B8 01000000       MOV      EAX,1
    0001B165  8B C8             MOV      ECX,EAX
    0001B167  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B16A  48                DEC      EAX
    0001B16B  BB 0E000000       MOV      EBX,14
    0001B170  F7 E3             MUL      EBX
    0001B172  50                PUSH     EAX
    0001B173  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B176  48                DEC      EAX
    0001B177  BB 02000000       MOV      EBX,2
    0001B17C  F7 E3             MUL      EBX
    0001B17E  5B                POP      EBX
    0001B17F  03 C3             ADD      EAX,EBX
    0001B181  8B F8             MOV      EDI,EAX
    0001B183  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16928

    0001B18A  B8 01000000       MOV      EAX,1
    0001B18F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16929

    0001B195  B8 01000000       MOV      EAX,1
    0001B19A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16931

    0001B1A0  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001B1A7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001B1AC  5B                POP      EBX

    LINE     16933

    0001B1AD  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001B1B4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001B1B9  5B                POP      EBX

    LINE     16935

    0001B1BA  B8 0A000000       MOV      EAX,10
    0001B1BF  40                INC      EAX
    0001B1C0  50                PUSH     EAX
    0001B1C1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B1C4  5B                POP      EBX
    0001B1C5  3B C3             CMP      EAX,EBX
    0001B1C7  0F 8503000000     JNE      3
    0001B1CD  EB                JMP      

    LINE     16942

    0001B1CE  B8 01000000       MOV      EAX,1
    0001B1D3  8B C8             MOV      ECX,EAX
    0001B1D5  B8 0A000000       MOV      EAX,10
    0001B1DA  50                PUSH     EAX
    0001B1DB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001B1DE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B1E1  5B                POP      EBX
    0001B1E2  53                PUSH     EBX
    0001B1E3  3B C3             CMP      EAX,EBX
    0001B1E5  0F 8E03000000     JLE      3
    0001B1EB  EB                JMP      

    LINE     16944

    0001B1EC  B8 01000000       MOV      EAX,1
    0001B1F1  8B C8             MOV      ECX,EAX
    0001B1F3  B8 05000000       MOV      EAX,5
    0001B1F8  50                PUSH     EAX
    0001B1F9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001B1FC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B1FF  5B                POP      EBX
    0001B200  53                PUSH     EBX
    0001B201  3B C3             CMP      EAX,EBX
    0001B203  0F 8E03000000     JLE      3
    0001B209  EB                JMP      

    LINE     16951

    0001B20A  B8 01000000       MOV      EAX,1
    0001B20F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16952

    0001B215  B8 01000000       MOV      EAX,1
    0001B21A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16953

    0001B220  B8 01000000       MOV      EAX,1
    0001B225  8B C8             MOV      ECX,EAX
    0001B227  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B22A  48                DEC      EAX
    0001B22B  BB 0E000000       MOV      EBX,14
    0001B230  F7 E3             MUL      EBX
    0001B232  50                PUSH     EAX
    0001B233  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B236  48                DEC      EAX
    0001B237  BB 02000000       MOV      EBX,2
    0001B23C  F7 E3             MUL      EBX
    0001B23E  5B                POP      EBX
    0001B23F  03 C3             ADD      EAX,EBX
    0001B241  8B F8             MOV      EDI,EAX
    0001B243  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     16954

    0001B24A  B8 01000000       MOV      EAX,1
    0001B24F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16955

    0001B255  B8 01000000       MOV      EAX,1
    0001B25A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     16957

    0001B260  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001B267  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001B26C  5B                POP      EBX

    LINE     16959

    0001B26D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001B274  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001B279  5B                POP      EBX

    LINE     16961

    0001B27A  B8 0A000000       MOV      EAX,10
    0001B27F  40                INC      EAX
    0001B280  50                PUSH     EAX
    0001B281  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B284  5B                POP      EBX
    0001B285  3B C3             CMP      EAX,EBX
    0001B287  0F 8503000000     JNE      3
    0001B28D  EB                JMP      

    LINE     16975

    0001B28E  56                PUSH     ESI
    0001B28F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001B295  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001B29B  FF D1             CALL     ECX                       run_inner_proc
    0001B29D  5E                POP      ESI                       /* restore callers static pointer */

    LINE     16977

    0001B29E  B8 01000000       MOV      EAX,1
    0001B2A3  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     16979

    0001B2A6  B8 01000000       MOV      EAX,1
    0001B2AB  8B C8             MOV      ECX,EAX
    0001B2AD  B8 0A000000       MOV      EAX,10
    0001B2B2  50                PUSH     EAX
    0001B2B3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001B2B6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B2B9  5B                POP      EBX
    0001B2BA  53                PUSH     EBX
    0001B2BB  3B C3             CMP      EAX,EBX
    0001B2BD  0F 8E03000000     JLE      3
    0001B2C3  EB                JMP      

    LINE     16981

    0001B2C4  B8 01000000       MOV      EAX,1
    0001B2C9  8B C8             MOV      ECX,EAX
    0001B2CB  B8 05000000       MOV      EAX,5
    0001B2D0  50                PUSH     EAX
    0001B2D1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001B2D4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B2D7  5B                POP      EBX
    0001B2D8  53                PUSH     EBX
    0001B2D9  3B C3             CMP      EAX,EBX
    0001B2DB  0F 8E03000000     JLE      3
    0001B2E1  EB                JMP      

    LINE     16988

    0001B2E2  B8 01000000       MOV      EAX,1
    0001B2E7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16989

    0001B2EA  B8 01000000       MOV      EAX,1
    0001B2EF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16990

    0001B2F2  B8 01000000       MOV      EAX,1
    0001B2F7  8B C8             MOV      ECX,EAX
    0001B2F9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B2FC  48                DEC      EAX
    0001B2FD  BB 0E000000       MOV      EBX,14
    0001B302  F7 E3             MUL      EBX
    0001B304  50                PUSH     EAX
    0001B305  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B308  48                DEC      EAX
    0001B309  BB 02000000       MOV      EBX,2
    0001B30E  F7 E3             MUL      EBX
    0001B310  5B                POP      EBX
    0001B311  03 C3             ADD      EAX,EBX
    0001B313  8B F8             MOV      EDI,EAX
    0001B315  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     16991

    0001B319  B8 01000000       MOV      EAX,1
    0001B31E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16992

    0001B321  B8 01000000       MOV      EAX,1
    0001B326  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     16994

    0001B329  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001B330  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B335  5B                POP      EBX

    LINE     16996

    0001B336  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001B33D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B342  5B                POP      EBX

    LINE     16998

    0001B343  B8 0A000000       MOV      EAX,10
    0001B348  40                INC      EAX
    0001B349  50                PUSH     EAX
    0001B34A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B34D  5B                POP      EBX
    0001B34E  3B C3             CMP      EAX,EBX
    0001B350  0F 8503000000     JNE      3
    0001B356  EB                JMP      

    LINE     17005

    0001B357  B8 01000000       MOV      EAX,1
    0001B35C  8B C8             MOV      ECX,EAX
    0001B35E  B8 0A000000       MOV      EAX,10
    0001B363  50                PUSH     EAX
    0001B364  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001B367  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B36A  5B                POP      EBX
    0001B36B  53                PUSH     EBX
    0001B36C  3B C3             CMP      EAX,EBX
    0001B36E  0F 8E03000000     JLE      3
    0001B374  EB                JMP      

    LINE     17007

    0001B375  B8 01000000       MOV      EAX,1
    0001B37A  8B C8             MOV      ECX,EAX
    0001B37C  B8 05000000       MOV      EAX,5
    0001B381  50                PUSH     EAX
    0001B382  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001B385  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B388  5B                POP      EBX
    0001B389  53                PUSH     EBX
    0001B38A  3B C3             CMP      EAX,EBX
    0001B38C  0F 8E03000000     JLE      3
    0001B392  EB                JMP      

    LINE     17014

    0001B393  B8 01000000       MOV      EAX,1
    0001B398  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17015

    0001B39B  B8 01000000       MOV      EAX,1
    0001B3A0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17016

    0001B3A3  B8 01000000       MOV      EAX,1
    0001B3A8  8B C8             MOV      ECX,EAX
    0001B3AA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B3AD  48                DEC      EAX
    0001B3AE  BB 0E000000       MOV      EBX,14
    0001B3B3  F7 E3             MUL      EBX
    0001B3B5  50                PUSH     EAX
    0001B3B6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B3B9  48                DEC      EAX
    0001B3BA  BB 02000000       MOV      EBX,2
    0001B3BF  F7 E3             MUL      EBX
    0001B3C1  5B                POP      EBX
    0001B3C2  03 C3             ADD      EAX,EBX
    0001B3C4  8B F8             MOV      EDI,EAX
    0001B3C6  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17017

    0001B3CA  B8 01000000       MOV      EAX,1
    0001B3CF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17018

    0001B3D2  B8 01000000       MOV      EAX,1
    0001B3D7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17020

    0001B3DA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001B3E1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B3E6  5B                POP      EBX

    LINE     17022

    0001B3E7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001B3EE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B3F3  5B                POP      EBX

    LINE     17024

    0001B3F4  B8 0A000000       MOV      EAX,10
    0001B3F9  40                INC      EAX
    0001B3FA  50                PUSH     EAX
    0001B3FB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B3FE  5B                POP      EBX
    0001B3FF  3B C3             CMP      EAX,EBX
    0001B401  0F 8503000000     JNE      3
    0001B407  EB                JMP      

    LINE     17032

    0001B408  B8 01000000       MOV      EAX,1
    0001B40D  8B C8             MOV      ECX,EAX
    0001B40F  B8 0A000000       MOV      EAX,10
    0001B414  50                PUSH     EAX
    0001B415  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001B418  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B41B  5B                POP      EBX
    0001B41C  53                PUSH     EBX
    0001B41D  3B C3             CMP      EAX,EBX
    0001B41F  0F 8E03000000     JLE      3
    0001B425  EB                JMP      

    LINE     17034

    0001B426  B8 01000000       MOV      EAX,1
    0001B42B  8B C8             MOV      ECX,EAX
    0001B42D  B8 05000000       MOV      EAX,5
    0001B432  50                PUSH     EAX
    0001B433  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001B436  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B439  5B                POP      EBX
    0001B43A  53                PUSH     EBX
    0001B43B  3B C3             CMP      EAX,EBX
    0001B43D  0F 8E03000000     JLE      3
    0001B443  EB                JMP      

    LINE     17041

    0001B444  B8 01000000       MOV      EAX,1
    0001B449  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17042

    0001B44F  B8 01000000       MOV      EAX,1
    0001B454  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17043

    0001B45A  B8 01000000       MOV      EAX,1
    0001B45F  8B C8             MOV      ECX,EAX
    0001B461  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B464  48                DEC      EAX
    0001B465  BB 0E000000       MOV      EBX,14
    0001B46A  F7 E3             MUL      EBX
    0001B46C  50                PUSH     EAX
    0001B46D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B470  48                DEC      EAX
    0001B471  BB 02000000       MOV      EBX,2
    0001B476  F7 E3             MUL      EBX
    0001B478  5B                POP      EBX
    0001B479  03 C3             ADD      EAX,EBX
    0001B47B  8B F8             MOV      EDI,EAX
    0001B47D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17044

    0001B484  B8 01000000       MOV      EAX,1
    0001B489  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17045

    0001B48F  B8 01000000       MOV      EAX,1
    0001B494  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17047

    0001B49A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001B4A1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001B4A6  5B                POP      EBX

    LINE     17049

    0001B4A7  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001B4AE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001B4B3  5B                POP      EBX

    LINE     17051

    0001B4B4  B8 0A000000       MOV      EAX,10
    0001B4B9  40                INC      EAX
    0001B4BA  50                PUSH     EAX
    0001B4BB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B4BE  5B                POP      EBX
    0001B4BF  3B C3             CMP      EAX,EBX
    0001B4C1  0F 8503000000     JNE      3
    0001B4C7  EB                JMP      

    LINE     17058

    0001B4C8  B8 01000000       MOV      EAX,1
    0001B4CD  8B C8             MOV      ECX,EAX
    0001B4CF  B8 0A000000       MOV      EAX,10
    0001B4D4  50                PUSH     EAX
    0001B4D5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001B4D8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B4DB  5B                POP      EBX
    0001B4DC  53                PUSH     EBX
    0001B4DD  3B C3             CMP      EAX,EBX
    0001B4DF  0F 8E03000000     JLE      3
    0001B4E5  EB                JMP      

    LINE     17060

    0001B4E6  B8 01000000       MOV      EAX,1
    0001B4EB  8B C8             MOV      ECX,EAX
    0001B4ED  B8 05000000       MOV      EAX,5
    0001B4F2  50                PUSH     EAX
    0001B4F3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001B4F6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B4F9  5B                POP      EBX
    0001B4FA  53                PUSH     EBX
    0001B4FB  3B C3             CMP      EAX,EBX
    0001B4FD  0F 8E03000000     JLE      3
    0001B503  EB                JMP      

    LINE     17067

    0001B504  B8 01000000       MOV      EAX,1
    0001B509  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17068

    0001B50F  B8 01000000       MOV      EAX,1
    0001B514  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17069

    0001B51A  B8 01000000       MOV      EAX,1
    0001B51F  8B C8             MOV      ECX,EAX
    0001B521  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B524  48                DEC      EAX
    0001B525  BB 0E000000       MOV      EBX,14
    0001B52A  F7 E3             MUL      EBX
    0001B52C  50                PUSH     EAX
    0001B52D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B530  48                DEC      EAX
    0001B531  BB 02000000       MOV      EBX,2
    0001B536  F7 E3             MUL      EBX
    0001B538  5B                POP      EBX
    0001B539  03 C3             ADD      EAX,EBX
    0001B53B  8B F8             MOV      EDI,EAX
    0001B53D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17070

    0001B544  B8 01000000       MOV      EAX,1
    0001B549  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17071

    0001B54F  B8 01000000       MOV      EAX,1
    0001B554  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17073

    0001B55A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001B561  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001B566  5B                POP      EBX

    LINE     17075

    0001B567  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001B56E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001B573  5B                POP      EBX

    LINE     17077

    0001B574  B8 0A000000       MOV      EAX,10
    0001B579  40                INC      EAX
    0001B57A  50                PUSH     EAX
    0001B57B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B57E  5B                POP      EBX
    0001B57F  3B C3             CMP      EAX,EBX
    0001B581  0F 8503000000     JNE      3
    0001B587  EB                JMP      

    LINE     17091

    0001B588  56                PUSH     ESI
    0001B589  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001B58F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001B595  FF D1             CALL     ECX                       run_inner_proc
    0001B597  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17093

    0001B598  B8 01000000       MOV      EAX,1
    0001B59D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17095

    0001B5A0  B8 01000000       MOV      EAX,1
    0001B5A5  8B C8             MOV      ECX,EAX
    0001B5A7  B8 0A000000       MOV      EAX,10
    0001B5AC  50                PUSH     EAX
    0001B5AD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001B5B0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B5B3  5B                POP      EBX
    0001B5B4  53                PUSH     EBX
    0001B5B5  3B C3             CMP      EAX,EBX
    0001B5B7  0F 8E03000000     JLE      3
    0001B5BD  EB                JMP      

    LINE     17097

    0001B5BE  B8 01000000       MOV      EAX,1
    0001B5C3  8B C8             MOV      ECX,EAX
    0001B5C5  B8 05000000       MOV      EAX,5
    0001B5CA  50                PUSH     EAX
    0001B5CB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001B5CE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B5D1  5B                POP      EBX
    0001B5D2  53                PUSH     EBX
    0001B5D3  3B C3             CMP      EAX,EBX
    0001B5D5  0F 8E03000000     JLE      3
    0001B5DB  EB                JMP      

    LINE     17104

    0001B5DC  B8 01000000       MOV      EAX,1
    0001B5E1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17105

    0001B5E4  B8 01000000       MOV      EAX,1
    0001B5E9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17106

    0001B5EC  B8 01000000       MOV      EAX,1
    0001B5F1  8B C8             MOV      ECX,EAX
    0001B5F3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B5F6  48                DEC      EAX
    0001B5F7  BB 0E000000       MOV      EBX,14
    0001B5FC  F7 E3             MUL      EBX
    0001B5FE  50                PUSH     EAX
    0001B5FF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B602  48                DEC      EAX
    0001B603  BB 02000000       MOV      EBX,2
    0001B608  F7 E3             MUL      EBX
    0001B60A  5B                POP      EBX
    0001B60B  03 C3             ADD      EAX,EBX
    0001B60D  8B F8             MOV      EDI,EAX
    0001B60F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17107

    0001B613  B8 01000000       MOV      EAX,1
    0001B618  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17108

    0001B61B  B8 01000000       MOV      EAX,1
    0001B620  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17110

    0001B623  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001B62A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B62F  5B                POP      EBX

    LINE     17112

    0001B630  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001B637  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B63C  5B                POP      EBX

    LINE     17114

    0001B63D  B8 0A000000       MOV      EAX,10
    0001B642  40                INC      EAX
    0001B643  50                PUSH     EAX
    0001B644  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B647  5B                POP      EBX
    0001B648  3B C3             CMP      EAX,EBX
    0001B64A  0F 8503000000     JNE      3
    0001B650  EB                JMP      

    LINE     17121

    0001B651  B8 01000000       MOV      EAX,1
    0001B656  8B C8             MOV      ECX,EAX
    0001B658  B8 0A000000       MOV      EAX,10
    0001B65D  50                PUSH     EAX
    0001B65E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001B661  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B664  5B                POP      EBX
    0001B665  53                PUSH     EBX
    0001B666  3B C3             CMP      EAX,EBX
    0001B668  0F 8E03000000     JLE      3
    0001B66E  EB                JMP      

    LINE     17123

    0001B66F  B8 01000000       MOV      EAX,1
    0001B674  8B C8             MOV      ECX,EAX
    0001B676  B8 05000000       MOV      EAX,5
    0001B67B  50                PUSH     EAX
    0001B67C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001B67F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B682  5B                POP      EBX
    0001B683  53                PUSH     EBX
    0001B684  3B C3             CMP      EAX,EBX
    0001B686  0F 8E03000000     JLE      3
    0001B68C  EB                JMP      

    LINE     17130

    0001B68D  B8 01000000       MOV      EAX,1
    0001B692  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17131

    0001B695  B8 01000000       MOV      EAX,1
    0001B69A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17132

    0001B69D  B8 01000000       MOV      EAX,1
    0001B6A2  8B C8             MOV      ECX,EAX
    0001B6A4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B6A7  48                DEC      EAX
    0001B6A8  BB 0E000000       MOV      EBX,14
    0001B6AD  F7 E3             MUL      EBX
    0001B6AF  50                PUSH     EAX
    0001B6B0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B6B3  48                DEC      EAX
    0001B6B4  BB 02000000       MOV      EBX,2
    0001B6B9  F7 E3             MUL      EBX
    0001B6BB  5B                POP      EBX
    0001B6BC  03 C3             ADD      EAX,EBX
    0001B6BE  8B F8             MOV      EDI,EAX
    0001B6C0  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17133

    0001B6C4  B8 01000000       MOV      EAX,1
    0001B6C9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17134

    0001B6CC  B8 01000000       MOV      EAX,1
    0001B6D1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17136

    0001B6D4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001B6DB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B6E0  5B                POP      EBX

    LINE     17138

    0001B6E1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001B6E8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B6ED  5B                POP      EBX

    LINE     17140

    0001B6EE  B8 0A000000       MOV      EAX,10
    0001B6F3  40                INC      EAX
    0001B6F4  50                PUSH     EAX
    0001B6F5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B6F8  5B                POP      EBX
    0001B6F9  3B C3             CMP      EAX,EBX
    0001B6FB  0F 8503000000     JNE      3
    0001B701  EB                JMP      

    LINE     17148

    0001B702  B8 01000000       MOV      EAX,1
    0001B707  8B C8             MOV      ECX,EAX
    0001B709  B8 0A000000       MOV      EAX,10
    0001B70E  50                PUSH     EAX
    0001B70F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001B712  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B715  5B                POP      EBX
    0001B716  53                PUSH     EBX
    0001B717  3B C3             CMP      EAX,EBX
    0001B719  0F 8E03000000     JLE      3
    0001B71F  EB                JMP      

    LINE     17150

    0001B720  B8 01000000       MOV      EAX,1
    0001B725  8B C8             MOV      ECX,EAX
    0001B727  B8 05000000       MOV      EAX,5
    0001B72C  50                PUSH     EAX
    0001B72D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001B730  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B733  5B                POP      EBX
    0001B734  53                PUSH     EBX
    0001B735  3B C3             CMP      EAX,EBX
    0001B737  0F 8E03000000     JLE      3
    0001B73D  EB                JMP      

    LINE     17157

    0001B73E  B8 01000000       MOV      EAX,1
    0001B743  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17158

    0001B749  B8 01000000       MOV      EAX,1
    0001B74E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17159

    0001B754  B8 01000000       MOV      EAX,1
    0001B759  8B C8             MOV      ECX,EAX
    0001B75B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B75E  48                DEC      EAX
    0001B75F  BB 0E000000       MOV      EBX,14
    0001B764  F7 E3             MUL      EBX
    0001B766  50                PUSH     EAX
    0001B767  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B76A  48                DEC      EAX
    0001B76B  BB 02000000       MOV      EBX,2
    0001B770  F7 E3             MUL      EBX
    0001B772  5B                POP      EBX
    0001B773  03 C3             ADD      EAX,EBX
    0001B775  8B F8             MOV      EDI,EAX
    0001B777  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17160

    0001B77E  B8 01000000       MOV      EAX,1
    0001B783  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17161

    0001B789  B8 01000000       MOV      EAX,1
    0001B78E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17163

    0001B794  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001B79B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001B7A0  5B                POP      EBX

    LINE     17165

    0001B7A1  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001B7A8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001B7AD  5B                POP      EBX

    LINE     17167

    0001B7AE  B8 0A000000       MOV      EAX,10
    0001B7B3  40                INC      EAX
    0001B7B4  50                PUSH     EAX
    0001B7B5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B7B8  5B                POP      EBX
    0001B7B9  3B C3             CMP      EAX,EBX
    0001B7BB  0F 8503000000     JNE      3
    0001B7C1  EB                JMP      

    LINE     17174

    0001B7C2  B8 01000000       MOV      EAX,1
    0001B7C7  8B C8             MOV      ECX,EAX
    0001B7C9  B8 0A000000       MOV      EAX,10
    0001B7CE  50                PUSH     EAX
    0001B7CF  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001B7D2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B7D5  5B                POP      EBX
    0001B7D6  53                PUSH     EBX
    0001B7D7  3B C3             CMP      EAX,EBX
    0001B7D9  0F 8E03000000     JLE      3
    0001B7DF  EB                JMP      

    LINE     17176

    0001B7E0  B8 01000000       MOV      EAX,1
    0001B7E5  8B C8             MOV      ECX,EAX
    0001B7E7  B8 05000000       MOV      EAX,5
    0001B7EC  50                PUSH     EAX
    0001B7ED  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001B7F0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B7F3  5B                POP      EBX
    0001B7F4  53                PUSH     EBX
    0001B7F5  3B C3             CMP      EAX,EBX
    0001B7F7  0F 8E03000000     JLE      3
    0001B7FD  EB                JMP      

    LINE     17183

    0001B7FE  B8 01000000       MOV      EAX,1
    0001B803  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17184

    0001B809  B8 01000000       MOV      EAX,1
    0001B80E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17185

    0001B814  B8 01000000       MOV      EAX,1
    0001B819  8B C8             MOV      ECX,EAX
    0001B81B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B81E  48                DEC      EAX
    0001B81F  BB 0E000000       MOV      EBX,14
    0001B824  F7 E3             MUL      EBX
    0001B826  50                PUSH     EAX
    0001B827  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B82A  48                DEC      EAX
    0001B82B  BB 02000000       MOV      EBX,2
    0001B830  F7 E3             MUL      EBX
    0001B832  5B                POP      EBX
    0001B833  03 C3             ADD      EAX,EBX
    0001B835  8B F8             MOV      EDI,EAX
    0001B837  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17186

    0001B83E  B8 01000000       MOV      EAX,1
    0001B843  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17187

    0001B849  B8 01000000       MOV      EAX,1
    0001B84E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17189

    0001B854  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001B85B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001B860  5B                POP      EBX

    LINE     17191

    0001B861  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001B868  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001B86D  5B                POP      EBX

    LINE     17193

    0001B86E  B8 0A000000       MOV      EAX,10
    0001B873  40                INC      EAX
    0001B874  50                PUSH     EAX
    0001B875  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B878  5B                POP      EBX
    0001B879  3B C3             CMP      EAX,EBX
    0001B87B  0F 8503000000     JNE      3
    0001B881  EB                JMP      

    LINE     17207

    0001B882  56                PUSH     ESI
    0001B883  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001B889  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001B88F  FF D1             CALL     ECX                       run_inner_proc
    0001B891  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17209

    0001B892  B8 01000000       MOV      EAX,1
    0001B897  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17211

    0001B89A  B8 01000000       MOV      EAX,1
    0001B89F  8B C8             MOV      ECX,EAX
    0001B8A1  B8 0A000000       MOV      EAX,10
    0001B8A6  50                PUSH     EAX
    0001B8A7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001B8AA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B8AD  5B                POP      EBX
    0001B8AE  53                PUSH     EBX
    0001B8AF  3B C3             CMP      EAX,EBX
    0001B8B1  0F 8E03000000     JLE      3
    0001B8B7  EB                JMP      

    LINE     17213

    0001B8B8  B8 01000000       MOV      EAX,1
    0001B8BD  8B C8             MOV      ECX,EAX
    0001B8BF  B8 05000000       MOV      EAX,5
    0001B8C4  50                PUSH     EAX
    0001B8C5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001B8C8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B8CB  5B                POP      EBX
    0001B8CC  53                PUSH     EBX
    0001B8CD  3B C3             CMP      EAX,EBX
    0001B8CF  0F 8E03000000     JLE      3
    0001B8D5  EB                JMP      

    LINE     17220

    0001B8D6  B8 01000000       MOV      EAX,1
    0001B8DB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17221

    0001B8DE  B8 01000000       MOV      EAX,1
    0001B8E3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17222

    0001B8E6  B8 01000000       MOV      EAX,1
    0001B8EB  8B C8             MOV      ECX,EAX
    0001B8ED  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B8F0  48                DEC      EAX
    0001B8F1  BB 0E000000       MOV      EBX,14
    0001B8F6  F7 E3             MUL      EBX
    0001B8F8  50                PUSH     EAX
    0001B8F9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001B8FC  48                DEC      EAX
    0001B8FD  BB 02000000       MOV      EBX,2
    0001B902  F7 E3             MUL      EBX
    0001B904  5B                POP      EBX
    0001B905  03 C3             ADD      EAX,EBX
    0001B907  8B F8             MOV      EDI,EAX
    0001B909  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17223

    0001B90D  B8 01000000       MOV      EAX,1
    0001B912  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17224

    0001B915  B8 01000000       MOV      EAX,1
    0001B91A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17226

    0001B91D  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001B924  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B929  5B                POP      EBX

    LINE     17228

    0001B92A  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001B931  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B936  5B                POP      EBX

    LINE     17230

    0001B937  B8 0A000000       MOV      EAX,10
    0001B93C  40                INC      EAX
    0001B93D  50                PUSH     EAX
    0001B93E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B941  5B                POP      EBX
    0001B942  3B C3             CMP      EAX,EBX
    0001B944  0F 8503000000     JNE      3
    0001B94A  EB                JMP      

    LINE     17237

    0001B94B  B8 01000000       MOV      EAX,1
    0001B950  8B C8             MOV      ECX,EAX
    0001B952  B8 0A000000       MOV      EAX,10
    0001B957  50                PUSH     EAX
    0001B958  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001B95B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B95E  5B                POP      EBX
    0001B95F  53                PUSH     EBX
    0001B960  3B C3             CMP      EAX,EBX
    0001B962  0F 8E03000000     JLE      3
    0001B968  EB                JMP      

    LINE     17239

    0001B969  B8 01000000       MOV      EAX,1
    0001B96E  8B C8             MOV      ECX,EAX
    0001B970  B8 05000000       MOV      EAX,5
    0001B975  50                PUSH     EAX
    0001B976  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001B979  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B97C  5B                POP      EBX
    0001B97D  53                PUSH     EBX
    0001B97E  3B C3             CMP      EAX,EBX
    0001B980  0F 8E03000000     JLE      3
    0001B986  EB                JMP      

    LINE     17246

    0001B987  B8 01000000       MOV      EAX,1
    0001B98C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17247

    0001B98F  B8 01000000       MOV      EAX,1
    0001B994  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17248

    0001B997  B8 01000000       MOV      EAX,1
    0001B99C  8B C8             MOV      ECX,EAX
    0001B99E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001B9A1  48                DEC      EAX
    0001B9A2  BB 0E000000       MOV      EBX,14
    0001B9A7  F7 E3             MUL      EBX
    0001B9A9  50                PUSH     EAX
    0001B9AA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001B9AD  48                DEC      EAX
    0001B9AE  BB 02000000       MOV      EBX,2
    0001B9B3  F7 E3             MUL      EBX
    0001B9B5  5B                POP      EBX
    0001B9B6  03 C3             ADD      EAX,EBX
    0001B9B8  8B F8             MOV      EDI,EAX
    0001B9BA  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17249

    0001B9BE  B8 01000000       MOV      EAX,1
    0001B9C3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17250

    0001B9C6  B8 01000000       MOV      EAX,1
    0001B9CB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17252

    0001B9CE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001B9D5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001B9DA  5B                POP      EBX

    LINE     17254

    0001B9DB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001B9E2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001B9E7  5B                POP      EBX

    LINE     17256

    0001B9E8  B8 0A000000       MOV      EAX,10
    0001B9ED  40                INC      EAX
    0001B9EE  50                PUSH     EAX
    0001B9EF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001B9F2  5B                POP      EBX
    0001B9F3  3B C3             CMP      EAX,EBX
    0001B9F5  0F 8503000000     JNE      3
    0001B9FB  EB                JMP      

    LINE     17264

    0001B9FC  B8 01000000       MOV      EAX,1
    0001BA01  8B C8             MOV      ECX,EAX
    0001BA03  B8 0A000000       MOV      EAX,10
    0001BA08  50                PUSH     EAX
    0001BA09  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001BA0C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BA0F  5B                POP      EBX
    0001BA10  53                PUSH     EBX
    0001BA11  3B C3             CMP      EAX,EBX
    0001BA13  0F 8E03000000     JLE      3
    0001BA19  EB                JMP      

    LINE     17266

    0001BA1A  B8 01000000       MOV      EAX,1
    0001BA1F  8B C8             MOV      ECX,EAX
    0001BA21  B8 05000000       MOV      EAX,5
    0001BA26  50                PUSH     EAX
    0001BA27  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001BA2A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BA2D  5B                POP      EBX
    0001BA2E  53                PUSH     EBX
    0001BA2F  3B C3             CMP      EAX,EBX
    0001BA31  0F 8E03000000     JLE      3
    0001BA37  EB                JMP      

    LINE     17273

    0001BA38  B8 01000000       MOV      EAX,1
    0001BA3D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17274

    0001BA43  B8 01000000       MOV      EAX,1
    0001BA48  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17275

    0001BA4E  B8 01000000       MOV      EAX,1
    0001BA53  8B C8             MOV      ECX,EAX
    0001BA55  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BA58  48                DEC      EAX
    0001BA59  BB 0E000000       MOV      EBX,14
    0001BA5E  F7 E3             MUL      EBX
    0001BA60  50                PUSH     EAX
    0001BA61  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BA64  48                DEC      EAX
    0001BA65  BB 02000000       MOV      EBX,2
    0001BA6A  F7 E3             MUL      EBX
    0001BA6C  5B                POP      EBX
    0001BA6D  03 C3             ADD      EAX,EBX
    0001BA6F  8B F8             MOV      EDI,EAX
    0001BA71  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17276

    0001BA78  B8 01000000       MOV      EAX,1
    0001BA7D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17277

    0001BA83  B8 01000000       MOV      EAX,1
    0001BA88  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17279

    0001BA8E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001BA95  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001BA9A  5B                POP      EBX

    LINE     17281

    0001BA9B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001BAA2  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001BAA7  5B                POP      EBX

    LINE     17283

    0001BAA8  B8 0A000000       MOV      EAX,10
    0001BAAD  40                INC      EAX
    0001BAAE  50                PUSH     EAX
    0001BAAF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BAB2  5B                POP      EBX
    0001BAB3  3B C3             CMP      EAX,EBX
    0001BAB5  0F 8503000000     JNE      3
    0001BABB  EB                JMP      

    LINE     17290

    0001BABC  B8 01000000       MOV      EAX,1
    0001BAC1  8B C8             MOV      ECX,EAX
    0001BAC3  B8 0A000000       MOV      EAX,10
    0001BAC8  50                PUSH     EAX
    0001BAC9  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001BACC  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BACF  5B                POP      EBX
    0001BAD0  53                PUSH     EBX
    0001BAD1  3B C3             CMP      EAX,EBX
    0001BAD3  0F 8E03000000     JLE      3
    0001BAD9  EB                JMP      

    LINE     17292

    0001BADA  B8 01000000       MOV      EAX,1
    0001BADF  8B C8             MOV      ECX,EAX
    0001BAE1  B8 05000000       MOV      EAX,5
    0001BAE6  50                PUSH     EAX
    0001BAE7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001BAEA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BAED  5B                POP      EBX
    0001BAEE  53                PUSH     EBX
    0001BAEF  3B C3             CMP      EAX,EBX
    0001BAF1  0F 8E03000000     JLE      3
    0001BAF7  EB                JMP      

    LINE     17299

    0001BAF8  B8 01000000       MOV      EAX,1
    0001BAFD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17300

    0001BB03  B8 01000000       MOV      EAX,1
    0001BB08  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17301

    0001BB0E  B8 01000000       MOV      EAX,1
    0001BB13  8B C8             MOV      ECX,EAX
    0001BB15  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BB18  48                DEC      EAX
    0001BB19  BB 0E000000       MOV      EBX,14
    0001BB1E  F7 E3             MUL      EBX
    0001BB20  50                PUSH     EAX
    0001BB21  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BB24  48                DEC      EAX
    0001BB25  BB 02000000       MOV      EBX,2
    0001BB2A  F7 E3             MUL      EBX
    0001BB2C  5B                POP      EBX
    0001BB2D  03 C3             ADD      EAX,EBX
    0001BB2F  8B F8             MOV      EDI,EAX
    0001BB31  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17302

    0001BB38  B8 01000000       MOV      EAX,1
    0001BB3D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17303

    0001BB43  B8 01000000       MOV      EAX,1
    0001BB48  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17305

    0001BB4E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001BB55  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001BB5A  5B                POP      EBX

    LINE     17307

    0001BB5B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001BB62  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001BB67  5B                POP      EBX

    LINE     17309

    0001BB68  B8 0A000000       MOV      EAX,10
    0001BB6D  40                INC      EAX
    0001BB6E  50                PUSH     EAX
    0001BB6F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BB72  5B                POP      EBX
    0001BB73  3B C3             CMP      EAX,EBX
    0001BB75  0F 8503000000     JNE      3
    0001BB7B  EB                JMP      

    LINE     17323

    0001BB7C  56                PUSH     ESI
    0001BB7D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001BB83  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001BB89  FF D1             CALL     ECX                       run_inner_proc
    0001BB8B  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17325

    0001BB8C  B8 01000000       MOV      EAX,1
    0001BB91  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17327

    0001BB94  B8 01000000       MOV      EAX,1
    0001BB99  8B C8             MOV      ECX,EAX
    0001BB9B  B8 0A000000       MOV      EAX,10
    0001BBA0  50                PUSH     EAX
    0001BBA1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001BBA4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BBA7  5B                POP      EBX
    0001BBA8  53                PUSH     EBX
    0001BBA9  3B C3             CMP      EAX,EBX
    0001BBAB  0F 8E03000000     JLE      3
    0001BBB1  EB                JMP      

    LINE     17329

    0001BBB2  B8 01000000       MOV      EAX,1
    0001BBB7  8B C8             MOV      ECX,EAX
    0001BBB9  B8 05000000       MOV      EAX,5
    0001BBBE  50                PUSH     EAX
    0001BBBF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001BBC2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BBC5  5B                POP      EBX
    0001BBC6  53                PUSH     EBX
    0001BBC7  3B C3             CMP      EAX,EBX
    0001BBC9  0F 8E03000000     JLE      3
    0001BBCF  EB                JMP      

    LINE     17336

    0001BBD0  B8 01000000       MOV      EAX,1
    0001BBD5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17337

    0001BBD8  B8 01000000       MOV      EAX,1
    0001BBDD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17338

    0001BBE0  B8 01000000       MOV      EAX,1
    0001BBE5  8B C8             MOV      ECX,EAX
    0001BBE7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BBEA  48                DEC      EAX
    0001BBEB  BB 0E000000       MOV      EBX,14
    0001BBF0  F7 E3             MUL      EBX
    0001BBF2  50                PUSH     EAX
    0001BBF3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BBF6  48                DEC      EAX
    0001BBF7  BB 02000000       MOV      EBX,2
    0001BBFC  F7 E3             MUL      EBX
    0001BBFE  5B                POP      EBX
    0001BBFF  03 C3             ADD      EAX,EBX
    0001BC01  8B F8             MOV      EDI,EAX
    0001BC03  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17339

    0001BC07  B8 01000000       MOV      EAX,1
    0001BC0C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17340

    0001BC0F  B8 01000000       MOV      EAX,1
    0001BC14  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17342

    0001BC17  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001BC1E  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001BC23  5B                POP      EBX

    LINE     17344

    0001BC24  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001BC2B  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001BC30  5B                POP      EBX

    LINE     17346

    0001BC31  B8 0A000000       MOV      EAX,10
    0001BC36  40                INC      EAX
    0001BC37  50                PUSH     EAX
    0001BC38  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BC3B  5B                POP      EBX
    0001BC3C  3B C3             CMP      EAX,EBX
    0001BC3E  0F 8503000000     JNE      3
    0001BC44  EB                JMP      

    LINE     17353

    0001BC45  B8 01000000       MOV      EAX,1
    0001BC4A  8B C8             MOV      ECX,EAX
    0001BC4C  B8 0A000000       MOV      EAX,10
    0001BC51  50                PUSH     EAX
    0001BC52  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001BC55  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BC58  5B                POP      EBX
    0001BC59  53                PUSH     EBX
    0001BC5A  3B C3             CMP      EAX,EBX
    0001BC5C  0F 8E03000000     JLE      3
    0001BC62  EB                JMP      

    LINE     17355

    0001BC63  B8 01000000       MOV      EAX,1
    0001BC68  8B C8             MOV      ECX,EAX
    0001BC6A  B8 05000000       MOV      EAX,5
    0001BC6F  50                PUSH     EAX
    0001BC70  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001BC73  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BC76  5B                POP      EBX
    0001BC77  53                PUSH     EBX
    0001BC78  3B C3             CMP      EAX,EBX
    0001BC7A  0F 8E03000000     JLE      3
    0001BC80  EB                JMP      

    LINE     17362

    0001BC81  B8 01000000       MOV      EAX,1
    0001BC86  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17363

    0001BC89  B8 01000000       MOV      EAX,1
    0001BC8E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17364

    0001BC91  B8 01000000       MOV      EAX,1
    0001BC96  8B C8             MOV      ECX,EAX
    0001BC98  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BC9B  48                DEC      EAX
    0001BC9C  BB 0E000000       MOV      EBX,14
    0001BCA1  F7 E3             MUL      EBX
    0001BCA3  50                PUSH     EAX
    0001BCA4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BCA7  48                DEC      EAX
    0001BCA8  BB 02000000       MOV      EBX,2
    0001BCAD  F7 E3             MUL      EBX
    0001BCAF  5B                POP      EBX
    0001BCB0  03 C3             ADD      EAX,EBX
    0001BCB2  8B F8             MOV      EDI,EAX
    0001BCB4  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17365

    0001BCB8  B8 01000000       MOV      EAX,1
    0001BCBD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17366

    0001BCC0  B8 01000000       MOV      EAX,1
    0001BCC5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17368

    0001BCC8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001BCCF  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001BCD4  5B                POP      EBX

    LINE     17370

    0001BCD5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001BCDC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001BCE1  5B                POP      EBX

    LINE     17372

    0001BCE2  B8 0A000000       MOV      EAX,10
    0001BCE7  40                INC      EAX
    0001BCE8  50                PUSH     EAX
    0001BCE9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BCEC  5B                POP      EBX
    0001BCED  3B C3             CMP      EAX,EBX
    0001BCEF  0F 8503000000     JNE      3
    0001BCF5  EB                JMP      

    LINE     17380

    0001BCF6  B8 01000000       MOV      EAX,1
    0001BCFB  8B C8             MOV      ECX,EAX
    0001BCFD  B8 0A000000       MOV      EAX,10
    0001BD02  50                PUSH     EAX
    0001BD03  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001BD06  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BD09  5B                POP      EBX
    0001BD0A  53                PUSH     EBX
    0001BD0B  3B C3             CMP      EAX,EBX
    0001BD0D  0F 8E03000000     JLE      3
    0001BD13  EB                JMP      

    LINE     17382

    0001BD14  B8 01000000       MOV      EAX,1
    0001BD19  8B C8             MOV      ECX,EAX
    0001BD1B  B8 05000000       MOV      EAX,5
    0001BD20  50                PUSH     EAX
    0001BD21  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001BD24  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BD27  5B                POP      EBX
    0001BD28  53                PUSH     EBX
    0001BD29  3B C3             CMP      EAX,EBX
    0001BD2B  0F 8E03000000     JLE      3
    0001BD31  EB                JMP      

    LINE     17389

    0001BD32  B8 01000000       MOV      EAX,1
    0001BD37  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17390

    0001BD3D  B8 01000000       MOV      EAX,1
    0001BD42  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17391

    0001BD48  B8 01000000       MOV      EAX,1
    0001BD4D  8B C8             MOV      ECX,EAX
    0001BD4F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BD52  48                DEC      EAX
    0001BD53  BB 0E000000       MOV      EBX,14
    0001BD58  F7 E3             MUL      EBX
    0001BD5A  50                PUSH     EAX
    0001BD5B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BD5E  48                DEC      EAX
    0001BD5F  BB 02000000       MOV      EBX,2
    0001BD64  F7 E3             MUL      EBX
    0001BD66  5B                POP      EBX
    0001BD67  03 C3             ADD      EAX,EBX
    0001BD69  8B F8             MOV      EDI,EAX
    0001BD6B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17392

    0001BD72  B8 01000000       MOV      EAX,1
    0001BD77  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17393

    0001BD7D  B8 01000000       MOV      EAX,1
    0001BD82  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17395

    0001BD88  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001BD8F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001BD94  5B                POP      EBX

    LINE     17397

    0001BD95  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001BD9C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001BDA1  5B                POP      EBX

    LINE     17399

    0001BDA2  B8 0A000000       MOV      EAX,10
    0001BDA7  40                INC      EAX
    0001BDA8  50                PUSH     EAX
    0001BDA9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BDAC  5B                POP      EBX
    0001BDAD  3B C3             CMP      EAX,EBX
    0001BDAF  0F 8503000000     JNE      3
    0001BDB5  EB                JMP      

    LINE     17406

    0001BDB6  B8 01000000       MOV      EAX,1
    0001BDBB  8B C8             MOV      ECX,EAX
    0001BDBD  B8 0A000000       MOV      EAX,10
    0001BDC2  50                PUSH     EAX
    0001BDC3  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001BDC6  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BDC9  5B                POP      EBX
    0001BDCA  53                PUSH     EBX
    0001BDCB  3B C3             CMP      EAX,EBX
    0001BDCD  0F 8E03000000     JLE      3
    0001BDD3  EB                JMP      

    LINE     17408

    0001BDD4  B8 01000000       MOV      EAX,1
    0001BDD9  8B C8             MOV      ECX,EAX
    0001BDDB  B8 05000000       MOV      EAX,5
    0001BDE0  50                PUSH     EAX
    0001BDE1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001BDE4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BDE7  5B                POP      EBX
    0001BDE8  53                PUSH     EBX
    0001BDE9  3B C3             CMP      EAX,EBX
    0001BDEB  0F 8E03000000     JLE      3
    0001BDF1  EB                JMP      

    LINE     17415

    0001BDF2  B8 01000000       MOV      EAX,1
    0001BDF7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17416

    0001BDFD  B8 01000000       MOV      EAX,1
    0001BE02  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17417

    0001BE08  B8 01000000       MOV      EAX,1
    0001BE0D  8B C8             MOV      ECX,EAX
    0001BE0F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BE12  48                DEC      EAX
    0001BE13  BB 0E000000       MOV      EBX,14
    0001BE18  F7 E3             MUL      EBX
    0001BE1A  50                PUSH     EAX
    0001BE1B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BE1E  48                DEC      EAX
    0001BE1F  BB 02000000       MOV      EBX,2
    0001BE24  F7 E3             MUL      EBX
    0001BE26  5B                POP      EBX
    0001BE27  03 C3             ADD      EAX,EBX
    0001BE29  8B F8             MOV      EDI,EAX
    0001BE2B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17418

    0001BE32  B8 01000000       MOV      EAX,1
    0001BE37  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17419

    0001BE3D  B8 01000000       MOV      EAX,1
    0001BE42  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17421

    0001BE48  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001BE4F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001BE54  5B                POP      EBX

    LINE     17423

    0001BE55  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001BE5C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001BE61  5B                POP      EBX

    LINE     17425

    0001BE62  B8 0A000000       MOV      EAX,10
    0001BE67  40                INC      EAX
    0001BE68  50                PUSH     EAX
    0001BE69  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BE6C  5B                POP      EBX
    0001BE6D  3B C3             CMP      EAX,EBX
    0001BE6F  0F 8503000000     JNE      3
    0001BE75  EB                JMP      

    LINE     17439

    0001BE76  56                PUSH     ESI
    0001BE77  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001BE7D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001BE83  FF D1             CALL     ECX                       run_inner_proc
    0001BE85  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17441

    0001BE86  B8 01000000       MOV      EAX,1
    0001BE8B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17443

    0001BE8E  B8 01000000       MOV      EAX,1
    0001BE93  8B C8             MOV      ECX,EAX
    0001BE95  B8 0A000000       MOV      EAX,10
    0001BE9A  50                PUSH     EAX
    0001BE9B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001BE9E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BEA1  5B                POP      EBX
    0001BEA2  53                PUSH     EBX
    0001BEA3  3B C3             CMP      EAX,EBX
    0001BEA5  0F 8E03000000     JLE      3
    0001BEAB  EB                JMP      

    LINE     17445

    0001BEAC  B8 01000000       MOV      EAX,1
    0001BEB1  8B C8             MOV      ECX,EAX
    0001BEB3  B8 05000000       MOV      EAX,5
    0001BEB8  50                PUSH     EAX
    0001BEB9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001BEBC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BEBF  5B                POP      EBX
    0001BEC0  53                PUSH     EBX
    0001BEC1  3B C3             CMP      EAX,EBX
    0001BEC3  0F 8E03000000     JLE      3
    0001BEC9  EB                JMP      

    LINE     17452

    0001BECA  B8 01000000       MOV      EAX,1
    0001BECF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17453

    0001BED2  B8 01000000       MOV      EAX,1
    0001BED7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17454

    0001BEDA  B8 01000000       MOV      EAX,1
    0001BEDF  8B C8             MOV      ECX,EAX
    0001BEE1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BEE4  48                DEC      EAX
    0001BEE5  BB 0E000000       MOV      EBX,14
    0001BEEA  F7 E3             MUL      EBX
    0001BEEC  50                PUSH     EAX
    0001BEED  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001BEF0  48                DEC      EAX
    0001BEF1  BB 02000000       MOV      EBX,2
    0001BEF6  F7 E3             MUL      EBX
    0001BEF8  5B                POP      EBX
    0001BEF9  03 C3             ADD      EAX,EBX
    0001BEFB  8B F8             MOV      EDI,EAX
    0001BEFD  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17455

    0001BF01  B8 01000000       MOV      EAX,1
    0001BF06  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17456

    0001BF09  B8 01000000       MOV      EAX,1
    0001BF0E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17458

    0001BF11  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001BF18  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001BF1D  5B                POP      EBX

    LINE     17460

    0001BF1E  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001BF25  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001BF2A  5B                POP      EBX

    LINE     17462

    0001BF2B  B8 0A000000       MOV      EAX,10
    0001BF30  40                INC      EAX
    0001BF31  50                PUSH     EAX
    0001BF32  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BF35  5B                POP      EBX
    0001BF36  3B C3             CMP      EAX,EBX
    0001BF38  0F 8503000000     JNE      3
    0001BF3E  EB                JMP      

    LINE     17469

    0001BF3F  B8 01000000       MOV      EAX,1
    0001BF44  8B C8             MOV      ECX,EAX
    0001BF46  B8 0A000000       MOV      EAX,10
    0001BF4B  50                PUSH     EAX
    0001BF4C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001BF4F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BF52  5B                POP      EBX
    0001BF53  53                PUSH     EBX
    0001BF54  3B C3             CMP      EAX,EBX
    0001BF56  0F 8E03000000     JLE      3
    0001BF5C  EB                JMP      

    LINE     17471

    0001BF5D  B8 01000000       MOV      EAX,1
    0001BF62  8B C8             MOV      ECX,EAX
    0001BF64  B8 05000000       MOV      EAX,5
    0001BF69  50                PUSH     EAX
    0001BF6A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001BF6D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BF70  5B                POP      EBX
    0001BF71  53                PUSH     EBX
    0001BF72  3B C3             CMP      EAX,EBX
    0001BF74  0F 8E03000000     JLE      3
    0001BF7A  EB                JMP      

    LINE     17478

    0001BF7B  B8 01000000       MOV      EAX,1
    0001BF80  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17479

    0001BF83  B8 01000000       MOV      EAX,1
    0001BF88  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17480

    0001BF8B  B8 01000000       MOV      EAX,1
    0001BF90  8B C8             MOV      ECX,EAX
    0001BF92  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001BF95  48                DEC      EAX
    0001BF96  BB 0E000000       MOV      EBX,14
    0001BF9B  F7 E3             MUL      EBX
    0001BF9D  50                PUSH     EAX
    0001BF9E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001BFA1  48                DEC      EAX
    0001BFA2  BB 02000000       MOV      EBX,2
    0001BFA7  F7 E3             MUL      EBX
    0001BFA9  5B                POP      EBX
    0001BFAA  03 C3             ADD      EAX,EBX
    0001BFAC  8B F8             MOV      EDI,EAX
    0001BFAE  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17481

    0001BFB2  B8 01000000       MOV      EAX,1
    0001BFB7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17482

    0001BFBA  B8 01000000       MOV      EAX,1
    0001BFBF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17484

    0001BFC2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001BFC9  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001BFCE  5B                POP      EBX

    LINE     17486

    0001BFCF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001BFD6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001BFDB  5B                POP      EBX

    LINE     17488

    0001BFDC  B8 0A000000       MOV      EAX,10
    0001BFE1  40                INC      EAX
    0001BFE2  50                PUSH     EAX
    0001BFE3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001BFE6  5B                POP      EBX
    0001BFE7  3B C3             CMP      EAX,EBX
    0001BFE9  0F 8503000000     JNE      3
    0001BFEF  EB                JMP      

    LINE     17496

    0001BFF0  B8 01000000       MOV      EAX,1
    0001BFF5  8B C8             MOV      ECX,EAX
    0001BFF7  B8 0A000000       MOV      EAX,10
    0001BFFC  50                PUSH     EAX
    0001BFFD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001C000  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C003  5B                POP      EBX
    0001C004  53                PUSH     EBX
    0001C005  3B C3             CMP      EAX,EBX
    0001C007  0F 8E03000000     JLE      3
    0001C00D  EB                JMP      

    LINE     17498

    0001C00E  B8 01000000       MOV      EAX,1
    0001C013  8B C8             MOV      ECX,EAX
    0001C015  B8 05000000       MOV      EAX,5
    0001C01A  50                PUSH     EAX
    0001C01B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001C01E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C021  5B                POP      EBX
    0001C022  53                PUSH     EBX
    0001C023  3B C3             CMP      EAX,EBX
    0001C025  0F 8E03000000     JLE      3
    0001C02B  EB                JMP      

    LINE     17505

    0001C02C  B8 01000000       MOV      EAX,1
    0001C031  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17506

    0001C037  B8 01000000       MOV      EAX,1
    0001C03C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17507

    0001C042  B8 01000000       MOV      EAX,1
    0001C047  8B C8             MOV      ECX,EAX
    0001C049  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C04C  48                DEC      EAX
    0001C04D  BB 0E000000       MOV      EBX,14
    0001C052  F7 E3             MUL      EBX
    0001C054  50                PUSH     EAX
    0001C055  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C058  48                DEC      EAX
    0001C059  BB 02000000       MOV      EBX,2
    0001C05E  F7 E3             MUL      EBX
    0001C060  5B                POP      EBX
    0001C061  03 C3             ADD      EAX,EBX
    0001C063  8B F8             MOV      EDI,EAX
    0001C065  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17508

    0001C06C  B8 01000000       MOV      EAX,1
    0001C071  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17509

    0001C077  B8 01000000       MOV      EAX,1
    0001C07C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17511

    0001C082  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001C089  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001C08E  5B                POP      EBX

    LINE     17513

    0001C08F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001C096  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001C09B  5B                POP      EBX

    LINE     17515

    0001C09C  B8 0A000000       MOV      EAX,10
    0001C0A1  40                INC      EAX
    0001C0A2  50                PUSH     EAX
    0001C0A3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C0A6  5B                POP      EBX
    0001C0A7  3B C3             CMP      EAX,EBX
    0001C0A9  0F 8503000000     JNE      3
    0001C0AF  EB                JMP      

    LINE     17522

    0001C0B0  B8 01000000       MOV      EAX,1
    0001C0B5  8B C8             MOV      ECX,EAX
    0001C0B7  B8 0A000000       MOV      EAX,10
    0001C0BC  50                PUSH     EAX
    0001C0BD  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001C0C0  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C0C3  5B                POP      EBX
    0001C0C4  53                PUSH     EBX
    0001C0C5  3B C3             CMP      EAX,EBX
    0001C0C7  0F 8E03000000     JLE      3
    0001C0CD  EB                JMP      

    LINE     17524

    0001C0CE  B8 01000000       MOV      EAX,1
    0001C0D3  8B C8             MOV      ECX,EAX
    0001C0D5  B8 05000000       MOV      EAX,5
    0001C0DA  50                PUSH     EAX
    0001C0DB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001C0DE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C0E1  5B                POP      EBX
    0001C0E2  53                PUSH     EBX
    0001C0E3  3B C3             CMP      EAX,EBX
    0001C0E5  0F 8E03000000     JLE      3
    0001C0EB  EB                JMP      

    LINE     17531

    0001C0EC  B8 01000000       MOV      EAX,1
    0001C0F1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17532

    0001C0F7  B8 01000000       MOV      EAX,1
    0001C0FC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17533

    0001C102  B8 01000000       MOV      EAX,1
    0001C107  8B C8             MOV      ECX,EAX
    0001C109  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C10C  48                DEC      EAX
    0001C10D  BB 0E000000       MOV      EBX,14
    0001C112  F7 E3             MUL      EBX
    0001C114  50                PUSH     EAX
    0001C115  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C118  48                DEC      EAX
    0001C119  BB 02000000       MOV      EBX,2
    0001C11E  F7 E3             MUL      EBX
    0001C120  5B                POP      EBX
    0001C121  03 C3             ADD      EAX,EBX
    0001C123  8B F8             MOV      EDI,EAX
    0001C125  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17534

    0001C12C  B8 01000000       MOV      EAX,1
    0001C131  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17535

    0001C137  B8 01000000       MOV      EAX,1
    0001C13C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17537

    0001C142  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001C149  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001C14E  5B                POP      EBX

    LINE     17539

    0001C14F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001C156  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001C15B  5B                POP      EBX

    LINE     17541

    0001C15C  B8 0A000000       MOV      EAX,10
    0001C161  40                INC      EAX
    0001C162  50                PUSH     EAX
    0001C163  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C166  5B                POP      EBX
    0001C167  3B C3             CMP      EAX,EBX
    0001C169  0F 8503000000     JNE      3
    0001C16F  EB                JMP      

    LINE     17555

    0001C170  56                PUSH     ESI
    0001C171  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001C177  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001C17D  FF D1             CALL     ECX                       run_inner_proc
    0001C17F  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17557

    0001C180  B8 01000000       MOV      EAX,1
    0001C185  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17559

    0001C188  B8 01000000       MOV      EAX,1
    0001C18D  8B C8             MOV      ECX,EAX
    0001C18F  B8 0A000000       MOV      EAX,10
    0001C194  50                PUSH     EAX
    0001C195  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001C198  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C19B  5B                POP      EBX
    0001C19C  53                PUSH     EBX
    0001C19D  3B C3             CMP      EAX,EBX
    0001C19F  0F 8E03000000     JLE      3
    0001C1A5  EB                JMP      

    LINE     17561

    0001C1A6  B8 01000000       MOV      EAX,1
    0001C1AB  8B C8             MOV      ECX,EAX
    0001C1AD  B8 05000000       MOV      EAX,5
    0001C1B2  50                PUSH     EAX
    0001C1B3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001C1B6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C1B9  5B                POP      EBX
    0001C1BA  53                PUSH     EBX
    0001C1BB  3B C3             CMP      EAX,EBX
    0001C1BD  0F 8E03000000     JLE      3
    0001C1C3  EB                JMP      

    LINE     17568

    0001C1C4  B8 01000000       MOV      EAX,1
    0001C1C9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17569

    0001C1CC  B8 01000000       MOV      EAX,1
    0001C1D1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17570

    0001C1D4  B8 01000000       MOV      EAX,1
    0001C1D9  8B C8             MOV      ECX,EAX
    0001C1DB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C1DE  48                DEC      EAX
    0001C1DF  BB 0E000000       MOV      EBX,14
    0001C1E4  F7 E3             MUL      EBX
    0001C1E6  50                PUSH     EAX
    0001C1E7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C1EA  48                DEC      EAX
    0001C1EB  BB 02000000       MOV      EBX,2
    0001C1F0  F7 E3             MUL      EBX
    0001C1F2  5B                POP      EBX
    0001C1F3  03 C3             ADD      EAX,EBX
    0001C1F5  8B F8             MOV      EDI,EAX
    0001C1F7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17571

    0001C1FB  B8 01000000       MOV      EAX,1
    0001C200  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17572

    0001C203  B8 01000000       MOV      EAX,1
    0001C208  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17574

    0001C20B  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001C212  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001C217  5B                POP      EBX

    LINE     17576

    0001C218  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001C21F  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001C224  5B                POP      EBX

    LINE     17578

    0001C225  B8 0A000000       MOV      EAX,10
    0001C22A  40                INC      EAX
    0001C22B  50                PUSH     EAX
    0001C22C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C22F  5B                POP      EBX
    0001C230  3B C3             CMP      EAX,EBX
    0001C232  0F 8503000000     JNE      3
    0001C238  EB                JMP      

    LINE     17585

    0001C239  B8 01000000       MOV      EAX,1
    0001C23E  8B C8             MOV      ECX,EAX
    0001C240  B8 0A000000       MOV      EAX,10
    0001C245  50                PUSH     EAX
    0001C246  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001C249  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C24C  5B                POP      EBX
    0001C24D  53                PUSH     EBX
    0001C24E  3B C3             CMP      EAX,EBX
    0001C250  0F 8E03000000     JLE      3
    0001C256  EB                JMP      

    LINE     17587

    0001C257  B8 01000000       MOV      EAX,1
    0001C25C  8B C8             MOV      ECX,EAX
    0001C25E  B8 05000000       MOV      EAX,5
    0001C263  50                PUSH     EAX
    0001C264  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001C267  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C26A  5B                POP      EBX
    0001C26B  53                PUSH     EBX
    0001C26C  3B C3             CMP      EAX,EBX
    0001C26E  0F 8E03000000     JLE      3
    0001C274  EB                JMP      

    LINE     17594

    0001C275  B8 01000000       MOV      EAX,1
    0001C27A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17595

    0001C27D  B8 01000000       MOV      EAX,1
    0001C282  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17596

    0001C285  B8 01000000       MOV      EAX,1
    0001C28A  8B C8             MOV      ECX,EAX
    0001C28C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C28F  48                DEC      EAX
    0001C290  BB 0E000000       MOV      EBX,14
    0001C295  F7 E3             MUL      EBX
    0001C297  50                PUSH     EAX
    0001C298  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C29B  48                DEC      EAX
    0001C29C  BB 02000000       MOV      EBX,2
    0001C2A1  F7 E3             MUL      EBX
    0001C2A3  5B                POP      EBX
    0001C2A4  03 C3             ADD      EAX,EBX
    0001C2A6  8B F8             MOV      EDI,EAX
    0001C2A8  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17597

    0001C2AC  B8 01000000       MOV      EAX,1
    0001C2B1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17598

    0001C2B4  B8 01000000       MOV      EAX,1
    0001C2B9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17600

    0001C2BC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001C2C3  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001C2C8  5B                POP      EBX

    LINE     17602

    0001C2C9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001C2D0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001C2D5  5B                POP      EBX

    LINE     17604

    0001C2D6  B8 0A000000       MOV      EAX,10
    0001C2DB  40                INC      EAX
    0001C2DC  50                PUSH     EAX
    0001C2DD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C2E0  5B                POP      EBX
    0001C2E1  3B C3             CMP      EAX,EBX
    0001C2E3  0F 8503000000     JNE      3
    0001C2E9  EB                JMP      

    LINE     17612

    0001C2EA  B8 01000000       MOV      EAX,1
    0001C2EF  8B C8             MOV      ECX,EAX
    0001C2F1  B8 0A000000       MOV      EAX,10
    0001C2F6  50                PUSH     EAX
    0001C2F7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001C2FA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C2FD  5B                POP      EBX
    0001C2FE  53                PUSH     EBX
    0001C2FF  3B C3             CMP      EAX,EBX
    0001C301  0F 8E03000000     JLE      3
    0001C307  EB                JMP      

    LINE     17614

    0001C308  B8 01000000       MOV      EAX,1
    0001C30D  8B C8             MOV      ECX,EAX
    0001C30F  B8 05000000       MOV      EAX,5
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page  14


    0001C314  50                PUSH     EAX
    0001C315  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001C318  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C31B  5B                POP      EBX
    0001C31C  53                PUSH     EBX
    0001C31D  3B C3             CMP      EAX,EBX
    0001C31F  0F 8E03000000     JLE      3
    0001C325  EB                JMP      

    LINE     17621

    0001C326  B8 01000000       MOV      EAX,1
    0001C32B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17622

    0001C331  B8 01000000       MOV      EAX,1
    0001C336  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17623

    0001C33C  B8 01000000       MOV      EAX,1
    0001C341  8B C8             MOV      ECX,EAX
    0001C343  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C346  48                DEC      EAX
    0001C347  BB 0E000000       MOV      EBX,14
    0001C34C  F7 E3             MUL      EBX
    0001C34E  50                PUSH     EAX
    0001C34F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C352  48                DEC      EAX
    0001C353  BB 02000000       MOV      EBX,2
    0001C358  F7 E3             MUL      EBX
    0001C35A  5B                POP      EBX
    0001C35B  03 C3             ADD      EAX,EBX
    0001C35D  8B F8             MOV      EDI,EAX
    0001C35F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17624

    0001C366  B8 01000000       MOV      EAX,1
    0001C36B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17625

    0001C371  B8 01000000       MOV      EAX,1
    0001C376  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17627

    0001C37C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001C383  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001C388  5B                POP      EBX

    LINE     17629

    0001C389  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001C390  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001C395  5B                POP      EBX

    LINE     17631

    0001C396  B8 0A000000       MOV      EAX,10
    0001C39B  40                INC      EAX
    0001C39C  50                PUSH     EAX
    0001C39D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C3A0  5B                POP      EBX
    0001C3A1  3B C3             CMP      EAX,EBX
    0001C3A3  0F 8503000000     JNE      3
    0001C3A9  EB                JMP      

    LINE     17638

    0001C3AA  B8 01000000       MOV      EAX,1
    0001C3AF  8B C8             MOV      ECX,EAX
    0001C3B1  B8 0A000000       MOV      EAX,10
    0001C3B6  50                PUSH     EAX
    0001C3B7  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001C3BA  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C3BD  5B                POP      EBX
    0001C3BE  53                PUSH     EBX
    0001C3BF  3B C3             CMP      EAX,EBX
    0001C3C1  0F 8E03000000     JLE      3
    0001C3C7  EB                JMP      

    LINE     17640

    0001C3C8  B8 01000000       MOV      EAX,1
    0001C3CD  8B C8             MOV      ECX,EAX
    0001C3CF  B8 05000000       MOV      EAX,5
    0001C3D4  50                PUSH     EAX
    0001C3D5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001C3D8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C3DB  5B                POP      EBX
    0001C3DC  53                PUSH     EBX
    0001C3DD  3B C3             CMP      EAX,EBX
    0001C3DF  0F 8E03000000     JLE      3
    0001C3E5  EB                JMP      

    LINE     17647

    0001C3E6  B8 01000000       MOV      EAX,1
    0001C3EB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17648

    0001C3F1  B8 01000000       MOV      EAX,1
    0001C3F6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17649

    0001C3FC  B8 01000000       MOV      EAX,1
    0001C401  8B C8             MOV      ECX,EAX
    0001C403  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C406  48                DEC      EAX
    0001C407  BB 0E000000       MOV      EBX,14
    0001C40C  F7 E3             MUL      EBX
    0001C40E  50                PUSH     EAX
    0001C40F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C412  48                DEC      EAX
    0001C413  BB 02000000       MOV      EBX,2
    0001C418  F7 E3             MUL      EBX
    0001C41A  5B                POP      EBX
    0001C41B  03 C3             ADD      EAX,EBX
    0001C41D  8B F8             MOV      EDI,EAX
    0001C41F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17650

    0001C426  B8 01000000       MOV      EAX,1
    0001C42B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17651

    0001C431  B8 01000000       MOV      EAX,1
    0001C436  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17653

    0001C43C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001C443  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001C448  5B                POP      EBX

    LINE     17655

    0001C449  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001C450  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001C455  5B                POP      EBX

    LINE     17657

    0001C456  B8 0A000000       MOV      EAX,10
    0001C45B  40                INC      EAX
    0001C45C  50                PUSH     EAX
    0001C45D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C460  5B                POP      EBX
    0001C461  3B C3             CMP      EAX,EBX
    0001C463  0F 8503000000     JNE      3
    0001C469  EB                JMP      

    LINE     17671

    0001C46A  56                PUSH     ESI
    0001C46B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001C471  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001C477  FF D1             CALL     ECX                       run_inner_proc
    0001C479  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17673

    0001C47A  B8 01000000       MOV      EAX,1
    0001C47F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17675

    0001C482  B8 01000000       MOV      EAX,1
    0001C487  8B C8             MOV      ECX,EAX
    0001C489  B8 0A000000       MOV      EAX,10
    0001C48E  50                PUSH     EAX
    0001C48F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001C492  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C495  5B                POP      EBX
    0001C496  53                PUSH     EBX
    0001C497  3B C3             CMP      EAX,EBX
    0001C499  0F 8E03000000     JLE      3
    0001C49F  EB                JMP      

    LINE     17677

    0001C4A0  B8 01000000       MOV      EAX,1
    0001C4A5  8B C8             MOV      ECX,EAX
    0001C4A7  B8 05000000       MOV      EAX,5
    0001C4AC  50                PUSH     EAX
    0001C4AD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001C4B0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C4B3  5B                POP      EBX
    0001C4B4  53                PUSH     EBX
    0001C4B5  3B C3             CMP      EAX,EBX
    0001C4B7  0F 8E03000000     JLE      3
    0001C4BD  EB                JMP      

    LINE     17684

    0001C4BE  B8 01000000       MOV      EAX,1
    0001C4C3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17685

    0001C4C6  B8 01000000       MOV      EAX,1
    0001C4CB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17686

    0001C4CE  B8 01000000       MOV      EAX,1
    0001C4D3  8B C8             MOV      ECX,EAX
    0001C4D5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C4D8  48                DEC      EAX
    0001C4D9  BB 0E000000       MOV      EBX,14
    0001C4DE  F7 E3             MUL      EBX
    0001C4E0  50                PUSH     EAX
    0001C4E1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C4E4  48                DEC      EAX
    0001C4E5  BB 02000000       MOV      EBX,2
    0001C4EA  F7 E3             MUL      EBX
    0001C4EC  5B                POP      EBX
    0001C4ED  03 C3             ADD      EAX,EBX
    0001C4EF  8B F8             MOV      EDI,EAX
    0001C4F1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17687

    0001C4F5  B8 01000000       MOV      EAX,1
    0001C4FA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17688

    0001C4FD  B8 01000000       MOV      EAX,1
    0001C502  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17690

    0001C505  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001C50C  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001C511  5B                POP      EBX

    LINE     17692

    0001C512  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001C519  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001C51E  5B                POP      EBX

    LINE     17694

    0001C51F  B8 0A000000       MOV      EAX,10
    0001C524  40                INC      EAX
    0001C525  50                PUSH     EAX
    0001C526  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C529  5B                POP      EBX
    0001C52A  3B C3             CMP      EAX,EBX
    0001C52C  0F 8503000000     JNE      3
    0001C532  EB                JMP      

    LINE     17701

    0001C533  B8 01000000       MOV      EAX,1
    0001C538  8B C8             MOV      ECX,EAX
    0001C53A  B8 0A000000       MOV      EAX,10
    0001C53F  50                PUSH     EAX
    0001C540  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001C543  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C546  5B                POP      EBX
    0001C547  53                PUSH     EBX
    0001C548  3B C3             CMP      EAX,EBX
    0001C54A  0F 8E03000000     JLE      3
    0001C550  EB                JMP      

    LINE     17703

    0001C551  B8 01000000       MOV      EAX,1
    0001C556  8B C8             MOV      ECX,EAX
    0001C558  B8 05000000       MOV      EAX,5
    0001C55D  50                PUSH     EAX
    0001C55E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001C561  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C564  5B                POP      EBX
    0001C565  53                PUSH     EBX
    0001C566  3B C3             CMP      EAX,EBX
    0001C568  0F 8E03000000     JLE      3
    0001C56E  EB                JMP      

    LINE     17710

    0001C56F  B8 01000000       MOV      EAX,1
    0001C574  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17711

    0001C577  B8 01000000       MOV      EAX,1
    0001C57C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17712

    0001C57F  B8 01000000       MOV      EAX,1
    0001C584  8B C8             MOV      ECX,EAX
    0001C586  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C589  48                DEC      EAX
    0001C58A  BB 0E000000       MOV      EBX,14
    0001C58F  F7 E3             MUL      EBX
    0001C591  50                PUSH     EAX
    0001C592  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C595  48                DEC      EAX
    0001C596  BB 02000000       MOV      EBX,2
    0001C59B  F7 E3             MUL      EBX
    0001C59D  5B                POP      EBX
    0001C59E  03 C3             ADD      EAX,EBX
    0001C5A0  8B F8             MOV      EDI,EAX
    0001C5A2  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17713

    0001C5A6  B8 01000000       MOV      EAX,1
    0001C5AB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17714

    0001C5AE  B8 01000000       MOV      EAX,1
    0001C5B3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17716

    0001C5B6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001C5BD  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001C5C2  5B                POP      EBX

    LINE     17718

    0001C5C3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001C5CA  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001C5CF  5B                POP      EBX

    LINE     17720

    0001C5D0  B8 0A000000       MOV      EAX,10
    0001C5D5  40                INC      EAX
    0001C5D6  50                PUSH     EAX
    0001C5D7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C5DA  5B                POP      EBX
    0001C5DB  3B C3             CMP      EAX,EBX
    0001C5DD  0F 8503000000     JNE      3
    0001C5E3  EB                JMP      

    LINE     17728

    0001C5E4  B8 01000000       MOV      EAX,1
    0001C5E9  8B C8             MOV      ECX,EAX
    0001C5EB  B8 0A000000       MOV      EAX,10
    0001C5F0  50                PUSH     EAX
    0001C5F1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001C5F4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C5F7  5B                POP      EBX
    0001C5F8  53                PUSH     EBX
    0001C5F9  3B C3             CMP      EAX,EBX
    0001C5FB  0F 8E03000000     JLE      3
    0001C601  EB                JMP      

    LINE     17730

    0001C602  B8 01000000       MOV      EAX,1
    0001C607  8B C8             MOV      ECX,EAX
    0001C609  B8 05000000       MOV      EAX,5
    0001C60E  50                PUSH     EAX
    0001C60F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001C612  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C615  5B                POP      EBX
    0001C616  53                PUSH     EBX
    0001C617  3B C3             CMP      EAX,EBX
    0001C619  0F 8E03000000     JLE      3
    0001C61F  EB                JMP      

    LINE     17737

    0001C620  B8 01000000       MOV      EAX,1
    0001C625  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17738

    0001C62B  B8 01000000       MOV      EAX,1
    0001C630  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17739

    0001C636  B8 01000000       MOV      EAX,1
    0001C63B  8B C8             MOV      ECX,EAX
    0001C63D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C640  48                DEC      EAX
    0001C641  BB 0E000000       MOV      EBX,14
    0001C646  F7 E3             MUL      EBX
    0001C648  50                PUSH     EAX
    0001C649  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C64C  48                DEC      EAX
    0001C64D  BB 02000000       MOV      EBX,2
    0001C652  F7 E3             MUL      EBX
    0001C654  5B                POP      EBX
    0001C655  03 C3             ADD      EAX,EBX
    0001C657  8B F8             MOV      EDI,EAX
    0001C659  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17740

    0001C660  B8 01000000       MOV      EAX,1
    0001C665  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17741

    0001C66B  B8 01000000       MOV      EAX,1
    0001C670  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17743

    0001C676  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001C67D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001C682  5B                POP      EBX

    LINE     17745

    0001C683  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001C68A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001C68F  5B                POP      EBX

    LINE     17747

    0001C690  B8 0A000000       MOV      EAX,10
    0001C695  40                INC      EAX
    0001C696  50                PUSH     EAX
    0001C697  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C69A  5B                POP      EBX
    0001C69B  3B C3             CMP      EAX,EBX
    0001C69D  0F 8503000000     JNE      3
    0001C6A3  EB                JMP      

    LINE     17754

    0001C6A4  B8 01000000       MOV      EAX,1
    0001C6A9  8B C8             MOV      ECX,EAX
    0001C6AB  B8 0A000000       MOV      EAX,10
    0001C6B0  50                PUSH     EAX
    0001C6B1  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001C6B4  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C6B7  5B                POP      EBX
    0001C6B8  53                PUSH     EBX
    0001C6B9  3B C3             CMP      EAX,EBX
    0001C6BB  0F 8E03000000     JLE      3
    0001C6C1  EB                JMP      

    LINE     17756

    0001C6C2  B8 01000000       MOV      EAX,1
    0001C6C7  8B C8             MOV      ECX,EAX
    0001C6C9  B8 05000000       MOV      EAX,5
    0001C6CE  50                PUSH     EAX
    0001C6CF  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001C6D2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C6D5  5B                POP      EBX
    0001C6D6  53                PUSH     EBX
    0001C6D7  3B C3             CMP      EAX,EBX
    0001C6D9  0F 8E03000000     JLE      3
    0001C6DF  EB                JMP      

    LINE     17763

    0001C6E0  B8 01000000       MOV      EAX,1
    0001C6E5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17764

    0001C6EB  B8 01000000       MOV      EAX,1
    0001C6F0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17765

    0001C6F6  B8 01000000       MOV      EAX,1
    0001C6FB  8B C8             MOV      ECX,EAX
    0001C6FD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C700  48                DEC      EAX
    0001C701  BB 0E000000       MOV      EBX,14
    0001C706  F7 E3             MUL      EBX
    0001C708  50                PUSH     EAX
    0001C709  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C70C  48                DEC      EAX
    0001C70D  BB 02000000       MOV      EBX,2
    0001C712  F7 E3             MUL      EBX
    0001C714  5B                POP      EBX
    0001C715  03 C3             ADD      EAX,EBX
    0001C717  8B F8             MOV      EDI,EAX
    0001C719  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17766

    0001C720  B8 01000000       MOV      EAX,1
    0001C725  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17767

    0001C72B  B8 01000000       MOV      EAX,1
    0001C730  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17769

    0001C736  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001C73D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001C742  5B                POP      EBX

    LINE     17771

    0001C743  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001C74A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001C74F  5B                POP      EBX

    LINE     17773

    0001C750  B8 0A000000       MOV      EAX,10
    0001C755  40                INC      EAX
    0001C756  50                PUSH     EAX
    0001C757  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C75A  5B                POP      EBX
    0001C75B  3B C3             CMP      EAX,EBX
    0001C75D  0F 8503000000     JNE      3
    0001C763  EB                JMP      

    LINE     17787

    0001C764  56                PUSH     ESI
    0001C765  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001C76B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001C771  FF D1             CALL     ECX                       run_inner_proc
    0001C773  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17789

    0001C774  B8 01000000       MOV      EAX,1
    0001C779  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17791

    0001C77C  B8 01000000       MOV      EAX,1
    0001C781  8B C8             MOV      ECX,EAX
    0001C783  B8 0A000000       MOV      EAX,10
    0001C788  50                PUSH     EAX
    0001C789  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001C78C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C78F  5B                POP      EBX
    0001C790  53                PUSH     EBX
    0001C791  3B C3             CMP      EAX,EBX
    0001C793  0F 8E03000000     JLE      3
    0001C799  EB                JMP      

    LINE     17793

    0001C79A  B8 01000000       MOV      EAX,1
    0001C79F  8B C8             MOV      ECX,EAX
    0001C7A1  B8 05000000       MOV      EAX,5
    0001C7A6  50                PUSH     EAX
    0001C7A7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001C7AA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C7AD  5B                POP      EBX
    0001C7AE  53                PUSH     EBX
    0001C7AF  3B C3             CMP      EAX,EBX
    0001C7B1  0F 8E03000000     JLE      3
    0001C7B7  EB                JMP      

    LINE     17800

    0001C7B8  B8 01000000       MOV      EAX,1
    0001C7BD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17801

    0001C7C0  B8 01000000       MOV      EAX,1
    0001C7C5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17802

    0001C7C8  B8 01000000       MOV      EAX,1
    0001C7CD  8B C8             MOV      ECX,EAX
    0001C7CF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C7D2  48                DEC      EAX
    0001C7D3  BB 0E000000       MOV      EBX,14
    0001C7D8  F7 E3             MUL      EBX
    0001C7DA  50                PUSH     EAX
    0001C7DB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C7DE  48                DEC      EAX
    0001C7DF  BB 02000000       MOV      EBX,2
    0001C7E4  F7 E3             MUL      EBX
    0001C7E6  5B                POP      EBX
    0001C7E7  03 C3             ADD      EAX,EBX
    0001C7E9  8B F8             MOV      EDI,EAX
    0001C7EB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17803

    0001C7EF  B8 01000000       MOV      EAX,1
    0001C7F4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17804

    0001C7F7  B8 01000000       MOV      EAX,1
    0001C7FC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17806

    0001C7FF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001C806  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001C80B  5B                POP      EBX

    LINE     17808

    0001C80C  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001C813  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001C818  5B                POP      EBX

    LINE     17810

    0001C819  B8 0A000000       MOV      EAX,10
    0001C81E  40                INC      EAX
    0001C81F  50                PUSH     EAX
    0001C820  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C823  5B                POP      EBX
    0001C824  3B C3             CMP      EAX,EBX
    0001C826  0F 8503000000     JNE      3
    0001C82C  EB                JMP      

    LINE     17817

    0001C82D  B8 01000000       MOV      EAX,1
    0001C832  8B C8             MOV      ECX,EAX
    0001C834  B8 0A000000       MOV      EAX,10
    0001C839  50                PUSH     EAX
    0001C83A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001C83D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C840  5B                POP      EBX
    0001C841  53                PUSH     EBX
    0001C842  3B C3             CMP      EAX,EBX
    0001C844  0F 8E03000000     JLE      3
    0001C84A  EB                JMP      

    LINE     17819

    0001C84B  B8 01000000       MOV      EAX,1
    0001C850  8B C8             MOV      ECX,EAX
    0001C852  B8 05000000       MOV      EAX,5
    0001C857  50                PUSH     EAX
    0001C858  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001C85B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C85E  5B                POP      EBX
    0001C85F  53                PUSH     EBX
    0001C860  3B C3             CMP      EAX,EBX
    0001C862  0F 8E03000000     JLE      3
    0001C868  EB                JMP      

    LINE     17826

    0001C869  B8 01000000       MOV      EAX,1
    0001C86E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17827

    0001C871  B8 01000000       MOV      EAX,1
    0001C876  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17828

    0001C879  B8 01000000       MOV      EAX,1
    0001C87E  8B C8             MOV      ECX,EAX
    0001C880  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C883  48                DEC      EAX
    0001C884  BB 0E000000       MOV      EBX,14
    0001C889  F7 E3             MUL      EBX
    0001C88B  50                PUSH     EAX
    0001C88C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C88F  48                DEC      EAX
    0001C890  BB 02000000       MOV      EBX,2
    0001C895  F7 E3             MUL      EBX
    0001C897  5B                POP      EBX
    0001C898  03 C3             ADD      EAX,EBX
    0001C89A  8B F8             MOV      EDI,EAX
    0001C89C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17829

    0001C8A0  B8 01000000       MOV      EAX,1
    0001C8A5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17830

    0001C8A8  B8 01000000       MOV      EAX,1
    0001C8AD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17832

    0001C8B0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001C8B7  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001C8BC  5B                POP      EBX

    LINE     17834

    0001C8BD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001C8C4  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001C8C9  5B                POP      EBX

    LINE     17836

    0001C8CA  B8 0A000000       MOV      EAX,10
    0001C8CF  40                INC      EAX
    0001C8D0  50                PUSH     EAX
    0001C8D1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C8D4  5B                POP      EBX
    0001C8D5  3B C3             CMP      EAX,EBX
    0001C8D7  0F 8503000000     JNE      3
    0001C8DD  EB                JMP      

    LINE     17844

    0001C8DE  B8 01000000       MOV      EAX,1
    0001C8E3  8B C8             MOV      ECX,EAX
    0001C8E5  B8 0A000000       MOV      EAX,10
    0001C8EA  50                PUSH     EAX
    0001C8EB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001C8EE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C8F1  5B                POP      EBX
    0001C8F2  53                PUSH     EBX
    0001C8F3  3B C3             CMP      EAX,EBX
    0001C8F5  0F 8E03000000     JLE      3
    0001C8FB  EB                JMP      

    LINE     17846

    0001C8FC  B8 01000000       MOV      EAX,1
    0001C901  8B C8             MOV      ECX,EAX
    0001C903  B8 05000000       MOV      EAX,5
    0001C908  50                PUSH     EAX
    0001C909  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001C90C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C90F  5B                POP      EBX
    0001C910  53                PUSH     EBX
    0001C911  3B C3             CMP      EAX,EBX
    0001C913  0F 8E03000000     JLE      3
    0001C919  EB                JMP      

    LINE     17853

    0001C91A  B8 01000000       MOV      EAX,1
    0001C91F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17854

    0001C925  B8 01000000       MOV      EAX,1
    0001C92A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17855

    0001C930  B8 01000000       MOV      EAX,1
    0001C935  8B C8             MOV      ECX,EAX
    0001C937  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C93A  48                DEC      EAX
    0001C93B  BB 0E000000       MOV      EBX,14
    0001C940  F7 E3             MUL      EBX
    0001C942  50                PUSH     EAX
    0001C943  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001C946  48                DEC      EAX
    0001C947  BB 02000000       MOV      EBX,2
    0001C94C  F7 E3             MUL      EBX
    0001C94E  5B                POP      EBX
    0001C94F  03 C3             ADD      EAX,EBX
    0001C951  8B F8             MOV      EDI,EAX
    0001C953  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17856

    0001C95A  B8 01000000       MOV      EAX,1
    0001C95F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17857

    0001C965  B8 01000000       MOV      EAX,1
    0001C96A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17859

    0001C970  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001C977  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001C97C  5B                POP      EBX

    LINE     17861

    0001C97D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001C984  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001C989  5B                POP      EBX

    LINE     17863

    0001C98A  B8 0A000000       MOV      EAX,10
    0001C98F  40                INC      EAX
    0001C990  50                PUSH     EAX
    0001C991  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001C994  5B                POP      EBX
    0001C995  3B C3             CMP      EAX,EBX
    0001C997  0F 8503000000     JNE      3
    0001C99D  EB                JMP      

    LINE     17870

    0001C99E  B8 01000000       MOV      EAX,1
    0001C9A3  8B C8             MOV      ECX,EAX
    0001C9A5  B8 0A000000       MOV      EAX,10
    0001C9AA  50                PUSH     EAX
    0001C9AB  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001C9AE  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C9B1  5B                POP      EBX
    0001C9B2  53                PUSH     EBX
    0001C9B3  3B C3             CMP      EAX,EBX
    0001C9B5  0F 8E03000000     JLE      3
    0001C9BB  EB                JMP      

    LINE     17872

    0001C9BC  B8 01000000       MOV      EAX,1
    0001C9C1  8B C8             MOV      ECX,EAX
    0001C9C3  B8 05000000       MOV      EAX,5
    0001C9C8  50                PUSH     EAX
    0001C9C9  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001C9CC  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001C9CF  5B                POP      EBX
    0001C9D0  53                PUSH     EBX
    0001C9D1  3B C3             CMP      EAX,EBX
    0001C9D3  0F 8E03000000     JLE      3
    0001C9D9  EB                JMP      

    LINE     17879

    0001C9DA  B8 01000000       MOV      EAX,1
    0001C9DF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17880

    0001C9E5  B8 01000000       MOV      EAX,1
    0001C9EA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17881

    0001C9F0  B8 01000000       MOV      EAX,1
    0001C9F5  8B C8             MOV      ECX,EAX
    0001C9F7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001C9FA  48                DEC      EAX
    0001C9FB  BB 0E000000       MOV      EBX,14
    0001CA00  F7 E3             MUL      EBX
    0001CA02  50                PUSH     EAX
    0001CA03  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CA06  48                DEC      EAX
    0001CA07  BB 02000000       MOV      EBX,2
    0001CA0C  F7 E3             MUL      EBX
    0001CA0E  5B                POP      EBX
    0001CA0F  03 C3             ADD      EAX,EBX
    0001CA11  8B F8             MOV      EDI,EAX
    0001CA13  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17882

    0001CA1A  B8 01000000       MOV      EAX,1
    0001CA1F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17883

    0001CA25  B8 01000000       MOV      EAX,1
    0001CA2A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17885

    0001CA30  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001CA37  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001CA3C  5B                POP      EBX

    LINE     17887

    0001CA3D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001CA44  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001CA49  5B                POP      EBX

    LINE     17889

    0001CA4A  B8 0A000000       MOV      EAX,10
    0001CA4F  40                INC      EAX
    0001CA50  50                PUSH     EAX
    0001CA51  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CA54  5B                POP      EBX
    0001CA55  3B C3             CMP      EAX,EBX
    0001CA57  0F 8503000000     JNE      3
    0001CA5D  EB                JMP      

    LINE     17903

    0001CA5E  56                PUSH     ESI
    0001CA5F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001CA65  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001CA6B  FF D1             CALL     ECX                       run_inner_proc
    0001CA6D  5E                POP      ESI                       /* restore callers static pointer */

    LINE     17905

    0001CA6E  B8 01000000       MOV      EAX,1
    0001CA73  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     17907

    0001CA76  B8 01000000       MOV      EAX,1
    0001CA7B  8B C8             MOV      ECX,EAX
    0001CA7D  B8 0A000000       MOV      EAX,10
    0001CA82  50                PUSH     EAX
    0001CA83  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001CA86  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CA89  5B                POP      EBX
    0001CA8A  53                PUSH     EBX
    0001CA8B  3B C3             CMP      EAX,EBX
    0001CA8D  0F 8E03000000     JLE      3
    0001CA93  EB                JMP      

    LINE     17909

    0001CA94  B8 01000000       MOV      EAX,1
    0001CA99  8B C8             MOV      ECX,EAX
    0001CA9B  B8 05000000       MOV      EAX,5
    0001CAA0  50                PUSH     EAX
    0001CAA1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001CAA4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CAA7  5B                POP      EBX
    0001CAA8  53                PUSH     EBX
    0001CAA9  3B C3             CMP      EAX,EBX
    0001CAAB  0F 8E03000000     JLE      3
    0001CAB1  EB                JMP      

    LINE     17916

    0001CAB2  B8 01000000       MOV      EAX,1
    0001CAB7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17917

    0001CABA  B8 01000000       MOV      EAX,1
    0001CABF  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17918

    0001CAC2  B8 01000000       MOV      EAX,1
    0001CAC7  8B C8             MOV      ECX,EAX
    0001CAC9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CACC  48                DEC      EAX
    0001CACD  BB 0E000000       MOV      EBX,14
    0001CAD2  F7 E3             MUL      EBX
    0001CAD4  50                PUSH     EAX
    0001CAD5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CAD8  48                DEC      EAX
    0001CAD9  BB 02000000       MOV      EBX,2
    0001CADE  F7 E3             MUL      EBX
    0001CAE0  5B                POP      EBX
    0001CAE1  03 C3             ADD      EAX,EBX
    0001CAE3  8B F8             MOV      EDI,EAX
    0001CAE5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17919

    0001CAE9  B8 01000000       MOV      EAX,1
    0001CAEE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17920

    0001CAF1  B8 01000000       MOV      EAX,1
    0001CAF6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17922

    0001CAF9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001CB00  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001CB05  5B                POP      EBX

    LINE     17924

    0001CB06  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001CB0D  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001CB12  5B                POP      EBX

    LINE     17926

    0001CB13  B8 0A000000       MOV      EAX,10
    0001CB18  40                INC      EAX
    0001CB19  50                PUSH     EAX
    0001CB1A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CB1D  5B                POP      EBX
    0001CB1E  3B C3             CMP      EAX,EBX
    0001CB20  0F 8503000000     JNE      3
    0001CB26  EB                JMP      

    LINE     17933

    0001CB27  B8 01000000       MOV      EAX,1
    0001CB2C  8B C8             MOV      ECX,EAX
    0001CB2E  B8 0A000000       MOV      EAX,10
    0001CB33  50                PUSH     EAX
    0001CB34  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001CB37  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CB3A  5B                POP      EBX
    0001CB3B  53                PUSH     EBX
    0001CB3C  3B C3             CMP      EAX,EBX
    0001CB3E  0F 8E03000000     JLE      3
    0001CB44  EB                JMP      

    LINE     17935

    0001CB45  B8 01000000       MOV      EAX,1
    0001CB4A  8B C8             MOV      ECX,EAX
    0001CB4C  B8 05000000       MOV      EAX,5
    0001CB51  50                PUSH     EAX
    0001CB52  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001CB55  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CB58  5B                POP      EBX
    0001CB59  53                PUSH     EBX
    0001CB5A  3B C3             CMP      EAX,EBX
    0001CB5C  0F 8E03000000     JLE      3
    0001CB62  EB                JMP      

    LINE     17942

    0001CB63  B8 01000000       MOV      EAX,1
    0001CB68  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17943

    0001CB6B  B8 01000000       MOV      EAX,1
    0001CB70  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17944

    0001CB73  B8 01000000       MOV      EAX,1
    0001CB78  8B C8             MOV      ECX,EAX
    0001CB7A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CB7D  48                DEC      EAX
    0001CB7E  BB 0E000000       MOV      EBX,14
    0001CB83  F7 E3             MUL      EBX
    0001CB85  50                PUSH     EAX
    0001CB86  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CB89  48                DEC      EAX
    0001CB8A  BB 02000000       MOV      EBX,2
    0001CB8F  F7 E3             MUL      EBX
    0001CB91  5B                POP      EBX
    0001CB92  03 C3             ADD      EAX,EBX
    0001CB94  8B F8             MOV      EDI,EAX
    0001CB96  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     17945

    0001CB9A  B8 01000000       MOV      EAX,1
    0001CB9F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17946

    0001CBA2  B8 01000000       MOV      EAX,1
    0001CBA7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     17948

    0001CBAA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001CBB1  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001CBB6  5B                POP      EBX

    LINE     17950

    0001CBB7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001CBBE  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001CBC3  5B                POP      EBX

    LINE     17952

    0001CBC4  B8 0A000000       MOV      EAX,10
    0001CBC9  40                INC      EAX
    0001CBCA  50                PUSH     EAX
    0001CBCB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CBCE  5B                POP      EBX
    0001CBCF  3B C3             CMP      EAX,EBX
    0001CBD1  0F 8503000000     JNE      3
    0001CBD7  EB                JMP      

    LINE     17960

    0001CBD8  B8 01000000       MOV      EAX,1
    0001CBDD  8B C8             MOV      ECX,EAX
    0001CBDF  B8 0A000000       MOV      EAX,10
    0001CBE4  50                PUSH     EAX
    0001CBE5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001CBE8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CBEB  5B                POP      EBX
    0001CBEC  53                PUSH     EBX
    0001CBED  3B C3             CMP      EAX,EBX
    0001CBEF  0F 8E03000000     JLE      3
    0001CBF5  EB                JMP      

    LINE     17962

    0001CBF6  B8 01000000       MOV      EAX,1
    0001CBFB  8B C8             MOV      ECX,EAX
    0001CBFD  B8 05000000       MOV      EAX,5
    0001CC02  50                PUSH     EAX
    0001CC03  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001CC06  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CC09  5B                POP      EBX
    0001CC0A  53                PUSH     EBX
    0001CC0B  3B C3             CMP      EAX,EBX
    0001CC0D  0F 8E03000000     JLE      3
    0001CC13  EB                JMP      

    LINE     17969

    0001CC14  B8 01000000       MOV      EAX,1
    0001CC19  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17970

    0001CC1F  B8 01000000       MOV      EAX,1
    0001CC24  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17971

    0001CC2A  B8 01000000       MOV      EAX,1
    0001CC2F  8B C8             MOV      ECX,EAX
    0001CC31  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CC34  48                DEC      EAX
    0001CC35  BB 0E000000       MOV      EBX,14
    0001CC3A  F7 E3             MUL      EBX
    0001CC3C  50                PUSH     EAX
    0001CC3D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CC40  48                DEC      EAX
    0001CC41  BB 02000000       MOV      EBX,2
    0001CC46  F7 E3             MUL      EBX
    0001CC48  5B                POP      EBX
    0001CC49  03 C3             ADD      EAX,EBX
    0001CC4B  8B F8             MOV      EDI,EAX
    0001CC4D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17972

    0001CC54  B8 01000000       MOV      EAX,1
    0001CC59  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17973

    0001CC5F  B8 01000000       MOV      EAX,1
    0001CC64  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17975

    0001CC6A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001CC71  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001CC76  5B                POP      EBX

    LINE     17977

    0001CC77  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001CC7E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001CC83  5B                POP      EBX

    LINE     17979

    0001CC84  B8 0A000000       MOV      EAX,10
    0001CC89  40                INC      EAX
    0001CC8A  50                PUSH     EAX
    0001CC8B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CC8E  5B                POP      EBX
    0001CC8F  3B C3             CMP      EAX,EBX
    0001CC91  0F 8503000000     JNE      3
    0001CC97  EB                JMP      

    LINE     17986

    0001CC98  B8 01000000       MOV      EAX,1
    0001CC9D  8B C8             MOV      ECX,EAX
    0001CC9F  B8 0A000000       MOV      EAX,10
    0001CCA4  50                PUSH     EAX
    0001CCA5  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001CCA8  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CCAB  5B                POP      EBX
    0001CCAC  53                PUSH     EBX
    0001CCAD  3B C3             CMP      EAX,EBX
    0001CCAF  0F 8E03000000     JLE      3
    0001CCB5  EB                JMP      

    LINE     17988

    0001CCB6  B8 01000000       MOV      EAX,1
    0001CCBB  8B C8             MOV      ECX,EAX
    0001CCBD  B8 05000000       MOV      EAX,5
    0001CCC2  50                PUSH     EAX
    0001CCC3  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001CCC6  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CCC9  5B                POP      EBX
    0001CCCA  53                PUSH     EBX
    0001CCCB  3B C3             CMP      EAX,EBX
    0001CCCD  0F 8E03000000     JLE      3
    0001CCD3  EB                JMP      

    LINE     17995

    0001CCD4  B8 01000000       MOV      EAX,1
    0001CCD9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17996

    0001CCDF  B8 01000000       MOV      EAX,1
    0001CCE4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17997

    0001CCEA  B8 01000000       MOV      EAX,1
    0001CCEF  8B C8             MOV      ECX,EAX
    0001CCF1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CCF4  48                DEC      EAX
    0001CCF5  BB 0E000000       MOV      EBX,14
    0001CCFA  F7 E3             MUL      EBX
    0001CCFC  50                PUSH     EAX
    0001CCFD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CD00  48                DEC      EAX
    0001CD01  BB 02000000       MOV      EBX,2
    0001CD06  F7 E3             MUL      EBX
    0001CD08  5B                POP      EBX
    0001CD09  03 C3             ADD      EAX,EBX
    0001CD0B  8B F8             MOV      EDI,EAX
    0001CD0D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     17998

    0001CD14  B8 01000000       MOV      EAX,1
    0001CD19  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     17999

    0001CD1F  B8 01000000       MOV      EAX,1
    0001CD24  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18001

    0001CD2A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001CD31  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001CD36  5B                POP      EBX

    LINE     18003

    0001CD37  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001CD3E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001CD43  5B                POP      EBX

    LINE     18005

    0001CD44  B8 0A000000       MOV      EAX,10
    0001CD49  40                INC      EAX
    0001CD4A  50                PUSH     EAX
    0001CD4B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CD4E  5B                POP      EBX
    0001CD4F  3B C3             CMP      EAX,EBX
    0001CD51  0F 8503000000     JNE      3
    0001CD57  EB                JMP      

    LINE     18019

    0001CD58  56                PUSH     ESI
    0001CD59  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001CD5F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001CD65  FF D1             CALL     ECX                       run_inner_proc
    0001CD67  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18021

    0001CD68  B8 01000000       MOV      EAX,1
    0001CD6D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18023

    0001CD70  B8 01000000       MOV      EAX,1
    0001CD75  8B C8             MOV      ECX,EAX
    0001CD77  B8 0A000000       MOV      EAX,10
    0001CD7C  50                PUSH     EAX
    0001CD7D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001CD80  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CD83  5B                POP      EBX
    0001CD84  53                PUSH     EBX
    0001CD85  3B C3             CMP      EAX,EBX
    0001CD87  0F 8E03000000     JLE      3
    0001CD8D  EB                JMP      

    LINE     18025

    0001CD8E  B8 01000000       MOV      EAX,1
    0001CD93  8B C8             MOV      ECX,EAX
    0001CD95  B8 05000000       MOV      EAX,5
    0001CD9A  50                PUSH     EAX
    0001CD9B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001CD9E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CDA1  5B                POP      EBX
    0001CDA2  53                PUSH     EBX
    0001CDA3  3B C3             CMP      EAX,EBX
    0001CDA5  0F 8E03000000     JLE      3
    0001CDAB  EB                JMP      

    LINE     18032

    0001CDAC  B8 01000000       MOV      EAX,1
    0001CDB1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18033

    0001CDB4  B8 01000000       MOV      EAX,1
    0001CDB9  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18034

    0001CDBC  B8 01000000       MOV      EAX,1
    0001CDC1  8B C8             MOV      ECX,EAX
    0001CDC3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CDC6  48                DEC      EAX
    0001CDC7  BB 0E000000       MOV      EBX,14
    0001CDCC  F7 E3             MUL      EBX
    0001CDCE  50                PUSH     EAX
    0001CDCF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CDD2  48                DEC      EAX
    0001CDD3  BB 02000000       MOV      EBX,2
    0001CDD8  F7 E3             MUL      EBX
    0001CDDA  5B                POP      EBX
    0001CDDB  03 C3             ADD      EAX,EBX
    0001CDDD  8B F8             MOV      EDI,EAX
    0001CDDF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18035

    0001CDE3  B8 01000000       MOV      EAX,1
    0001CDE8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18036

    0001CDEB  B8 01000000       MOV      EAX,1
    0001CDF0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18038

    0001CDF3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001CDFA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001CDFF  5B                POP      EBX

    LINE     18040

    0001CE00  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001CE07  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001CE0C  5B                POP      EBX

    LINE     18042

    0001CE0D  B8 0A000000       MOV      EAX,10
    0001CE12  40                INC      EAX
    0001CE13  50                PUSH     EAX
    0001CE14  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CE17  5B                POP      EBX
    0001CE18  3B C3             CMP      EAX,EBX
    0001CE1A  0F 8503000000     JNE      3
    0001CE20  EB                JMP      

    LINE     18049

    0001CE21  B8 01000000       MOV      EAX,1
    0001CE26  8B C8             MOV      ECX,EAX
    0001CE28  B8 0A000000       MOV      EAX,10
    0001CE2D  50                PUSH     EAX
    0001CE2E  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001CE31  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CE34  5B                POP      EBX
    0001CE35  53                PUSH     EBX
    0001CE36  3B C3             CMP      EAX,EBX
    0001CE38  0F 8E03000000     JLE      3
    0001CE3E  EB                JMP      

    LINE     18051

    0001CE3F  B8 01000000       MOV      EAX,1
    0001CE44  8B C8             MOV      ECX,EAX
    0001CE46  B8 05000000       MOV      EAX,5
    0001CE4B  50                PUSH     EAX
    0001CE4C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001CE4F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CE52  5B                POP      EBX
    0001CE53  53                PUSH     EBX
    0001CE54  3B C3             CMP      EAX,EBX
    0001CE56  0F 8E03000000     JLE      3
    0001CE5C  EB                JMP      

    LINE     18058

    0001CE5D  B8 01000000       MOV      EAX,1
    0001CE62  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18059

    0001CE65  B8 01000000       MOV      EAX,1
    0001CE6A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18060

    0001CE6D  B8 01000000       MOV      EAX,1
    0001CE72  8B C8             MOV      ECX,EAX
    0001CE74  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CE77  48                DEC      EAX
    0001CE78  BB 0E000000       MOV      EBX,14
    0001CE7D  F7 E3             MUL      EBX
    0001CE7F  50                PUSH     EAX
    0001CE80  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CE83  48                DEC      EAX
    0001CE84  BB 02000000       MOV      EBX,2
    0001CE89  F7 E3             MUL      EBX
    0001CE8B  5B                POP      EBX
    0001CE8C  03 C3             ADD      EAX,EBX
    0001CE8E  8B F8             MOV      EDI,EAX
    0001CE90  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18061

    0001CE94  B8 01000000       MOV      EAX,1
    0001CE99  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18062

    0001CE9C  B8 01000000       MOV      EAX,1
    0001CEA1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18064

    0001CEA4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001CEAB  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001CEB0  5B                POP      EBX

    LINE     18066

    0001CEB1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001CEB8  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001CEBD  5B                POP      EBX

    LINE     18068

    0001CEBE  B8 0A000000       MOV      EAX,10
    0001CEC3  40                INC      EAX
    0001CEC4  50                PUSH     EAX
    0001CEC5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CEC8  5B                POP      EBX
    0001CEC9  3B C3             CMP      EAX,EBX
    0001CECB  0F 8503000000     JNE      3
    0001CED1  EB                JMP      

    LINE     18076

    0001CED2  B8 01000000       MOV      EAX,1
    0001CED7  8B C8             MOV      ECX,EAX
    0001CED9  B8 0A000000       MOV      EAX,10
    0001CEDE  50                PUSH     EAX
    0001CEDF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001CEE2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CEE5  5B                POP      EBX
    0001CEE6  53                PUSH     EBX
    0001CEE7  3B C3             CMP      EAX,EBX
    0001CEE9  0F 8E03000000     JLE      3
    0001CEEF  EB                JMP      

    LINE     18078

    0001CEF0  B8 01000000       MOV      EAX,1
    0001CEF5  8B C8             MOV      ECX,EAX
    0001CEF7  B8 05000000       MOV      EAX,5
    0001CEFC  50                PUSH     EAX
    0001CEFD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001CF00  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CF03  5B                POP      EBX
    0001CF04  53                PUSH     EBX
    0001CF05  3B C3             CMP      EAX,EBX
    0001CF07  0F 8E03000000     JLE      3
    0001CF0D  EB                JMP      

    LINE     18085

    0001CF0E  B8 01000000       MOV      EAX,1
    0001CF13  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18086

    0001CF19  B8 01000000       MOV      EAX,1
    0001CF1E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18087

    0001CF24  B8 01000000       MOV      EAX,1
    0001CF29  8B C8             MOV      ECX,EAX
    0001CF2B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CF2E  48                DEC      EAX
    0001CF2F  BB 0E000000       MOV      EBX,14
    0001CF34  F7 E3             MUL      EBX
    0001CF36  50                PUSH     EAX
    0001CF37  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001CF3A  48                DEC      EAX
    0001CF3B  BB 02000000       MOV      EBX,2
    0001CF40  F7 E3             MUL      EBX
    0001CF42  5B                POP      EBX
    0001CF43  03 C3             ADD      EAX,EBX
    0001CF45  8B F8             MOV      EDI,EAX
    0001CF47  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18088

    0001CF4E  B8 01000000       MOV      EAX,1
    0001CF53  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18089

    0001CF59  B8 01000000       MOV      EAX,1
    0001CF5E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18091

    0001CF64  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001CF6B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001CF70  5B                POP      EBX

    LINE     18093

    0001CF71  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001CF78  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001CF7D  5B                POP      EBX

    LINE     18095

    0001CF7E  B8 0A000000       MOV      EAX,10
    0001CF83  40                INC      EAX
    0001CF84  50                PUSH     EAX
    0001CF85  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001CF88  5B                POP      EBX
    0001CF89  3B C3             CMP      EAX,EBX
    0001CF8B  0F 8503000000     JNE      3
    0001CF91  EB                JMP      

    LINE     18102

    0001CF92  B8 01000000       MOV      EAX,1
    0001CF97  8B C8             MOV      ECX,EAX
    0001CF99  B8 0A000000       MOV      EAX,10
    0001CF9E  50                PUSH     EAX
    0001CF9F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001CFA2  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CFA5  5B                POP      EBX
    0001CFA6  53                PUSH     EBX
    0001CFA7  3B C3             CMP      EAX,EBX
    0001CFA9  0F 8E03000000     JLE      3
    0001CFAF  EB                JMP      

    LINE     18104

    0001CFB0  B8 01000000       MOV      EAX,1
    0001CFB5  8B C8             MOV      ECX,EAX
    0001CFB7  B8 05000000       MOV      EAX,5
    0001CFBC  50                PUSH     EAX
    0001CFBD  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001CFC0  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CFC3  5B                POP      EBX
    0001CFC4  53                PUSH     EBX
    0001CFC5  3B C3             CMP      EAX,EBX
    0001CFC7  0F 8E03000000     JLE      3
    0001CFCD  EB                JMP      

    LINE     18111

    0001CFCE  B8 01000000       MOV      EAX,1
    0001CFD3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18112

    0001CFD9  B8 01000000       MOV      EAX,1
    0001CFDE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18113

    0001CFE4  B8 01000000       MOV      EAX,1
    0001CFE9  8B C8             MOV      ECX,EAX
    0001CFEB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001CFEE  48                DEC      EAX
    0001CFEF  BB 0E000000       MOV      EBX,14
    0001CFF4  F7 E3             MUL      EBX
    0001CFF6  50                PUSH     EAX
    0001CFF7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001CFFA  48                DEC      EAX
    0001CFFB  BB 02000000       MOV      EBX,2
    0001D000  F7 E3             MUL      EBX
    0001D002  5B                POP      EBX
    0001D003  03 C3             ADD      EAX,EBX
    0001D005  8B F8             MOV      EDI,EAX
    0001D007  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18114

    0001D00E  B8 01000000       MOV      EAX,1
    0001D013  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18115

    0001D019  B8 01000000       MOV      EAX,1
    0001D01E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18117

    0001D024  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001D02B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001D030  5B                POP      EBX

    LINE     18119

    0001D031  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001D038  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001D03D  5B                POP      EBX

    LINE     18121

    0001D03E  B8 0A000000       MOV      EAX,10
    0001D043  40                INC      EAX
    0001D044  50                PUSH     EAX
    0001D045  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D048  5B                POP      EBX
    0001D049  3B C3             CMP      EAX,EBX
    0001D04B  0F 8503000000     JNE      3
    0001D051  EB                JMP      

    LINE     18135

    0001D052  56                PUSH     ESI
    0001D053  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001D059  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001D05F  FF D1             CALL     ECX                       run_inner_proc
    0001D061  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18137

    0001D062  B8 01000000       MOV      EAX,1
    0001D067  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18139

    0001D06A  B8 01000000       MOV      EAX,1
    0001D06F  8B C8             MOV      ECX,EAX
    0001D071  B8 0A000000       MOV      EAX,10
    0001D076  50                PUSH     EAX
    0001D077  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001D07A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D07D  5B                POP      EBX
    0001D07E  53                PUSH     EBX
    0001D07F  3B C3             CMP      EAX,EBX
    0001D081  0F 8E03000000     JLE      3
    0001D087  EB                JMP      

    LINE     18141

    0001D088  B8 01000000       MOV      EAX,1
    0001D08D  8B C8             MOV      ECX,EAX
    0001D08F  B8 05000000       MOV      EAX,5
    0001D094  50                PUSH     EAX
    0001D095  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001D098  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D09B  5B                POP      EBX
    0001D09C  53                PUSH     EBX
    0001D09D  3B C3             CMP      EAX,EBX
    0001D09F  0F 8E03000000     JLE      3
    0001D0A5  EB                JMP      

    LINE     18148

    0001D0A6  B8 01000000       MOV      EAX,1
    0001D0AB  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18149

    0001D0AE  B8 01000000       MOV      EAX,1
    0001D0B3  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18150

    0001D0B6  B8 01000000       MOV      EAX,1
    0001D0BB  8B C8             MOV      ECX,EAX
    0001D0BD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D0C0  48                DEC      EAX
    0001D0C1  BB 0E000000       MOV      EBX,14
    0001D0C6  F7 E3             MUL      EBX
    0001D0C8  50                PUSH     EAX
    0001D0C9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D0CC  48                DEC      EAX
    0001D0CD  BB 02000000       MOV      EBX,2
    0001D0D2  F7 E3             MUL      EBX
    0001D0D4  5B                POP      EBX
    0001D0D5  03 C3             ADD      EAX,EBX
    0001D0D7  8B F8             MOV      EDI,EAX
    0001D0D9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18151

    0001D0DD  B8 01000000       MOV      EAX,1
    0001D0E2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18152

    0001D0E5  B8 01000000       MOV      EAX,1
    0001D0EA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18154

    0001D0ED  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001D0F4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001D0F9  5B                POP      EBX

    LINE     18156

    0001D0FA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001D101  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001D106  5B                POP      EBX

    LINE     18158

    0001D107  B8 0A000000       MOV      EAX,10
    0001D10C  40                INC      EAX
    0001D10D  50                PUSH     EAX
    0001D10E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D111  5B                POP      EBX
    0001D112  3B C3             CMP      EAX,EBX
    0001D114  0F 8503000000     JNE      3
    0001D11A  EB                JMP      

    LINE     18165

    0001D11B  B8 01000000       MOV      EAX,1
    0001D120  8B C8             MOV      ECX,EAX
    0001D122  B8 0A000000       MOV      EAX,10
    0001D127  50                PUSH     EAX
    0001D128  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001D12B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D12E  5B                POP      EBX
    0001D12F  53                PUSH     EBX
    0001D130  3B C3             CMP      EAX,EBX
    0001D132  0F 8E03000000     JLE      3
    0001D138  EB                JMP      

    LINE     18167

    0001D139  B8 01000000       MOV      EAX,1
    0001D13E  8B C8             MOV      ECX,EAX
    0001D140  B8 05000000       MOV      EAX,5
    0001D145  50                PUSH     EAX
    0001D146  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001D149  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D14C  5B                POP      EBX
    0001D14D  53                PUSH     EBX
    0001D14E  3B C3             CMP      EAX,EBX
    0001D150  0F 8E03000000     JLE      3
    0001D156  EB                JMP      

    LINE     18174

    0001D157  B8 01000000       MOV      EAX,1
    0001D15C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18175

    0001D15F  B8 01000000       MOV      EAX,1
    0001D164  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18176

    0001D167  B8 01000000       MOV      EAX,1
    0001D16C  8B C8             MOV      ECX,EAX
    0001D16E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D171  48                DEC      EAX
    0001D172  BB 0E000000       MOV      EBX,14
    0001D177  F7 E3             MUL      EBX
    0001D179  50                PUSH     EAX
    0001D17A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D17D  48                DEC      EAX
    0001D17E  BB 02000000       MOV      EBX,2
    0001D183  F7 E3             MUL      EBX
    0001D185  5B                POP      EBX
    0001D186  03 C3             ADD      EAX,EBX
    0001D188  8B F8             MOV      EDI,EAX
    0001D18A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18177

    0001D18E  B8 01000000       MOV      EAX,1
    0001D193  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18178

    0001D196  B8 01000000       MOV      EAX,1
    0001D19B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18180

    0001D19E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001D1A5  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001D1AA  5B                POP      EBX

    LINE     18182

    0001D1AB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001D1B2  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001D1B7  5B                POP      EBX

    LINE     18184

    0001D1B8  B8 0A000000       MOV      EAX,10
    0001D1BD  40                INC      EAX
    0001D1BE  50                PUSH     EAX
    0001D1BF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D1C2  5B                POP      EBX
    0001D1C3  3B C3             CMP      EAX,EBX
    0001D1C5  0F 8503000000     JNE      3
    0001D1CB  EB                JMP      

    LINE     18192

    0001D1CC  B8 01000000       MOV      EAX,1
    0001D1D1  8B C8             MOV      ECX,EAX
    0001D1D3  B8 0A000000       MOV      EAX,10
    0001D1D8  50                PUSH     EAX
    0001D1D9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001D1DC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D1DF  5B                POP      EBX
    0001D1E0  53                PUSH     EBX
    0001D1E1  3B C3             CMP      EAX,EBX
    0001D1E3  0F 8E03000000     JLE      3
    0001D1E9  EB                JMP      

    LINE     18194

    0001D1EA  B8 01000000       MOV      EAX,1
    0001D1EF  8B C8             MOV      ECX,EAX
    0001D1F1  B8 05000000       MOV      EAX,5
    0001D1F6  50                PUSH     EAX
    0001D1F7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001D1FA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D1FD  5B                POP      EBX
    0001D1FE  53                PUSH     EBX
    0001D1FF  3B C3             CMP      EAX,EBX
    0001D201  0F 8E03000000     JLE      3
    0001D207  EB                JMP      

    LINE     18201

    0001D208  B8 01000000       MOV      EAX,1
    0001D20D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18202

    0001D213  B8 01000000       MOV      EAX,1
    0001D218  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18203

    0001D21E  B8 01000000       MOV      EAX,1
    0001D223  8B C8             MOV      ECX,EAX
    0001D225  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D228  48                DEC      EAX
    0001D229  BB 0E000000       MOV      EBX,14
    0001D22E  F7 E3             MUL      EBX
    0001D230  50                PUSH     EAX
    0001D231  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D234  48                DEC      EAX
    0001D235  BB 02000000       MOV      EBX,2
    0001D23A  F7 E3             MUL      EBX
    0001D23C  5B                POP      EBX
    0001D23D  03 C3             ADD      EAX,EBX
    0001D23F  8B F8             MOV      EDI,EAX
    0001D241  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18204

    0001D248  B8 01000000       MOV      EAX,1
    0001D24D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18205

    0001D253  B8 01000000       MOV      EAX,1
    0001D258  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18207

    0001D25E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001D265  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001D26A  5B                POP      EBX

    LINE     18209

    0001D26B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001D272  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001D277  5B                POP      EBX

    LINE     18211

    0001D278  B8 0A000000       MOV      EAX,10
    0001D27D  40                INC      EAX
    0001D27E  50                PUSH     EAX
    0001D27F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D282  5B                POP      EBX
    0001D283  3B C3             CMP      EAX,EBX
    0001D285  0F 8503000000     JNE      3
    0001D28B  EB                JMP      

    LINE     18218

    0001D28C  B8 01000000       MOV      EAX,1
    0001D291  8B C8             MOV      ECX,EAX
    0001D293  B8 0A000000       MOV      EAX,10
    0001D298  50                PUSH     EAX
    0001D299  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001D29C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D29F  5B                POP      EBX
    0001D2A0  53                PUSH     EBX
    0001D2A1  3B C3             CMP      EAX,EBX
    0001D2A3  0F 8E03000000     JLE      3
    0001D2A9  EB                JMP      

    LINE     18220

    0001D2AA  B8 01000000       MOV      EAX,1
    0001D2AF  8B C8             MOV      ECX,EAX
    0001D2B1  B8 05000000       MOV      EAX,5
    0001D2B6  50                PUSH     EAX
    0001D2B7  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001D2BA  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D2BD  5B                POP      EBX
    0001D2BE  53                PUSH     EBX
    0001D2BF  3B C3             CMP      EAX,EBX
    0001D2C1  0F 8E03000000     JLE      3
    0001D2C7  EB                JMP      

    LINE     18227

    0001D2C8  B8 01000000       MOV      EAX,1
    0001D2CD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18228

    0001D2D3  B8 01000000       MOV      EAX,1
    0001D2D8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18229

    0001D2DE  B8 01000000       MOV      EAX,1
    0001D2E3  8B C8             MOV      ECX,EAX
    0001D2E5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D2E8  48                DEC      EAX
    0001D2E9  BB 0E000000       MOV      EBX,14
    0001D2EE  F7 E3             MUL      EBX
    0001D2F0  50                PUSH     EAX
    0001D2F1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D2F4  48                DEC      EAX
    0001D2F5  BB 02000000       MOV      EBX,2
    0001D2FA  F7 E3             MUL      EBX
    0001D2FC  5B                POP      EBX
    0001D2FD  03 C3             ADD      EAX,EBX
    0001D2FF  8B F8             MOV      EDI,EAX
    0001D301  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18230

    0001D308  B8 01000000       MOV      EAX,1
    0001D30D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18231

    0001D313  B8 01000000       MOV      EAX,1
    0001D318  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18233

    0001D31E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001D325  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001D32A  5B                POP      EBX

    LINE     18235

    0001D32B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001D332  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001D337  5B                POP      EBX

    LINE     18237

    0001D338  B8 0A000000       MOV      EAX,10
    0001D33D  40                INC      EAX
    0001D33E  50                PUSH     EAX
    0001D33F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D342  5B                POP      EBX
    0001D343  3B C3             CMP      EAX,EBX
    0001D345  0F 8503000000     JNE      3
    0001D34B  EB                JMP      

    LINE     18251

    0001D34C  56                PUSH     ESI
    0001D34D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001D353  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001D359  FF D1             CALL     ECX                       run_inner_proc
    0001D35B  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18253

    0001D35C  B8 01000000       MOV      EAX,1
    0001D361  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18255

    0001D364  B8 01000000       MOV      EAX,1
    0001D369  8B C8             MOV      ECX,EAX
    0001D36B  B8 0A000000       MOV      EAX,10
    0001D370  50                PUSH     EAX
    0001D371  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001D374  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D377  5B                POP      EBX
    0001D378  53                PUSH     EBX
    0001D379  3B C3             CMP      EAX,EBX
    0001D37B  0F 8E03000000     JLE      3
    0001D381  EB                JMP      

    LINE     18257

    0001D382  B8 01000000       MOV      EAX,1
    0001D387  8B C8             MOV      ECX,EAX
    0001D389  B8 05000000       MOV      EAX,5
    0001D38E  50                PUSH     EAX
    0001D38F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001D392  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D395  5B                POP      EBX
    0001D396  53                PUSH     EBX
    0001D397  3B C3             CMP      EAX,EBX
    0001D399  0F 8E03000000     JLE      3
    0001D39F  EB                JMP      

    LINE     18264

    0001D3A0  B8 01000000       MOV      EAX,1
    0001D3A5  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18265

    0001D3A8  B8 01000000       MOV      EAX,1
    0001D3AD  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18266

    0001D3B0  B8 01000000       MOV      EAX,1
    0001D3B5  8B C8             MOV      ECX,EAX
    0001D3B7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D3BA  48                DEC      EAX
    0001D3BB  BB 0E000000       MOV      EBX,14
    0001D3C0  F7 E3             MUL      EBX
    0001D3C2  50                PUSH     EAX
    0001D3C3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D3C6  48                DEC      EAX
    0001D3C7  BB 02000000       MOV      EBX,2
    0001D3CC  F7 E3             MUL      EBX
    0001D3CE  5B                POP      EBX
    0001D3CF  03 C3             ADD      EAX,EBX
    0001D3D1  8B F8             MOV      EDI,EAX
    0001D3D3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18267

    0001D3D7  B8 01000000       MOV      EAX,1
    0001D3DC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18268

    0001D3DF  B8 01000000       MOV      EAX,1
    0001D3E4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18270

    0001D3E7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001D3EE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001D3F3  5B                POP      EBX

    LINE     18272

    0001D3F4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001D3FB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001D400  5B                POP      EBX

    LINE     18274

    0001D401  B8 0A000000       MOV      EAX,10
    0001D406  40                INC      EAX
    0001D407  50                PUSH     EAX
    0001D408  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D40B  5B                POP      EBX
    0001D40C  3B C3             CMP      EAX,EBX
    0001D40E  0F 8503000000     JNE      3
    0001D414  EB                JMP      

    LINE     18281

    0001D415  B8 01000000       MOV      EAX,1
    0001D41A  8B C8             MOV      ECX,EAX
    0001D41C  B8 0A000000       MOV      EAX,10
    0001D421  50                PUSH     EAX
    0001D422  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001D425  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D428  5B                POP      EBX
    0001D429  53                PUSH     EBX
    0001D42A  3B C3             CMP      EAX,EBX
    0001D42C  0F 8E03000000     JLE      3
    0001D432  EB                JMP      

    LINE     18283

    0001D433  B8 01000000       MOV      EAX,1
    0001D438  8B C8             MOV      ECX,EAX
    0001D43A  B8 05000000       MOV      EAX,5
    0001D43F  50                PUSH     EAX
    0001D440  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001D443  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D446  5B                POP      EBX
    0001D447  53                PUSH     EBX
    0001D448  3B C3             CMP      EAX,EBX
    0001D44A  0F 8E03000000     JLE      3
    0001D450  EB                JMP      

    LINE     18290

    0001D451  B8 01000000       MOV      EAX,1
    0001D456  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18291

    0001D459  B8 01000000       MOV      EAX,1
    0001D45E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18292

    0001D461  B8 01000000       MOV      EAX,1
    0001D466  8B C8             MOV      ECX,EAX
    0001D468  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D46B  48                DEC      EAX
    0001D46C  BB 0E000000       MOV      EBX,14
    0001D471  F7 E3             MUL      EBX
    0001D473  50                PUSH     EAX
    0001D474  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D477  48                DEC      EAX
    0001D478  BB 02000000       MOV      EBX,2
    0001D47D  F7 E3             MUL      EBX
    0001D47F  5B                POP      EBX
    0001D480  03 C3             ADD      EAX,EBX
    0001D482  8B F8             MOV      EDI,EAX
    0001D484  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18293

    0001D488  B8 01000000       MOV      EAX,1
    0001D48D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18294

    0001D490  B8 01000000       MOV      EAX,1
    0001D495  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18296

    0001D498  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001D49F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001D4A4  5B                POP      EBX

    LINE     18298

    0001D4A5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001D4AC  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001D4B1  5B                POP      EBX

    LINE     18300

    0001D4B2  B8 0A000000       MOV      EAX,10
    0001D4B7  40                INC      EAX
    0001D4B8  50                PUSH     EAX
    0001D4B9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D4BC  5B                POP      EBX
    0001D4BD  3B C3             CMP      EAX,EBX
    0001D4BF  0F 8503000000     JNE      3
    0001D4C5  EB                JMP      

    LINE     18308

    0001D4C6  B8 01000000       MOV      EAX,1
    0001D4CB  8B C8             MOV      ECX,EAX
    0001D4CD  B8 0A000000       MOV      EAX,10
    0001D4D2  50                PUSH     EAX
    0001D4D3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001D4D6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D4D9  5B                POP      EBX
    0001D4DA  53                PUSH     EBX
    0001D4DB  3B C3             CMP      EAX,EBX
    0001D4DD  0F 8E03000000     JLE      3
    0001D4E3  EB                JMP      

    LINE     18310

    0001D4E4  B8 01000000       MOV      EAX,1
    0001D4E9  8B C8             MOV      ECX,EAX
    0001D4EB  B8 05000000       MOV      EAX,5
    0001D4F0  50                PUSH     EAX
    0001D4F1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001D4F4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D4F7  5B                POP      EBX
    0001D4F8  53                PUSH     EBX
    0001D4F9  3B C3             CMP      EAX,EBX
    0001D4FB  0F 8E03000000     JLE      3
    0001D501  EB                JMP      

    LINE     18317

    0001D502  B8 01000000       MOV      EAX,1
    0001D507  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18318

    0001D50D  B8 01000000       MOV      EAX,1
    0001D512  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18319

    0001D518  B8 01000000       MOV      EAX,1
    0001D51D  8B C8             MOV      ECX,EAX
    0001D51F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D522  48                DEC      EAX
    0001D523  BB 0E000000       MOV      EBX,14
    0001D528  F7 E3             MUL      EBX
    0001D52A  50                PUSH     EAX
    0001D52B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D52E  48                DEC      EAX
    0001D52F  BB 02000000       MOV      EBX,2
    0001D534  F7 E3             MUL      EBX
    0001D536  5B                POP      EBX
    0001D537  03 C3             ADD      EAX,EBX
    0001D539  8B F8             MOV      EDI,EAX
    0001D53B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18320

    0001D542  B8 01000000       MOV      EAX,1
    0001D547  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18321

    0001D54D  B8 01000000       MOV      EAX,1
    0001D552  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18323

    0001D558  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001D55F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001D564  5B                POP      EBX

    LINE     18325

    0001D565  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001D56C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001D571  5B                POP      EBX

    LINE     18327

    0001D572  B8 0A000000       MOV      EAX,10
    0001D577  40                INC      EAX
    0001D578  50                PUSH     EAX
    0001D579  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D57C  5B                POP      EBX
    0001D57D  3B C3             CMP      EAX,EBX
    0001D57F  0F 8503000000     JNE      3
    0001D585  EB                JMP      

    LINE     18334

    0001D586  B8 01000000       MOV      EAX,1
    0001D58B  8B C8             MOV      ECX,EAX
    0001D58D  B8 0A000000       MOV      EAX,10
    0001D592  50                PUSH     EAX
    0001D593  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001D596  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D599  5B                POP      EBX
    0001D59A  53                PUSH     EBX
    0001D59B  3B C3             CMP      EAX,EBX
    0001D59D  0F 8E03000000     JLE      3
    0001D5A3  EB                JMP      

    LINE     18336

    0001D5A4  B8 01000000       MOV      EAX,1
    0001D5A9  8B C8             MOV      ECX,EAX
    0001D5AB  B8 05000000       MOV      EAX,5
    0001D5B0  50                PUSH     EAX
    0001D5B1  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001D5B4  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D5B7  5B                POP      EBX
    0001D5B8  53                PUSH     EBX
    0001D5B9  3B C3             CMP      EAX,EBX
    0001D5BB  0F 8E03000000     JLE      3
    0001D5C1  EB                JMP      

    LINE     18343

    0001D5C2  B8 01000000       MOV      EAX,1
    0001D5C7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18344

    0001D5CD  B8 01000000       MOV      EAX,1
    0001D5D2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18345

    0001D5D8  B8 01000000       MOV      EAX,1
    0001D5DD  8B C8             MOV      ECX,EAX
    0001D5DF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D5E2  48                DEC      EAX
    0001D5E3  BB 0E000000       MOV      EBX,14
    0001D5E8  F7 E3             MUL      EBX
    0001D5EA  50                PUSH     EAX
    0001D5EB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D5EE  48                DEC      EAX
    0001D5EF  BB 02000000       MOV      EBX,2
    0001D5F4  F7 E3             MUL      EBX
    0001D5F6  5B                POP      EBX
    0001D5F7  03 C3             ADD      EAX,EBX
    0001D5F9  8B F8             MOV      EDI,EAX
    0001D5FB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18346

    0001D602  B8 01000000       MOV      EAX,1
    0001D607  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18347

    0001D60D  B8 01000000       MOV      EAX,1
    0001D612  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18349

    0001D618  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001D61F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001D624  5B                POP      EBX

    LINE     18351

    0001D625  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001D62C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001D631  5B                POP      EBX

    LINE     18353

    0001D632  B8 0A000000       MOV      EAX,10
    0001D637  40                INC      EAX
    0001D638  50                PUSH     EAX
    0001D639  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D63C  5B                POP      EBX
    0001D63D  3B C3             CMP      EAX,EBX
    0001D63F  0F 8503000000     JNE      3
    0001D645  EB                JMP      

    LINE     18367

    0001D646  56                PUSH     ESI
    0001D647  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001D64D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001D653  FF D1             CALL     ECX                       run_inner_proc
    0001D655  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18369

    0001D656  B8 01000000       MOV      EAX,1
    0001D65B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18371

    0001D65E  B8 01000000       MOV      EAX,1
    0001D663  8B C8             MOV      ECX,EAX
    0001D665  B8 0A000000       MOV      EAX,10
    0001D66A  50                PUSH     EAX
    0001D66B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001D66E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D671  5B                POP      EBX
    0001D672  53                PUSH     EBX
    0001D673  3B C3             CMP      EAX,EBX
    0001D675  0F 8E03000000     JLE      3
    0001D67B  EB                JMP      

    LINE     18373

    0001D67C  B8 01000000       MOV      EAX,1
    0001D681  8B C8             MOV      ECX,EAX
    0001D683  B8 05000000       MOV      EAX,5
    0001D688  50                PUSH     EAX
    0001D689  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001D68C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D68F  5B                POP      EBX
    0001D690  53                PUSH     EBX
    0001D691  3B C3             CMP      EAX,EBX
    0001D693  0F 8E03000000     JLE      3
    0001D699  EB                JMP      

    LINE     18380

    0001D69A  B8 01000000       MOV      EAX,1
    0001D69F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18381

    0001D6A2  B8 01000000       MOV      EAX,1
    0001D6A7  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18382

    0001D6AA  B8 01000000       MOV      EAX,1
    0001D6AF  8B C8             MOV      ECX,EAX
    0001D6B1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D6B4  48                DEC      EAX
    0001D6B5  BB 0E000000       MOV      EBX,14
    0001D6BA  F7 E3             MUL      EBX
    0001D6BC  50                PUSH     EAX
    0001D6BD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D6C0  48                DEC      EAX
    0001D6C1  BB 02000000       MOV      EBX,2
    0001D6C6  F7 E3             MUL      EBX
    0001D6C8  5B                POP      EBX
    0001D6C9  03 C3             ADD      EAX,EBX
    0001D6CB  8B F8             MOV      EDI,EAX
    0001D6CD  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18383

    0001D6D1  B8 01000000       MOV      EAX,1
    0001D6D6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18384

    0001D6D9  B8 01000000       MOV      EAX,1
    0001D6DE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18386

    0001D6E1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001D6E8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001D6ED  5B                POP      EBX

    LINE     18388

    0001D6EE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001D6F5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001D6FA  5B                POP      EBX

    LINE     18390

    0001D6FB  B8 0A000000       MOV      EAX,10
    0001D700  40                INC      EAX
    0001D701  50                PUSH     EAX
    0001D702  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D705  5B                POP      EBX
    0001D706  3B C3             CMP      EAX,EBX
    0001D708  0F 8503000000     JNE      3
    0001D70E  EB                JMP      

    LINE     18397

    0001D70F  B8 01000000       MOV      EAX,1
    0001D714  8B C8             MOV      ECX,EAX
    0001D716  B8 0A000000       MOV      EAX,10
    0001D71B  50                PUSH     EAX
    0001D71C  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001D71F  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D722  5B                POP      EBX
    0001D723  53                PUSH     EBX
    0001D724  3B C3             CMP      EAX,EBX
    0001D726  0F 8E03000000     JLE      3
    0001D72C  EB                JMP      

    LINE     18399

    0001D72D  B8 01000000       MOV      EAX,1
    0001D732  8B C8             MOV      ECX,EAX
    0001D734  B8 05000000       MOV      EAX,5
    0001D739  50                PUSH     EAX
    0001D73A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001D73D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D740  5B                POP      EBX
    0001D741  53                PUSH     EBX
    0001D742  3B C3             CMP      EAX,EBX
    0001D744  0F 8E03000000     JLE      3
    0001D74A  EB                JMP      

    LINE     18406

    0001D74B  B8 01000000       MOV      EAX,1
    0001D750  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18407

    0001D753  B8 01000000       MOV      EAX,1
    0001D758  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18408

    0001D75B  B8 01000000       MOV      EAX,1
    0001D760  8B C8             MOV      ECX,EAX
    0001D762  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D765  48                DEC      EAX
    0001D766  BB 0E000000       MOV      EBX,14
    0001D76B  F7 E3             MUL      EBX
    0001D76D  50                PUSH     EAX
    0001D76E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D771  48                DEC      EAX
    0001D772  BB 02000000       MOV      EBX,2
    0001D777  F7 E3             MUL      EBX
    0001D779  5B                POP      EBX
    0001D77A  03 C3             ADD      EAX,EBX
    0001D77C  8B F8             MOV      EDI,EAX
    0001D77E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18409

    0001D782  B8 01000000       MOV      EAX,1
    0001D787  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18410

    0001D78A  B8 01000000       MOV      EAX,1
    0001D78F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18412

    0001D792  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001D799  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001D79E  5B                POP      EBX

    LINE     18414

    0001D79F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001D7A6  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001D7AB  5B                POP      EBX

    LINE     18416

    0001D7AC  B8 0A000000       MOV      EAX,10
    0001D7B1  40                INC      EAX
    0001D7B2  50                PUSH     EAX
    0001D7B3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D7B6  5B                POP      EBX
    0001D7B7  3B C3             CMP      EAX,EBX
    0001D7B9  0F 8503000000     JNE      3
    0001D7BF  EB                JMP      

    LINE     18424

    0001D7C0  B8 01000000       MOV      EAX,1
    0001D7C5  8B C8             MOV      ECX,EAX
    0001D7C7  B8 0A000000       MOV      EAX,10
    0001D7CC  50                PUSH     EAX
    0001D7CD  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001D7D0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D7D3  5B                POP      EBX
    0001D7D4  53                PUSH     EBX
    0001D7D5  3B C3             CMP      EAX,EBX
    0001D7D7  0F 8E03000000     JLE      3
    0001D7DD  EB                JMP      

    LINE     18426

    0001D7DE  B8 01000000       MOV      EAX,1
    0001D7E3  8B C8             MOV      ECX,EAX
    0001D7E5  B8 05000000       MOV      EAX,5
    0001D7EA  50                PUSH     EAX
    0001D7EB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001D7EE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D7F1  5B                POP      EBX
    0001D7F2  53                PUSH     EBX
    0001D7F3  3B C3             CMP      EAX,EBX
    0001D7F5  0F 8E03000000     JLE      3
    0001D7FB  EB                JMP      

    LINE     18433

    0001D7FC  B8 01000000       MOV      EAX,1
    0001D801  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18434

    0001D807  B8 01000000       MOV      EAX,1
    0001D80C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18435

    0001D812  B8 01000000       MOV      EAX,1
    0001D817  8B C8             MOV      ECX,EAX
    0001D819  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D81C  48                DEC      EAX
    0001D81D  BB 0E000000       MOV      EBX,14
    0001D822  F7 E3             MUL      EBX
    0001D824  50                PUSH     EAX
    0001D825  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D828  48                DEC      EAX
    0001D829  BB 02000000       MOV      EBX,2
    0001D82E  F7 E3             MUL      EBX
    0001D830  5B                POP      EBX
    0001D831  03 C3             ADD      EAX,EBX
    0001D833  8B F8             MOV      EDI,EAX
    0001D835  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18436

    0001D83C  B8 01000000       MOV      EAX,1
    0001D841  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18437

    0001D847  B8 01000000       MOV      EAX,1
    0001D84C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18439

    0001D852  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001D859  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001D85E  5B                POP      EBX

    LINE     18441

    0001D85F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001D866  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001D86B  5B                POP      EBX

    LINE     18443

    0001D86C  B8 0A000000       MOV      EAX,10
    0001D871  40                INC      EAX
    0001D872  50                PUSH     EAX
    0001D873  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D876  5B                POP      EBX
    0001D877  3B C3             CMP      EAX,EBX
    0001D879  0F 8503000000     JNE      3
    0001D87F  EB                JMP      

    LINE     18450

    0001D880  B8 01000000       MOV      EAX,1
    0001D885  8B C8             MOV      ECX,EAX
    0001D887  B8 0A000000       MOV      EAX,10
    0001D88C  50                PUSH     EAX
    0001D88D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001D890  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D893  5B                POP      EBX
    0001D894  53                PUSH     EBX
    0001D895  3B C3             CMP      EAX,EBX
    0001D897  0F 8E03000000     JLE      3
    0001D89D  EB                JMP      

    LINE     18452

    0001D89E  B8 01000000       MOV      EAX,1
    0001D8A3  8B C8             MOV      ECX,EAX
    0001D8A5  B8 05000000       MOV      EAX,5
    0001D8AA  50                PUSH     EAX
    0001D8AB  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001D8AE  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D8B1  5B                POP      EBX
    0001D8B2  53                PUSH     EBX
    0001D8B3  3B C3             CMP      EAX,EBX
    0001D8B5  0F 8E03000000     JLE      3
    0001D8BB  EB                JMP      

    LINE     18459

    0001D8BC  B8 01000000       MOV      EAX,1
    0001D8C1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18460

    0001D8C7  B8 01000000       MOV      EAX,1
    0001D8CC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18461

    0001D8D2  B8 01000000       MOV      EAX,1
    0001D8D7  8B C8             MOV      ECX,EAX
    0001D8D9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001D8DC  48                DEC      EAX
    0001D8DD  BB 0E000000       MOV      EBX,14
    0001D8E2  F7 E3             MUL      EBX
    0001D8E4  50                PUSH     EAX
    0001D8E5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001D8E8  48                DEC      EAX
    0001D8E9  BB 02000000       MOV      EBX,2
    0001D8EE  F7 E3             MUL      EBX
    0001D8F0  5B                POP      EBX
    0001D8F1  03 C3             ADD      EAX,EBX
    0001D8F3  8B F8             MOV      EDI,EAX
    0001D8F5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18462

    0001D8FC  B8 01000000       MOV      EAX,1
    0001D901  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18463

    0001D907  B8 01000000       MOV      EAX,1
    0001D90C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18465

    0001D912  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001D919  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001D91E  5B                POP      EBX

    LINE     18467

    0001D91F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001D926  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001D92B  5B                POP      EBX

    LINE     18469

    0001D92C  B8 0A000000       MOV      EAX,10
    0001D931  40                INC      EAX
    0001D932  50                PUSH     EAX
    0001D933  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D936  5B                POP      EBX
    0001D937  3B C3             CMP      EAX,EBX
    0001D939  0F 8503000000     JNE      3
    0001D93F  EB                JMP      

    LINE     18483

    0001D940  56                PUSH     ESI
    0001D941  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001D947  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001D94D  FF D1             CALL     ECX                       run_inner_proc
    0001D94F  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18485

    0001D950  B8 01000000       MOV      EAX,1
    0001D955  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18487

    0001D958  B8 01000000       MOV      EAX,1
    0001D95D  8B C8             MOV      ECX,EAX
    0001D95F  B8 0A000000       MOV      EAX,10
    0001D964  50                PUSH     EAX
    0001D965  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001D968  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D96B  5B                POP      EBX
    0001D96C  53                PUSH     EBX
    0001D96D  3B C3             CMP      EAX,EBX
    0001D96F  0F 8E03000000     JLE      3
    0001D975  EB                JMP      

    LINE     18489

    0001D976  B8 01000000       MOV      EAX,1
    0001D97B  8B C8             MOV      ECX,EAX
    0001D97D  B8 05000000       MOV      EAX,5
    0001D982  50                PUSH     EAX
    0001D983  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001D986  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D989  5B                POP      EBX
    0001D98A  53                PUSH     EBX
    0001D98B  3B C3             CMP      EAX,EBX
    0001D98D  0F 8E03000000     JLE      3
    0001D993  EB                JMP      

    LINE     18496

    0001D994  B8 01000000       MOV      EAX,1
    0001D999  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18497

    0001D99C  B8 01000000       MOV      EAX,1
    0001D9A1  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18498

    0001D9A4  B8 01000000       MOV      EAX,1
    0001D9A9  8B C8             MOV      ECX,EAX
    0001D9AB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D9AE  48                DEC      EAX
    0001D9AF  BB 0E000000       MOV      EBX,14
    0001D9B4  F7 E3             MUL      EBX
    0001D9B6  50                PUSH     EAX
    0001D9B7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001D9BA  48                DEC      EAX
    0001D9BB  BB 02000000       MOV      EBX,2
    0001D9C0  F7 E3             MUL      EBX
    0001D9C2  5B                POP      EBX
    0001D9C3  03 C3             ADD      EAX,EBX
    0001D9C5  8B F8             MOV      EDI,EAX
    0001D9C7  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18499

    0001D9CB  B8 01000000       MOV      EAX,1
    0001D9D0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18500

    0001D9D3  B8 01000000       MOV      EAX,1
    0001D9D8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18502

    0001D9DB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001D9E2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001D9E7  5B                POP      EBX

    LINE     18504

    0001D9E8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001D9EF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001D9F4  5B                POP      EBX

    LINE     18506

    0001D9F5  B8 0A000000       MOV      EAX,10
    0001D9FA  40                INC      EAX
    0001D9FB  50                PUSH     EAX
    0001D9FC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001D9FF  5B                POP      EBX
    0001DA00  3B C3             CMP      EAX,EBX
    0001DA02  0F 8503000000     JNE      3
    0001DA08  EB                JMP      

    LINE     18513

    0001DA09  B8 01000000       MOV      EAX,1
    0001DA0E  8B C8             MOV      ECX,EAX
    0001DA10  B8 0A000000       MOV      EAX,10
    0001DA15  50                PUSH     EAX
    0001DA16  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001DA19  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DA1C  5B                POP      EBX
    0001DA1D  53                PUSH     EBX
    0001DA1E  3B C3             CMP      EAX,EBX
    0001DA20  0F 8E03000000     JLE      3
    0001DA26  EB                JMP      

    LINE     18515

    0001DA27  B8 01000000       MOV      EAX,1
    0001DA2C  8B C8             MOV      ECX,EAX
    0001DA2E  B8 05000000       MOV      EAX,5
    0001DA33  50                PUSH     EAX
    0001DA34  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001DA37  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DA3A  5B                POP      EBX
    0001DA3B  53                PUSH     EBX
    0001DA3C  3B C3             CMP      EAX,EBX
    0001DA3E  0F 8E03000000     JLE      3
    0001DA44  EB                JMP      

    LINE     18522

    0001DA45  B8 01000000       MOV      EAX,1
    0001DA4A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18523

    0001DA4D  B8 01000000       MOV      EAX,1
    0001DA52  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18524

    0001DA55  B8 01000000       MOV      EAX,1
    0001DA5A  8B C8             MOV      ECX,EAX
    0001DA5C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DA5F  48                DEC      EAX
    0001DA60  BB 0E000000       MOV      EBX,14
    0001DA65  F7 E3             MUL      EBX
    0001DA67  50                PUSH     EAX
    0001DA68  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DA6B  48                DEC      EAX
    0001DA6C  BB 02000000       MOV      EBX,2
    0001DA71  F7 E3             MUL      EBX
    0001DA73  5B                POP      EBX
    0001DA74  03 C3             ADD      EAX,EBX
    0001DA76  8B F8             MOV      EDI,EAX
    0001DA78  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18525

    0001DA7C  B8 01000000       MOV      EAX,1
    0001DA81  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18526

    0001DA84  B8 01000000       MOV      EAX,1
    0001DA89  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18528

    0001DA8C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001DA93  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001DA98  5B                POP      EBX

    LINE     18530

    0001DA99  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001DAA0  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001DAA5  5B                POP      EBX

    LINE     18532

    0001DAA6  B8 0A000000       MOV      EAX,10
    0001DAAB  40                INC      EAX
    0001DAAC  50                PUSH     EAX
    0001DAAD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DAB0  5B                POP      EBX
    0001DAB1  3B C3             CMP      EAX,EBX
    0001DAB3  0F 8503000000     JNE      3
    0001DAB9  EB                JMP      

    LINE     18540

    0001DABA  B8 01000000       MOV      EAX,1
    0001DABF  8B C8             MOV      ECX,EAX
    0001DAC1  B8 0A000000       MOV      EAX,10
    0001DAC6  50                PUSH     EAX
    0001DAC7  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001DACA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DACD  5B                POP      EBX
    0001DACE  53                PUSH     EBX
    0001DACF  3B C3             CMP      EAX,EBX
    0001DAD1  0F 8E03000000     JLE      3
    0001DAD7  EB                JMP      

    LINE     18542

    0001DAD8  B8 01000000       MOV      EAX,1
    0001DADD  8B C8             MOV      ECX,EAX
    0001DADF  B8 05000000       MOV      EAX,5
    0001DAE4  50                PUSH     EAX
    0001DAE5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001DAE8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DAEB  5B                POP      EBX
    0001DAEC  53                PUSH     EBX
    0001DAED  3B C3             CMP      EAX,EBX
    0001DAEF  0F 8E03000000     JLE      3
    0001DAF5  EB                JMP      

    LINE     18549

    0001DAF6  B8 01000000       MOV      EAX,1
    0001DAFB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18550

    0001DB01  B8 01000000       MOV      EAX,1
    0001DB06  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18551

    0001DB0C  B8 01000000       MOV      EAX,1
    0001DB11  8B C8             MOV      ECX,EAX
    0001DB13  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DB16  48                DEC      EAX
    0001DB17  BB 0E000000       MOV      EBX,14
    0001DB1C  F7 E3             MUL      EBX
    0001DB1E  50                PUSH     EAX
    0001DB1F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DB22  48                DEC      EAX
    0001DB23  BB 02000000       MOV      EBX,2
    0001DB28  F7 E3             MUL      EBX
    0001DB2A  5B                POP      EBX
    0001DB2B  03 C3             ADD      EAX,EBX
    0001DB2D  8B F8             MOV      EDI,EAX
    0001DB2F  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18552

    0001DB36  B8 01000000       MOV      EAX,1
    0001DB3B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18553

    0001DB41  B8 01000000       MOV      EAX,1
    0001DB46  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18555

    0001DB4C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001DB53  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001DB58  5B                POP      EBX

    LINE     18557

    0001DB59  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001DB60  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001DB65  5B                POP      EBX

    LINE     18559

    0001DB66  B8 0A000000       MOV      EAX,10
    0001DB6B  40                INC      EAX
    0001DB6C  50                PUSH     EAX
    0001DB6D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DB70  5B                POP      EBX
    0001DB71  3B C3             CMP      EAX,EBX
    0001DB73  0F 8503000000     JNE      3
    0001DB79  EB                JMP      

    LINE     18566

    0001DB7A  B8 01000000       MOV      EAX,1
    0001DB7F  8B C8             MOV      ECX,EAX
    0001DB81  B8 0A000000       MOV      EAX,10
    0001DB86  50                PUSH     EAX
    0001DB87  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001DB8A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DB8D  5B                POP      EBX
    0001DB8E  53                PUSH     EBX
    0001DB8F  3B C3             CMP      EAX,EBX
    0001DB91  0F 8E03000000     JLE      3
    0001DB97  EB                JMP      

    LINE     18568

    0001DB98  B8 01000000       MOV      EAX,1
    0001DB9D  8B C8             MOV      ECX,EAX
    0001DB9F  B8 05000000       MOV      EAX,5
    0001DBA4  50                PUSH     EAX
    0001DBA5  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001DBA8  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DBAB  5B                POP      EBX
    0001DBAC  53                PUSH     EBX
    0001DBAD  3B C3             CMP      EAX,EBX
    0001DBAF  0F 8E03000000     JLE      3
    0001DBB5  EB                JMP      

    LINE     18575

    0001DBB6  B8 01000000       MOV      EAX,1
    0001DBBB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18576

    0001DBC1  B8 01000000       MOV      EAX,1
    0001DBC6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18577

    0001DBCC  B8 01000000       MOV      EAX,1
    0001DBD1  8B C8             MOV      ECX,EAX
    0001DBD3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DBD6  48                DEC      EAX
    0001DBD7  BB 0E000000       MOV      EBX,14
    0001DBDC  F7 E3             MUL      EBX
    0001DBDE  50                PUSH     EAX
    0001DBDF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DBE2  48                DEC      EAX
    0001DBE3  BB 02000000       MOV      EBX,2
    0001DBE8  F7 E3             MUL      EBX
    0001DBEA  5B                POP      EBX
    0001DBEB  03 C3             ADD      EAX,EBX
    0001DBED  8B F8             MOV      EDI,EAX
    0001DBEF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18578

    0001DBF6  B8 01000000       MOV      EAX,1
    0001DBFB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18579

    0001DC01  B8 01000000       MOV      EAX,1
    0001DC06  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18581

    0001DC0C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001DC13  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001DC18  5B                POP      EBX

    LINE     18583

    0001DC19  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001DC20  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001DC25  5B                POP      EBX

    LINE     18585

    0001DC26  B8 0A000000       MOV      EAX,10
    0001DC2B  40                INC      EAX
    0001DC2C  50                PUSH     EAX
    0001DC2D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DC30  5B                POP      EBX
    0001DC31  3B C3             CMP      EAX,EBX
    0001DC33  0F 8503000000     JNE      3
    0001DC39  EB                JMP      

    LINE     18599

    0001DC3A  56                PUSH     ESI
    0001DC3B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001DC41  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001DC47  FF D1             CALL     ECX                       run_inner_proc
    0001DC49  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18601

    0001DC4A  B8 01000000       MOV      EAX,1
    0001DC4F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18603

    0001DC52  B8 01000000       MOV      EAX,1
    0001DC57  8B C8             MOV      ECX,EAX
    0001DC59  B8 0A000000       MOV      EAX,10
    0001DC5E  50                PUSH     EAX
    0001DC5F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001DC62  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DC65  5B                POP      EBX
    0001DC66  53                PUSH     EBX
    0001DC67  3B C3             CMP      EAX,EBX
    0001DC69  0F 8E03000000     JLE      3
    0001DC6F  EB                JMP      

    LINE     18605

    0001DC70  B8 01000000       MOV      EAX,1
    0001DC75  8B C8             MOV      ECX,EAX
    0001DC77  B8 05000000       MOV      EAX,5
    0001DC7C  50                PUSH     EAX
    0001DC7D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001DC80  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DC83  5B                POP      EBX
    0001DC84  53                PUSH     EBX
    0001DC85  3B C3             CMP      EAX,EBX
    0001DC87  0F 8E03000000     JLE      3
    0001DC8D  EB                JMP      

    LINE     18612

    0001DC8E  B8 01000000       MOV      EAX,1
    0001DC93  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18613

    0001DC96  B8 01000000       MOV      EAX,1
    0001DC9B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18614

    0001DC9E  B8 01000000       MOV      EAX,1
    0001DCA3  8B C8             MOV      ECX,EAX
    0001DCA5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DCA8  48                DEC      EAX
    0001DCA9  BB 0E000000       MOV      EBX,14
    0001DCAE  F7 E3             MUL      EBX
    0001DCB0  50                PUSH     EAX
    0001DCB1  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DCB4  48                DEC      EAX
    0001DCB5  BB 02000000       MOV      EBX,2
    0001DCBA  F7 E3             MUL      EBX
    0001DCBC  5B                POP      EBX
    0001DCBD  03 C3             ADD      EAX,EBX
    0001DCBF  8B F8             MOV      EDI,EAX
    0001DCC1  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18615

    0001DCC5  B8 01000000       MOV      EAX,1
    0001DCCA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18616

    0001DCCD  B8 01000000       MOV      EAX,1
    0001DCD2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18618

    0001DCD5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001DCDC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001DCE1  5B                POP      EBX

    LINE     18620

    0001DCE2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001DCE9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001DCEE  5B                POP      EBX

    LINE     18622

    0001DCEF  B8 0A000000       MOV      EAX,10
    0001DCF4  40                INC      EAX
    0001DCF5  50                PUSH     EAX
    0001DCF6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DCF9  5B                POP      EBX
    0001DCFA  3B C3             CMP      EAX,EBX
    0001DCFC  0F 8503000000     JNE      3
    0001DD02  EB                JMP      

    LINE     18629

    0001DD03  B8 01000000       MOV      EAX,1
    0001DD08  8B C8             MOV      ECX,EAX
    0001DD0A  B8 0A000000       MOV      EAX,10
    0001DD0F  50                PUSH     EAX
    0001DD10  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001DD13  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DD16  5B                POP      EBX
    0001DD17  53                PUSH     EBX
    0001DD18  3B C3             CMP      EAX,EBX
    0001DD1A  0F 8E03000000     JLE      3
    0001DD20  EB                JMP      

    LINE     18631

    0001DD21  B8 01000000       MOV      EAX,1
    0001DD26  8B C8             MOV      ECX,EAX
    0001DD28  B8 05000000       MOV      EAX,5
    0001DD2D  50                PUSH     EAX
    0001DD2E  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001DD31  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DD34  5B                POP      EBX
    0001DD35  53                PUSH     EBX
    0001DD36  3B C3             CMP      EAX,EBX
    0001DD38  0F 8E03000000     JLE      3
    0001DD3E  EB                JMP      

    LINE     18638

    0001DD3F  B8 01000000       MOV      EAX,1
    0001DD44  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18639

    0001DD47  B8 01000000       MOV      EAX,1
    0001DD4C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18640

    0001DD4F  B8 01000000       MOV      EAX,1
    0001DD54  8B C8             MOV      ECX,EAX
    0001DD56  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DD59  48                DEC      EAX
    0001DD5A  BB 0E000000       MOV      EBX,14
    0001DD5F  F7 E3             MUL      EBX
    0001DD61  50                PUSH     EAX
    0001DD62  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DD65  48                DEC      EAX
    0001DD66  BB 02000000       MOV      EBX,2
    0001DD6B  F7 E3             MUL      EBX
    0001DD6D  5B                POP      EBX
    0001DD6E  03 C3             ADD      EAX,EBX
    0001DD70  8B F8             MOV      EDI,EAX
    0001DD72  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18641

    0001DD76  B8 01000000       MOV      EAX,1
    0001DD7B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18642

    0001DD7E  B8 01000000       MOV      EAX,1
    0001DD83  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18644

    0001DD86  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001DD8D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001DD92  5B                POP      EBX

    LINE     18646

    0001DD93  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001DD9A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001DD9F  5B                POP      EBX

    LINE     18648

    0001DDA0  B8 0A000000       MOV      EAX,10
    0001DDA5  40                INC      EAX
    0001DDA6  50                PUSH     EAX
    0001DDA7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DDAA  5B                POP      EBX
    0001DDAB  3B C3             CMP      EAX,EBX
    0001DDAD  0F 8503000000     JNE      3
    0001DDB3  EB                JMP      

    LINE     18656

    0001DDB4  B8 01000000       MOV      EAX,1
    0001DDB9  8B C8             MOV      ECX,EAX
    0001DDBB  B8 0A000000       MOV      EAX,10
    0001DDC0  50                PUSH     EAX
    0001DDC1  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001DDC4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DDC7  5B                POP      EBX
    0001DDC8  53                PUSH     EBX
    0001DDC9  3B C3             CMP      EAX,EBX
    0001DDCB  0F 8E03000000     JLE      3
    0001DDD1  EB                JMP      

    LINE     18658

    0001DDD2  B8 01000000       MOV      EAX,1
    0001DDD7  8B C8             MOV      ECX,EAX
    0001DDD9  B8 05000000       MOV      EAX,5
    0001DDDE  50                PUSH     EAX
    0001DDDF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001DDE2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DDE5  5B                POP      EBX
    0001DDE6  53                PUSH     EBX
    0001DDE7  3B C3             CMP      EAX,EBX
    0001DDE9  0F 8E03000000     JLE      3
    0001DDEF  EB                JMP      

    LINE     18665

    0001DDF0  B8 01000000       MOV      EAX,1
    0001DDF5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18666

    0001DDFB  B8 01000000       MOV      EAX,1
    0001DE00  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18667

    0001DE06  B8 01000000       MOV      EAX,1
    0001DE0B  8B C8             MOV      ECX,EAX
    0001DE0D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DE10  48                DEC      EAX
    0001DE11  BB 0E000000       MOV      EBX,14
    0001DE16  F7 E3             MUL      EBX
    0001DE18  50                PUSH     EAX
    0001DE19  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DE1C  48                DEC      EAX
    0001DE1D  BB 02000000       MOV      EBX,2
    0001DE22  F7 E3             MUL      EBX
    0001DE24  5B                POP      EBX
    0001DE25  03 C3             ADD      EAX,EBX
    0001DE27  8B F8             MOV      EDI,EAX
    0001DE29  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18668

    0001DE30  B8 01000000       MOV      EAX,1
    0001DE35  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18669

    0001DE3B  B8 01000000       MOV      EAX,1
    0001DE40  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18671

    0001DE46  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001DE4D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001DE52  5B                POP      EBX

    LINE     18673

    0001DE53  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001DE5A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001DE5F  5B                POP      EBX

    LINE     18675

    0001DE60  B8 0A000000       MOV      EAX,10
    0001DE65  40                INC      EAX
    0001DE66  50                PUSH     EAX
    0001DE67  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DE6A  5B                POP      EBX
    0001DE6B  3B C3             CMP      EAX,EBX
    0001DE6D  0F 8503000000     JNE      3
    0001DE73  EB                JMP      

    LINE     18682

    0001DE74  B8 01000000       MOV      EAX,1
    0001DE79  8B C8             MOV      ECX,EAX
    0001DE7B  B8 0A000000       MOV      EAX,10
    0001DE80  50                PUSH     EAX
    0001DE81  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001DE84  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DE87  5B                POP      EBX
    0001DE88  53                PUSH     EBX
    0001DE89  3B C3             CMP      EAX,EBX
    0001DE8B  0F 8E03000000     JLE      3
    0001DE91  EB                JMP      

    LINE     18684

    0001DE92  B8 01000000       MOV      EAX,1
    0001DE97  8B C8             MOV      ECX,EAX
    0001DE99  B8 05000000       MOV      EAX,5
    0001DE9E  50                PUSH     EAX
    0001DE9F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001DEA2  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DEA5  5B                POP      EBX
    0001DEA6  53                PUSH     EBX
    0001DEA7  3B C3             CMP      EAX,EBX
    0001DEA9  0F 8E03000000     JLE      3
    0001DEAF  EB                JMP      

    LINE     18691

    0001DEB0  B8 01000000       MOV      EAX,1
    0001DEB5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18692

    0001DEBB  B8 01000000       MOV      EAX,1
    0001DEC0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18693

    0001DEC6  B8 01000000       MOV      EAX,1
    0001DECB  8B C8             MOV      ECX,EAX
    0001DECD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001DED0  48                DEC      EAX
    0001DED1  BB 0E000000       MOV      EBX,14
    0001DED6  F7 E3             MUL      EBX
    0001DED8  50                PUSH     EAX
    0001DED9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001DEDC  48                DEC      EAX
    0001DEDD  BB 02000000       MOV      EBX,2
    0001DEE2  F7 E3             MUL      EBX
    0001DEE4  5B                POP      EBX
    0001DEE5  03 C3             ADD      EAX,EBX
    0001DEE7  8B F8             MOV      EDI,EAX
    0001DEE9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18694

    0001DEF0  B8 01000000       MOV      EAX,1
    0001DEF5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18695

    0001DEFB  B8 01000000       MOV      EAX,1
    0001DF00  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18697

    0001DF06  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001DF0D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001DF12  5B                POP      EBX

    LINE     18699

    0001DF13  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001DF1A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001DF1F  5B                POP      EBX

    LINE     18701

    0001DF20  B8 0A000000       MOV      EAX,10
    0001DF25  40                INC      EAX
    0001DF26  50                PUSH     EAX
    0001DF27  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DF2A  5B                POP      EBX
    0001DF2B  3B C3             CMP      EAX,EBX
    0001DF2D  0F 8503000000     JNE      3
    0001DF33  EB                JMP      

    LINE     18715

    0001DF34  56                PUSH     ESI
    0001DF35  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001DF3B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001DF41  FF D1             CALL     ECX                       run_inner_proc
    0001DF43  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18717

    0001DF44  B8 01000000       MOV      EAX,1
    0001DF49  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18719

    0001DF4C  B8 01000000       MOV      EAX,1
    0001DF51  8B C8             MOV      ECX,EAX
    0001DF53  B8 0A000000       MOV      EAX,10
    0001DF58  50                PUSH     EAX
    0001DF59  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001DF5C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DF5F  5B                POP      EBX
    0001DF60  53                PUSH     EBX
    0001DF61  3B C3             CMP      EAX,EBX
    0001DF63  0F 8E03000000     JLE      3
    0001DF69  EB                JMP      

    LINE     18721

    0001DF6A  B8 01000000       MOV      EAX,1
    0001DF6F  8B C8             MOV      ECX,EAX
    0001DF71  B8 05000000       MOV      EAX,5
    0001DF76  50                PUSH     EAX
    0001DF77  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001DF7A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DF7D  5B                POP      EBX
    0001DF7E  53                PUSH     EBX
    0001DF7F  3B C3             CMP      EAX,EBX
    0001DF81  0F 8E03000000     JLE      3
    0001DF87  EB                JMP      

    LINE     18728

    0001DF88  B8 01000000       MOV      EAX,1
    0001DF8D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18729

    0001DF90  B8 01000000       MOV      EAX,1
    0001DF95  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18730

    0001DF98  B8 01000000       MOV      EAX,1
    0001DF9D  8B C8             MOV      ECX,EAX
    0001DF9F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DFA2  48                DEC      EAX
    0001DFA3  BB 0E000000       MOV      EBX,14
    0001DFA8  F7 E3             MUL      EBX
    0001DFAA  50                PUSH     EAX
    0001DFAB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001DFAE  48                DEC      EAX
    0001DFAF  BB 02000000       MOV      EBX,2
    0001DFB4  F7 E3             MUL      EBX
    0001DFB6  5B                POP      EBX
    0001DFB7  03 C3             ADD      EAX,EBX
    0001DFB9  8B F8             MOV      EDI,EAX
    0001DFBB  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18731

    0001DFBF  B8 01000000       MOV      EAX,1
    0001DFC4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18732

    0001DFC7  B8 01000000       MOV      EAX,1
    0001DFCC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18734

    0001DFCF  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001DFD6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001DFDB  5B                POP      EBX

    LINE     18736

    0001DFDC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001DFE3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001DFE8  5B                POP      EBX

    LINE     18738

    0001DFE9  B8 0A000000       MOV      EAX,10
    0001DFEE  40                INC      EAX
    0001DFEF  50                PUSH     EAX
    0001DFF0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001DFF3  5B                POP      EBX
    0001DFF4  3B C3             CMP      EAX,EBX
    0001DFF6  0F 8503000000     JNE      3
    0001DFFC  EB                JMP      

    LINE     18745

    0001DFFD  B8 01000000       MOV      EAX,1
    0001E002  8B C8             MOV      ECX,EAX
    0001E004  B8 0A000000       MOV      EAX,10
    0001E009  50                PUSH     EAX
    0001E00A  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001E00D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E010  5B                POP      EBX
    0001E011  53                PUSH     EBX
    0001E012  3B C3             CMP      EAX,EBX
    0001E014  0F 8E03000000     JLE      3
    0001E01A  EB                JMP      

    LINE     18747

    0001E01B  B8 01000000       MOV      EAX,1
    0001E020  8B C8             MOV      ECX,EAX
    0001E022  B8 05000000       MOV      EAX,5
    0001E027  50                PUSH     EAX
    0001E028  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001E02B  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E02E  5B                POP      EBX
    0001E02F  53                PUSH     EBX
    0001E030  3B C3             CMP      EAX,EBX
    0001E032  0F 8E03000000     JLE      3
    0001E038  EB                JMP      

    LINE     18754

    0001E039  B8 01000000       MOV      EAX,1
    0001E03E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18755

    0001E041  B8 01000000       MOV      EAX,1
    0001E046  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18756

    0001E049  B8 01000000       MOV      EAX,1
    0001E04E  8B C8             MOV      ECX,EAX
    0001E050  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E053  48                DEC      EAX
    0001E054  BB 0E000000       MOV      EBX,14
    0001E059  F7 E3             MUL      EBX
    0001E05B  50                PUSH     EAX
    0001E05C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E05F  48                DEC      EAX
    0001E060  BB 02000000       MOV      EBX,2
    0001E065  F7 E3             MUL      EBX
    0001E067  5B                POP      EBX
    0001E068  03 C3             ADD      EAX,EBX
    0001E06A  8B F8             MOV      EDI,EAX
    0001E06C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18757

    0001E070  B8 01000000       MOV      EAX,1
    0001E075  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18758

    0001E078  B8 01000000       MOV      EAX,1
    0001E07D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18760

    0001E080  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001E087  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001E08C  5B                POP      EBX

    LINE     18762

    0001E08D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001E094  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001E099  5B                POP      EBX

    LINE     18764

    0001E09A  B8 0A000000       MOV      EAX,10
    0001E09F  40                INC      EAX
    0001E0A0  50                PUSH     EAX
    0001E0A1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E0A4  5B                POP      EBX
    0001E0A5  3B C3             CMP      EAX,EBX
    0001E0A7  0F 8503000000     JNE      3
    0001E0AD  EB                JMP      

    LINE     18772

    0001E0AE  B8 01000000       MOV      EAX,1
    0001E0B3  8B C8             MOV      ECX,EAX
    0001E0B5  B8 0A000000       MOV      EAX,10
    0001E0BA  50                PUSH     EAX
    0001E0BB  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001E0BE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E0C1  5B                POP      EBX
    0001E0C2  53                PUSH     EBX
    0001E0C3  3B C3             CMP      EAX,EBX
    0001E0C5  0F 8E03000000     JLE      3
    0001E0CB  EB                JMP      

    LINE     18774

    0001E0CC  B8 01000000       MOV      EAX,1
    0001E0D1  8B C8             MOV      ECX,EAX
    0001E0D3  B8 05000000       MOV      EAX,5
    0001E0D8  50                PUSH     EAX
    0001E0D9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001E0DC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E0DF  5B                POP      EBX
    0001E0E0  53                PUSH     EBX
    0001E0E1  3B C3             CMP      EAX,EBX
    0001E0E3  0F 8E03000000     JLE      3
    0001E0E9  EB                JMP      

    LINE     18781

    0001E0EA  B8 01000000       MOV      EAX,1
    0001E0EF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18782

    0001E0F5  B8 01000000       MOV      EAX,1
    0001E0FA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18783

    0001E100  B8 01000000       MOV      EAX,1
    0001E105  8B C8             MOV      ECX,EAX
    0001E107  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E10A  48                DEC      EAX
    0001E10B  BB 0E000000       MOV      EBX,14
    0001E110  F7 E3             MUL      EBX
    0001E112  50                PUSH     EAX
    0001E113  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E116  48                DEC      EAX
    0001E117  BB 02000000       MOV      EBX,2
    0001E11C  F7 E3             MUL      EBX
    0001E11E  5B                POP      EBX
    0001E11F  03 C3             ADD      EAX,EBX
    0001E121  8B F8             MOV      EDI,EAX
    0001E123  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18784

    0001E12A  B8 01000000       MOV      EAX,1
    0001E12F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18785

    0001E135  B8 01000000       MOV      EAX,1
    0001E13A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18787

    0001E140  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001E147  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001E14C  5B                POP      EBX

    LINE     18789

    0001E14D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001E154  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001E159  5B                POP      EBX

    LINE     18791

    0001E15A  B8 0A000000       MOV      EAX,10
    0001E15F  40                INC      EAX
    0001E160  50                PUSH     EAX
    0001E161  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E164  5B                POP      EBX
    0001E165  3B C3             CMP      EAX,EBX
    0001E167  0F 8503000000     JNE      3
    0001E16D  EB                JMP      

    LINE     18798

    0001E16E  B8 01000000       MOV      EAX,1
    0001E173  8B C8             MOV      ECX,EAX
    0001E175  B8 0A000000       MOV      EAX,10
    0001E17A  50                PUSH     EAX
    0001E17B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001E17E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E181  5B                POP      EBX
    0001E182  53                PUSH     EBX
    0001E183  3B C3             CMP      EAX,EBX
    0001E185  0F 8E03000000     JLE      3
    0001E18B  EB                JMP      

    LINE     18800

    0001E18C  B8 01000000       MOV      EAX,1
    0001E191  8B C8             MOV      ECX,EAX
    0001E193  B8 05000000       MOV      EAX,5
    0001E198  50                PUSH     EAX
    0001E199  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001E19C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E19F  5B                POP      EBX
    0001E1A0  53                PUSH     EBX
    0001E1A1  3B C3             CMP      EAX,EBX
    0001E1A3  0F 8E03000000     JLE      3
    0001E1A9  EB                JMP      

    LINE     18807

    0001E1AA  B8 01000000       MOV      EAX,1
    0001E1AF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18808

    0001E1B5  B8 01000000       MOV      EAX,1
    0001E1BA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18809

    0001E1C0  B8 01000000       MOV      EAX,1
    0001E1C5  8B C8             MOV      ECX,EAX
    0001E1C7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E1CA  48                DEC      EAX
    0001E1CB  BB 0E000000       MOV      EBX,14
    0001E1D0  F7 E3             MUL      EBX
    0001E1D2  50                PUSH     EAX
    0001E1D3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E1D6  48                DEC      EAX
    0001E1D7  BB 02000000       MOV      EBX,2
    0001E1DC  F7 E3             MUL      EBX
    0001E1DE  5B                POP      EBX
    0001E1DF  03 C3             ADD      EAX,EBX
    0001E1E1  8B F8             MOV      EDI,EAX
    0001E1E3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18810

    0001E1EA  B8 01000000       MOV      EAX,1
    0001E1EF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18811

    0001E1F5  B8 01000000       MOV      EAX,1
    0001E1FA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18813

    0001E200  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001E207  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001E20C  5B                POP      EBX

    LINE     18815

    0001E20D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001E214  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001E219  5B                POP      EBX

    LINE     18817

    0001E21A  B8 0A000000       MOV      EAX,10
    0001E21F  40                INC      EAX
    0001E220  50                PUSH     EAX
    0001E221  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E224  5B                POP      EBX
    0001E225  3B C3             CMP      EAX,EBX
    0001E227  0F 8503000000     JNE      3
    0001E22D  EB                JMP      

    LINE     18831

    0001E22E  56                PUSH     ESI
    0001E22F  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001E235  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001E23B  FF D1             CALL     ECX                       run_inner_proc
    0001E23D  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18833

    0001E23E  B8 01000000       MOV      EAX,1
    0001E243  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18835

    0001E246  B8 01000000       MOV      EAX,1
    0001E24B  8B C8             MOV      ECX,EAX
    0001E24D  B8 0A000000       MOV      EAX,10
    0001E252  50                PUSH     EAX
    0001E253  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001E256  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E259  5B                POP      EBX
    0001E25A  53                PUSH     EBX
    0001E25B  3B C3             CMP      EAX,EBX
    0001E25D  0F 8E03000000     JLE      3
    0001E263  EB                JMP      

    LINE     18837

    0001E264  B8 01000000       MOV      EAX,1
    0001E269  8B C8             MOV      ECX,EAX
    0001E26B  B8 05000000       MOV      EAX,5
    0001E270  50                PUSH     EAX
    0001E271  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001E274  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E277  5B                POP      EBX
    0001E278  53                PUSH     EBX
    0001E279  3B C3             CMP      EAX,EBX
    0001E27B  0F 8E03000000     JLE      3
    0001E281  EB                JMP      

    LINE     18844

    0001E282  B8 01000000       MOV      EAX,1
    0001E287  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18845

    0001E28A  B8 01000000       MOV      EAX,1
    0001E28F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18846

    0001E292  B8 01000000       MOV      EAX,1
    0001E297  8B C8             MOV      ECX,EAX
    0001E299  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E29C  48                DEC      EAX
    0001E29D  BB 0E000000       MOV      EBX,14
    0001E2A2  F7 E3             MUL      EBX
    0001E2A4  50                PUSH     EAX
    0001E2A5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E2A8  48                DEC      EAX
    0001E2A9  BB 02000000       MOV      EBX,2
    0001E2AE  F7 E3             MUL      EBX
    0001E2B0  5B                POP      EBX
    0001E2B1  03 C3             ADD      EAX,EBX
    0001E2B3  8B F8             MOV      EDI,EAX
    0001E2B5  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18847

    0001E2B9  B8 01000000       MOV      EAX,1
    0001E2BE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18848

    0001E2C1  B8 01000000       MOV      EAX,1
    0001E2C6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18850

    0001E2C9  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001E2D0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001E2D5  5B                POP      EBX

    LINE     18852

    0001E2D6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001E2DD  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001E2E2  5B                POP      EBX

    LINE     18854

    0001E2E3  B8 0A000000       MOV      EAX,10
    0001E2E8  40                INC      EAX
    0001E2E9  50                PUSH     EAX
    0001E2EA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E2ED  5B                POP      EBX
    0001E2EE  3B C3             CMP      EAX,EBX
    0001E2F0  0F 8503000000     JNE      3
    0001E2F6  EB                JMP      

    LINE     18861

    0001E2F7  B8 01000000       MOV      EAX,1
    0001E2FC  8B C8             MOV      ECX,EAX
    0001E2FE  B8 0A000000       MOV      EAX,10
    0001E303  50                PUSH     EAX
    0001E304  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001E307  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E30A  5B                POP      EBX
    0001E30B  53                PUSH     EBX
    0001E30C  3B C3             CMP      EAX,EBX
    0001E30E  0F 8E03000000     JLE      3
    0001E314  EB                JMP      

    LINE     18863

    0001E315  B8 01000000       MOV      EAX,1
    0001E31A  8B C8             MOV      ECX,EAX
    0001E31C  B8 05000000       MOV      EAX,5
    0001E321  50                PUSH     EAX
    0001E322  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001E325  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E328  5B                POP      EBX
    0001E329  53                PUSH     EBX
    0001E32A  3B C3             CMP      EAX,EBX
    0001E32C  0F 8E03000000     JLE      3
    0001E332  EB                JMP      

    LINE     18870

    0001E333  B8 01000000       MOV      EAX,1
    0001E338  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18871

    0001E33B  B8 01000000       MOV      EAX,1
    0001E340  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18872

    0001E343  B8 01000000       MOV      EAX,1
    0001E348  8B C8             MOV      ECX,EAX
    0001E34A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E34D  48                DEC      EAX
    0001E34E  BB 0E000000       MOV      EBX,14
    0001E353  F7 E3             MUL      EBX
    0001E355  50                PUSH     EAX
    0001E356  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E359  48                DEC      EAX
    0001E35A  BB 02000000       MOV      EBX,2
    0001E35F  F7 E3             MUL      EBX
    0001E361  5B                POP      EBX
    0001E362  03 C3             ADD      EAX,EBX
    0001E364  8B F8             MOV      EDI,EAX
    0001E366  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18873

    0001E36A  B8 01000000       MOV      EAX,1
    0001E36F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18874

    0001E372  B8 01000000       MOV      EAX,1
    0001E377  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18876

    0001E37A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001E381  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001E386  5B                POP      EBX

    LINE     18878

    0001E387  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001E38E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001E393  5B                POP      EBX

    LINE     18880

    0001E394  B8 0A000000       MOV      EAX,10
    0001E399  40                INC      EAX
    0001E39A  50                PUSH     EAX
    0001E39B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E39E  5B                POP      EBX
    0001E39F  3B C3             CMP      EAX,EBX
    0001E3A1  0F 8503000000     JNE      3
    0001E3A7  EB                JMP      

    LINE     18888

    0001E3A8  B8 01000000       MOV      EAX,1
    0001E3AD  8B C8             MOV      ECX,EAX
    0001E3AF  B8 0A000000       MOV      EAX,10
    0001E3B4  50                PUSH     EAX
    0001E3B5  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001E3B8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E3BB  5B                POP      EBX
    0001E3BC  53                PUSH     EBX
    0001E3BD  3B C3             CMP      EAX,EBX
    0001E3BF  0F 8E03000000     JLE      3
    0001E3C5  EB                JMP      

    LINE     18890

    0001E3C6  B8 01000000       MOV      EAX,1
    0001E3CB  8B C8             MOV      ECX,EAX
    0001E3CD  B8 05000000       MOV      EAX,5
    0001E3D2  50                PUSH     EAX
    0001E3D3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001E3D6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E3D9  5B                POP      EBX
    0001E3DA  53                PUSH     EBX
    0001E3DB  3B C3             CMP      EAX,EBX
    0001E3DD  0F 8E03000000     JLE      3
    0001E3E3  EB                JMP      

    LINE     18897

    0001E3E4  B8 01000000       MOV      EAX,1
    0001E3E9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18898

    0001E3EF  B8 01000000       MOV      EAX,1
    0001E3F4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18899

    0001E3FA  B8 01000000       MOV      EAX,1
    0001E3FF  8B C8             MOV      ECX,EAX
    0001E401  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E404  48                DEC      EAX
    0001E405  BB 0E000000       MOV      EBX,14
    0001E40A  F7 E3             MUL      EBX
    0001E40C  50                PUSH     EAX
    0001E40D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E410  48                DEC      EAX
    0001E411  BB 02000000       MOV      EBX,2
    0001E416  F7 E3             MUL      EBX
    0001E418  5B                POP      EBX
    0001E419  03 C3             ADD      EAX,EBX
    0001E41B  8B F8             MOV      EDI,EAX
    0001E41D  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18900

    0001E424  B8 01000000       MOV      EAX,1
    0001E429  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18901

    0001E42F  B8 01000000       MOV      EAX,1
    0001E434  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18903

    0001E43A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001E441  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001E446  5B                POP      EBX

    LINE     18905

    0001E447  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001E44E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001E453  5B                POP      EBX

    LINE     18907

    0001E454  B8 0A000000       MOV      EAX,10
    0001E459  40                INC      EAX
    0001E45A  50                PUSH     EAX
    0001E45B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E45E  5B                POP      EBX
    0001E45F  3B C3             CMP      EAX,EBX
    0001E461  0F 8503000000     JNE      3
    0001E467  EB                JMP      

    LINE     18914

    0001E468  B8 01000000       MOV      EAX,1
    0001E46D  8B C8             MOV      ECX,EAX
    0001E46F  B8 0A000000       MOV      EAX,10
    0001E474  50                PUSH     EAX
    0001E475  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001E478  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E47B  5B                POP      EBX
    0001E47C  53                PUSH     EBX
    0001E47D  3B C3             CMP      EAX,EBX
    0001E47F  0F 8E03000000     JLE      3
    0001E485  EB                JMP      

    LINE     18916

    0001E486  B8 01000000       MOV      EAX,1
    0001E48B  8B C8             MOV      ECX,EAX
    0001E48D  B8 05000000       MOV      EAX,5
    0001E492  50                PUSH     EAX
    0001E493  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001E496  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E499  5B                POP      EBX
    0001E49A  53                PUSH     EBX
    0001E49B  3B C3             CMP      EAX,EBX
    0001E49D  0F 8E03000000     JLE      3
    0001E4A3  EB                JMP      

    LINE     18923

    0001E4A4  B8 01000000       MOV      EAX,1
    0001E4A9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18924

    0001E4AF  B8 01000000       MOV      EAX,1
    0001E4B4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18925

    0001E4BA  B8 01000000       MOV      EAX,1
    0001E4BF  8B C8             MOV      ECX,EAX
    0001E4C1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E4C4  48                DEC      EAX
    0001E4C5  BB 0E000000       MOV      EBX,14
    0001E4CA  F7 E3             MUL      EBX
    0001E4CC  50                PUSH     EAX
    0001E4CD  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E4D0  48                DEC      EAX
    0001E4D1  BB 02000000       MOV      EBX,2
    0001E4D6  F7 E3             MUL      EBX
    0001E4D8  5B                POP      EBX
    0001E4D9  03 C3             ADD      EAX,EBX
    0001E4DB  8B F8             MOV      EDI,EAX
    0001E4DD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     18926

    0001E4E4  B8 01000000       MOV      EAX,1
    0001E4E9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18927

    0001E4EF  B8 01000000       MOV      EAX,1
    0001E4F4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     18929

    0001E4FA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001E501  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001E506  5B                POP      EBX

    LINE     18931

    0001E507  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001E50E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001E513  5B                POP      EBX

    LINE     18933

    0001E514  B8 0A000000       MOV      EAX,10
    0001E519  40                INC      EAX
    0001E51A  50                PUSH     EAX
    0001E51B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E51E  5B                POP      EBX
    0001E51F  3B C3             CMP      EAX,EBX
    0001E521  0F 8503000000     JNE      3
    0001E527  EB                JMP      

    LINE     18947

    0001E528  56                PUSH     ESI
    0001E529  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001E52F  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001E535  FF D1             CALL     ECX                       run_inner_proc
    0001E537  5E                POP      ESI                       /* restore callers static pointer */

    LINE     18949

    0001E538  B8 01000000       MOV      EAX,1
    0001E53D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     18951

    0001E540  B8 01000000       MOV      EAX,1
    0001E545  8B C8             MOV      ECX,EAX
    0001E547  B8 0A000000       MOV      EAX,10
    0001E54C  50                PUSH     EAX
    0001E54D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001E550  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E553  5B                POP      EBX
    0001E554  53                PUSH     EBX
    0001E555  3B C3             CMP      EAX,EBX
    0001E557  0F 8E03000000     JLE      3
    0001E55D  EB                JMP      

    LINE     18953

    0001E55E  B8 01000000       MOV      EAX,1
    0001E563  8B C8             MOV      ECX,EAX
    0001E565  B8 05000000       MOV      EAX,5
    0001E56A  50                PUSH     EAX
    0001E56B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001E56E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E571  5B                POP      EBX
    0001E572  53                PUSH     EBX
    0001E573  3B C3             CMP      EAX,EBX
    0001E575  0F 8E03000000     JLE      3
    0001E57B  EB                JMP      

    LINE     18960

    0001E57C  B8 01000000       MOV      EAX,1
    0001E581  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18961

    0001E584  B8 01000000       MOV      EAX,1
    0001E589  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18962

    0001E58C  B8 01000000       MOV      EAX,1
    0001E591  8B C8             MOV      ECX,EAX
    0001E593  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E596  48                DEC      EAX
    0001E597  BB 0E000000       MOV      EBX,14
    0001E59C  F7 E3             MUL      EBX
    0001E59E  50                PUSH     EAX
    0001E59F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E5A2  48                DEC      EAX
    0001E5A3  BB 02000000       MOV      EBX,2
    0001E5A8  F7 E3             MUL      EBX
    0001E5AA  5B                POP      EBX
    0001E5AB  03 C3             ADD      EAX,EBX
    0001E5AD  8B F8             MOV      EDI,EAX
    0001E5AF  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18963

    0001E5B3  B8 01000000       MOV      EAX,1
    0001E5B8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18964

    0001E5BB  B8 01000000       MOV      EAX,1
    0001E5C0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18966

    0001E5C3  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001E5CA  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001E5CF  5B                POP      EBX

    LINE     18968

    0001E5D0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001E5D7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001E5DC  5B                POP      EBX

    LINE     18970

    0001E5DD  B8 0A000000       MOV      EAX,10
    0001E5E2  40                INC      EAX
    0001E5E3  50                PUSH     EAX
    0001E5E4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E5E7  5B                POP      EBX
    0001E5E8  3B C3             CMP      EAX,EBX
    0001E5EA  0F 8503000000     JNE      3
    0001E5F0  EB                JMP      

    LINE     18977

    0001E5F1  B8 01000000       MOV      EAX,1
    0001E5F6  8B C8             MOV      ECX,EAX
    0001E5F8  B8 0A000000       MOV      EAX,10
    0001E5FD  50                PUSH     EAX
    0001E5FE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001E601  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E604  5B                POP      EBX
    0001E605  53                PUSH     EBX
    0001E606  3B C3             CMP      EAX,EBX
    0001E608  0F 8E03000000     JLE      3
    0001E60E  EB                JMP      

    LINE     18979

    0001E60F  B8 01000000       MOV      EAX,1
    0001E614  8B C8             MOV      ECX,EAX
    0001E616  B8 05000000       MOV      EAX,5
    0001E61B  50                PUSH     EAX
    0001E61C  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001E61F  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E622  5B                POP      EBX
    0001E623  53                PUSH     EBX
    0001E624  3B C3             CMP      EAX,EBX
    0001E626  0F 8E03000000     JLE      3
    0001E62C  EB                JMP      

    LINE     18986

    0001E62D  B8 01000000       MOV      EAX,1
    0001E632  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18987

    0001E635  B8 01000000       MOV      EAX,1
    0001E63A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18988

    0001E63D  B8 01000000       MOV      EAX,1
    0001E642  8B C8             MOV      ECX,EAX
    0001E644  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E647  48                DEC      EAX
    0001E648  BB 0E000000       MOV      EBX,14
    0001E64D  F7 E3             MUL      EBX
    0001E64F  50                PUSH     EAX
    0001E650  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E653  48                DEC      EAX
    0001E654  BB 02000000       MOV      EBX,2
    0001E659  F7 E3             MUL      EBX
    0001E65B  5B                POP      EBX
    0001E65C  03 C3             ADD      EAX,EBX
    0001E65E  8B F8             MOV      EDI,EAX
    0001E660  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     18989

    0001E664  B8 01000000       MOV      EAX,1
    0001E669  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18990

    0001E66C  B8 01000000       MOV      EAX,1
    0001E671  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     18992

    0001E674  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001E67B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001E680  5B                POP      EBX

    LINE     18994

    0001E681  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001E688  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001E68D  5B                POP      EBX

    LINE     18996

    0001E68E  B8 0A000000       MOV      EAX,10
    0001E693  40                INC      EAX
    0001E694  50                PUSH     EAX
    0001E695  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E698  5B                POP      EBX
    0001E699  3B C3             CMP      EAX,EBX
    0001E69B  0F 8503000000     JNE      3
    0001E6A1  EB                JMP      

    LINE     19004

    0001E6A2  B8 01000000       MOV      EAX,1
    0001E6A7  8B C8             MOV      ECX,EAX
    0001E6A9  B8 0A000000       MOV      EAX,10
    0001E6AE  50                PUSH     EAX
    0001E6AF  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001E6B2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E6B5  5B                POP      EBX
    0001E6B6  53                PUSH     EBX
    0001E6B7  3B C3             CMP      EAX,EBX
    0001E6B9  0F 8E03000000     JLE      3
    0001E6BF  EB                JMP      

    LINE     19006

    0001E6C0  B8 01000000       MOV      EAX,1
    0001E6C5  8B C8             MOV      ECX,EAX
    0001E6C7  B8 05000000       MOV      EAX,5
    0001E6CC  50                PUSH     EAX
    0001E6CD  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001E6D0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E6D3  5B                POP      EBX
    0001E6D4  53                PUSH     EBX
    0001E6D5  3B C3             CMP      EAX,EBX
    0001E6D7  0F 8E03000000     JLE      3
    0001E6DD  EB                JMP      

    LINE     19013

    0001E6DE  B8 01000000       MOV      EAX,1
    0001E6E3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19014

    0001E6E9  B8 01000000       MOV      EAX,1
    0001E6EE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19015

    0001E6F4  B8 01000000       MOV      EAX,1
    0001E6F9  8B C8             MOV      ECX,EAX
    0001E6FB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E6FE  48                DEC      EAX
    0001E6FF  BB 0E000000       MOV      EBX,14
    0001E704  F7 E3             MUL      EBX
    0001E706  50                PUSH     EAX
    0001E707  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E70A  48                DEC      EAX
    0001E70B  BB 02000000       MOV      EBX,2
    0001E710  F7 E3             MUL      EBX
    0001E712  5B                POP      EBX
    0001E713  03 C3             ADD      EAX,EBX
    0001E715  8B F8             MOV      EDI,EAX
    0001E717  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19016

    0001E71E  B8 01000000       MOV      EAX,1
    0001E723  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19017

    0001E729  B8 01000000       MOV      EAX,1
    0001E72E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19019

    0001E734  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001E73B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001E740  5B                POP      EBX

    LINE     19021

    0001E741  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001E748  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001E74D  5B                POP      EBX

    LINE     19023

    0001E74E  B8 0A000000       MOV      EAX,10
    0001E753  40                INC      EAX
    0001E754  50                PUSH     EAX
    0001E755  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E758  5B                POP      EBX
    0001E759  3B C3             CMP      EAX,EBX
    0001E75B  0F 8503000000     JNE      3
    0001E761  EB                JMP      

    LINE     19030

    0001E762  B8 01000000       MOV      EAX,1
    0001E767  8B C8             MOV      ECX,EAX
    0001E769  B8 0A000000       MOV      EAX,10
    0001E76E  50                PUSH     EAX
    0001E76F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001E772  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E775  5B                POP      EBX
    0001E776  53                PUSH     EBX
    0001E777  3B C3             CMP      EAX,EBX
    0001E779  0F 8E03000000     JLE      3
    0001E77F  EB                JMP      

    LINE     19032

    0001E780  B8 01000000       MOV      EAX,1
    0001E785  8B C8             MOV      ECX,EAX
    0001E787  B8 05000000       MOV      EAX,5
    0001E78C  50                PUSH     EAX
    0001E78D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001E790  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E793  5B                POP      EBX
    0001E794  53                PUSH     EBX
    0001E795  3B C3             CMP      EAX,EBX
    0001E797  0F 8E03000000     JLE      3
    0001E79D  EB                JMP      

    LINE     19039

    0001E79E  B8 01000000       MOV      EAX,1
    0001E7A3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19040

    0001E7A9  B8 01000000       MOV      EAX,1
    0001E7AE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19041

    0001E7B4  B8 01000000       MOV      EAX,1
    0001E7B9  8B C8             MOV      ECX,EAX
    0001E7BB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E7BE  48                DEC      EAX
    0001E7BF  BB 0E000000       MOV      EBX,14
    0001E7C4  F7 E3             MUL      EBX
    0001E7C6  50                PUSH     EAX
    0001E7C7  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E7CA  48                DEC      EAX
    0001E7CB  BB 02000000       MOV      EBX,2
    0001E7D0  F7 E3             MUL      EBX
    0001E7D2  5B                POP      EBX
    0001E7D3  03 C3             ADD      EAX,EBX
    0001E7D5  8B F8             MOV      EDI,EAX
    0001E7D7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19042

    0001E7DE  B8 01000000       MOV      EAX,1
    0001E7E3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19043

    0001E7E9  B8 01000000       MOV      EAX,1
    0001E7EE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19045

    0001E7F4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001E7FB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001E800  5B                POP      EBX

    LINE     19047

    0001E801  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001E808  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001E80D  5B                POP      EBX

    LINE     19049

    0001E80E  B8 0A000000       MOV      EAX,10
    0001E813  40                INC      EAX
    0001E814  50                PUSH     EAX
    0001E815  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E818  5B                POP      EBX
    0001E819  3B C3             CMP      EAX,EBX
    0001E81B  0F 8503000000     JNE      3
    0001E821  EB                JMP      

    LINE     19063

    0001E822  56                PUSH     ESI
    0001E823  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001E829  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001E82F  FF D1             CALL     ECX                       run_inner_proc
    0001E831  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19065

    0001E832  B8 01000000       MOV      EAX,1
    0001E837  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19067

    0001E83A  B8 01000000       MOV      EAX,1
    0001E83F  8B C8             MOV      ECX,EAX
    0001E841  B8 0A000000       MOV      EAX,10
    0001E846  50                PUSH     EAX
    0001E847  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001E84A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E84D  5B                POP      EBX
    0001E84E  53                PUSH     EBX
    0001E84F  3B C3             CMP      EAX,EBX
    0001E851  0F 8E03000000     JLE      3
    0001E857  EB                JMP      

    LINE     19069

    0001E858  B8 01000000       MOV      EAX,1
    0001E85D  8B C8             MOV      ECX,EAX
    0001E85F  B8 05000000       MOV      EAX,5
    0001E864  50                PUSH     EAX
    0001E865  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001E868  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E86B  5B                POP      EBX
    0001E86C  53                PUSH     EBX
    0001E86D  3B C3             CMP      EAX,EBX
    0001E86F  0F 8E03000000     JLE      3
    0001E875  EB                JMP      

    LINE     19076

    0001E876  B8 01000000       MOV      EAX,1
    0001E87B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19077

    0001E87E  B8 01000000       MOV      EAX,1
    0001E883  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19078

    0001E886  B8 01000000       MOV      EAX,1
    0001E88B  8B C8             MOV      ECX,EAX
    0001E88D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E890  48                DEC      EAX
    0001E891  BB 0E000000       MOV      EBX,14
    0001E896  F7 E3             MUL      EBX
    0001E898  50                PUSH     EAX
    0001E899  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E89C  48                DEC      EAX
    0001E89D  BB 02000000       MOV      EBX,2
    0001E8A2  F7 E3             MUL      EBX
    0001E8A4  5B                POP      EBX
    0001E8A5  03 C3             ADD      EAX,EBX
    0001E8A7  8B F8             MOV      EDI,EAX
    0001E8A9  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19079

    0001E8AD  B8 01000000       MOV      EAX,1
    0001E8B2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19080

    0001E8B5  B8 01000000       MOV      EAX,1
    0001E8BA  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19082

    0001E8BD  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001E8C4  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001E8C9  5B                POP      EBX

    LINE     19084

    0001E8CA  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001E8D1  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001E8D6  5B                POP      EBX

    LINE     19086

    0001E8D7  B8 0A000000       MOV      EAX,10
    0001E8DC  40                INC      EAX
    0001E8DD  50                PUSH     EAX
    0001E8DE  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E8E1  5B                POP      EBX
    0001E8E2  3B C3             CMP      EAX,EBX
    0001E8E4  0F 8503000000     JNE      3
    0001E8EA  EB                JMP      

    LINE     19093

    0001E8EB  B8 01000000       MOV      EAX,1
    0001E8F0  8B C8             MOV      ECX,EAX
    0001E8F2  B8 0A000000       MOV      EAX,10
    0001E8F7  50                PUSH     EAX
    0001E8F8  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001E8FB  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E8FE  5B                POP      EBX
    0001E8FF  53                PUSH     EBX
    0001E900  3B C3             CMP      EAX,EBX
    0001E902  0F 8E03000000     JLE      3
    0001E908  EB                JMP      

    LINE     19095

    0001E909  B8 01000000       MOV      EAX,1
    0001E90E  8B C8             MOV      ECX,EAX
    0001E910  B8 05000000       MOV      EAX,5
    0001E915  50                PUSH     EAX
    0001E916  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001E919  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E91C  5B                POP      EBX
    0001E91D  53                PUSH     EBX
    0001E91E  3B C3             CMP      EAX,EBX
    0001E920  0F 8E03000000     JLE      3
    0001E926  EB                JMP      

    LINE     19102

    0001E927  B8 01000000       MOV      EAX,1
    0001E92C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19103

    0001E92F  B8 01000000       MOV      EAX,1
    0001E934  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19104

    0001E937  B8 01000000       MOV      EAX,1
    0001E93C  8B C8             MOV      ECX,EAX
    0001E93E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001E941  48                DEC      EAX
    0001E942  BB 0E000000       MOV      EBX,14
    0001E947  F7 E3             MUL      EBX
    0001E949  50                PUSH     EAX
    0001E94A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001E94D  48                DEC      EAX
    0001E94E  BB 02000000       MOV      EBX,2
    0001E953  F7 E3             MUL      EBX
    0001E955  5B                POP      EBX
    0001E956  03 C3             ADD      EAX,EBX
    0001E958  8B F8             MOV      EDI,EAX
    0001E95A  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19105

    0001E95E  B8 01000000       MOV      EAX,1
    0001E963  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19106

    0001E966  B8 01000000       MOV      EAX,1
    0001E96B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19108

    0001E96E  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001E975  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001E97A  5B                POP      EBX

    LINE     19110

    0001E97B  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001E982  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001E987  5B                POP      EBX

    LINE     19112

    0001E988  B8 0A000000       MOV      EAX,10
    0001E98D  40                INC      EAX
    0001E98E  50                PUSH     EAX
    0001E98F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E992  5B                POP      EBX
    0001E993  3B C3             CMP      EAX,EBX
    0001E995  0F 8503000000     JNE      3
    0001E99B  EB                JMP      

    LINE     19120

    0001E99C  B8 01000000       MOV      EAX,1
    0001E9A1  8B C8             MOV      ECX,EAX
    0001E9A3  B8 0A000000       MOV      EAX,10
    0001E9A8  50                PUSH     EAX
    0001E9A9  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001E9AC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E9AF  5B                POP      EBX
    0001E9B0  53                PUSH     EBX
    0001E9B1  3B C3             CMP      EAX,EBX
    0001E9B3  0F 8E03000000     JLE      3
    0001E9B9  EB                JMP      

    LINE     19122

    0001E9BA  B8 01000000       MOV      EAX,1
    0001E9BF  8B C8             MOV      ECX,EAX
    0001E9C1  B8 05000000       MOV      EAX,5
    0001E9C6  50                PUSH     EAX
    0001E9C7  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001E9CA  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001E9CD  5B                POP      EBX
    0001E9CE  53                PUSH     EBX
    0001E9CF  3B C3             CMP      EAX,EBX
    0001E9D1  0F 8E03000000     JLE      3
    0001E9D7  EB                JMP      

    LINE     19129

    0001E9D8  B8 01000000       MOV      EAX,1
    0001E9DD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19130

    0001E9E3  B8 01000000       MOV      EAX,1
    0001E9E8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19131

    0001E9EE  B8 01000000       MOV      EAX,1
    0001E9F3  8B C8             MOV      ECX,EAX
    0001E9F5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001E9F8  48                DEC      EAX
    0001E9F9  BB 0E000000       MOV      EBX,14
    0001E9FE  F7 E3             MUL      EBX
    0001EA00  50                PUSH     EAX
    0001EA01  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001EA04  48                DEC      EAX
    0001EA05  BB 02000000       MOV      EBX,2
    0001EA0A  F7 E3             MUL      EBX
    0001EA0C  5B                POP      EBX
    0001EA0D  03 C3             ADD      EAX,EBX
    0001EA0F  8B F8             MOV      EDI,EAX
    0001EA11  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19132

    0001EA18  B8 01000000       MOV      EAX,1
    0001EA1D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19133

    0001EA23  B8 01000000       MOV      EAX,1
    0001EA28  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19135

    0001EA2E  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001EA35  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001EA3A  5B                POP      EBX

    LINE     19137

    0001EA3B  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001EA42  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001EA47  5B                POP      EBX

    LINE     19139

    0001EA48  B8 0A000000       MOV      EAX,10
    0001EA4D  40                INC      EAX
    0001EA4E  50                PUSH     EAX
    0001EA4F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EA52  5B                POP      EBX
    0001EA53  3B C3             CMP      EAX,EBX
    0001EA55  0F 8503000000     JNE      3
    0001EA5B  EB                JMP      

    LINE     19146

    0001EA5C  B8 01000000       MOV      EAX,1
    0001EA61  8B C8             MOV      ECX,EAX
    0001EA63  B8 0A000000       MOV      EAX,10
    0001EA68  50                PUSH     EAX
    0001EA69  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001EA6C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001EA6F  5B                POP      EBX
    0001EA70  53                PUSH     EBX
    0001EA71  3B C3             CMP      EAX,EBX
    0001EA73  0F 8E03000000     JLE      3
    0001EA79  EB                JMP      

    LINE     19148

    0001EA7A  B8 01000000       MOV      EAX,1
    0001EA7F  8B C8             MOV      ECX,EAX
    0001EA81  B8 05000000       MOV      EAX,5
    0001EA86  50                PUSH     EAX
    0001EA87  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001EA8A  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001EA8D  5B                POP      EBX
    0001EA8E  53                PUSH     EBX
    0001EA8F  3B C3             CMP      EAX,EBX
    0001EA91  0F 8E03000000     JLE      3
    0001EA97  EB                JMP      

    LINE     19155

    0001EA98  B8 01000000       MOV      EAX,1
    0001EA9D  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19156

    0001EAA3  B8 01000000       MOV      EAX,1
    0001EAA8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19157

    0001EAAE  B8 01000000       MOV      EAX,1
    0001EAB3  8B C8             MOV      ECX,EAX
    0001EAB5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001EAB8  48                DEC      EAX
    0001EAB9  BB 0E000000       MOV      EBX,14
    0001EABE  F7 E3             MUL      EBX
    0001EAC0  50                PUSH     EAX
    0001EAC1  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001EAC4  48                DEC      EAX
    0001EAC5  BB 02000000       MOV      EBX,2
    0001EACA  F7 E3             MUL      EBX
    0001EACC  5B                POP      EBX
    0001EACD  03 C3             ADD      EAX,EBX
    0001EACF  8B F8             MOV      EDI,EAX
    0001EAD1  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19158

    0001EAD8  B8 01000000       MOV      EAX,1
    0001EADD  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19159

    0001EAE3  B8 01000000       MOV      EAX,1
    0001EAE8  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19161

    0001EAEE  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001EAF5  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001EAFA  5B                POP      EBX

    LINE     19163

    0001EAFB  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001EB02  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001EB07  5B                POP      EBX

    LINE     19165

    0001EB08  B8 0A000000       MOV      EAX,10
    0001EB0D  40                INC      EAX
    0001EB0E  50                PUSH     EAX
    0001EB0F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EB12  5B                POP      EBX
    0001EB13  3B C3             CMP      EAX,EBX
    0001EB15  0F 8503000000     JNE      3
    0001EB1B  EB                JMP      

    LINE     19179

    0001EB1C  56                PUSH     ESI
    0001EB1D  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001EB23  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001EB29  FF D1             CALL     ECX                       run_inner_proc
    0001EB2B  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19181

    0001EB2C  B8 01000000       MOV      EAX,1
    0001EB31  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19183

    0001EB34  B8 01000000       MOV      EAX,1
    0001EB39  8B C8             MOV      ECX,EAX
    0001EB3B  B8 0A000000       MOV      EAX,10
    0001EB40  50                PUSH     EAX
    0001EB41  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001EB44  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EB47  5B                POP      EBX
    0001EB48  53                PUSH     EBX
    0001EB49  3B C3             CMP      EAX,EBX
    0001EB4B  0F 8E03000000     JLE      3
    0001EB51  EB                JMP      

    LINE     19185

    0001EB52  B8 01000000       MOV      EAX,1
    0001EB57  8B C8             MOV      ECX,EAX
    0001EB59  B8 05000000       MOV      EAX,5
    0001EB5E  50                PUSH     EAX
    0001EB5F  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001EB62  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001EB65  5B                POP      EBX
    0001EB66  53                PUSH     EBX
    0001EB67  3B C3             CMP      EAX,EBX
    0001EB69  0F 8E03000000     JLE      3
    0001EB6F  EB                JMP      

    LINE     19192

    0001EB70  B8 01000000       MOV      EAX,1
    0001EB75  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19193

    0001EB78  B8 01000000       MOV      EAX,1
    0001EB7D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19194

    0001EB80  B8 01000000       MOV      EAX,1
    0001EB85  8B C8             MOV      ECX,EAX
    0001EB87  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EB8A  48                DEC      EAX
    0001EB8B  BB 0E000000       MOV      EBX,14
    0001EB90  F7 E3             MUL      EBX
    0001EB92  50                PUSH     EAX
    0001EB93  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001EB96  48                DEC      EAX
    0001EB97  BB 02000000       MOV      EBX,2
    0001EB9C  F7 E3             MUL      EBX
    0001EB9E  5B                POP      EBX
    0001EB9F  03 C3             ADD      EAX,EBX
    0001EBA1  8B F8             MOV      EDI,EAX
    0001EBA3  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19195

    0001EBA7  B8 01000000       MOV      EAX,1
    0001EBAC  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19196

    0001EBAF  B8 01000000       MOV      EAX,1
    0001EBB4  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19198

    0001EBB7  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001EBBE  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001EBC3  5B                POP      EBX

    LINE     19200

    0001EBC4  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001EBCB  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001EBD0  5B                POP      EBX

    LINE     19202

    0001EBD1  B8 0A000000       MOV      EAX,10
    0001EBD6  40                INC      EAX
    0001EBD7  50                PUSH     EAX
    0001EBD8  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EBDB  5B                POP      EBX
    0001EBDC  3B C3             CMP      EAX,EBX
    0001EBDE  0F 8503000000     JNE      3
    0001EBE4  EB                JMP      

    LINE     19209

    0001EBE5  B8 01000000       MOV      EAX,1
    0001EBEA  8B C8             MOV      ECX,EAX
    0001EBEC  B8 0A000000       MOV      EAX,10
    0001EBF1  50                PUSH     EAX
    0001EBF2  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001EBF5  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001EBF8  5B                POP      EBX
    0001EBF9  53                PUSH     EBX
    0001EBFA  3B C3             CMP      EAX,EBX
    0001EBFC  0F 8E03000000     JLE      3
    0001EC02  EB                JMP      

    LINE     19211

    0001EC03  B8 01000000       MOV      EAX,1
    0001EC08  8B C8             MOV      ECX,EAX
    0001EC0A  B8 05000000       MOV      EAX,5
    0001EC0F  50                PUSH     EAX
    0001EC10  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001EC13  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001EC16  5B                POP      EBX
    0001EC17  53                PUSH     EBX
    0001EC18  3B C3             CMP      EAX,EBX
    0001EC1A  0F 8E03000000     JLE      3
    0001EC20  EB                JMP      

    LINE     19218

    0001EC21  B8 01000000       MOV      EAX,1
    0001EC26  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19219

    0001EC29  B8 01000000       MOV      EAX,1
    0001EC2E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19220

    0001EC31  B8 01000000       MOV      EAX,1
    0001EC36  8B C8             MOV      ECX,EAX
    0001EC38  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001EC3B  48                DEC      EAX
    0001EC3C  BB 0E000000       MOV      EBX,14
    0001EC41  F7 E3             MUL      EBX
    0001EC43  50                PUSH     EAX
    0001EC44  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001EC47  48                DEC      EAX
    0001EC48  BB 02000000       MOV      EBX,2
    0001EC4D  F7 E3             MUL      EBX
    0001EC4F  5B                POP      EBX
    0001EC50  03 C3             ADD      EAX,EBX
    0001EC52  8B F8             MOV      EDI,EAX
    0001EC54  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19221

    0001EC58  B8 01000000       MOV      EAX,1
    0001EC5D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19222

    0001EC60  B8 01000000       MOV      EAX,1
    0001EC65  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19224

    0001EC68  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001EC6F  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001EC74  5B                POP      EBX

    LINE     19226

    0001EC75  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001EC7C  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001EC81  5B                POP      EBX

    LINE     19228

    0001EC82  B8 0A000000       MOV      EAX,10
    0001EC87  40                INC      EAX
    0001EC88  50                PUSH     EAX
    0001EC89  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EC8C  5B                POP      EBX
    0001EC8D  3B C3             CMP      EAX,EBX
    0001EC8F  0F 8503000000     JNE      3
    0001EC95  EB                JMP      

    LINE     19236

    0001EC96  B8 01000000       MOV      EAX,1
    0001EC9B  8B C8             MOV      ECX,EAX
    0001EC9D  B8 0A000000       MOV      EAX,10
    0001ECA2  50                PUSH     EAX
    0001ECA3  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001ECA6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001ECA9  5B                POP      EBX
    0001ECAA  53                PUSH     EBX
    0001ECAB  3B C3             CMP      EAX,EBX
    0001ECAD  0F 8E03000000     JLE      3
    0001ECB3  EB                JMP      

    LINE     19238

    0001ECB4  B8 01000000       MOV      EAX,1
    0001ECB9  8B C8             MOV      ECX,EAX
    0001ECBB  B8 05000000       MOV      EAX,5
    0001ECC0  50                PUSH     EAX
    0001ECC1  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001ECC4  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001ECC7  5B                POP      EBX
    0001ECC8  53                PUSH     EBX
    0001ECC9  3B C3             CMP      EAX,EBX
    0001ECCB  0F 8E03000000     JLE      3
    0001ECD1  EB                JMP      

    LINE     19245

    0001ECD2  B8 01000000       MOV      EAX,1
    0001ECD7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19246

    0001ECDD  B8 01000000       MOV      EAX,1
    0001ECE2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19247

    0001ECE8  B8 01000000       MOV      EAX,1
    0001ECED  8B C8             MOV      ECX,EAX
    0001ECEF  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001ECF2  48                DEC      EAX
    0001ECF3  BB 0E000000       MOV      EBX,14
    0001ECF8  F7 E3             MUL      EBX
    0001ECFA  50                PUSH     EAX
    0001ECFB  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001ECFE  48                DEC      EAX
    0001ECFF  BB 02000000       MOV      EBX,2
    0001ED04  F7 E3             MUL      EBX
    0001ED06  5B                POP      EBX
    0001ED07  03 C3             ADD      EAX,EBX
    0001ED09  8B F8             MOV      EDI,EAX
    0001ED0B  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19248

    0001ED12  B8 01000000       MOV      EAX,1
    0001ED17  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19249

    0001ED1D  B8 01000000       MOV      EAX,1
    0001ED22  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19251

    0001ED28  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001ED2F  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001ED34  5B                POP      EBX

    LINE     19253

    0001ED35  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001ED3C  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001ED41  5B                POP      EBX

    LINE     19255

    0001ED42  B8 0A000000       MOV      EAX,10
    0001ED47  40                INC      EAX
    0001ED48  50                PUSH     EAX
    0001ED49  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001ED4C  5B                POP      EBX
    0001ED4D  3B C3             CMP      EAX,EBX
    0001ED4F  0F 8503000000     JNE      3
    0001ED55  EB                JMP      

    LINE     19262

    0001ED56  B8 01000000       MOV      EAX,1
    0001ED5B  8B C8             MOV      ECX,EAX
    0001ED5D  B8 0A000000       MOV      EAX,10
    0001ED62  50                PUSH     EAX
    0001ED63  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001ED66  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001ED69  5B                POP      EBX
    0001ED6A  53                PUSH     EBX
    0001ED6B  3B C3             CMP      EAX,EBX
    0001ED6D  0F 8E03000000     JLE      3
    0001ED73  EB                JMP      

    LINE     19264

    0001ED74  B8 01000000       MOV      EAX,1
    0001ED79  8B C8             MOV      ECX,EAX
    0001ED7B  B8 05000000       MOV      EAX,5
    0001ED80  50                PUSH     EAX
    0001ED81  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001ED84  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001ED87  5B                POP      EBX
    0001ED88  53                PUSH     EBX
    0001ED89  3B C3             CMP      EAX,EBX
    0001ED8B  0F 8E03000000     JLE      3
    0001ED91  EB                JMP      

    LINE     19271

    0001ED92  B8 01000000       MOV      EAX,1
    0001ED97  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19272

    0001ED9D  B8 01000000       MOV      EAX,1
    0001EDA2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19273

    0001EDA8  B8 01000000       MOV      EAX,1
    0001EDAD  8B C8             MOV      ECX,EAX
    0001EDAF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001EDB2  48                DEC      EAX
    0001EDB3  BB 0E000000       MOV      EBX,14
    0001EDB8  F7 E3             MUL      EBX
    0001EDBA  50                PUSH     EAX
    0001EDBB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001EDBE  48                DEC      EAX
    0001EDBF  BB 02000000       MOV      EBX,2
    0001EDC4  F7 E3             MUL      EBX
    0001EDC6  5B                POP      EBX
    0001EDC7  03 C3             ADD      EAX,EBX
    0001EDC9  8B F8             MOV      EDI,EAX
    0001EDCB  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19274

    0001EDD2  B8 01000000       MOV      EAX,1
    0001EDD7  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19275

    0001EDDD  B8 01000000       MOV      EAX,1
    0001EDE2  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19277

    0001EDE8  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001EDEF  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001EDF4  5B                POP      EBX

    LINE     19279

    0001EDF5  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001EDFC  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001EE01  5B                POP      EBX

    LINE     19281

    0001EE02  B8 0A000000       MOV      EAX,10
    0001EE07  40                INC      EAX
    0001EE08  50                PUSH     EAX
    0001EE09  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EE0C  5B                POP      EBX
    0001EE0D  3B C3             CMP      EAX,EBX
    0001EE0F  0F 8503000000     JNE      3
    0001EE15  EB                JMP      

    LINE     19295

    0001EE16  56                PUSH     ESI
    0001EE17  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001EE1D  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001EE23  FF D1             CALL     ECX                       run_inner_proc
    0001EE25  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19297

    0001EE26  B8 01000000       MOV      EAX,1
    0001EE2B  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19299

    0001EE2E  B8 01000000       MOV      EAX,1
    0001EE33  8B C8             MOV      ECX,EAX
    0001EE35  B8 0A000000       MOV      EAX,10
    0001EE3A  50                PUSH     EAX
    0001EE3B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001EE3E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EE41  5B                POP      EBX
    0001EE42  53                PUSH     EBX
    0001EE43  3B C3             CMP      EAX,EBX
    0001EE45  0F 8E03000000     JLE      3
    0001EE4B  EB                JMP      

    LINE     19301

    0001EE4C  B8 01000000       MOV      EAX,1
    0001EE51  8B C8             MOV      ECX,EAX
    0001EE53  B8 05000000       MOV      EAX,5
    0001EE58  50                PUSH     EAX
    0001EE59  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001EE5C  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001EE5F  5B                POP      EBX
    0001EE60  53                PUSH     EBX
    0001EE61  3B C3             CMP      EAX,EBX
    0001EE63  0F 8E03000000     JLE      3
    0001EE69  EB                JMP      

    LINE     19308

    0001EE6A  B8 01000000       MOV      EAX,1
    0001EE6F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19309

    0001EE72  B8 01000000       MOV      EAX,1
    0001EE77  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19310

    0001EE7A  B8 01000000       MOV      EAX,1
    0001EE7F  8B C8             MOV      ECX,EAX
    0001EE81  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EE84  48                DEC      EAX
    0001EE85  BB 0E000000       MOV      EBX,14
    0001EE8A  F7 E3             MUL      EBX
    0001EE8C  50                PUSH     EAX
    0001EE8D  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001EE90  48                DEC      EAX
    0001EE91  BB 02000000       MOV      EBX,2
    0001EE96  F7 E3             MUL      EBX
    0001EE98  5B                POP      EBX
    0001EE99  03 C3             ADD      EAX,EBX
    0001EE9B  8B F8             MOV      EDI,EAX
    0001EE9D  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19311

    0001EEA1  B8 01000000       MOV      EAX,1
    0001EEA6  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19312

    0001EEA9  B8 01000000       MOV      EAX,1
    0001EEAE  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19314

    0001EEB1  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001EEB8  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001EEBD  5B                POP      EBX

    LINE     19316

    0001EEBE  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001EEC5  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001EECA  5B                POP      EBX

    LINE     19318

    0001EECB  B8 0A000000       MOV      EAX,10
    0001EED0  40                INC      EAX
    0001EED1  50                PUSH     EAX
    0001EED2  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EED5  5B                POP      EBX
    0001EED6  3B C3             CMP      EAX,EBX
    0001EED8  0F 8503000000     JNE      3
    0001EEDE  EB                JMP      

    LINE     19325

    0001EEDF  B8 01000000       MOV      EAX,1
    0001EEE4  8B C8             MOV      ECX,EAX
    0001EEE6  B8 0A000000       MOV      EAX,10
    0001EEEB  50                PUSH     EAX
    0001EEEC  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001EEEF  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001EEF2  5B                POP      EBX
    0001EEF3  53                PUSH     EBX
    0001EEF4  3B C3             CMP      EAX,EBX
    0001EEF6  0F 8E03000000     JLE      3
    0001EEFC  EB                JMP      

    LINE     19327

    0001EEFD  B8 01000000       MOV      EAX,1
    0001EF02  8B C8             MOV      ECX,EAX
    0001EF04  B8 05000000       MOV      EAX,5
    0001EF09  50                PUSH     EAX
    0001EF0A  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001EF0D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001EF10  5B                POP      EBX
    0001EF11  53                PUSH     EBX
    0001EF12  3B C3             CMP      EAX,EBX
    0001EF14  0F 8E03000000     JLE      3
    0001EF1A  EB                JMP      

    LINE     19334

    0001EF1B  B8 01000000       MOV      EAX,1
    0001EF20  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19335

    0001EF23  B8 01000000       MOV      EAX,1
    0001EF28  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19336

    0001EF2B  B8 01000000       MOV      EAX,1
    0001EF30  8B C8             MOV      ECX,EAX
    0001EF32  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001EF35  48                DEC      EAX
    0001EF36  BB 0E000000       MOV      EBX,14
    0001EF3B  F7 E3             MUL      EBX
    0001EF3D  50                PUSH     EAX
    0001EF3E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001EF41  48                DEC      EAX
    0001EF42  BB 02000000       MOV      EBX,2
    0001EF47  F7 E3             MUL      EBX
    0001EF49  5B                POP      EBX
    0001EF4A  03 C3             ADD      EAX,EBX
    0001EF4C  8B F8             MOV      EDI,EAX
    0001EF4E  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19337

    0001EF52  B8 01000000       MOV      EAX,1
    0001EF57  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19338

    0001EF5A  B8 01000000       MOV      EAX,1
    0001EF5F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19340

    0001EF62  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001EF69  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001EF6E  5B                POP      EBX

    LINE     19342

    0001EF6F  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001EF76  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001EF7B  5B                POP      EBX

    LINE     19344

    0001EF7C  B8 0A000000       MOV      EAX,10
    0001EF81  40                INC      EAX
    0001EF82  50                PUSH     EAX
    0001EF83  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EF86  5B                POP      EBX
    0001EF87  3B C3             CMP      EAX,EBX
    0001EF89  0F 8503000000     JNE      3
    0001EF8F  EB                JMP      

    LINE     19352

    0001EF90  B8 01000000       MOV      EAX,1
    0001EF95  8B C8             MOV      ECX,EAX
    0001EF97  B8 0A000000       MOV      EAX,10
    0001EF9C  50                PUSH     EAX
    0001EF9D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001EFA0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EFA3  5B                POP      EBX
    0001EFA4  53                PUSH     EBX
    0001EFA5  3B C3             CMP      EAX,EBX
    0001EFA7  0F 8E03000000     JLE      3
    0001EFAD  EB                JMP      

    LINE     19354

    0001EFAE  B8 01000000       MOV      EAX,1
    0001EFB3  8B C8             MOV      ECX,EAX
    0001EFB5  B8 05000000       MOV      EAX,5
    0001EFBA  50                PUSH     EAX
    0001EFBB  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001EFBE  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001EFC1  5B                POP      EBX
    0001EFC2  53                PUSH     EBX
    0001EFC3  3B C3             CMP      EAX,EBX
    0001EFC5  0F 8E03000000     JLE      3
    0001EFCB  EB                JMP      

    LINE     19361

    0001EFCC  B8 01000000       MOV      EAX,1
    0001EFD1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19362

    0001EFD7  B8 01000000       MOV      EAX,1
    0001EFDC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19363

    0001EFE2  B8 01000000       MOV      EAX,1
    0001EFE7  8B C8             MOV      ECX,EAX
    0001EFE9  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001EFEC  48                DEC      EAX
    0001EFED  BB 0E000000       MOV      EBX,14
    0001EFF2  F7 E3             MUL      EBX
    0001EFF4  50                PUSH     EAX
    0001EFF5  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001EFF8  48                DEC      EAX
    0001EFF9  BB 02000000       MOV      EBX,2
    0001EFFE  F7 E3             MUL      EBX
    0001F000  5B                POP      EBX
    0001F001  03 C3             ADD      EAX,EBX
    0001F003  8B F8             MOV      EDI,EAX
    0001F005  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19364

    0001F00C  B8 01000000       MOV      EAX,1
    0001F011  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19365

    0001F017  B8 01000000       MOV      EAX,1
    0001F01C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19367

    0001F022  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001F029  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F02E  5B                POP      EBX

    LINE     19369

    0001F02F  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001F036  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F03B  5B                POP      EBX

    LINE     19371

    0001F03C  B8 0A000000       MOV      EAX,10
    0001F041  40                INC      EAX
    0001F042  50                PUSH     EAX
Windows NT 32-bit PL/I Optimizing Compiler, File Name: MASSIVE.PL1                 Page  15


    0001F043  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F046  5B                POP      EBX
    0001F047  3B C3             CMP      EAX,EBX
    0001F049  0F 8503000000     JNE      3
    0001F04F  EB                JMP      

    LINE     19378

    0001F050  B8 01000000       MOV      EAX,1
    0001F055  8B C8             MOV      ECX,EAX
    0001F057  B8 0A000000       MOV      EAX,10
    0001F05C  50                PUSH     EAX
    0001F05D  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001F060  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F063  5B                POP      EBX
    0001F064  53                PUSH     EBX
    0001F065  3B C3             CMP      EAX,EBX
    0001F067  0F 8E03000000     JLE      3
    0001F06D  EB                JMP      

    LINE     19380

    0001F06E  B8 01000000       MOV      EAX,1
    0001F073  8B C8             MOV      ECX,EAX
    0001F075  B8 05000000       MOV      EAX,5
    0001F07A  50                PUSH     EAX
    0001F07B  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001F07E  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F081  5B                POP      EBX
    0001F082  53                PUSH     EBX
    0001F083  3B C3             CMP      EAX,EBX
    0001F085  0F 8E03000000     JLE      3
    0001F08B  EB                JMP      

    LINE     19387

    0001F08C  B8 01000000       MOV      EAX,1
    0001F091  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19388

    0001F097  B8 01000000       MOV      EAX,1
    0001F09C  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19389

    0001F0A2  B8 01000000       MOV      EAX,1
    0001F0A7  8B C8             MOV      ECX,EAX
    0001F0A9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F0AC  48                DEC      EAX
    0001F0AD  BB 0E000000       MOV      EBX,14
    0001F0B2  F7 E3             MUL      EBX
    0001F0B4  50                PUSH     EAX
    0001F0B5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F0B8  48                DEC      EAX
    0001F0B9  BB 02000000       MOV      EBX,2
    0001F0BE  F7 E3             MUL      EBX
    0001F0C0  5B                POP      EBX
    0001F0C1  03 C3             ADD      EAX,EBX
    0001F0C3  8B F8             MOV      EDI,EAX
    0001F0C5  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19390

    0001F0CC  B8 01000000       MOV      EAX,1
    0001F0D1  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19391

    0001F0D7  B8 01000000       MOV      EAX,1
    0001F0DC  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19393

    0001F0E2  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001F0E9  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F0EE  5B                POP      EBX

    LINE     19395

    0001F0EF  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001F0F6  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F0FB  5B                POP      EBX

    LINE     19397

    0001F0FC  B8 0A000000       MOV      EAX,10
    0001F101  40                INC      EAX
    0001F102  50                PUSH     EAX
    0001F103  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F106  5B                POP      EBX
    0001F107  3B C3             CMP      EAX,EBX
    0001F109  0F 8503000000     JNE      3
    0001F10F  EB                JMP      

    LINE     19411

    0001F110  56                PUSH     ESI
    0001F111  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001F117  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001F11D  FF D1             CALL     ECX                       run_inner_proc
    0001F11F  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19413

    0001F120  B8 01000000       MOV      EAX,1
    0001F125  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19415

    0001F128  B8 01000000       MOV      EAX,1
    0001F12D  8B C8             MOV      ECX,EAX
    0001F12F  B8 0A000000       MOV      EAX,10
    0001F134  50                PUSH     EAX
    0001F135  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001F138  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F13B  5B                POP      EBX
    0001F13C  53                PUSH     EBX
    0001F13D  3B C3             CMP      EAX,EBX
    0001F13F  0F 8E03000000     JLE      3
    0001F145  EB                JMP      

    LINE     19417

    0001F146  B8 01000000       MOV      EAX,1
    0001F14B  8B C8             MOV      ECX,EAX
    0001F14D  B8 05000000       MOV      EAX,5
    0001F152  50                PUSH     EAX
    0001F153  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001F156  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F159  5B                POP      EBX
    0001F15A  53                PUSH     EBX
    0001F15B  3B C3             CMP      EAX,EBX
    0001F15D  0F 8E03000000     JLE      3
    0001F163  EB                JMP      

    LINE     19424

    0001F164  B8 01000000       MOV      EAX,1
    0001F169  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19425

    0001F16C  B8 01000000       MOV      EAX,1
    0001F171  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19426

    0001F174  B8 01000000       MOV      EAX,1
    0001F179  8B C8             MOV      ECX,EAX
    0001F17B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F17E  48                DEC      EAX
    0001F17F  BB 0E000000       MOV      EBX,14
    0001F184  F7 E3             MUL      EBX
    0001F186  50                PUSH     EAX
    0001F187  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F18A  48                DEC      EAX
    0001F18B  BB 02000000       MOV      EBX,2
    0001F190  F7 E3             MUL      EBX
    0001F192  5B                POP      EBX
    0001F193  03 C3             ADD      EAX,EBX
    0001F195  8B F8             MOV      EDI,EAX
    0001F197  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19427

    0001F19B  B8 01000000       MOV      EAX,1
    0001F1A0  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19428

    0001F1A3  B8 01000000       MOV      EAX,1
    0001F1A8  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19430

    0001F1AB  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001F1B2  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001F1B7  5B                POP      EBX

    LINE     19432

    0001F1B8  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001F1BF  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001F1C4  5B                POP      EBX

    LINE     19434

    0001F1C5  B8 0A000000       MOV      EAX,10
    0001F1CA  40                INC      EAX
    0001F1CB  50                PUSH     EAX
    0001F1CC  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F1CF  5B                POP      EBX
    0001F1D0  3B C3             CMP      EAX,EBX
    0001F1D2  0F 8503000000     JNE      3
    0001F1D8  EB                JMP      

    LINE     19441

    0001F1D9  B8 01000000       MOV      EAX,1
    0001F1DE  8B C8             MOV      ECX,EAX
    0001F1E0  B8 0A000000       MOV      EAX,10
    0001F1E5  50                PUSH     EAX
    0001F1E6  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001F1E9  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F1EC  5B                POP      EBX
    0001F1ED  53                PUSH     EBX
    0001F1EE  3B C3             CMP      EAX,EBX
    0001F1F0  0F 8E03000000     JLE      3
    0001F1F6  EB                JMP      

    LINE     19443

    0001F1F7  B8 01000000       MOV      EAX,1
    0001F1FC  8B C8             MOV      ECX,EAX
    0001F1FE  B8 05000000       MOV      EAX,5
    0001F203  50                PUSH     EAX
    0001F204  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001F207  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F20A  5B                POP      EBX
    0001F20B  53                PUSH     EBX
    0001F20C  3B C3             CMP      EAX,EBX
    0001F20E  0F 8E03000000     JLE      3
    0001F214  EB                JMP      

    LINE     19450

    0001F215  B8 01000000       MOV      EAX,1
    0001F21A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19451

    0001F21D  B8 01000000       MOV      EAX,1
    0001F222  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19452

    0001F225  B8 01000000       MOV      EAX,1
    0001F22A  8B C8             MOV      ECX,EAX
    0001F22C  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F22F  48                DEC      EAX
    0001F230  BB 0E000000       MOV      EBX,14
    0001F235  F7 E3             MUL      EBX
    0001F237  50                PUSH     EAX
    0001F238  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F23B  48                DEC      EAX
    0001F23C  BB 02000000       MOV      EBX,2
    0001F241  F7 E3             MUL      EBX
    0001F243  5B                POP      EBX
    0001F244  03 C3             ADD      EAX,EBX
    0001F246  8B F8             MOV      EDI,EAX
    0001F248  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19453

    0001F24C  B8 01000000       MOV      EAX,1
    0001F251  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19454

    0001F254  B8 01000000       MOV      EAX,1
    0001F259  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19456

    0001F25C  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001F263  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001F268  5B                POP      EBX

    LINE     19458

    0001F269  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001F270  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001F275  5B                POP      EBX

    LINE     19460

    0001F276  B8 0A000000       MOV      EAX,10
    0001F27B  40                INC      EAX
    0001F27C  50                PUSH     EAX
    0001F27D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F280  5B                POP      EBX
    0001F281  3B C3             CMP      EAX,EBX
    0001F283  0F 8503000000     JNE      3
    0001F289  EB                JMP      

    LINE     19468

    0001F28A  B8 01000000       MOV      EAX,1
    0001F28F  8B C8             MOV      ECX,EAX
    0001F291  B8 0A000000       MOV      EAX,10
    0001F296  50                PUSH     EAX
    0001F297  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001F29A  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F29D  5B                POP      EBX
    0001F29E  53                PUSH     EBX
    0001F29F  3B C3             CMP      EAX,EBX
    0001F2A1  0F 8E03000000     JLE      3
    0001F2A7  EB                JMP      

    LINE     19470

    0001F2A8  B8 01000000       MOV      EAX,1
    0001F2AD  8B C8             MOV      ECX,EAX
    0001F2AF  B8 05000000       MOV      EAX,5
    0001F2B4  50                PUSH     EAX
    0001F2B5  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001F2B8  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F2BB  5B                POP      EBX
    0001F2BC  53                PUSH     EBX
    0001F2BD  3B C3             CMP      EAX,EBX
    0001F2BF  0F 8E03000000     JLE      3
    0001F2C5  EB                JMP      

    LINE     19477

    0001F2C6  B8 01000000       MOV      EAX,1
    0001F2CB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19478

    0001F2D1  B8 01000000       MOV      EAX,1
    0001F2D6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19479

    0001F2DC  B8 01000000       MOV      EAX,1
    0001F2E1  8B C8             MOV      ECX,EAX
    0001F2E3  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F2E6  48                DEC      EAX
    0001F2E7  BB 0E000000       MOV      EBX,14
    0001F2EC  F7 E3             MUL      EBX
    0001F2EE  50                PUSH     EAX
    0001F2EF  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F2F2  48                DEC      EAX
    0001F2F3  BB 02000000       MOV      EBX,2
    0001F2F8  F7 E3             MUL      EBX
    0001F2FA  5B                POP      EBX
    0001F2FB  03 C3             ADD      EAX,EBX
    0001F2FD  8B F8             MOV      EDI,EAX
    0001F2FF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19480

    0001F306  B8 01000000       MOV      EAX,1
    0001F30B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19481

    0001F311  B8 01000000       MOV      EAX,1
    0001F316  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19483

    0001F31C  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001F323  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F328  5B                POP      EBX

    LINE     19485

    0001F329  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001F330  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F335  5B                POP      EBX

    LINE     19487

    0001F336  B8 0A000000       MOV      EAX,10
    0001F33B  40                INC      EAX
    0001F33C  50                PUSH     EAX
    0001F33D  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F340  5B                POP      EBX
    0001F341  3B C3             CMP      EAX,EBX
    0001F343  0F 8503000000     JNE      3
    0001F349  EB                JMP      

    LINE     19494

    0001F34A  B8 01000000       MOV      EAX,1
    0001F34F  8B C8             MOV      ECX,EAX
    0001F351  B8 0A000000       MOV      EAX,10
    0001F356  50                PUSH     EAX
    0001F357  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001F35A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F35D  5B                POP      EBX
    0001F35E  53                PUSH     EBX
    0001F35F  3B C3             CMP      EAX,EBX
    0001F361  0F 8E03000000     JLE      3
    0001F367  EB                JMP      

    LINE     19496

    0001F368  B8 01000000       MOV      EAX,1
    0001F36D  8B C8             MOV      ECX,EAX
    0001F36F  B8 05000000       MOV      EAX,5
    0001F374  50                PUSH     EAX
    0001F375  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001F378  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F37B  5B                POP      EBX
    0001F37C  53                PUSH     EBX
    0001F37D  3B C3             CMP      EAX,EBX
    0001F37F  0F 8E03000000     JLE      3
    0001F385  EB                JMP      

    LINE     19503

    0001F386  B8 01000000       MOV      EAX,1
    0001F38B  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19504

    0001F391  B8 01000000       MOV      EAX,1
    0001F396  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19505

    0001F39C  B8 01000000       MOV      EAX,1
    0001F3A1  8B C8             MOV      ECX,EAX
    0001F3A3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F3A6  48                DEC      EAX
    0001F3A7  BB 0E000000       MOV      EBX,14
    0001F3AC  F7 E3             MUL      EBX
    0001F3AE  50                PUSH     EAX
    0001F3AF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F3B2  48                DEC      EAX
    0001F3B3  BB 02000000       MOV      EBX,2
    0001F3B8  F7 E3             MUL      EBX
    0001F3BA  5B                POP      EBX
    0001F3BB  03 C3             ADD      EAX,EBX
    0001F3BD  8B F8             MOV      EDI,EAX
    0001F3BF  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19506

    0001F3C6  B8 01000000       MOV      EAX,1
    0001F3CB  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19507

    0001F3D1  B8 01000000       MOV      EAX,1
    0001F3D6  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19509

    0001F3DC  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001F3E3  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F3E8  5B                POP      EBX

    LINE     19511

    0001F3E9  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001F3F0  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F3F5  5B                POP      EBX

    LINE     19513

    0001F3F6  B8 0A000000       MOV      EAX,10
    0001F3FB  40                INC      EAX
    0001F3FC  50                PUSH     EAX
    0001F3FD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F400  5B                POP      EBX
    0001F401  3B C3             CMP      EAX,EBX
    0001F403  0F 8503000000     JNE      3
    0001F409  EB                JMP      

    LINE     19527

    0001F40A  56                PUSH     ESI
    0001F40B  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001F411  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001F417  FF D1             CALL     ECX                       run_inner_proc
    0001F419  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19529

    0001F41A  B8 01000000       MOV      EAX,1
    0001F41F  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19531

    0001F422  B8 01000000       MOV      EAX,1
    0001F427  8B C8             MOV      ECX,EAX
    0001F429  B8 0A000000       MOV      EAX,10
    0001F42E  50                PUSH     EAX
    0001F42F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001F432  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F435  5B                POP      EBX
    0001F436  53                PUSH     EBX
    0001F437  3B C3             CMP      EAX,EBX
    0001F439  0F 8E03000000     JLE      3
    0001F43F  EB                JMP      

    LINE     19533

    0001F440  B8 01000000       MOV      EAX,1
    0001F445  8B C8             MOV      ECX,EAX
    0001F447  B8 05000000       MOV      EAX,5
    0001F44C  50                PUSH     EAX
    0001F44D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001F450  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F453  5B                POP      EBX
    0001F454  53                PUSH     EBX
    0001F455  3B C3             CMP      EAX,EBX
    0001F457  0F 8E03000000     JLE      3
    0001F45D  EB                JMP      

    LINE     19540

    0001F45E  B8 01000000       MOV      EAX,1
    0001F463  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19541

    0001F466  B8 01000000       MOV      EAX,1
    0001F46B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19542

    0001F46E  B8 01000000       MOV      EAX,1
    0001F473  8B C8             MOV      ECX,EAX
    0001F475  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F478  48                DEC      EAX
    0001F479  BB 0E000000       MOV      EBX,14
    0001F47E  F7 E3             MUL      EBX
    0001F480  50                PUSH     EAX
    0001F481  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F484  48                DEC      EAX
    0001F485  BB 02000000       MOV      EBX,2
    0001F48A  F7 E3             MUL      EBX
    0001F48C  5B                POP      EBX
    0001F48D  03 C3             ADD      EAX,EBX
    0001F48F  8B F8             MOV      EDI,EAX
    0001F491  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19543

    0001F495  B8 01000000       MOV      EAX,1
    0001F49A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19544

    0001F49D  B8 01000000       MOV      EAX,1
    0001F4A2  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19546

    0001F4A5  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001F4AC  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001F4B1  5B                POP      EBX

    LINE     19548

    0001F4B2  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001F4B9  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001F4BE  5B                POP      EBX

    LINE     19550

    0001F4BF  B8 0A000000       MOV      EAX,10
    0001F4C4  40                INC      EAX
    0001F4C5  50                PUSH     EAX
    0001F4C6  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F4C9  5B                POP      EBX
    0001F4CA  3B C3             CMP      EAX,EBX
    0001F4CC  0F 8503000000     JNE      3
    0001F4D2  EB                JMP      

    LINE     19557

    0001F4D3  B8 01000000       MOV      EAX,1
    0001F4D8  8B C8             MOV      ECX,EAX
    0001F4DA  B8 0A000000       MOV      EAX,10
    0001F4DF  50                PUSH     EAX
    0001F4E0  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001F4E3  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F4E6  5B                POP      EBX
    0001F4E7  53                PUSH     EBX
    0001F4E8  3B C3             CMP      EAX,EBX
    0001F4EA  0F 8E03000000     JLE      3
    0001F4F0  EB                JMP      

    LINE     19559

    0001F4F1  B8 01000000       MOV      EAX,1
    0001F4F6  8B C8             MOV      ECX,EAX
    0001F4F8  B8 05000000       MOV      EAX,5
    0001F4FD  50                PUSH     EAX
    0001F4FE  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001F501  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F504  5B                POP      EBX
    0001F505  53                PUSH     EBX
    0001F506  3B C3             CMP      EAX,EBX
    0001F508  0F 8E03000000     JLE      3
    0001F50E  EB                JMP      

    LINE     19566

    0001F50F  B8 01000000       MOV      EAX,1
    0001F514  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19567

    0001F517  B8 01000000       MOV      EAX,1
    0001F51C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19568

    0001F51F  B8 01000000       MOV      EAX,1
    0001F524  8B C8             MOV      ECX,EAX
    0001F526  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F529  48                DEC      EAX
    0001F52A  BB 0E000000       MOV      EBX,14
    0001F52F  F7 E3             MUL      EBX
    0001F531  50                PUSH     EAX
    0001F532  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F535  48                DEC      EAX
    0001F536  BB 02000000       MOV      EBX,2
    0001F53B  F7 E3             MUL      EBX
    0001F53D  5B                POP      EBX
    0001F53E  03 C3             ADD      EAX,EBX
    0001F540  8B F8             MOV      EDI,EAX
    0001F542  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19569

    0001F546  B8 01000000       MOV      EAX,1
    0001F54B  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19570

    0001F54E  B8 01000000       MOV      EAX,1
    0001F553  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19572

    0001F556  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001F55D  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001F562  5B                POP      EBX

    LINE     19574

    0001F563  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001F56A  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001F56F  5B                POP      EBX

    LINE     19576

    0001F570  B8 0A000000       MOV      EAX,10
    0001F575  40                INC      EAX
    0001F576  50                PUSH     EAX
    0001F577  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F57A  5B                POP      EBX
    0001F57B  3B C3             CMP      EAX,EBX
    0001F57D  0F 8503000000     JNE      3
    0001F583  EB                JMP      

    LINE     19584

    0001F584  B8 01000000       MOV      EAX,1
    0001F589  8B C8             MOV      ECX,EAX
    0001F58B  B8 0A000000       MOV      EAX,10
    0001F590  50                PUSH     EAX
    0001F591  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001F594  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F597  5B                POP      EBX
    0001F598  53                PUSH     EBX
    0001F599  3B C3             CMP      EAX,EBX
    0001F59B  0F 8E03000000     JLE      3
    0001F5A1  EB                JMP      

    LINE     19586

    0001F5A2  B8 01000000       MOV      EAX,1
    0001F5A7  8B C8             MOV      ECX,EAX
    0001F5A9  B8 05000000       MOV      EAX,5
    0001F5AE  50                PUSH     EAX
    0001F5AF  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001F5B2  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F5B5  5B                POP      EBX
    0001F5B6  53                PUSH     EBX
    0001F5B7  3B C3             CMP      EAX,EBX
    0001F5B9  0F 8E03000000     JLE      3
    0001F5BF  EB                JMP      

    LINE     19593

    0001F5C0  B8 01000000       MOV      EAX,1
    0001F5C5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19594

    0001F5CB  B8 01000000       MOV      EAX,1
    0001F5D0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19595

    0001F5D6  B8 01000000       MOV      EAX,1
    0001F5DB  8B C8             MOV      ECX,EAX
    0001F5DD  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F5E0  48                DEC      EAX
    0001F5E1  BB 0E000000       MOV      EBX,14
    0001F5E6  F7 E3             MUL      EBX
    0001F5E8  50                PUSH     EAX
    0001F5E9  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F5EC  48                DEC      EAX
    0001F5ED  BB 02000000       MOV      EBX,2
    0001F5F2  F7 E3             MUL      EBX
    0001F5F4  5B                POP      EBX
    0001F5F5  03 C3             ADD      EAX,EBX
    0001F5F7  8B F8             MOV      EDI,EAX
    0001F5F9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19596

    0001F600  B8 01000000       MOV      EAX,1
    0001F605  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19597

    0001F60B  B8 01000000       MOV      EAX,1
    0001F610  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19599

    0001F616  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001F61D  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F622  5B                POP      EBX

    LINE     19601

    0001F623  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001F62A  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F62F  5B                POP      EBX

    LINE     19603

    0001F630  B8 0A000000       MOV      EAX,10
    0001F635  40                INC      EAX
    0001F636  50                PUSH     EAX
    0001F637  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F63A  5B                POP      EBX
    0001F63B  3B C3             CMP      EAX,EBX
    0001F63D  0F 8503000000     JNE      3
    0001F643  EB                JMP      

    LINE     19610

    0001F644  B8 01000000       MOV      EAX,1
    0001F649  8B C8             MOV      ECX,EAX
    0001F64B  B8 0A000000       MOV      EAX,10
    0001F650  50                PUSH     EAX
    0001F651  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001F654  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F657  5B                POP      EBX
    0001F658  53                PUSH     EBX
    0001F659  3B C3             CMP      EAX,EBX
    0001F65B  0F 8E03000000     JLE      3
    0001F661  EB                JMP      

    LINE     19612

    0001F662  B8 01000000       MOV      EAX,1
    0001F667  8B C8             MOV      ECX,EAX
    0001F669  B8 05000000       MOV      EAX,5
    0001F66E  50                PUSH     EAX
    0001F66F  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001F672  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F675  5B                POP      EBX
    0001F676  53                PUSH     EBX
    0001F677  3B C3             CMP      EAX,EBX
    0001F679  0F 8E03000000     JLE      3
    0001F67F  EB                JMP      

    LINE     19619

    0001F680  B8 01000000       MOV      EAX,1
    0001F685  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19620

    0001F68B  B8 01000000       MOV      EAX,1
    0001F690  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19621

    0001F696  B8 01000000       MOV      EAX,1
    0001F69B  8B C8             MOV      ECX,EAX
    0001F69D  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F6A0  48                DEC      EAX
    0001F6A1  BB 0E000000       MOV      EBX,14
    0001F6A6  F7 E3             MUL      EBX
    0001F6A8  50                PUSH     EAX
    0001F6A9  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F6AC  48                DEC      EAX
    0001F6AD  BB 02000000       MOV      EBX,2
    0001F6B2  F7 E3             MUL      EBX
    0001F6B4  5B                POP      EBX
    0001F6B5  03 C3             ADD      EAX,EBX
    0001F6B7  8B F8             MOV      EDI,EAX
    0001F6B9  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19622

    0001F6C0  B8 01000000       MOV      EAX,1
    0001F6C5  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19623

    0001F6CB  B8 01000000       MOV      EAX,1
    0001F6D0  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19625

    0001F6D6  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001F6DD  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F6E2  5B                POP      EBX

    LINE     19627

    0001F6E3  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001F6EA  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F6EF  5B                POP      EBX

    LINE     19629

    0001F6F0  B8 0A000000       MOV      EAX,10
    0001F6F5  40                INC      EAX
    0001F6F6  50                PUSH     EAX
    0001F6F7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F6FA  5B                POP      EBX
    0001F6FB  3B C3             CMP      EAX,EBX
    0001F6FD  0F 8503000000     JNE      3
    0001F703  EB                JMP      

    LINE     19643

    0001F704  56                PUSH     ESI
    0001F705  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001F70B  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001F711  FF D1             CALL     ECX                       run_inner_proc
    0001F713  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19645

    0001F714  B8 01000000       MOV      EAX,1
    0001F719  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19647

    0001F71C  B8 01000000       MOV      EAX,1
    0001F721  8B C8             MOV      ECX,EAX
    0001F723  B8 0A000000       MOV      EAX,10
    0001F728  50                PUSH     EAX
    0001F729  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001F72C  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F72F  5B                POP      EBX
    0001F730  53                PUSH     EBX
    0001F731  3B C3             CMP      EAX,EBX
    0001F733  0F 8E03000000     JLE      3
    0001F739  EB                JMP      

    LINE     19649

    0001F73A  B8 01000000       MOV      EAX,1
    0001F73F  8B C8             MOV      ECX,EAX
    0001F741  B8 05000000       MOV      EAX,5
    0001F746  50                PUSH     EAX
    0001F747  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001F74A  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F74D  5B                POP      EBX
    0001F74E  53                PUSH     EBX
    0001F74F  3B C3             CMP      EAX,EBX
    0001F751  0F 8E03000000     JLE      3
    0001F757  EB                JMP      

    LINE     19656

    0001F758  B8 01000000       MOV      EAX,1
    0001F75D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19657

    0001F760  B8 01000000       MOV      EAX,1
    0001F765  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19658

    0001F768  B8 01000000       MOV      EAX,1
    0001F76D  8B C8             MOV      ECX,EAX
    0001F76F  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F772  48                DEC      EAX
    0001F773  BB 0E000000       MOV      EBX,14
    0001F778  F7 E3             MUL      EBX
    0001F77A  50                PUSH     EAX
    0001F77B  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F77E  48                DEC      EAX
    0001F77F  BB 02000000       MOV      EBX,2
    0001F784  F7 E3             MUL      EBX
    0001F786  5B                POP      EBX
    0001F787  03 C3             ADD      EAX,EBX
    0001F789  8B F8             MOV      EDI,EAX
    0001F78B  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19659

    0001F78F  B8 01000000       MOV      EAX,1
    0001F794  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19660

    0001F797  B8 01000000       MOV      EAX,1
    0001F79C  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19662

    0001F79F  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001F7A6  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001F7AB  5B                POP      EBX

    LINE     19664

    0001F7AC  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001F7B3  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001F7B8  5B                POP      EBX

    LINE     19666

    0001F7B9  B8 0A000000       MOV      EAX,10
    0001F7BE  40                INC      EAX
    0001F7BF  50                PUSH     EAX
    0001F7C0  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F7C3  5B                POP      EBX
    0001F7C4  3B C3             CMP      EAX,EBX
    0001F7C6  0F 8503000000     JNE      3
    0001F7CC  EB                JMP      

    LINE     19673

    0001F7CD  B8 01000000       MOV      EAX,1
    0001F7D2  8B C8             MOV      ECX,EAX
    0001F7D4  B8 0A000000       MOV      EAX,10
    0001F7D9  50                PUSH     EAX
    0001F7DA  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001F7DD  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F7E0  5B                POP      EBX
    0001F7E1  53                PUSH     EBX
    0001F7E2  3B C3             CMP      EAX,EBX
    0001F7E4  0F 8E03000000     JLE      3
    0001F7EA  EB                JMP      

    LINE     19675

    0001F7EB  B8 01000000       MOV      EAX,1
    0001F7F0  8B C8             MOV      ECX,EAX
    0001F7F2  B8 05000000       MOV      EAX,5
    0001F7F7  50                PUSH     EAX
    0001F7F8  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001F7FB  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F7FE  5B                POP      EBX
    0001F7FF  53                PUSH     EBX
    0001F800  3B C3             CMP      EAX,EBX
    0001F802  0F 8E03000000     JLE      3
    0001F808  EB                JMP      

    LINE     19682

    0001F809  B8 01000000       MOV      EAX,1
    0001F80E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19683

    0001F811  B8 01000000       MOV      EAX,1
    0001F816  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19684

    0001F819  B8 01000000       MOV      EAX,1
    0001F81E  8B C8             MOV      ECX,EAX
    0001F820  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F823  48                DEC      EAX
    0001F824  BB 0E000000       MOV      EBX,14
    0001F829  F7 E3             MUL      EBX
    0001F82B  50                PUSH     EAX
    0001F82C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F82F  48                DEC      EAX
    0001F830  BB 02000000       MOV      EBX,2
    0001F835  F7 E3             MUL      EBX
    0001F837  5B                POP      EBX
    0001F838  03 C3             ADD      EAX,EBX
    0001F83A  8B F8             MOV      EDI,EAX
    0001F83C  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19685

    0001F840  B8 01000000       MOV      EAX,1
    0001F845  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19686

    0001F848  B8 01000000       MOV      EAX,1
    0001F84D  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19688

    0001F850  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001F857  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001F85C  5B                POP      EBX

    LINE     19690

    0001F85D  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001F864  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001F869  5B                POP      EBX

    LINE     19692

    0001F86A  B8 0A000000       MOV      EAX,10
    0001F86F  40                INC      EAX
    0001F870  50                PUSH     EAX
    0001F871  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F874  5B                POP      EBX
    0001F875  3B C3             CMP      EAX,EBX
    0001F877  0F 8503000000     JNE      3
    0001F87D  EB                JMP      

    LINE     19700

    0001F87E  B8 01000000       MOV      EAX,1
    0001F883  8B C8             MOV      ECX,EAX
    0001F885  B8 0A000000       MOV      EAX,10
    0001F88A  50                PUSH     EAX
    0001F88B  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001F88E  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F891  5B                POP      EBX
    0001F892  53                PUSH     EBX
    0001F893  3B C3             CMP      EAX,EBX
    0001F895  0F 8E03000000     JLE      3
    0001F89B  EB                JMP      

    LINE     19702

    0001F89C  B8 01000000       MOV      EAX,1
    0001F8A1  8B C8             MOV      ECX,EAX
    0001F8A3  B8 05000000       MOV      EAX,5
    0001F8A8  50                PUSH     EAX
    0001F8A9  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001F8AC  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F8AF  5B                POP      EBX
    0001F8B0  53                PUSH     EBX
    0001F8B1  3B C3             CMP      EAX,EBX
    0001F8B3  0F 8E03000000     JLE      3
    0001F8B9  EB                JMP      

    LINE     19709

    0001F8BA  B8 01000000       MOV      EAX,1
    0001F8BF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19710

    0001F8C5  B8 01000000       MOV      EAX,1
    0001F8CA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19711

    0001F8D0  B8 01000000       MOV      EAX,1
    0001F8D5  8B C8             MOV      ECX,EAX
    0001F8D7  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F8DA  48                DEC      EAX
    0001F8DB  BB 0E000000       MOV      EBX,14
    0001F8E0  F7 E3             MUL      EBX
    0001F8E2  50                PUSH     EAX
    0001F8E3  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001F8E6  48                DEC      EAX
    0001F8E7  BB 02000000       MOV      EBX,2
    0001F8EC  F7 E3             MUL      EBX
    0001F8EE  5B                POP      EBX
    0001F8EF  03 C3             ADD      EAX,EBX
    0001F8F1  8B F8             MOV      EDI,EAX
    0001F8F3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19712

    0001F8FA  B8 01000000       MOV      EAX,1
    0001F8FF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19713

    0001F905  B8 01000000       MOV      EAX,1
    0001F90A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19715

    0001F910  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001F917  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F91C  5B                POP      EBX

    LINE     19717

    0001F91D  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001F924  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F929  5B                POP      EBX

    LINE     19719

    0001F92A  B8 0A000000       MOV      EAX,10
    0001F92F  40                INC      EAX
    0001F930  50                PUSH     EAX
    0001F931  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F934  5B                POP      EBX
    0001F935  3B C3             CMP      EAX,EBX
    0001F937  0F 8503000000     JNE      3
    0001F93D  EB                JMP      

    LINE     19726

    0001F93E  B8 01000000       MOV      EAX,1
    0001F943  8B C8             MOV      ECX,EAX
    0001F945  B8 0A000000       MOV      EAX,10
    0001F94A  50                PUSH     EAX
    0001F94B  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001F94E  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F951  5B                POP      EBX
    0001F952  53                PUSH     EBX
    0001F953  3B C3             CMP      EAX,EBX
    0001F955  0F 8E03000000     JLE      3
    0001F95B  EB                JMP      

    LINE     19728

    0001F95C  B8 01000000       MOV      EAX,1
    0001F961  8B C8             MOV      ECX,EAX
    0001F963  B8 05000000       MOV      EAX,5
    0001F968  50                PUSH     EAX
    0001F969  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001F96C  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F96F  5B                POP      EBX
    0001F970  53                PUSH     EBX
    0001F971  3B C3             CMP      EAX,EBX
    0001F973  0F 8E03000000     JLE      3
    0001F979  EB                JMP      

    LINE     19735

    0001F97A  B8 01000000       MOV      EAX,1
    0001F97F  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19736

    0001F985  B8 01000000       MOV      EAX,1
    0001F98A  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19737

    0001F990  B8 01000000       MOV      EAX,1
    0001F995  8B C8             MOV      ECX,EAX
    0001F997  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001F99A  48                DEC      EAX
    0001F99B  BB 0E000000       MOV      EBX,14
    0001F9A0  F7 E3             MUL      EBX
    0001F9A2  50                PUSH     EAX
    0001F9A3  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001F9A6  48                DEC      EAX
    0001F9A7  BB 02000000       MOV      EBX,2
    0001F9AC  F7 E3             MUL      EBX
    0001F9AE  5B                POP      EBX
    0001F9AF  03 C3             ADD      EAX,EBX
    0001F9B1  8B F8             MOV      EDI,EAX
    0001F9B3  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19738

    0001F9BA  B8 01000000       MOV      EAX,1
    0001F9BF  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19739

    0001F9C5  B8 01000000       MOV      EAX,1
    0001F9CA  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19741

    0001F9D0  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001F9D7  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001F9DC  5B                POP      EBX

    LINE     19743

    0001F9DD  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001F9E4  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001F9E9  5B                POP      EBX

    LINE     19745

    0001F9EA  B8 0A000000       MOV      EAX,10
    0001F9EF  40                INC      EAX
    0001F9F0  50                PUSH     EAX
    0001F9F1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001F9F4  5B                POP      EBX
    0001F9F5  3B C3             CMP      EAX,EBX
    0001F9F7  0F 8503000000     JNE      3
    0001F9FD  EB                JMP      

    LINE     19759

    0001F9FE  56                PUSH     ESI
    0001F9FF  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001FA05  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001FA0B  FF D1             CALL     ECX                       run_inner_proc
    0001FA0D  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19761

    0001FA0E  B8 01000000       MOV      EAX,1
    0001FA13  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19763

    0001FA16  B8 01000000       MOV      EAX,1
    0001FA1B  8B C8             MOV      ECX,EAX
    0001FA1D  B8 0A000000       MOV      EAX,10
    0001FA22  50                PUSH     EAX
    0001FA23  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001FA26  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FA29  5B                POP      EBX
    0001FA2A  53                PUSH     EBX
    0001FA2B  3B C3             CMP      EAX,EBX
    0001FA2D  0F 8E03000000     JLE      3
    0001FA33  EB                JMP      

    LINE     19765

    0001FA34  B8 01000000       MOV      EAX,1
    0001FA39  8B C8             MOV      ECX,EAX
    0001FA3B  B8 05000000       MOV      EAX,5
    0001FA40  50                PUSH     EAX
    0001FA41  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001FA44  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FA47  5B                POP      EBX
    0001FA48  53                PUSH     EBX
    0001FA49  3B C3             CMP      EAX,EBX
    0001FA4B  0F 8E03000000     JLE      3
    0001FA51  EB                JMP      

    LINE     19772

    0001FA52  B8 01000000       MOV      EAX,1
    0001FA57  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19773

    0001FA5A  B8 01000000       MOV      EAX,1
    0001FA5F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19774

    0001FA62  B8 01000000       MOV      EAX,1
    0001FA67  8B C8             MOV      ECX,EAX
    0001FA69  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FA6C  48                DEC      EAX
    0001FA6D  BB 0E000000       MOV      EBX,14
    0001FA72  F7 E3             MUL      EBX
    0001FA74  50                PUSH     EAX
    0001FA75  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FA78  48                DEC      EAX
    0001FA79  BB 02000000       MOV      EBX,2
    0001FA7E  F7 E3             MUL      EBX
    0001FA80  5B                POP      EBX
    0001FA81  03 C3             ADD      EAX,EBX
    0001FA83  8B F8             MOV      EDI,EAX
    0001FA85  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19775

    0001FA89  B8 01000000       MOV      EAX,1
    0001FA8E  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19776

    0001FA91  B8 01000000       MOV      EAX,1
    0001FA96  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19778

    0001FA99  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001FAA0  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001FAA5  5B                POP      EBX

    LINE     19780

    0001FAA6  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001FAAD  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001FAB2  5B                POP      EBX

    LINE     19782

    0001FAB3  B8 0A000000       MOV      EAX,10
    0001FAB8  40                INC      EAX
    0001FAB9  50                PUSH     EAX
    0001FABA  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FABD  5B                POP      EBX
    0001FABE  3B C3             CMP      EAX,EBX
    0001FAC0  0F 8503000000     JNE      3
    0001FAC6  EB                JMP      

    LINE     19789

    0001FAC7  B8 01000000       MOV      EAX,1
    0001FACC  8B C8             MOV      ECX,EAX
    0001FACE  B8 0A000000       MOV      EAX,10
    0001FAD3  50                PUSH     EAX
    0001FAD4  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001FAD7  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FADA  5B                POP      EBX
    0001FADB  53                PUSH     EBX
    0001FADC  3B C3             CMP      EAX,EBX
    0001FADE  0F 8E03000000     JLE      3
    0001FAE4  EB                JMP      

    LINE     19791

    0001FAE5  B8 01000000       MOV      EAX,1
    0001FAEA  8B C8             MOV      ECX,EAX
    0001FAEC  B8 05000000       MOV      EAX,5
    0001FAF1  50                PUSH     EAX
    0001FAF2  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001FAF5  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FAF8  5B                POP      EBX
    0001FAF9  53                PUSH     EBX
    0001FAFA  3B C3             CMP      EAX,EBX
    0001FAFC  0F 8E03000000     JLE      3
    0001FB02  EB                JMP      

    LINE     19798

    0001FB03  B8 01000000       MOV      EAX,1
    0001FB08  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19799

    0001FB0B  B8 01000000       MOV      EAX,1
    0001FB10  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19800

    0001FB13  B8 01000000       MOV      EAX,1
    0001FB18  8B C8             MOV      ECX,EAX
    0001FB1A  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FB1D  48                DEC      EAX
    0001FB1E  BB 0E000000       MOV      EBX,14
    0001FB23  F7 E3             MUL      EBX
    0001FB25  50                PUSH     EAX
    0001FB26  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FB29  48                DEC      EAX
    0001FB2A  BB 02000000       MOV      EBX,2
    0001FB2F  F7 E3             MUL      EBX
    0001FB31  5B                POP      EBX
    0001FB32  03 C3             ADD      EAX,EBX
    0001FB34  8B F8             MOV      EDI,EAX
    0001FB36  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19801

    0001FB3A  B8 01000000       MOV      EAX,1
    0001FB3F  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19802

    0001FB42  B8 01000000       MOV      EAX,1
    0001FB47  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19804

    0001FB4A  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001FB51  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001FB56  5B                POP      EBX

    LINE     19806

    0001FB57  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001FB5E  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001FB63  5B                POP      EBX

    LINE     19808

    0001FB64  B8 0A000000       MOV      EAX,10
    0001FB69  40                INC      EAX
    0001FB6A  50                PUSH     EAX
    0001FB6B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FB6E  5B                POP      EBX
    0001FB6F  3B C3             CMP      EAX,EBX
    0001FB71  0F 8503000000     JNE      3
    0001FB77  EB                JMP      

    LINE     19816

    0001FB78  B8 01000000       MOV      EAX,1
    0001FB7D  8B C8             MOV      ECX,EAX
    0001FB7F  B8 0A000000       MOV      EAX,10
    0001FB84  50                PUSH     EAX
    0001FB85  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001FB88  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FB8B  5B                POP      EBX
    0001FB8C  53                PUSH     EBX
    0001FB8D  3B C3             CMP      EAX,EBX
    0001FB8F  0F 8E03000000     JLE      3
    0001FB95  EB                JMP      

    LINE     19818

    0001FB96  B8 01000000       MOV      EAX,1
    0001FB9B  8B C8             MOV      ECX,EAX
    0001FB9D  B8 05000000       MOV      EAX,5
    0001FBA2  50                PUSH     EAX
    0001FBA3  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001FBA6  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FBA9  5B                POP      EBX
    0001FBAA  53                PUSH     EBX
    0001FBAB  3B C3             CMP      EAX,EBX
    0001FBAD  0F 8E03000000     JLE      3
    0001FBB3  EB                JMP      

    LINE     19825

    0001FBB4  B8 01000000       MOV      EAX,1
    0001FBB9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19826

    0001FBBF  B8 01000000       MOV      EAX,1
    0001FBC4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19827

    0001FBCA  B8 01000000       MOV      EAX,1
    0001FBCF  8B C8             MOV      ECX,EAX
    0001FBD1  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FBD4  48                DEC      EAX
    0001FBD5  BB 0E000000       MOV      EBX,14
    0001FBDA  F7 E3             MUL      EBX
    0001FBDC  50                PUSH     EAX
    0001FBDD  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FBE0  48                DEC      EAX
    0001FBE1  BB 02000000       MOV      EBX,2
    0001FBE6  F7 E3             MUL      EBX
    0001FBE8  5B                POP      EBX
    0001FBE9  03 C3             ADD      EAX,EBX
    0001FBEB  8B F8             MOV      EDI,EAX
    0001FBED  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19828

    0001FBF4  B8 01000000       MOV      EAX,1
    0001FBF9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19829

    0001FBFF  B8 01000000       MOV      EAX,1
    0001FC04  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19831

    0001FC0A  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001FC11  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001FC16  5B                POP      EBX

    LINE     19833

    0001FC17  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001FC1E  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001FC23  5B                POP      EBX

    LINE     19835

    0001FC24  B8 0A000000       MOV      EAX,10
    0001FC29  40                INC      EAX
    0001FC2A  50                PUSH     EAX
    0001FC2B  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FC2E  5B                POP      EBX
    0001FC2F  3B C3             CMP      EAX,EBX
    0001FC31  0F 8503000000     JNE      3
    0001FC37  EB                JMP      

    LINE     19842

    0001FC38  B8 01000000       MOV      EAX,1
    0001FC3D  8B C8             MOV      ECX,EAX
    0001FC3F  B8 0A000000       MOV      EAX,10
    0001FC44  50                PUSH     EAX
    0001FC45  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001FC48  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FC4B  5B                POP      EBX
    0001FC4C  53                PUSH     EBX
    0001FC4D  3B C3             CMP      EAX,EBX
    0001FC4F  0F 8E03000000     JLE      3
    0001FC55  EB                JMP      

    LINE     19844

    0001FC56  B8 01000000       MOV      EAX,1
    0001FC5B  8B C8             MOV      ECX,EAX
    0001FC5D  B8 05000000       MOV      EAX,5
    0001FC62  50                PUSH     EAX
    0001FC63  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001FC66  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FC69  5B                POP      EBX
    0001FC6A  53                PUSH     EBX
    0001FC6B  3B C3             CMP      EAX,EBX
    0001FC6D  0F 8E03000000     JLE      3
    0001FC73  EB                JMP      

    LINE     19851

    0001FC74  B8 01000000       MOV      EAX,1
    0001FC79  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19852

    0001FC7F  B8 01000000       MOV      EAX,1
    0001FC84  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19853

    0001FC8A  B8 01000000       MOV      EAX,1
    0001FC8F  8B C8             MOV      ECX,EAX
    0001FC91  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FC94  48                DEC      EAX
    0001FC95  BB 0E000000       MOV      EBX,14
    0001FC9A  F7 E3             MUL      EBX
    0001FC9C  50                PUSH     EAX
    0001FC9D  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FCA0  48                DEC      EAX
    0001FCA1  BB 02000000       MOV      EBX,2
    0001FCA6  F7 E3             MUL      EBX
    0001FCA8  5B                POP      EBX
    0001FCA9  03 C3             ADD      EAX,EBX
    0001FCAB  8B F8             MOV      EDI,EAX
    0001FCAD  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19854

    0001FCB4  B8 01000000       MOV      EAX,1
    0001FCB9  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19855

    0001FCBF  B8 01000000       MOV      EAX,1
    0001FCC4  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19857

    0001FCCA  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001FCD1  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001FCD6  5B                POP      EBX

    LINE     19859

    0001FCD7  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001FCDE  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001FCE3  5B                POP      EBX

    LINE     19861

    0001FCE4  B8 0A000000       MOV      EAX,10
    0001FCE9  40                INC      EAX
    0001FCEA  50                PUSH     EAX
    0001FCEB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FCEE  5B                POP      EBX
    0001FCEF  3B C3             CMP      EAX,EBX
    0001FCF1  0F 8503000000     JNE      3
    0001FCF7  EB                JMP      

    LINE     19875

    0001FCF8  56                PUSH     ESI
    0001FCF9  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001FCFF  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001FD05  FF D1             CALL     ECX                       run_inner_proc
    0001FD07  5E                POP      ESI                       /* restore callers static pointer */

    LINE     19877

    0001FD08  B8 01000000       MOV      EAX,1
    0001FD0D  89 45FE           MOV      DWORD_PTR [EBP-2],EAX      one

    LINE     19879

    0001FD10  B8 01000000       MOV      EAX,1
    0001FD15  8B C8             MOV      ECX,EAX
    0001FD17  B8 0A000000       MOV      EAX,10
    0001FD1C  50                PUSH     EAX
    0001FD1D  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001FD20  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FD23  5B                POP      EBX
    0001FD24  53                PUSH     EBX
    0001FD25  3B C3             CMP      EAX,EBX
    0001FD27  0F 8E03000000     JLE      3
    0001FD2D  EB                JMP      

    LINE     19881

    0001FD2E  B8 01000000       MOV      EAX,1
    0001FD33  8B C8             MOV      ECX,EAX
    0001FD35  B8 05000000       MOV      EAX,5
    0001FD3A  50                PUSH     EAX
    0001FD3B  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001FD3E  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FD41  5B                POP      EBX
    0001FD42  53                PUSH     EBX
    0001FD43  3B C3             CMP      EAX,EBX
    0001FD45  0F 8E03000000     JLE      3
    0001FD4B  EB                JMP      

    LINE     19888

    0001FD4C  B8 01000000       MOV      EAX,1
    0001FD51  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19889

    0001FD54  B8 01000000       MOV      EAX,1
    0001FD59  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19890

    0001FD5C  B8 01000000       MOV      EAX,1
    0001FD61  8B C8             MOV      ECX,EAX
    0001FD63  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FD66  48                DEC      EAX
    0001FD67  BB 0E000000       MOV      EBX,14
    0001FD6C  F7 E3             MUL      EBX
    0001FD6E  50                PUSH     EAX
    0001FD6F  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FD72  48                DEC      EAX
    0001FD73  BB 02000000       MOV      EBX,2
    0001FD78  F7 E3             MUL      EBX
    0001FD7A  5B                POP      EBX
    0001FD7B  03 C3             ADD      EAX,EBX
    0001FD7D  8B F8             MOV      EDI,EAX
    0001FD7F  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19891

    0001FD83  B8 01000000       MOV      EAX,1
    0001FD88  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19892

    0001FD8B  B8 01000000       MOV      EAX,1
    0001FD90  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19894

    0001FD93  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001FD9A  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001FD9F  5B                POP      EBX

    LINE     19896

    0001FDA0  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001FDA7  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001FDAC  5B                POP      EBX

    LINE     19898

    0001FDAD  B8 0A000000       MOV      EAX,10
    0001FDB2  40                INC      EAX
    0001FDB3  50                PUSH     EAX
    0001FDB4  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FDB7  5B                POP      EBX
    0001FDB8  3B C3             CMP      EAX,EBX
    0001FDBA  0F 8503000000     JNE      3
    0001FDC0  EB                JMP      

    LINE     19905

    0001FDC1  B8 01000000       MOV      EAX,1
    0001FDC6  8B C8             MOV      ECX,EAX
    0001FDC8  B8 0A000000       MOV      EAX,10
    0001FDCD  50                PUSH     EAX
    0001FDCE  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001FDD1  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FDD4  5B                POP      EBX
    0001FDD5  53                PUSH     EBX
    0001FDD6  3B C3             CMP      EAX,EBX
    0001FDD8  0F 8E03000000     JLE      3
    0001FDDE  EB                JMP      

    LINE     19907

    0001FDDF  B8 01000000       MOV      EAX,1
    0001FDE4  8B C8             MOV      ECX,EAX
    0001FDE6  B8 05000000       MOV      EAX,5
    0001FDEB  50                PUSH     EAX
    0001FDEC  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001FDEF  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FDF2  5B                POP      EBX
    0001FDF3  53                PUSH     EBX
    0001FDF4  3B C3             CMP      EAX,EBX
    0001FDF6  0F 8E03000000     JLE      3
    0001FDFC  EB                JMP      

    LINE     19914

    0001FDFD  B8 01000000       MOV      EAX,1
    0001FE02  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19915

    0001FE05  B8 01000000       MOV      EAX,1
    0001FE0A  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19916

    0001FE0D  B8 01000000       MOV      EAX,1
    0001FE12  8B C8             MOV      ECX,EAX
    0001FE14  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FE17  48                DEC      EAX
    0001FE18  BB 0E000000       MOV      EBX,14
    0001FE1D  F7 E3             MUL      EBX
    0001FE1F  50                PUSH     EAX
    0001FE20  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FE23  48                DEC      EAX
    0001FE24  BB 02000000       MOV      EBX,2
    0001FE29  F7 E3             MUL      EBX
    0001FE2B  5B                POP      EBX
    0001FE2C  03 C3             ADD      EAX,EBX
    0001FE2E  8B F8             MOV      EDI,EAX
    0001FE30  89 4C3E06         MOV      DWORD_PTR [ESI+EDI*1+6],ECX s_element

    LINE     19917

    0001FE34  B8 01000000       MOV      EAX,1
    0001FE39  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19918

    0001FE3C  B8 01000000       MOV      EAX,1
    0001FE41  89 4606           MOV      DWORD_PTR [ESI+6],EAX      s_element

    LINE     19920

    0001FE44  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001FE4B  E9 A3FFFFFF       JMP      -93                      /* End of loop */
    0001FE50  5B                POP      EBX

    LINE     19922

    0001FE51  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001FE58  E9 78FFFFFF       JMP      -136                     /* End of loop */
    0001FE5D  5B                POP      EBX

    LINE     19924

    0001FE5E  B8 0A000000       MOV      EAX,10
    0001FE63  40                INC      EAX
    0001FE64  50                PUSH     EAX
    0001FE65  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FE68  5B                POP      EBX
    0001FE69  3B C3             CMP      EAX,EBX
    0001FE6B  0F 8503000000     JNE      3
    0001FE71  EB                JMP      

    LINE     19932

    0001FE72  B8 01000000       MOV      EAX,1
    0001FE77  8B C8             MOV      ECX,EAX
    0001FE79  B8 0A000000       MOV      EAX,10
    0001FE7E  50                PUSH     EAX
    0001FE7F  89 4E02           MOV      DWORD_PTR [ESI+2],ECX      I
    0001FE82  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FE85  5B                POP      EBX
    0001FE86  53                PUSH     EBX
    0001FE87  3B C3             CMP      EAX,EBX
    0001FE89  0F 8E03000000     JLE      3
    0001FE8F  EB                JMP      

    LINE     19934

    0001FE90  B8 01000000       MOV      EAX,1
    0001FE95  8B C8             MOV      ECX,EAX
    0001FE97  B8 05000000       MOV      EAX,5
    0001FE9C  50                PUSH     EAX
    0001FE9D  89 4E04           MOV      DWORD_PTR [ESI+4],ECX      J
    0001FEA0  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FEA3  5B                POP      EBX
    0001FEA4  53                PUSH     EBX
    0001FEA5  3B C3             CMP      EAX,EBX
    0001FEA7  0F 8E03000000     JLE      3
    0001FEAD  EB                JMP      

    LINE     19941

    0001FEAE  B8 01000000       MOV      EAX,1
    0001FEB3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19942

    0001FEB9  B8 01000000       MOV      EAX,1
    0001FEBE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19943

    0001FEC4  B8 01000000       MOV      EAX,1
    0001FEC9  8B C8             MOV      ECX,EAX
    0001FECB  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FECE  48                DEC      EAX
    0001FECF  BB 0E000000       MOV      EBX,14
    0001FED4  F7 E3             MUL      EBX
    0001FED6  50                PUSH     EAX
    0001FED7  8B 4604           MOV      EAX,DWORD_PTR [ESI+4]      J
    0001FEDA  48                DEC      EAX
    0001FEDB  BB 02000000       MOV      EBX,2
    0001FEE0  F7 E3             MUL      EBX
    0001FEE2  5B                POP      EBX
    0001FEE3  03 C3             ADD      EAX,EBX
    0001FEE5  8B F8             MOV      EDI,EAX
    0001FEE7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19944

    0001FEEE  B8 01000000       MOV      EAX,1
    0001FEF3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19945

    0001FEF9  B8 01000000       MOV      EAX,1
    0001FEFE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19947

    0001FF04  81 460100000004   ADD      DWORD_PTR [ESI+4],1       J
    0001FF0B  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001FF10  5B                POP      EBX

    LINE     19949

    0001FF11  81 460100000002   ADD      DWORD_PTR [ESI+2],1       I
    0001FF18  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001FF1D  5B                POP      EBX

    LINE     19951

    0001FF1E  B8 0A000000       MOV      EAX,10
    0001FF23  40                INC      EAX
    0001FF24  50                PUSH     EAX
    0001FF25  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FF28  5B                POP      EBX
    0001FF29  3B C3             CMP      EAX,EBX
    0001FF2B  0F 8503000000     JNE      3
    0001FF31  EB                JMP      

    LINE     19958

    0001FF32  B8 01000000       MOV      EAX,1
    0001FF37  8B C8             MOV      ECX,EAX
    0001FF39  B8 0A000000       MOV      EAX,10
    0001FF3E  50                PUSH     EAX
    0001FF3F  89 4DFA           MOV      DWORD_PTR [EBP-6],ECX      i
    0001FF42  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FF45  5B                POP      EBX
    0001FF46  53                PUSH     EBX
    0001FF47  3B C3             CMP      EAX,EBX
    0001FF49  0F 8E03000000     JLE      3
    0001FF4F  EB                JMP      

    LINE     19960

    0001FF50  B8 01000000       MOV      EAX,1
    0001FF55  8B C8             MOV      ECX,EAX
    0001FF57  B8 05000000       MOV      EAX,5
    0001FF5C  50                PUSH     EAX
    0001FF5D  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX      j
    0001FF60  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FF63  5B                POP      EBX
    0001FF64  53                PUSH     EBX
    0001FF65  3B C3             CMP      EAX,EBX
    0001FF67  0F 8E03000000     JLE      3
    0001FF6D  EB                JMP      

    LINE     19967

    0001FF6E  B8 01000000       MOV      EAX,1
    0001FF73  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19968

    0001FF79  B8 01000000       MOV      EAX,1
    0001FF7E  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19969

    0001FF84  B8 01000000       MOV      EAX,1
    0001FF89  8B C8             MOV      ECX,EAX
    0001FF8B  8B 45FA           MOV      EAX,DWORD_PTR [EBP-6]      i
    0001FF8E  48                DEC      EAX
    0001FF8F  BB 0E000000       MOV      EBX,14
    0001FF94  F7 E3             MUL      EBX
    0001FF96  50                PUSH     EAX
    0001FF97  8B 45FC           MOV      EAX,DWORD_PTR [EBP-4]      j
    0001FF9A  48                DEC      EAX
    0001FF9B  BB 02000000       MOV      EBX,2
    0001FFA0  F7 E3             MUL      EBX
    0001FFA2  5B                POP      EBX
    0001FFA3  03 C3             ADD      EAX,EBX
    0001FFA5  8B F8             MOV      EDI,EAX
    0001FFA7  89 8C3D6EFFFFFF   MOV      DWORD_PTR [EBP+EDI*1-146],ECX

    LINE     19970

    0001FFAE  B8 01000000       MOV      EAX,1
    0001FFB3  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19971

    0001FFB9  B8 01000000       MOV      EAX,1
    0001FFBE  89 856EFFFFFF     MOV      DWORD_PTR [EBP-146],EAX    a_element

    LINE     19973

    0001FFC4  81 4501000000FC   ADD      DWORD_PTR [EBP-4],1       j
    0001FFCB  E9 94FFFFFF       JMP      -108                     /* End of loop */
    0001FFD0  5B                POP      EBX

    LINE     19975

    0001FFD1  81 4501000000FA   ADD      DWORD_PTR [EBP-6],1       i
    0001FFD8  E9 69FFFFFF       JMP      -151                     /* End of loop */
    0001FFDD  5B                POP      EBX

    LINE     19977

    0001FFDE  B8 0A000000       MOV      EAX,10
    0001FFE3  40                INC      EAX
    0001FFE4  50                PUSH     EAX
    0001FFE5  8B 4602           MOV      EAX,DWORD_PTR [ESI+2]      I
    0001FFE8  5B                POP      EBX
    0001FFE9  3B C3             CMP      EAX,EBX
    0001FFEB  0F 8503000000     JNE      3
    0001FFF1  EB                JMP      

    LINE     19991

    0001FFF2  56                PUSH     ESI
    0001FFF3  8B 8E92000000     MOV      ECX,DWORD_PTR [ESI+146]
    0001FFF9  8B B696000000     MOV      ESI,DWORD_PTR [ESI+150]
    0001FFFF  FF D1             CALL     ECX                       run_inner_proc
    00020001  5E                POP      ESI                       /* restore callers static pointer */

    LINE     20198              /* Epilog Sequence */

    00020002  C9                LEAVE    
    00020003  C3                RET      

    LINE     19999              /* Prolog Sequence */

    00000000  C8 040000         ENTER    40
    00000004  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX

    LINE     20012

    00000007  B8 01000000       MOV      EAX,1
    0000000C  8B C8             MOV      ECX,EAX
    0000000E  B8 0A000000       MOV      EAX,10
    00000013  50                PUSH     EAX
    00000014  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000016  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000019  89 4F02           MOV      DWORD_PTR [EDI+2],ECX      I
    0000001C  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000001E  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000021  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    00000024  5B                POP      EBX
    00000025  53                PUSH     EBX
    00000026  3B C3             CMP      EAX,EBX
    00000028  0F 8E03000000     JLE      3
    0000002E  EB                JMP      

    LINE     20014

    0000002F  B8 01000000       MOV      EAX,1
    00000034  8B C8             MOV      ECX,EAX
    00000036  B8 05000000       MOV      EAX,5
    0000003B  50                PUSH     EAX
    0000003C  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000003E  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000041  89 4F04           MOV      DWORD_PTR [EDI+4],ECX      J
    00000044  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000046  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000049  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    0000004C  5B                POP      EBX
    0000004D  53                PUSH     EBX
    0000004E  3B C3             CMP      EAX,EBX
    00000050  0F 8E03000000     JLE      3
    00000056  EB                JMP      

    LINE     20021

    00000057  B8 01000000       MOV      EAX,1
    0000005C  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000005E  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000061  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20022

    00000064  B8 01000000       MOV      EAX,1
    00000069  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000006B  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000006E  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20023

    00000071  B8 01000000       MOV      EAX,1
    00000076  8B C8             MOV      ECX,EAX
    00000078  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000007A  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000007D  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    00000080  48                DEC      EAX
    00000081  BB 0E000000       MOV      EBX,14
    00000086  F7 E3             MUL      EBX
    00000088  50                PUSH     EAX
    00000089  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000008B  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000008E  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    00000091  48                DEC      EAX
    00000092  BB 02000000       MOV      EBX,2
    00000097  F7 E3             MUL      EBX
    00000099  5B                POP      EBX
    0000009A  03 C3             ADD      EAX,EBX
    0000009C  8B F8             MOV      EDI,EAX
    0000009E  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000A0  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000A3  89 4C3F06         MOV      DWORD_PTR [EDI+EDI*1+6],ECX s_element

    LINE     20024

    000000A7  B8 01000000       MOV      EAX,1
    000000AC  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000AE  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000B1  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20025

    000000B4  B8 01000000       MOV      EAX,1
    000000B9  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000BB  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000BE  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20027

    000000C1  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000C3  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000C6  81 470100000004   ADD      DWORD_PTR [EDI+4],1       J
    000000CD  E9 76FFFFFF       JMP      -138                     /* End of loop */
    000000D2  5B                POP      EBX

    LINE     20029

    000000D3  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000D5  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000D8  81 470100000002   ADD      DWORD_PTR [EDI+2],1       I
    000000DF  E9 3CFFFFFF       JMP      -196                     /* End of loop */
    000000E4  5B                POP      EBX

    LINE     20031

    000000E5  B8 01000000       MOV      EAX,1
    000000EA  8B C8             MOV      ECX,EAX
    000000EC  B8 0A000000       MOV      EAX,10
    000000F1  50                PUSH     EAX
    000000F2  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000F4  36:89 4BFA        MOV      DWORD_PTR SS: [EBX-6],ECX  i
    000000F8  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000FA  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    000000FE  5B                POP      EBX
    000000FF  53                PUSH     EBX
    00000100  3B C3             CMP      EAX,EBX
    00000102  0F 8E03000000     JLE      3
    00000108  EB                JMP      

    LINE     20033

    00000109  B8 01000000       MOV      EAX,1
    0000010E  8B C8             MOV      ECX,EAX
    00000110  B8 05000000       MOV      EAX,5
    00000115  50                PUSH     EAX
    00000116  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000118  36:89 4BFC        MOV      DWORD_PTR SS: [EBX-4],ECX  j
    0000011C  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000011E  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    00000122  5B                POP      EBX
    00000123  53                PUSH     EBX
    00000124  3B C3             CMP      EAX,EBX
    00000126  0F 8E03000000     JLE      3
    0000012C  EB                JMP      

    LINE     20040

    0000012D  B8 01000000       MOV      EAX,1
    00000132  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000134  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000137  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20041

    0000013A  B8 01000000       MOV      EAX,1
    0000013F  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000141  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000144  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20042

    00000147  B8 01000000       MOV      EAX,1
    0000014C  8B C8             MOV      ECX,EAX
    0000014E  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000150  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    00000154  48                DEC      EAX
    00000155  BB 0E000000       MOV      EBX,14
    0000015A  F7 E3             MUL      EBX
    0000015C  50                PUSH     EAX
    0000015D  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000015F  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    00000163  48                DEC      EAX
    00000164  BB 02000000       MOV      EBX,2
    00000169  F7 E3             MUL      EBX
    0000016B  5B                POP      EBX
    0000016C  03 C3             ADD      EAX,EBX
    0000016E  8B F8             MOV      EDI,EAX
    00000170  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000172  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000175  89 4C3F06         MOV      DWORD_PTR [EDI+EDI*1+6],ECX s_element

    LINE     20043

    00000179  B8 01000000       MOV      EAX,1
    0000017E  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000180  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000183  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20044

    00000186  B8 01000000       MOV      EAX,1
    0000018B  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000018D  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000190  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20046

    00000193  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000195  36:81 4301000000FC  ADD      DWORD_PTR SS: [EBX-4],1   j
    0000019D  E9 7EFFFFFF       JMP      -130                     /* End of loop */
    000001A2  5B                POP      EBX

    LINE     20048

    000001A3  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001A5  36:81 4301000000FA  ADD      DWORD_PTR SS: [EBX-6],1   i
    000001AD  E9 4AFFFFFF       JMP      -182                     /* End of loop */
    000001B2  5B                POP      EBX

    LINE     20051

    000001B3  B8 01000000       MOV      EAX,1
    000001B8  8B C8             MOV      ECX,EAX
    000001BA  B8 0A000000       MOV      EAX,10
    000001BF  50                PUSH     EAX
    000001C0  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001C2  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000001C5  89 4F02           MOV      DWORD_PTR [EDI+2],ECX      I
    000001C8  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001CA  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000001CD  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    000001D0  5B                POP      EBX
    000001D1  53                PUSH     EBX
    000001D2  3B C3             CMP      EAX,EBX
    000001D4  0F 8E03000000     JLE      3
    000001DA  EB                JMP      

    LINE     20053

    000001DB  B8 01000000       MOV      EAX,1
    000001E0  8B C8             MOV      ECX,EAX
    000001E2  B8 05000000       MOV      EAX,5
    000001E7  50                PUSH     EAX
    000001E8  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001EA  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000001ED  89 4F04           MOV      DWORD_PTR [EDI+4],ECX      J
    000001F0  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001F2  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000001F5  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    000001F8  5B                POP      EBX
    000001F9  53                PUSH     EBX
    000001FA  3B C3             CMP      EAX,EBX
    000001FC  0F 8E03000000     JLE      3
    00000202  EB                JMP      

    LINE     20060

    00000203  B8 01000000       MOV      EAX,1
    00000208  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000020A  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20061

    00000211  B8 01000000       MOV      EAX,1
    00000216  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000218  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20062

    0000021F  B8 01000000       MOV      EAX,1
    00000224  8B C8             MOV      ECX,EAX
    00000226  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000228  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000022B  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    0000022E  48                DEC      EAX
    0000022F  BB 0E000000       MOV      EBX,14
    00000234  F7 E3             MUL      EBX
    00000236  50                PUSH     EAX
    00000237  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000239  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000023C  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    0000023F  48                DEC      EAX
    00000240  BB 02000000       MOV      EBX,2
    00000245  F7 E3             MUL      EBX
    00000247  5B                POP      EBX
    00000248  03 C3             ADD      EAX,EBX
    0000024A  8B F8             MOV      EDI,EAX
    0000024C  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000024E  36:89 8C3B6EFFFFFF  MOV      DWORD_PTR SS: [EBX+EDI*1-146],ECX

    LINE     20063

    00000256  B8 01000000       MOV      EAX,1
    0000025B  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000025D  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20064

    00000264  B8 01000000       MOV      EAX,1
    00000269  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000026B  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20066

    00000272  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000274  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000277  81 470100000004   ADD      DWORD_PTR [EDI+4],1       J
    0000027E  E9 71FFFFFF       JMP      -143                     /* End of loop */
    00000283  5B                POP      EBX

    LINE     20068

    00000284  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000286  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000289  81 470100000002   ADD      DWORD_PTR [EDI+2],1       I
    00000290  E9 37FFFFFF       JMP      -201                     /* End of loop */
    00000295  5B                POP      EBX

    LINE     20070

    00000296  B8 01000000       MOV      EAX,1
    0000029B  8B C8             MOV      ECX,EAX
    0000029D  B8 0A000000       MOV      EAX,10
    000002A2  50                PUSH     EAX
    000002A3  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002A5  36:89 4BFA        MOV      DWORD_PTR SS: [EBX-6],ECX  i
    000002A9  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002AB  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    000002AF  5B                POP      EBX
    000002B0  53                PUSH     EBX
    000002B1  3B C3             CMP      EAX,EBX
    000002B3  0F 8E03000000     JLE      3
    000002B9  EB                JMP      

    LINE     20072

    000002BA  B8 01000000       MOV      EAX,1
    000002BF  8B C8             MOV      ECX,EAX
    000002C1  B8 05000000       MOV      EAX,5
    000002C6  50                PUSH     EAX
    000002C7  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002C9  36:89 4BFC        MOV      DWORD_PTR SS: [EBX-4],ECX  j
    000002CD  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002CF  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    000002D3  5B                POP      EBX
    000002D4  53                PUSH     EBX
    000002D5  3B C3             CMP      EAX,EBX
    000002D7  0F 8E03000000     JLE      3
    000002DD  EB                JMP      

    LINE     20079

    000002DE  B8 01000000       MOV      EAX,1
    000002E3  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002E5  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20080

    000002EC  B8 01000000       MOV      EAX,1
    000002F1  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002F3  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20081

    000002FA  B8 01000000       MOV      EAX,1
    000002FF  8B C8             MOV      ECX,EAX
    00000301  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000303  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    00000307  48                DEC      EAX
    00000308  BB 0E000000       MOV      EBX,14
    0000030D  F7 E3             MUL      EBX
    0000030F  50                PUSH     EAX
    00000310  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000312  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    00000316  48                DEC      EAX
    00000317  BB 02000000       MOV      EBX,2
    0000031C  F7 E3             MUL      EBX
    0000031E  5B                POP      EBX
    0000031F  03 C3             ADD      EAX,EBX
    00000321  8B F8             MOV      EDI,EAX
    00000323  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000325  36:89 8C3B6EFFFFFF  MOV      DWORD_PTR SS: [EBX+EDI*1-146],ECX

    LINE     20082

    0000032D  B8 01000000       MOV      EAX,1
    00000332  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000334  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20083

    0000033B  B8 01000000       MOV      EAX,1
    00000340  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000342  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20085

    00000349  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000034B  36:81 4301000000FC  ADD      DWORD_PTR SS: [EBX-4],1   j
    00000353  E9 79FFFFFF       JMP      -135                     /* End of loop */
    00000358  5B                POP      EBX

    LINE     20087

    00000359  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000035B  36:81 4301000000FA  ADD      DWORD_PTR SS: [EBX-6],1   i
    00000363  E9 45FFFFFF       JMP      -187                     /* End of loop */
    00000368  5B                POP      EBX

    LINE     20092

    00000369  56                PUSH     ESI
    0000036A  8B 4E02           MOV      ECX,DWORD_PTR [ESI+2]
    0000036D  8B 7606           MOV      ESI,DWORD_PTR [ESI+6]
    00000370  FF D1             CALL     ECX                       run_very_inner_proc
    00000372  5E                POP      ESI                       /* restore callers static pointer */

    LINE     20196              /* Epilog Sequence */

    00000373  C9                LEAVE    
    00000374  C3                RET      

    LINE     20101              /* Prolog Sequence */

    00000000  C8 040000         ENTER    40
    00000004  89 4DFC           MOV      DWORD_PTR [EBP-4],ECX

    LINE     20114

    00000007  B8 01000000       MOV      EAX,1
    0000000C  8B C8             MOV      ECX,EAX
    0000000E  B8 0A000000       MOV      EAX,10
    00000013  50                PUSH     EAX
    00000014  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000016  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000018  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000001B  89 4F02           MOV      DWORD_PTR [EDI+2],ECX      I
    0000001E  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000020  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000022  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000025  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    00000028  5B                POP      EBX
    00000029  53                PUSH     EBX
    0000002A  3B C3             CMP      EAX,EBX
    0000002C  0F 8E03000000     JLE      3
    00000032  EB                JMP      

    LINE     20116

    00000033  B8 01000000       MOV      EAX,1
    00000038  8B C8             MOV      ECX,EAX
    0000003A  B8 05000000       MOV      EAX,5
    0000003F  50                PUSH     EAX
    00000040  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000042  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000044  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000047  89 4F04           MOV      DWORD_PTR [EDI+4],ECX      J
    0000004A  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000004C  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    0000004E  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000051  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    00000054  5B                POP      EBX
    00000055  53                PUSH     EBX
    00000056  3B C3             CMP      EAX,EBX
    00000058  0F 8E03000000     JLE      3
    0000005E  EB                JMP      

    LINE     20123

    0000005F  B8 01000000       MOV      EAX,1
    00000064  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000066  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000068  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000006B  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20124

    0000006E  B8 01000000       MOV      EAX,1
    00000073  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000075  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000077  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000007A  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20125

    0000007D  B8 01000000       MOV      EAX,1
    00000082  8B C8             MOV      ECX,EAX
    00000084  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000086  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000088  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000008B  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    0000008E  48                DEC      EAX
    0000008F  BB 0E000000       MOV      EBX,14
    00000094  F7 E3             MUL      EBX
    00000096  50                PUSH     EAX
    00000097  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000099  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    0000009B  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000009E  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    000000A1  48                DEC      EAX
    000000A2  BB 02000000       MOV      EBX,2
    000000A7  F7 E3             MUL      EBX
    000000A9  5B                POP      EBX
    000000AA  03 C3             ADD      EAX,EBX
    000000AC  8B F8             MOV      EDI,EAX
    000000AE  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000B0  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000000B2  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000B5  89 4C3F06         MOV      DWORD_PTR [EDI+EDI*1+6],ECX s_element

    LINE     20126

    000000B9  B8 01000000       MOV      EAX,1
    000000BE  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000C0  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000000C2  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000C5  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20127

    000000C8  B8 01000000       MOV      EAX,1
    000000CD  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000CF  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000000D1  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000D4  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20129

    000000D7  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000D9  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000000DB  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000DE  81 470100000004   ADD      DWORD_PTR [EDI+4],1       J
    000000E5  E9 64FFFFFF       JMP      -156                     /* End of loop */
    000000EA  5B                POP      EBX

    LINE     20131

    000000EB  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000000ED  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000000EF  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000000F2  81 470100000002   ADD      DWORD_PTR [EDI+2],1       I
    000000F9  E9 24FFFFFF       JMP      -220                     /* End of loop */
    000000FE  5B                POP      EBX

    LINE     20133

    000000FF  B8 01000000       MOV      EAX,1
    00000104  8B C8             MOV      ECX,EAX
    00000106  B8 0A000000       MOV      EAX,10
    0000010B  50                PUSH     EAX
    0000010C  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000010E  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000111  36:89 4BFA        MOV      DWORD_PTR SS: [EBX-6],ECX  i
    00000115  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000117  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000011A  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    0000011E  5B                POP      EBX
    0000011F  53                PUSH     EBX
    00000120  3B C3             CMP      EAX,EBX
    00000122  0F 8E03000000     JLE      3
    00000128  EB                JMP      

    LINE     20135

    00000129  B8 01000000       MOV      EAX,1
    0000012E  8B C8             MOV      ECX,EAX
    00000130  B8 05000000       MOV      EAX,5
    00000135  50                PUSH     EAX
    00000136  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000138  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000013B  36:89 4BFC        MOV      DWORD_PTR SS: [EBX-4],ECX  j
    0000013F  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000141  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000144  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    00000148  5B                POP      EBX
    00000149  53                PUSH     EBX
    0000014A  3B C3             CMP      EAX,EBX
    0000014C  0F 8E03000000     JLE      3
    00000152  EB                JMP      

    LINE     20142

    00000153  B8 01000000       MOV      EAX,1
    00000158  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000015A  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    0000015C  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000015F  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20143

    00000162  B8 01000000       MOV      EAX,1
    00000167  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000169  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    0000016B  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000016E  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20144

    00000171  B8 01000000       MOV      EAX,1
    00000176  8B C8             MOV      ECX,EAX
    00000178  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000017A  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000017D  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    00000181  48                DEC      EAX
    00000182  BB 0E000000       MOV      EBX,14
    00000187  F7 E3             MUL      EBX
    00000189  50                PUSH     EAX
    0000018A  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000018C  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000018F  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    00000193  48                DEC      EAX
    00000194  BB 02000000       MOV      EBX,2
    00000199  F7 E3             MUL      EBX
    0000019B  5B                POP      EBX
    0000019C  03 C3             ADD      EAX,EBX
    0000019E  8B F8             MOV      EDI,EAX
    000001A0  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001A2  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000001A4  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000001A7  89 4C3F06         MOV      DWORD_PTR [EDI+EDI*1+6],ECX s_element

    LINE     20145

    000001AB  B8 01000000       MOV      EAX,1
    000001B0  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001B2  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000001B4  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000001B7  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20146

    000001BA  B8 01000000       MOV      EAX,1
    000001BF  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001C1  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000001C3  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000001C6  89 4706           MOV      DWORD_PTR [EDI+6],EAX      s_element

    LINE     20148

    000001C9  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001CB  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000001CE  36:81 4301000000FC  ADD      DWORD_PTR SS: [EBX-4],1   j
    000001D6  E9 68FFFFFF       JMP      -152                     /* End of loop */
    000001DB  5B                POP      EBX

    LINE     20150

    000001DC  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001DE  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000001E1  36:81 4301000000FA  ADD      DWORD_PTR SS: [EBX-6],1   i
    000001E9  E9 2BFFFFFF       JMP      -213                     /* End of loop */
    000001EE  5B                POP      EBX

    LINE     20153

    000001EF  B8 01000000       MOV      EAX,1
    000001F4  8B C8             MOV      ECX,EAX
    000001F6  B8 0A000000       MOV      EAX,10
    000001FB  50                PUSH     EAX
    000001FC  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000001FE  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000200  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000203  89 4F02           MOV      DWORD_PTR [EDI+2],ECX      I
    00000206  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000208  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    0000020A  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000020D  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    00000210  5B                POP      EBX
    00000211  53                PUSH     EBX
    00000212  3B C3             CMP      EAX,EBX
    00000214  0F 8E03000000     JLE      3
    0000021A  EB                JMP      

    LINE     20155

    0000021B  B8 01000000       MOV      EAX,1
    00000220  8B C8             MOV      ECX,EAX
    00000222  B8 05000000       MOV      EAX,5
    00000227  50                PUSH     EAX
    00000228  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000022A  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    0000022C  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000022F  89 4F04           MOV      DWORD_PTR [EDI+4],ECX      J
    00000232  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000234  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000236  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000239  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    0000023C  5B                POP      EBX
    0000023D  53                PUSH     EBX
    0000023E  3B C3             CMP      EAX,EBX
    00000240  0F 8E03000000     JLE      3
    00000246  EB                JMP      

    LINE     20162

    00000247  B8 01000000       MOV      EAX,1
    0000024C  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000024E  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000251  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20163

    00000258  B8 01000000       MOV      EAX,1
    0000025D  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000025F  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000262  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20164

    00000269  B8 01000000       MOV      EAX,1
    0000026E  8B C8             MOV      ECX,EAX
    00000270  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000272  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000274  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    00000277  8B 4702           MOV      EAX,DWORD_PTR [EDI+2]      I
    0000027A  48                DEC      EAX
    0000027B  BB 0E000000       MOV      EBX,14
    00000280  F7 E3             MUL      EBX
    00000282  50                PUSH     EAX
    00000283  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000285  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    00000287  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    0000028A  8B 4704           MOV      EAX,DWORD_PTR [EDI+4]      J
    0000028D  48                DEC      EAX
    0000028E  BB 02000000       MOV      EBX,2
    00000293  F7 E3             MUL      EBX
    00000295  5B                POP      EBX
    00000296  03 C3             ADD      EAX,EBX
    00000298  8B F8             MOV      EDI,EAX
    0000029A  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000029C  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000029F  36:89 8C3B6EFFFFFF  MOV      DWORD_PTR SS: [EBX+EDI*1-146],ECX

    LINE     20165

    000002A7  B8 01000000       MOV      EAX,1
    000002AC  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002AE  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000002B1  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20166

    000002B8  B8 01000000       MOV      EAX,1
    000002BD  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002BF  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000002C2  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20168

    000002C9  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002CB  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000002CD  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000002D0  81 470100000004   ADD      DWORD_PTR [EDI+4],1       J
    000002D7  E9 5AFFFFFF       JMP      -166                     /* End of loop */
    000002DC  5B                POP      EBX

    LINE     20170

    000002DD  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000002DF  8B 1B             MOV      EBX,DWORD_PTR [EBX]
    000002E1  8B 7B08           MOV      EDI,DWORD_PTR [EBX+8]
    000002E4  81 470100000002   ADD      DWORD_PTR [EDI+2],1       I
    000002EB  E9 1AFFFFFF       JMP      -230                     /* End of loop */
    000002F0  5B                POP      EBX

    LINE     20172

    000002F1  B8 01000000       MOV      EAX,1
    000002F6  8B C8             MOV      ECX,EAX
    000002F8  B8 0A000000       MOV      EAX,10
    000002FD  50                PUSH     EAX
    000002FE  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000300  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000303  36:89 4BFA        MOV      DWORD_PTR SS: [EBX-6],ECX  i
    00000307  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000309  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000030C  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    00000310  5B                POP      EBX
    00000311  53                PUSH     EBX
    00000312  3B C3             CMP      EAX,EBX
    00000314  0F 8E03000000     JLE      3
    0000031A  EB                JMP      

    LINE     20174

    0000031B  B8 01000000       MOV      EAX,1
    00000320  8B C8             MOV      ECX,EAX
    00000322  B8 05000000       MOV      EAX,5
    00000327  50                PUSH     EAX
    00000328  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000032A  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000032D  36:89 4BFC        MOV      DWORD_PTR SS: [EBX-4],ECX  j
    00000331  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000333  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000336  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    0000033A  5B                POP      EBX
    0000033B  53                PUSH     EBX
    0000033C  3B C3             CMP      EAX,EBX
    0000033E  0F 8E03000000     JLE      3
    00000344  EB                JMP      

    LINE     20181

    00000345  B8 01000000       MOV      EAX,1
    0000034A  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000034C  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000034F  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20182

    00000356  B8 01000000       MOV      EAX,1
    0000035B  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    0000035D  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000360  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20183

    00000367  B8 01000000       MOV      EAX,1
    0000036C  8B C8             MOV      ECX,EAX
    0000036E  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000370  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000373  36:8B 43FA        MOV      EAX,DWORD_PTR SS: [EBX-6]  i
    00000377  48                DEC      EAX
    00000378  BB 0E000000       MOV      EBX,14
    0000037D  F7 E3             MUL      EBX
    0000037F  50                PUSH     EAX
    00000380  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000382  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    00000385  36:8B 43FC        MOV      EAX,DWORD_PTR SS: [EBX-4]  j
    00000389  48                DEC      EAX
    0000038A  BB 02000000       MOV      EBX,2
    0000038F  F7 E3             MUL      EBX
    00000391  5B                POP      EBX
    00000392  03 C3             ADD      EAX,EBX
    00000394  8B F8             MOV      EDI,EAX
    00000396  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    00000398  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    0000039B  36:89 8C3B6EFFFFFF  MOV      DWORD_PTR SS: [EBX+EDI*1-146],ECX

    LINE     20184

    000003A3  B8 01000000       MOV      EAX,1
    000003A8  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000003AA  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000003AD  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20185

    000003B4  B8 01000000       MOV      EAX,1
    000003B9  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000003BB  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000003BE  36:89 836EFFFFFF  MOV      DWORD_PTR SS: [EBX-146],EAX

    LINE     20187

    000003C5  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000003C7  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000003CA  36:81 4301000000FC  ADD      DWORD_PTR SS: [EBX-4],1   j
    000003D2  E9 5EFFFFFF       JMP      -162                     /* End of loop */
    000003D7  5B                POP      EBX

    LINE     20189

    000003D8  8B 1D             MOV      EBX,DWORD_PTR [EBP]
    000003DA  36:8B 1B          MOV      EBX,DWORD_PTR SS: [EBX]
    000003DD  36:81 4301000000FA  ADD      DWORD_PTR SS: [EBX-6],1   i
    000003E5  E9 21FFFFFF       JMP      -223                     /* End of loop */
    000003EA  5B                POP      EBX

    LINE     20193              /* Epilog Sequence */

    000003EB  C9                LEAVE    
    000003EC  C3                RET      


COPYRIGHT Hugh Moran 2006
COMPILATION STATISTICS FOR PL/I Release 4.0.0.a MASSIVE.PL1

PHASE          MSECS      ERRORS    WARNINGS        DISK
initialize         0           0           0           0
syntax           203           0           0        1187
declare            0           0           0           0
semantic          16           0           0           0
allocator          0           0           0           0
translate        344           0           0           0
totals           563           0           0        1187

SOURCE STMTS 9553
SYMBOL TABLE 59184
CODE SIZE    132966
STATIC SIZE  690
LINES/SECOND 35875
STMTS/SECOND 16968
